{
  "active": true,
  "connections": {
    "Microsoft SQL2": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML1": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Risk HTML Block": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wellness HTML Block": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time1": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time2": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Risk HTML Block",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres2": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "HTML1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Merge10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL": {
      "main": [
        [
          {
            "node": "Code14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge10": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Patient Profile": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Respond to Webhook10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Respond to Webhook11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking \"Test workflow\"": {
      "main": [
        [
          {
            "node": "Microsoft SQL5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook5": {
      "main": [
        [
          {
            "node": "Respond to Webhook13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Microsoft SQL2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Patient Profile1": {
      "main": [
        [
          {
            "node": "Microsoft SQL2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook3": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WellnessAllPatients": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          },
          {
            "node": "Date & Time1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Date & Time2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "WellnessAllPatients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Respond to Webhook5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres5": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook4": {
      "main": [
        [
          {
            "node": "Postgres5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "Respond to Webhook20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook6": {
      "main": [
        [
          {
            "node": "Microsoft SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Single page view": {
      "main": [
        [
          {
            "node": "Respond to Webhook10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Respond to Webhook22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SUGGESTION": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code13": {
      "main": [
        [
          {
            "node": "Respond to Webhook8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scheduling Link": {
      "main": [
        [
          {
            "node": "Code13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scheduling Link1": {
      "main": [
        [
          {
            "node": "Respond to Webhook9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code14": {
      "main": [
        [
          {
            "node": "Respond to Webhook21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook7": {
      "main": [
        [
          {
            "node": "Respond to Webhook23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook8": {
      "main": [
        [
          {
            "node": "Respond to Webhook24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardian": {
      "main": [
        [
          {
            "node": "Respond to Webhook14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code22": {
      "main": [
        [
          {
            "node": "Respond to Webhook21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code26": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-09-17T17:16:22.622Z",
  "id": "Wst0gDmSHwUQx5Oc",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "PHP Patient Health Profile New",
  "nodes": [
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.wellness }}{{ $json.patientApp }}{{ $json.pastappts }}",
        "options": {}
      },
      "id": "74fdd7f9-9da5-418d-945d-5fb6715038e6",
      "name": "Respond to Webhook2",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        5380,
        1220
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @SSO VARCHAR(100) = '{{ $json.query.SSOToken }}';\n \nSELECT [SingleSignOnToken]\n      ,[SessionToken]\n      ,[UserName]\n      ,[CreatedOn]\n      ,[EncounterID]\n      ,[PatientID]\n\t  ,d.DEM_EXTERNALID as MRN\n\t  ,d.DEM_FIRSTNAME\n\t  ,d.DEM_LASTNAME\n\t  ,d.DEM_DATEOFBIRTH\n  FROM [EMR].[HPSITE].[UAI_SingleSignOnTokens] s\n  LEFT JOIN [HPSITE].[DEMOGRAPHICS_VIEW] d on s.PatientID=d.IMREDEM_CODE\n \n  WHERE S.SingleSignOnToken = @SSO\n  order by s.CreatedOn desc"
      },
      "id": "d551acc7-6e38-4204-b1f6-83458c040b27",
      "name": "Microsoft SQL2",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        -800,
        700
      ],
      "credentials": {
        "microsoftSql": {
          "id": "qYagSGVTKE5tZdos",
          "name": "Microsoft SQL EHR"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "id": "321c6cf2-a9fb-473a-92bd-64231fe7eb5a",
      "name": "Respond to Webhook3",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1960,
        -380
      ]
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n\n<html>\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>My HTML document</title>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Have an EPIC day!</h1>\n    <h2>The patient selected has not been found in the system.</h2>\n    <p>A message has been sent to the team, please try the dropdown again.</p>\n  </div>\n</body>\n</html>\n\n<style>\n.container {\n  background-color: #ffffff;\n  text-align: center;\n  padding: 16px;\n  border-radius: 8px;\n}\n\nh1 {\n  color: #ff6d5a;\n  font-size: 24px;\n  font-weight: bold;\n  padding: 8px;\n}\n\nh2 {\n  color: #909399;\n  font-size: 18px;\n  font-weight: bold;\n  padding: 8px;\n}\n</style>\n\n<script>\nconsole.log(\"Hello World!\");\n</script>"
      },
      "id": "eb3a0314-0139-4aa9-a788-b902b1ae4041",
      "name": "HTML1",
      "type": "n8n-nodes-base.html",
      "typeVersion": 1,
      "position": [
        1740,
        -380
      ]
    },
    {
      "parameters": {},
      "id": "5ef9c441-eec0-437a-bdd5-cc19225f397c",
      "name": "When clicking \"Test workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        520,
        400
      ]
    },
    {
      "parameters": {
        "content": "## Reference",
        "height": 244.52071828865766,
        "width": 467.3315871212171
      },
      "id": "735be229-9221-4125-9015-81d5bf991320",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        540,
        -320
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b5aa8629-ccd4-490e-a27d-97eae44e647c",
      "name": "Login URL",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        560,
        -240
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6370409e-87dd-45c1-82d5-ccbe7a365f10",
              "name": "MRN",
              "value": 197520,
              "type": "string"
            },
            {
              "id": "3c1b071e-67c7-4f88-9801-415988d1ea89",
              "name": "",
              "value": "={{ $('Microsoft SQL2').item.json[\"MRN\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4851eb80-f679-400d-aa3b-cbb0e43119cf",
      "name": "MRN",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        760,
        -240
      ]
    },
    {
      "parameters": {
        "content": "## No Profile Found",
        "height": 276.5803010878038,
        "width": 432.3574967948764,
        "color": 3
      },
      "id": "46e54563-ea9d-4dc8-b202-06b18a0412db",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1700,
        -480
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1e169c97-e0b6-4e3d-99f1-67749938f806",
              "name": "risk",
              "value": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Risk Table</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid black;\n            padding: 8px;\n            text-align: left;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n    <table id=\"riskTable\">\n        <thead>\n            <tr>\n                <th>Elixhauser Risk Category</th>\n                <th>Critical Alert Risk</th>\n                <th>Showrate Risk Category</th>\n                <th>Age-Based Risk</th>\n                <th>Overall Vitals Risk Category</th>\n                <th>Total Risk Classification</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>{{ $json[\"Elixhauser_risk_category\"] }}</td>\n                <td>{{ $json[\"CriticalAlertRisk\"] }}</td>\n                <td>{{ $json[\"Showrate_Risk_Category\"] }}</td>\n                <td>{{ $json[\"age_based_risk\"] }}</td>\n                <td>{{ $json[\"Overall_Vitals_Risk_Category\"] }}</td>\n                <td>{{ $json[\"Total_Risk_Classification\"] }}</td>\n            </tr>\n            <!-- Add more rows as needed -->\n        </tbody>\n    </table>\n</body>\n</html>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9b689a52-03f5-4d98-9dd3-9c9fa74c6fd1",
      "name": "Risk HTML Block",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        3520,
        180
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1e169c97-e0b6-4e3d-99f1-67749938f806",
              "name": "wellness",
              "value": "=<div class=\"container mx-auto\">\n    <h2 class=\"text-4xl font-extrabold text-center mb-8 text-indigo-800 tracking-wide\">Insurance Details</h2>\n    <div class=\"overflow-x-auto rounded-2xl shadow-lg border border-gray-300 bg-white\">\n        <table id=\"insuranceDetailsTable\" class=\"min-w-full table-auto bg-white\">\n            <thead class=\"bg-gradient-to-r from-gray-200 via-gray-300 to-gray-400 text-gray-800\">\n                <tr>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Primary Insurance</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Secondary Insurance</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last CWE CPT</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last CWE Billing Carrier Name</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV Done</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV CPT</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV Billing Carrier Name</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">CWE Due</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">AWV Due</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Comments</th>\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Current Date</th>\n                </tr>\n            </thead>\n            <tbody class=\"divide-y divide-gray-200\">\n                <tr class=\"hover:bg-blue-50 transition duration-300\">\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $json[\"prim_insurance\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $json[\"sec_insurance\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $('Merge5').item.json[\"cweDate\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $json[\"lastcwebillingcarriername\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $('Merge5').item.json[\"awvDate\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $json[\"lastawvcpt\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $json[\"lastawvbillingcarriername\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $json[\"CWE Due\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $json[\"AWV Due\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $json[\"Comments\"] }}</td>\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">{{ $('Merge5').item.json[\"currentDate\"] }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n<script>\n    const data = [\n        {\n            \"prim_insurance\": \"{{ $json['prim_insurance'] }}\",\n            \"sec_insurance\": \"{{ $json['sec_insurance'] }}\",\n            \"lastcwecpt\": \"{{ $json['lastcwecpt'] }}\",\n            \"lastcwebillingcarriername\": \"{{ $json['lastcwebillingcarriername'] }}\",\n            \"lastawvdone\": \"{{ $json['lastawvdone'] }}\",\n            \"lastawvcpt\": \"{{ $json['lastawvcpt'] }}\",\n            \"lastawvbillingcarriername\": \"{{ $json['lastawvbillingcarriername'] }}\",\n            \"CWE Due\": \"{{ $json['CWE Due'] }}\",\n            \"AWV Due\": \"{{ $json['AWV Due'] }}\",\n            \"Comments\": \"{{ $json['Comments'] }}\",\n            \"currentdate\": \"{{ $('Merge5').item.json['currentDate'] }}\"\n        }\n    ];\n\n    function populateTable(data) {\n        const tableBody = document.getElementById('insuranceDetailsTable').getElementsByTagName('tbody')[0];\n        data.forEach(item => {\n            let html = '<tr class=\"hover:bg-blue-50 transition duration-300\">';\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.prim_insurance || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.sec_insurance || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastcwecpt || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastcwebillingcarriername || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastawvdone || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastawvcpt || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastawvbillingcarriername || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item[\"CWE Due\"] || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item[\"AWV Due\"] || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.Comments || 'N/A'}</td>`;\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.currentdate || 'N/A'}</td>`;\n            html += '</tr>';\n            tableBody.innerHTML += html;\n        });\n    }\n\n    populateTable(data);\n</script>\n\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "5b8b5a38-f7fa-4e2a-9b2d-eb6bee5b1697",
      "name": "Wellness HTML Block",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        3520,
        600
      ]
    },
    {
      "parameters": {},
      "id": "ccc3cc4c-48c5-4cc5-9af5-f45e5538d392",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        3860,
        320
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.lastcwedone }}",
        "outputFieldName": "cweDate",
        "options": {}
      },
      "id": "3ce0e8e8-ca67-4ebf-90a2-201ef3badb03",
      "name": "Date & Time",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        2180,
        700
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.lastawvdone }}",
        "outputFieldName": "awvDate",
        "options": {}
      },
      "id": "c41c301d-a240-4076-9a4a-7f7ef71a72c6",
      "name": "Date & Time1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        2180,
        900
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.currentdate }}",
        "outputFieldName": "currentDate",
        "options": {}
      },
      "id": "23c2facc-0bc9-4dc9-98fd-886868210d43",
      "name": "Date & Time2",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        2180,
        1080
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "5d47689e-5140-4cdd-affe-805fe58a60bd",
      "name": "Merge3",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2520,
        780
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "21f4c4b3-836a-47b8-80ce-710188225088",
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2700,
        880
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "0c9b9aa8-d034-45ff-b059-96764cd18041",
      "name": "Merge5",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2880,
        600
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "88b92a92-cc58-47cf-a59c-b5055e7f94ab",
              "name": "",
              "value": "",
              "type": "string"
            },
            {
              "id": "1a95fa3e-db2a-4c9c-8d0c-396a28c2b867",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "2eebfb6b-68b0-412f-9059-c1b664a3aa68",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1760,
        20
      ],
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.Elixhauser_risk_category }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "0622b231-5135-4bdf-82fc-9595436bcbb8",
                    "leftValue": "={{ $json.Elixhauser_risk_category }}",
                    "rightValue": "=",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "a7b24491-2d18-4ab2-8384-31676bc85c88",
      "name": "Switch3",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2060,
        180
      ]
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectURL": "={{ $('Patient Health Profile2').item.json[\"loginurl\"] }}",
        "options": {}
      },
      "id": "5185ea78-85dd-4270-b928-64bb2f55c71f",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2280,
        300
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select \nr.\"Elixhauser_risk_category\",\nr.\"CriticalAlertRisk\",\nr.\"Showrate_Risk_Category\",\nr.\"age_based_risk\",\nr.\"Overall_Vitals_Risk_Category\",\nr.\"Total_Risk_Classification\"\nfrom public.daily_risk_scores r\nwhere r.\"MRN\" = {{ $('Microsoft SQL5').item.json[\"MRN\"] }}",
        "options": {}
      },
      "id": "a73667e2-584e-4a0a-8cde-8c06334e719d",
      "name": "Postgres1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1760,
        180
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fgPA42YYbJlRydgk",
          "name": "PatientRiskProfile"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select * from \npublic.\"CWE_AWVdueforappt\" c\nwhere c.\"Patient_Number\" = '{{ $('Webhook3').item.json.query.mrn }}'\n--where c.\"Patient_Number\" = '{{ $('Webhook3').item.json.query.mrn }}'",
        "options": {}
      },
      "id": "d6bbacaf-9b34-48c3-ac65-97b8ce48d6c9",
      "name": "Postgres2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1700,
        560
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fgPA42YYbJlRydgk",
          "name": "PatientRiskProfile"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.errorcode }}",
        "rules": {
          "rules": [
            {
              "value2": "invalidparameter"
            },
            {
              "operation": "notEqual",
              "value2": "invalidparameter"
            }
          ]
        }
      },
      "id": "4be8ac7d-07f6-4fdf-8808-640db02fba6b",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        1420,
        200
      ]
    },
    {
      "parameters": {
        "content": "# Wellness",
        "height": 742.6329459195865,
        "width": 1499.6474818509687,
        "color": 5
      },
      "id": "55c4d7aa-8b36-40cc-a0b7-5d57f21cacc6",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1680,
        497.2122825554088
      ]
    },
    {
      "parameters": {
        "content": "# Risk",
        "height": 545.7128123298626,
        "width": 1489.6228580114798,
        "color": 3
      },
      "id": "7b5394d3-7adf-4010-aeeb-5c2ff9025e2a",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1690.4618354102217,
        -61.365632981547265
      ]
    },
    {
      "parameters": {},
      "id": "d9c230db-fdcb-433d-ac67-5eff6864f0db",
      "name": "Merge6",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        4220,
        780
      ]
    },
    {
      "parameters": {
        "content": "# Patient App",
        "height": 588.5625917732286,
        "width": 2344.7266706664495
      },
      "id": "38b7ef92-a680-40bb-8211-db0bf5417ab3",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1660,
        1330.1789140026438
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @MRN varchar(10)= '{{ $json.query.mrn }}';\nDECLARE @CURRENTDATE DATETIME = CAST(GETDATE() AS smalldatetime);\nDECLARE @ENCOUNTERNUMBER INT =0; --PLACE ENCOUNTER NUMBER FOR CURRENTAPPT AND IF NO ENCOUNTER STATE NEEDS TO BE ON SCHEDULE example 22999090\nDECLARE @ENCOUNTERDATEIFNOENCOUNTER DATETIME ='2024-02-14 08:55:00'; -- MUST MATCH DATETIME FIELD\n \nwith pastappt as (\nselect a.Patient_ID,a.Patient_Number,a.Appt_ID,a.Appt_Encounter_Number,\ncast(a.Appt_DateTime as smalldatetime) as Appt_DateTime,a.Appt_Sched_Location_Descr,\na.Appt_Resource_Descr,a.Appt_Type_Descr,\ncase \nwhen a.Appt_Status = 'A' then 'Showed'\nwhen a.Appt_Status = 'N' then 'NoShowed'\nwhen a.Appt_Status = 'X' then 'Cancelled'\nwhen a.Appt_Status = 'B' then 'Bumped'\nwhen a.Appt_Status = 'S' then 'Scheduled'\nwhen a.Appt_Status = 'C' then 'Confirmed'\nend as 'Appt_Status',\n'PastAppt' as ApptInsight\nfrom [dbo].[vwGenPatApptInfo] a\nwhere a.Patient_Number = @MRN and cast(a.Appt_DateTime as smalldatetime) < @CURRENTDATE\n),\ncurrentappt as(\nselect a.Patient_ID,a.Patient_Number,a.Appt_ID,a.Appt_Encounter_Number,\ncast(a.Appt_DateTime as smalldatetime) as Appt_DateTime,a.Appt_Sched_Location_Descr,\na.Appt_Resource_Descr,a.Appt_Type_Descr,\ncase \nwhen a.Appt_Status = 'A' then 'Showed'\nwhen a.Appt_Status = 'N' then 'NoShowed'\nwhen a.Appt_Status = 'X' then 'Cancelled'\nwhen a.Appt_Status = 'B' then 'Bumped'\nwhen a.Appt_Status = 'S' then 'Scheduled'\nwhen a.Appt_Status = 'C' then 'Comfirmed'\nend as 'Appt_Status',\n'CurrentAppt' as ApptInsight\nfrom [dbo].[vwGenPatApptInfo] a\nwhere a.Patient_Number = @MRN and\na.Appt_Encounter_Number =@ENCOUNTERNUMBER or (a.Patient_Number = @MRN and cast(a.Appt_DateTime as smalldatetime) =@ENCOUNTERDATEIFNOENCOUNTER)\n),\nfutureappt as(\nselect a.Patient_ID,a.Patient_Number,a.Appt_ID,a.Appt_Encounter_Number,\ncast(a.Appt_DateTime as smalldatetime) as Appt_DateTime,a.Appt_Sched_Location_Descr,\na.Appt_Resource_Descr,a.Appt_Type_Descr,\ncase \nwhen a.Appt_Status = 'A' then 'Showed'\nwhen a.Appt_Status = 'N' then 'NoShowed'\nwhen a.Appt_Status = 'X' then 'Cancelled'\nwhen a.Appt_Status = 'B' then 'Bumped'\nwhen a.Appt_Status = 'S' then 'Scheduled'\nwhen a.Appt_Status = 'C' then 'Confirmed'\nend as 'Appt_Status',\n'FutureAppt' as ApptInsight\nfrom [dbo].[vwGenPatApptInfo] a\nwhere a.Patient_Number = @MRN and cast(a.Appt_DateTime as smalldatetime) >= @CURRENTDATE\n)\nselect p.*\nfrom pastappt p\nunion all\nselect c.*\nfrom currentappt c\nunion all\nselect f.*\nfrom futureappt f"
      },
      "id": "9daf89af-8b1f-4195-9ce3-6a5bcb905e92",
      "name": "Microsoft SQL",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        2140,
        2200
      ],
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {},
      "id": "37c0f164-c74e-4119-8a62-a9559ef2e452",
      "name": "Merge10",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        4720,
        1240
      ]
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectURL": "={{ $json.query.php }}",
        "options": {}
      },
      "id": "5258b026-1b09-406e-8b6a-2798ec81dd48",
      "name": "Respond to Webhook4",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        5140,
        460
      ]
    },
    {
      "parameters": {
        "content": "# Appointments",
        "height": 519.4805194805193,
        "width": 2363.181818181818
      },
      "id": "b113648b-c9e7-45c6-afb6-71789e26a873",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1660,
        1980
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6b5c33b1-a3d1-4c73-bc57-326d6b1092b2",
              "name": "output",
              "value": "[   {     \"SingleSignOnToken\": \"047F539E-F1A7-4CBC-982D-0142CEBF4A5B\",     \"SessionToken\": \"84C2D5FC-DBBB-4D30-8FF0-AA7DF3A3B712\",     \"UserName\": \"TSTILWELL\",     \"CreatedOn\": \"2024-02-22T09:25:02.490Z\",     \"EncounterID\": \"21105855\",     \"PatientID\": \"158536\",     \"MRN\": \"502880\",     \"DEM_FIRSTNAME\": \"THOMAS\",     \"DEM_LASTNAME\": \"STILWELL\",     \"DEM_DATEOFBIRTH\": \"1988-02-01T00:00:00.000Z\"   } ]",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "8ab501f4-d7be-4979-a2f9-745558520a38",
      "name": "Edit Fields4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1280,
        480
      ]
    },
    {
      "parameters": {
        "path": "418b277c-e904-462b-b6ff-0acd3dbc46d122222",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "279ce69d-37a3-4ee4-87c7-5822aae33ff6",
      "name": "Patient Profile",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -1200,
        620
      ],
      "webhookId": "418b277c-e904-462b-b6ff-0acd3dbc46d1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n    \"title\": \"Fancy Heart Stuff\",\n    \"cardContent\": \"<div class='max-w-sm mx-auto p-6 bg-white rounded-xl shadow-lg flex items-center space-x-4'><div class='flex-shrink-0'><svg class='h-12 w-12 text-blue-500' fill='currentColor' viewBox='0 0 20 20'><path fill-rule='evenodd' d='M3 3a1 1 0 011-1h12a1 1 0 011 1v14a1 1 0 01-1 1H4a1 1 0 01-1-1V3zm12 2H5v10h10V5z' clip-rule='evenodd'/></svg></div><div><div class='text-xl font-medium text-black'>Monthly Revenue</div><p class='text-gray-500'>+15% from last month</p><p class='mt-2 text-2xl font-bold text-green-600'>$45,670</p></div></div>\",\n    \"modalId\": \"fancy_heart_stuff_modal\",\n    \"modalTitle\": \"Fancy Heart Stuff\",\n    \"modalContent\": \"<div class='container mx-auto p-8 bg-gray-50 rounded-xl shadow-2xl'><h2 class='text-4xl font-extrabold text-center mb-8 text-indigo-800 tracking-wide'>Test Results</h2><div class='overflow-x-auto rounded-2xl shadow-lg border border-gray-300'><table class='min-w-full bg-white'><thead class='bg-gradient-to-r from-gray-200 via-gray-300 to-gray-400 text-gray-800'><tr><th class='px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm'>Student Name</th><th class='px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm'>Test Score</th><th class='px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm'>Status</th></tr></thead><tbody class='divide-y divide-gray-200'><tr class='hover:bg-blue-50 transition duration-300'><td class='px-6 py-4 text-sm text-gray-800 font-medium'>John Doe</td><td class='px-6 py-4 text-sm text-gray-800 font-medium'>85</td><td class='px-6 py-4 text-sm'><span class='px-3 py-1 rounded-full bg-green-100 text-green-700 font-semibold shadow-sm'>Pass</span></td></tr></tbody></table></div></div>\"\n}\n",
        "options": {}
      },
      "id": "7aaa7268-6347-4cd3-b103-620b08554c23",
      "name": "Respond to Webhook5",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1320,
        820
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fe02a794-55c6-4bdb-acfd-c5a1666a70b5",
              "name": "Patient Insight",
              "value": "https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498",
              "type": "string"
            },
            {
              "id": "3e9eb757-22ff-4aed-a3e6-a0e7d108497c",
              "name": "Wellness {description:Test}",
              "value": "https://xl.epicpc.com/webhook/641d690e-eb64-4bdc-a6a5-9f35cedb6ebf",
              "type": "string"
            },
            {
              "id": "8affeaef-f188-4ec4-b00b-39d68547b768",
              "name": "Risk Profile {color:red}",
              "value": "https://xl.epicpc.com/webhook/6d4e64da-509f-4e9d-b74a-e4b0d8e3961b",
              "type": "string"
            },
            {
              "id": "4fdb5c98-efb7-4c72-abc0-c85508127263",
              "name": "Appointments",
              "value": "https://xl.epicpc.com/webhook/5a681a08-6cfb-443b-9c18-4dee032e9d48",
              "type": "string"
            },
            {
              "id": "2958144a-deae-432c-8a9a-3e01b36fe244",
              "name": "SUGGESTION and ENHANCEMENT Request",
              "value": "=https://xl.epicpc.com/webhook/2eaf4d02-e794-49c4-b0ab-d37ddb3cfc95",
              "type": "string"
            },
            {
              "id": "a1b44eca-4aaa-4005-9f99-473cc655b4cd",
              "name": "=Quick Scheduler {redirect} {color:green} {description:Fast and Easy Scheduling (now with notification!)}",
              "value": "https://xl.epicpc.com/webhook/6438b33a-a95c-4fa6-bf77-f1e5eba6c04c?source=php",
              "type": "string"
            },
            {
              "id": "df4a7a37-ae23-4e75-9082-5c06ae960af8",
              "name": "Order Reconciliation {newtab}",
              "value": "=https://xl.epicpc.com/webhook/a5de8712-c0cd-4925-9510-f78b1dbdcf79?system=Order%20Reconciliation&user={{ $json.UserName }}",
              "type": "string"
            },
            {
              "id": "8c394ce9-5017-4002-a880-622eac69f902",
              "name": "SOC Pathways {newtab}",
              "value": "http://10.0.1.80:8501",
              "type": "string"
            },
            {
              "id": "d63700c4-89b4-44fc-ba18-6f56bdf4bb71",
              "name": "Instant Visit {newtab}",
              "value": "https://xl.epicpc.com/webhook/ab28d6a9-d66e-46c9-b6c2-3c1928af3831",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "1b21d2e1-2606-4e99-a4ab-49651d3ea653",
      "name": "Edit Fields5",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -380,
        540
      ],
      "notes": "{newtab}"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n    \"title\": \"Brain Stuff\",\n    \"cardContent\": \"<div class='max-w-sm mx-auto p-6 bg-white rounded-xl shadow-lg flex items-center space-x-4'><div class='flex-shrink-0'><svg class='h-12 w-12 text-blue-500' fill='currentColor' viewBox='0 0 20 20'><path fill-rule='evenodd' d='M3 3a1 1 0 011-1h12a1 1 0 011 1v14a1 1 0 01-1 1H4a1 1 0 01-1-1V3zm12 2H5v10h10V5z' clip-rule='evenodd'/></svg></div><div><div class='text-xl font-medium text-black'>Monthly Revenue</div><p class='text-gray-500'>+15% from last month</p><p class='mt-2 text-2xl font-bold text-green-600'>$45,670</p></div></div>\",\n    \"modalId\": \"Brain_modal\",\n    \"modalTitle\": \"Brain Stuff\",\n    \"modalContent\": \"<div class='container mx-auto p-8 bg-gray-50 rounded-xl shadow-2xl'><h2 class='text-4xl font-extrabold text-center mb-8 text-indigo-800 tracking-wide'>Test Results</h2><div class='overflow-x-auto rounded-2xl shadow-lg border border-gray-300'><table class='min-w-full bg-white'><thead class='bg-gradient-to-r from-gray-200 via-gray-300 to-gray-400 text-gray-800'><tr><th class='px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm'>Student Name</th><th class='px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm'>Test Score</th><th class='px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm'>Status</th></tr></thead><tbody class='divide-y divide-gray-200'><tr class='hover:bg-blue-50 transition duration-300'><td class='px-6 py-4 text-sm text-gray-800 font-medium'>John Doe</td><td class='px-6 py-4 text-sm text-gray-800 font-medium'>85</td><td class='px-6 py-4 text-sm'><span class='px-3 py-1 rounded-full bg-green-100 text-green-700 font-semibold shadow-sm'>Pass</span></td></tr></tbody></table></div></div>\"\n}\n",
        "options": {}
      },
      "id": "7f8ff61e-815c-44a5-a752-a008e10d9155",
      "name": "Respond to Webhook6",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1320,
        1060
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Profile Dashboard</title>\n\n    <!-- Tailwind CSS and ShadCN UI links -->\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/shadcn-ui/dist/shadcn.css\">\n\n    <style>\n        body {\n            margin: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f5f7;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 10px;\n            gap: 10px;\n        }\n\n        .profile-banner {\n            width: 100%;\n            max-width: 1200px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            background: #ffffff;\n            padding: 10px;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            margin-bottom: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-info {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-image {\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            background: url('https://picsum.photos/60') center/cover;\n        }\n\n        .profile-details {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .profile-details h2 {\n            margin: 0;\n            font-size: 18px;\n        }\n\n        .profile-details p {\n            margin: 0;\n            color: #555;\n            font-size: 14px;\n        }\n\n        .return-btn {\n            padding: 6px 12px;\n            background-color: #f44336;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n\n        .return-btn:hover {\n            background-color: #d32f2f;\n        }\n\n        .grid-container {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n            gap: 10px;\n            width: 100%;\n            max-width: 1200px;\n        }\n\n        .card {\n            background: #ffffff;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            padding: 10px;\n            transition: transform 0.2s, box-shadow 0.2s;\n            cursor: pointer;\n        }\n\n        .card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n        }\n\n        .card-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            border-bottom: 1px solid #e5e7eb;\n            padding-bottom: 5px;\n            margin-bottom: 5px;\n        }\n\n        .card-title {\n            font-size: 16px;\n            font-weight: bold;\n        }\n\n        .modal {\n            position: fixed;\n            top: 2.5%;\n            left: 2.5%;\n            width: 95%;\n            height: 95%;\n            background: rgba(0, 0, 0, 0.8);\n            display: none;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            border-radius: 8px;\n            overflow: hidden;\n        }\n\n        .modal-content {\n            background: #ffffff;\n            padding: 10px;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            gap: 10px;\n            overflow-y: auto;\n            position: relative;\n        }\n\n        .modal-content h2 {\n            font-size: 24px;\n            font-weight: bold;\n            margin: 0;\n            text-align: center;\n        }\n\n        .close-button {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            padding: 6px 12px;\n            border: none;\n            background-color: #f87171;\n            color: white;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n            font-size: 14px;\n        }\n\n        .close-button:hover {\n            background-color: #ef4444;\n        }\n\n        .loading-spinner {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100px;\n        }\n\n        .loading-spinner div {\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(0, 0, 0, 0.1);\n            border-left-color: #000;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }\n\n        .fade-message {\n            opacity: 0;\n            transition: opacity 1s ease-in-out;\n        }\n\n        .visible {\n            opacity: 1;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        @media (max-width: 600px) {\n            .profile-banner {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n\n            .return-btn {\n                margin-top: 10px;\n            }\n\n            .grid-container {\n                grid-template-columns: 1fr;\n            }\n        }\n\n        #countdown {\n            font-size: 18px;\n            margin-top: 10px;\n        }\n\n        .confetti {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n            display: none; /* Confetti hidden by default */\n        }\n    </style>\n</head>\n<body>\n\n<!-- Profile Banner -->\n<div class=\"profile-banner\">\n    <div class=\"profile-info\">\n        <div class=\"profile-image\"></div>\n        <div class=\"profile-details\">\n            <h2>Patient Name: {{ $('Microsoft SQL2').item.json.DEM_FIRSTNAME }} {{ $('Microsoft SQL2').item.json.DEM_LASTNAME }}</h2>\n            <p>MRN: {{ $('Microsoft SQL2').item.json.MRN }}</p>\n        </div>\n    </div>\n    <button class=\"return-btn\" onclick=\"window.close()\">Return to EHR</button>\n</div>\n\n<!-- Cards Section -->\n<div class=\"grid-container\">\n    {{ $json.html }}\n</div>\n\n<!-- Confetti Canvas -->\n<canvas id=\"confettiCanvas\" class=\"confetti\"></canvas>\n\n<script>\n    // Function to open the modal\n    function openModal(id) {\n        document.getElementById(id).style.display = 'flex';\n    }\n\n    // Function to close the modal\n    function closeModal(id) {\n        document.getElementById(id).style.display = 'none';\n        stopConfetti(); // Stop confetti when modal closes\n    }\n\n    // Countdown timer\n    function startCountdown(duration, display) {\n        let timer = duration, seconds;\n        const countdownInterval = setInterval(function () {\n            seconds = parseInt(timer);\n            display.textContent = `Loading in ${seconds} seconds...`;\n\n            if (--timer < 0) {\n                clearInterval(countdownInterval);\n            }\n        }, 1000);\n    }\n\n    // Confetti effect\n    function startConfetti() {\n        const confettiCanvas = document.getElementById('confettiCanvas');\n        confettiCanvas.style.display = 'block'; // Show confetti when modal is active\n        const ctx = confettiCanvas.getContext('2d');\n        confettiCanvas.width = window.innerWidth;\n        confettiCanvas.height = window.innerHeight;\n\n        const confettiElements = [];\n        const colors = ['#FFC107', '#FF5722', '#4CAF50', '#03A9F4', '#E91E63', '#FFEB3B'];\n\n        for (let i = 0; i < 100; i++) {\n            confettiElements.push({\n                x: Math.random() * confettiCanvas.width,\n                y: Math.random() * confettiCanvas.height - confettiCanvas.height,\n                r: Math.random() * 10 + 1,\n                d: Math.random() * 100,\n                color: colors[Math.floor(Math.random() * colors.length)],\n                tilt: Math.random() * 10 - 10\n            });\n        }\n\n        function drawConfetti() {\n            ctx.clearRect(0, 0, confettiCanvas.width, confettiCanvas.height);\n\n            confettiElements.forEach((element, index) => {\n                ctx.beginPath();\n                ctx.arc(element.x, element.y, element.r, 0, Math.PI * 2, false);\n                ctx.fillStyle = element.color;\n                ctx.fill();\n                element.y += Math.random() * 3 + 2;\n                if (element.y > confettiCanvas.height) {\n                    confettiElements[index].y = -confettiCanvas.height;\n                }\n            });\n\n            requestAnimationFrame(drawConfetti);\n        }\n\n        drawConfetti();\n    }\n\n    function stopConfetti() {\n        const confettiCanvas = document.getElementById('confettiCanvas');\n        confettiCanvas.style.display = 'none'; // Hide confetti when modal closes\n    }\n\n    // Function to check session storage for cached data\n    function getCachedData(key) {\n        const cachedData = sessionStorage.getItem(key);\n        return cachedData ? JSON.parse(cachedData) : null;\n    }\n\n    // Function to cache data in session storage\n    function setCachedData(key, data) {\n        sessionStorage.setItem(key, JSON.stringify(data));\n    }\n\n    // Event listener for dynamically created cards and modals\n    document.addEventListener('DOMContentLoaded', function() {\n        document.querySelectorAll('.card').forEach(card => {\n            const modalId = card.getAttribute('data-modal-id');\n            const url = card.getAttribute('data-url');\n            const cacheKey = `modalData_${modalId}`;\n\n            card.addEventListener('click', () => {\n                openModal(modalId);\n\n                const modalBody = document.getElementById(`modalBody${modalId.replace('modal', '')}`);\n\n                // Check if data is cached\n                const cachedData = getCachedData(cacheKey);\n                if (cachedData) {\n                    // Use cached data\n                    modalBody.innerHTML = cachedData.modalContent || '<p>No content available</p>';\n                    startConfetti(); // Start the confetti/fireworks effect when cached data is used\n                } else {\n                    // Show loading spinner and messages in the modal body\n                    modalBody.innerHTML = `\n                        <div class=\"loading-spinner\">\n                            <div></div>\n                        </div>\n                        <div class=\"fade-message\" id=\"message1\">Checking with data science...</div>\n                        <div class=\"fade-message\" id=\"message2\">Looking for the rest of the information...</div>\n                        <div class=\"fade-message\" id=\"message3\">Just found something...</div>\n                        <div id=\"countdown\"></div>\n                    `;\n\n                    // Start countdown\n                    const display = document.getElementById('countdown');\n                    startCountdown(15, display);\n\n                    // Fade-in and display messages one by one over 15 seconds\n                    setTimeout(() => document.getElementById('message1').classList.add('visible'), 1000);\n                    setTimeout(() => document.getElementById('message2').classList.add('visible'), 6000);\n                    setTimeout(() => document.getElementById('message3').classList.add('visible'), 11000);\n\n                    // Fetch data for the clicked card\n                    fetch(url)\n                        .then(response => response.json())\n                        .then(data => {\n                            // Store fetched data in session storage for future use\n                            setCachedData(cacheKey, data);\n\n                            // Immediately show the fetched data and stop the loading animation\n                            modalBody.innerHTML = data.modalContent || '<p>No content available</p>';\n                            startConfetti(); // Start the confetti/fireworks effect when data is loaded\n                        })\n                        .catch(error => {\n                            console.error('Error fetching data:', error);\n                            modalBody.innerHTML = '<p>Error loading content. Please try again.</p>';\n                        });\n                }\n            });\n        });\n\n        // Attach event listeners to close buttons for modals\n        document.querySelectorAll('.close-button').forEach(button => {\n            const modalId = button.getAttribute('data-modal-id');\n            button.addEventListener('click', () => closeModal(modalId));\n        });\n    });\n</script>\n\n\n<script type=\"text/javascript\">\n  (function(d, t) {\n      var v = d.createElement(t), s = d.getElementsByTagName(t)[0];\n      v.onload = function() {\n        window.voiceflow.chat.load({\n          verify: { projectID: '672d26e7e13b9a0cd7ebd4a6' },\n          url: 'https://general-runtime.voiceflow.com',\n          versionID: 'production'\n        });\n      }\n      v.src = \"https://cdn.voiceflow.com/widget/bundle.mjs\"; v.type = \"text/javascript\"; s.parentNode.insertBefore(v, s);\n  })(document, 'script');\n</script>\n\n</body>\n</html>\n",
        "options": {}
      },
      "id": "c9e094c0-18b6-473b-907f-e423e6f64f16",
      "name": "Respond to Webhook10",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        200,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Helper function to build a valid base URL with field parameters\nconst buildBaseUrl = (url, params) => {\n  return url.includes('?') ? `${url}&${params}` : `${url}?${params}`;\n};\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access fields from the 'Microsoft SQL2' node; include SingleSignOnToken and exclude SessionToken\nconst fields = $node[\"Microsoft SQL2\"].json;\nconst fieldParams = Object.entries(fields)\n  .filter(([key]) => key !== \"SessionToken\")\n  .map(([key, value]) => `${key.toLowerCase()}=${encodeURIComponent(value)}`)\n  .join('&');\n\nincomingData.forEach((item) => {\n  for (const [key, url] of Object.entries(item.json)) {\n\n    // --- 1) Identify markers using flexible regex (allows spaces) ---\n    const isNewTab   = /\\{newtab\\}/i.test(key);\n    const isIFrame   = /\\{iframe\\}/i.test(key);\n    const isRedirect = /\\{redirect\\}/i.test(key);\n\n    // Capture color if present (handles spaces, e.g. {color : #ff0000})\n    const colorMatch = key.match(/\\{color\\s*:\\s*([^}]+)\\}/i);\n    const color      = colorMatch ? colorMatch[1].trim() : null;\n\n    // Capture description if present (handles spaces, e.g. {description : Some text})\n    const descriptionMatch = key.match(/\\{description\\s*:\\s*([^}]+)\\}/i);\n    const description      = descriptionMatch ? descriptionMatch[1].trim() : '';\n\n    // --- 2) Remove all markers to get a \"clean\" title ---\n    const cleanKey = key\n      .replace(/\\{newtab\\}/i, '')\n      .replace(/\\{iframe\\}/i, '')\n      .replace(/\\{redirect\\}/i, '')\n      .replace(/\\{color\\s*:\\s*[^}]+\\}/i, '')\n      .replace(/\\{description\\s*:\\s*[^}]+\\}/i, '')\n      .trim();\n\n    // --- 3) Build the final URL with extra parameters ---\n    const baseUrl = buildBaseUrl(url, fieldParams);\n\n    // --- 4) Build the display elements ---\n    // Create a span for the card header title with inline color if provided\n    const cardTitleSpan = `<span class=\"card-title\"${color ? ' style=\"color:' + color + ';\"' : ''}>${cleanKey}</span>`;\n\n    // Use description if available; otherwise, show default text\n    const cardDescriptionHTML  = description ? description : `Click to view more details about ${cleanKey}`;\n    // For modals, show description if provided\n    const modalDescriptionHTML = description ? `<p class=\"modal-description\">${description}</p>` : '';\n\n    if (isRedirect) {\n      // Redirect (same tab) card\n      const fetchScript = `\n        <a href=\"${baseUrl}\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              ${cardTitleSpan}\n            </div>\n            <p>${cardDescriptionHTML}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n\n      // No modal for redirect links\n    } else if (isNewTab) {\n      // Opens in new tab\n      const fetchScript = `\n        <a href=\"${baseUrl}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              ${cardTitleSpan}\n            </div>\n            <p>${cardDescriptionHTML}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n\n      // No modal for new tab links\n    } else {\n      // A normal card that triggers a modal\n      const fetchScript = `\n        <section class=\"card\" data-modal-id=\"modal${cleanKey}\" data-url=\"${baseUrl}\" data-base-url=\"${baseUrl}\">\n          <div class=\"card-header\">\n            ${cardTitleSpan}\n          </div>\n          <p>${cardDescriptionHTML}</p>\n        </section>\n      `;\n      fetchScripts.push(fetchScript);\n\n      // Modal content depends on iframe vs. non-iframe\n      if (isIFrame) {\n        // iFrame-based modal\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              ${modalDescriptionHTML}\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <iframe data-base-url=\"${baseUrl}\" style=\"width:100%; height:500px; border:none;\"></iframe>\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      } else {\n        // Normal modal (dynamic content) with added action buttons (example)\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              ${modalDescriptionHTML}\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <!-- This will be populated with data fetched from the API -->\n                <!-- Example buttons that call the webhook via handleAppointmentAction -->\n                <button class=\"btn\" style=\"background-color: green; color: white;\" onclick=\"handleAppointmentAction(this, '${encodeURIComponent(JSON.stringify({ title: '${cleanKey}', url: '${baseUrl}' }))}', 'Confirm')\">Confirm</button>\n                <button class=\"btn\" style=\"background-color: yellow; color: black;\" onclick=\"handleAppointmentAction(this, '${encodeURIComponent(JSON.stringify({ title: '${cleanKey}', url: '${baseUrl}' }))}', 'Change')\">Change</button>\n                <button class=\"btn\" style=\"background-color: red; color: white;\" onclick=\"handleAppointmentAction(this, '${encodeURIComponent(JSON.stringify({ title: '${cleanKey}', url: '${baseUrl}' }))}', 'Reschedule')\">Reschedule</button>\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      }\n    }\n  }\n});\n\n// Inline script to update URLs by appending any current query parameters, enable modal functionality, and handle appointment actions\nconst script = `\n<script>\n  window.addEventListener('DOMContentLoaded', function() {\n    // Get the current URL's query string (without the leading '?')\n    const currentParams = window.location.search.substring(1);\n    const appendParams = (baseUrl) => {\n      return currentParams\n        ? (baseUrl.indexOf('?') > -1 ? baseUrl + '&' + currentParams : baseUrl + '?' + currentParams)\n        : baseUrl;\n    };\n\n    // Update anchor tags (for new tab and redirect links)\n    document.querySelectorAll('a.card-link[data-base-url]').forEach(anchor => {\n      const baseUrl = anchor.getAttribute('data-base-url');\n      anchor.href = appendParams(baseUrl);\n    });\n\n    // Update card sections (for modal triggers)\n    document.querySelectorAll('section.card[data-base-url]').forEach(section => {\n      const baseUrl = section.getAttribute('data-base-url');\n      section.setAttribute('data-url', appendParams(baseUrl));\n    });\n      \n    // Update iframe elements (for modal iframes)\n    document.querySelectorAll('iframe[data-base-url]').forEach(iframe => {\n      const baseUrl = iframe.getAttribute('data-base-url');\n      iframe.src = appendParams(baseUrl);\n    });\n    \n    // Enable modal functionality: when a card is clicked, display the corresponding modal\n    document.querySelectorAll('.card[data-modal-id]').forEach(card => {\n      card.addEventListener('click', function() {\n        const modalId = card.getAttribute('data-modal-id');\n        document.getElementById(modalId).style.display = 'block';\n      });\n    });\n    \n    // Close modal functionality\n    document.querySelectorAll('.close-button').forEach(button => {\n      button.addEventListener('click', function() {\n        const modalId = button.getAttribute('data-modal-id');\n        document.getElementById(modalId).style.display = 'none';\n      });\n    });\n    \n    // Click outside modal to close it\n    window.addEventListener('click', function(event) {\n      document.querySelectorAll('.modal').forEach(modal => {\n        if (event.target === modal) {\n          modal.style.display = 'none';\n        }\n      });\n    });\n  });\n\n  // Appointment action handler that calls the webhook via GET\n  function handleAppointmentAction(button, apptDataEncoded, action) {\n    button.disabled = true;\n    button.innerHTML = '<span class=\"loader\"></span> Processing...';\n    const apptDataStr = decodeURIComponent(apptDataEncoded);\n    const apptData = JSON.parse(apptDataStr);\n\n    // For redirection with query parameters, GET method is recommended\n    const baseUrl = \"https://xl.epicpc.com/webhook/1c213c82-7107-487e-8fce-d16ab27872c2\";\n    let params = new URLSearchParams();\n    params.append('action', action);\n    for (let key in apptData) {\n      if (apptData.hasOwnProperty(key)) {\n        params.append(key, apptData[key]);\n      }\n    }\n    window.location.href = baseUrl + '?' + params.toString();\n  }\n</script>\n`;\n\n// Return a complete HTML page with enabled scripts\nreturn {\n  html: `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Main Page</title>\n        <style>\n          /* Basic styles for cards and modals */\n          .card {\n            border: 1px solid #ccc;\n            padding: 16px;\n            margin: 8px;\n            cursor: pointer;\n            display: inline-block;\n            vertical-align: top;\n            width: 200px;\n            box-sizing: border-box;\n          }\n          .card:hover {\n            background-color: #f9f9f9;\n          }\n          .card-header {\n            margin-bottom: 8px;\n          }\n          .modal {\n            display: none;\n            position: fixed;\n            z-index: 1000;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0,0,0,0.5);\n          }\n          .modal-content {\n            background-color: #fff;\n            margin: 5% auto;\n            padding: 20px;\n            border: 1px solid #888;\n            width: 80%;\n            max-height: 90vh;\n            overflow-y: auto;\n            box-sizing: border-box;\n          }\n          .close-button {\n            background-color: #d33;\n            color: #fff;\n            border: none;\n            padding: 8px 16px;\n            cursor: pointer;\n          }\n          .close-button:hover {\n            background-color: #a00;\n          }\n          .modal-description {\n            margin: 10px 0;\n            font-style: italic;\n          }\n          .btn {\n            padding: 10px 16px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            margin-right: 5px;\n          }\n          .loader {\n            border: 2px solid #f3f3f3;\n            border-top: 2px solid #3498db;\n            border-radius: 50%;\n            width: 12px;\n            height: 12px;\n            animation: spin 1s linear infinite;\n            display: inline-block;\n            margin-right: 5px;\n          }\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        </style>\n      </head>\n      <body>\n        ${fetchScripts.join('')}\n        ${modalScripts.join('')}\n        ${script}\n      </body>\n    </html>\n  `\n};\n"
      },
      "id": "ef2f3506-1671-4e8f-b8f8-cb55ba6a46e7",
      "name": "Code4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = 'wellness_modal';\n\n// Fetching values dynamically from Merge5 node for each item\nconst mergeData = $('Merge5').item.json || {};\n\nconst prim_insurance = mergeData['prim_insurance'] || 'N/A';\nconst sec_insurance = mergeData['sec_insurance'] || 'N/A';\nconst lastcwecpt = mergeData['lastcwecpt'] || 'N/A';\nconst lastcwebillingcarriername = mergeData['lastcwebillingcarriername'] || 'N/A';\nconst lastawvdone = mergeData['lastawvdone'] || 'N/A';\nconst lastawvcpt = mergeData['lastawvcpt'] || 'N/A';\nconst lastawvbillingcarriername = mergeData['lastawvbillingcarriername'] || 'N/A';\nconst CWE_Due = mergeData['CWE Due'] || 'N/A';\nconst AWV_Due = mergeData['AWV Due'] || 'NEW';\nconst Comments = mergeData['Comments'] || 'N/A';\nconst currentdate = mergeData['currentDate'] || 'N/A';\n\nconst modalContent = `\n  <div class=\"flex justify-center items-center bg-gray-100 p-6\">\n    <div class=\"bg-white rounded-lg shadow-lg max-w-lg w-full p-6\">\n        <!-- Table header -->\n        <div class=\"table-header flex items-center gap-2 text-xl font-bold text-gray-800 mb-6\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <span>Wellness</span>\n        </div>\n\n        <!-- Table content with faint horizontal lines between rows -->\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Primary Insurance</div>\n            <div class=\"value text-gray-600\">${prim_insurance}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Secondary Insurance</div>\n            <div class=\"value text-gray-600\">${sec_insurance}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Last CWE CPT</div>\n            <div class=\"value text-gray-600\">${lastcwecpt}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Last CWE Billing Carrier Name</div>\n            <div class=\"value text-gray-600\">${lastcwebillingcarriername}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Last AWV Done</div>\n            <div class=\"value text-gray-600\">${lastawvdone}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">CWE Due</div>\n            <div class=\"value text-gray-600\">${CWE_Due}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">AWV Due</div>\n            <div class=\"value text-gray-600\">${AWV_Due}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Comments</div>\n            <div class=\"value text-green-600 font-semibold\">${Comments}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Current Date</div>\n            <div class=\"value text-gray-600\">${currentdate}</div>\n        </div>\n    </div>\n  </div>\n`;\n\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "f9f0c2c4-c2f0-4f24-bf9d-0d15d7f85187",
      "name": "Code5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3320,
        840
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c9959c82-b66f-4cac-b013-af066dcc42f0",
      "name": "Respond to Webhook11",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        3480,
        840
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @SSO VARCHAR(100) = '{{ $json.query.SSOToken }}';\n \nSELECT [SingleSignOnToken]\n      ,[SessionToken]\n      ,[UserName]\n      ,[CreatedOn]\n      ,[EncounterID]\n      ,[PatientID]\n\t  ,d.DEM_EXTERNALID as MRN\n\t  ,d.DEM_FIRSTNAME\n\t  ,d.DEM_LASTNAME\n\t  ,d.DEM_DATEOFBIRTH\n  FROM [EMR].[HPSITE].[UAI_SingleSignOnTokens] s\n  LEFT JOIN [HPSITE].[DEMOGRAPHICS_VIEW] d on s.PatientID=d.IMREDEM_CODE\n \n  WHERE S.SingleSignOnToken = @SSO\n  order by s.CreatedOn desc"
      },
      "id": "6ab333f3-0fd6-4ab5-86e0-a66f4fae0c2e",
      "name": "Microsoft SQL5",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        740,
        400
      ],
      "credentials": {
        "microsoftSql": {
          "id": "qYagSGVTKE5tZdos",
          "name": "Microsoft SQL EHR"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<div class=\"container mx-auto\">\\n    <h2 class=\"text-4xl font-extrabold text-center mb-8 text-indigo-800 tracking-wide\">Insurance Details</h2>\\n    <div class=\"overflow-x-auto rounded-2xl shadow-lg border border-gray-300 bg-white\">\\n        <table id=\"insuranceDetailsTable\" class=\"min-w-full table-auto bg-white\">\\n            <thead class=\"bg-gradient-to-r from-gray-200 via-gray-300 to-gray-400 text-gray-800\">\\n                <tr>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Primary Insurance</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Secondary Insurance</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last CWE CPT</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last CWE Billing Carrier Name</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV Done</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV CPT</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV Billing Carrier Name</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">CWE Due</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">AWV Due</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Comments</th>\\n                    <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Current Date</th>\\n                </tr>\\n            </thead>\\n            <tbody class=\"divide-y divide-gray-200\">\\n                <tr class=\"hover:bg-blue-50 transition duration-300\">\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\"></td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\"></td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">04/09/2022</td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\"></td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">01/01/1900</td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\"></td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\"></td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">NO</td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">NO</td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\"></td>\\n                    <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">04/06/2024</td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </div>\\n</div>\\n\\n<script>\\n    const data = [\\n        {\\n            \"prim_insurance\": \"\",\\n            \"sec_insurance\": \"\",\\n            \"lastcwecpt\": \"99396\",\\n            \"lastcwebillingcarriername\": \"\",\\n            \"lastawvdone\": \"1900-01-01T05:32:11.000Z\",\\n            \"lastawvcpt\": \"\",\\n            \"lastawvbillingcarriername\": \"\",\\n            \"CWE Due\": \"NO\",\\n            \"AWV Due\": \"NO\",\\n            \"Comments\": \"\",\\n            \"currentdate\": \"04/06/2024\"\\n        }\\n    ];\\n\\n    function populateTable(data) {\\n        const tableBody = document.getElementById('insuranceDetailsTable').getElementsByTagName('tbody')[0];\\n        data.forEach(item => {\\n            let html = '<tr class=\"hover:bg-blue-50 transition duration-300\">';\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.prim_insurance || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.sec_insurance || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastcwecpt || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastcwebillingcarriername || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastawvdone || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastawvcpt || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastawvbillingcarriername || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item[\"CWE Due\"] || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item[\"AWV Due\"] || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.Comments || 'N/A'}</td>`;\\n            html += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.currentdate || 'N/A'}</td>`;\\n            html += '</tr>';\\n            tableBody.innerHTML += html;\\n        });\\n    }\\n\\n    populateTable(data);\\n</script>\\n\\n",
        "options": {}
      },
      "id": "31a0c9d5-89f4-4067-bb01-48dc8acccc43",
      "name": "Respond to Webhook12",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        5140,
        1000
      ]
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "id": "1cb3dd24-c38c-4f14-9656-b8f0fe5f6057",
      "name": "Edit Fields9",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2180,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = `${title.replace(/\\s+/g, '_')}_modal`;\n\nconst modalContent = `\n  <div class=\"container mx-auto\">\n    <h2 class=\"text-4xl font-extrabold text-center mb-8 text-indigo-800 tracking-wide\">Insurance Details</h2>\n    <div class=\"overflow-x-auto rounded-2xl shadow-lg border border-gray-300 bg-white\">\n      <table id=\"insuranceDetailsTable\" class=\"min-w-full table-auto bg-white\">\n        <thead class=\"bg-gradient-to-r from-gray-200 via-gray-300 to-gray-400 text-gray-800\">\n          <tr>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Primary Insurance</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Secondary Insurance</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last CWE CPT</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last CWE Billing Carrier Name</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV Done</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV CPT</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV Billing Carrier Name</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">CWE Due</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">AWV Due</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Comments</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Current Date</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y divide-gray-200\"></tbody>\n      </table>\n    </div>\n  </div>\n`;\n\n// Data to populate the table\nconst data = [\n    {\n        \"prim_insurance\": \"{{ $json['prim_insurance'] }}\",\n        \"sec_insurance\": \"{{ $json['sec_insurance'] }}\",\n        \"lastcwecpt\": \"{{ $json['lastcwecpt'] }}\",\n        \"lastcwebillingcarriername\": \"{{ $json['lastcwebillingcarriername'] }}\",\n        \"lastawvdone\": \"{{ $json['lastawvdone'] }}\",\n        \"lastawvcpt\": \"{{ $json['lastawvcpt'] }}\",\n        \"lastawvbillingcarriername\": \"{{ $json['lastawvbillingcarriername'] }}\",\n        \"CWE_Due\": \"{{ $json['CWE Due'] }}\",\n        \"AWV_Due\": \"{{ $json['AWV Due'] }}\",\n        \"Comments\": \"{{ $json['Comments'] }}\",\n        \"currentdate\": \"{{ $('Merge5').item.json['currentDate'] }}\"\n    }\n];\n\n// Function to insert data into the table\nfunction populateTable(data) {\n    let tableBody = '';\n    data.forEach(item => {\n        tableBody += `<tr class=\"hover:bg-blue-50 transition duration-300\">`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.prim_insurance || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.sec_insurance || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastcwecpt || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastcwebillingcarriername || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastawvdone || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastawvcpt || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.lastawvbillingcarriername || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.CWE_Due || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.AWV_Due || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.Comments || 'N/A'}</td>`;\n        tableBody += `<td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${item.currentdate || 'N/A'}</td>`;\n        tableBody += '</tr>';\n    });\n\n    return tableBody;\n}\n\n// Call function to populate the table with data\nconst tableBodyContent = populateTable(data);\n\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent.replace('</tbody>', `${tableBodyContent}</tbody>`)\n  }\n};\n"
      },
      "id": "0a725f46-8921-490d-9ee4-71b8fbc6c183",
      "name": "Code6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3320,
        700
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select * from \npublic.\"Allpat_cweawvdue\" c\nwhere c.\"Patient_Number\" = '{{ $('Microsoft SQL2').item.json[\"MRN\"] }}'",
        "options": {}
      },
      "id": "e28472cf-afc2-4f89-8f0b-27e34d343030",
      "name": "Postgres4",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1760,
        1060
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fgPA42YYbJlRydgk",
          "name": "PatientRiskProfile"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Insurance Details - Two-Column Layout</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <style>\n        /* Style adjustments for a stacked list look */\n        .table-container {\n            padding: 2rem;\n            max-width: 800px; /* Constrain table width */\n            margin: auto;\n            background-color: #ffffff;\n            border-radius: 12px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05); /* Subtle shadow for better contrast */\n        }\n        .table-header {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            font-size: 1.25rem;\n            font-weight: bold;\n            color: #1f2937;\n            padding-bottom: 1rem;\n        }\n        .table-row {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 1rem 0;\n            border-bottom: 1px solid #e5e7eb;\n        }\n        .table-row:last-child {\n            border-bottom: none; /* Remove border from last row */\n        }\n        .label {\n            font-weight: bold;\n            font-size: 1.1rem;\n            color: #1f2937; /* Darker color for emphasis */\n            width: 50%; /* Label width */\n        }\n        .value {\n            font-size: 1.1rem;\n            color: #374151; /* Slightly muted for distinction */\n            text-align: left; /* Align the values to the left */\n            width: 50%; /* Value width */\n        }\n        .highlight {\n            font-weight: bold;\n            color: #10b981; /* Green for important information (like \"Paid\" status) */\n        }\n    </style>\n</head>\n<body class=\"bg-gray-100 p-6\">\n\n    <div class=\"table-container\">\n        <!-- Table header -->\n        <div class=\"table-header\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <span>Insurance Details</span>\n        </div>\n\n        <!-- Table content -->\n        <div class=\"table-row\">\n            <div class=\"label\">Primary Insurance</div>\n            <div class=\"value\">United Health</div>\n        </div>\n        <div class=\"table-row\">\n            <div class=\"label\">Secondary Insurance</div>\n            <div class=\"value\">Blue Cross</div>\n        </div>\n        <div class=\"table-row\">\n            <div class=\"label\">Last CWE CPT</div>\n            <div class=\"value\">99396</div>\n        </div>\n        <div class=\"table-row\">\n            <div class=\"label\">Last CWE Billing Carrier Name</div>\n            <div class=\"value\">Aetna</div>\n        </div>\n        <div class=\"table-row\">\n            <div class=\"label\">Last AWV Done</div>\n            <div class=\"value\">2023-06-01</div>\n        </div>\n        <div class=\"table-row\">\n            <div class=\"label\">CWE Due</div>\n            <div class=\"value\">N/A</div>\n        </div>\n        <div class=\"table-row\">\n            <div class=\"label\">AWV Due</div>\n            <div class=\"value\">2024-06-01</div>\n        </div>\n        <div class=\"table-row\">\n            <div class=\"label\">Comments</div>\n            <div class=\"value highlight\">Patient needs a follow-up</div>\n        </div>\n        <div class=\"table-row\">\n            <div class=\"label\">Current Date</div>\n            <div class=\"value\">2024-09-24</div>\n        </div>\n    </div>\n\n</body>\n</html>\n",
        "options": {}
      },
      "id": "018666ee-5e77-4ff8-b308-634f64ddb982",
      "name": "Respond to Webhook13",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        5000,
        -660
      ],
      "disabled": true
    },
    {
      "parameters": {
        "path": "e5864317-12f7-4eff-b6fb-da9eca53ade2",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "9a7e787c-5ba4-4a17-b5c9-1631d3a5a7d5",
      "name": "Webhook5",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        4780,
        -660
      ],
      "webhookId": "e5864317-12f7-4eff-b6fb-da9eca53ade2"
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = 'thing_modal';\n\n// Fetching values dynamically from Merge5 node for each item\nconst mergeData = $('Merge5').item.json || {};\n\nconst prim_insurance = mergeData['prim_insurance'] || 'N/A';\nconst sec_insurance = mergeData['sec_insurance'] || 'N/A';\nconst lastcwecpt = mergeData['lastcwecpt'] || 'N/A';\nconst lastcwebillingcarriername = mergeData['lastcwebillingcarriername'] || 'N/A';\nconst lastawvdone = mergeData['lastawvdone'] || 'N/A';\nconst lastawvcpt = mergeData['lastawvcpt'] || 'N/A';\nconst lastawvbillingcarriername = mergeData['lastawvbillingcarriername'] || 'N/A';\nconst CWE_Due = mergeData['CWE Due'] || 'N/A';\nconst AWV_Due = mergeData['AWV Due'] || 'N/A';\nconst Comments = mergeData['Comments'] || 'N/A';\nconst currentdate = mergeData['currentDate'] || 'N/A';\n\nconst modalContent = `\n  <div class=\"container mx-auto\">\n    <h2 class=\"text-4xl font-extrabold text-center mb-8 text-indigo-800 tracking-wide\">Insurance Details</h2>\n    <div class=\"overflow-x-auto rounded-2xl shadow-lg border border-gray-300 bg-white\">\n      <table id=\"insuranceDetailsTable\" class=\"min-w-full table-auto bg-white\">\n        <thead class=\"bg-gradient-to-r from-gray-200 via-gray-300 to-gray-400 text-gray-800\">\n          <tr>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Primary Insurance</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Secondary Insurance</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last CWE CPT</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last CWE Billing Carrier Name</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV Done</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV CPT</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Last AWV Billing Carrier Name</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">CWE Due</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">AWV Due</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Comments</th>\n            <th class=\"px-6 py-4 text-left text-lg font-extrabold uppercase tracking-wider shadow-sm\">Current Date</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y divide-gray-200\">\n          <tr class=\"hover:bg-blue-50 transition duration-300\">\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${prim_insurance}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${sec_insurance}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${lastcwecpt}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${lastcwebillingcarriername}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${lastawvdone}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${lastawvcpt}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${lastawvbillingcarriername}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${CWE_Due}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${AWV_Due}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${Comments}</td>\n            <td class=\"px-6 py-4 text-sm text-gray-800 font-medium\">${currentdate}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n`;\n\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "c54d87b8-0f1f-479a-a2d0-47e6ba6cba7e",
      "name": "Code7",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3320,
        500
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "\n{\n\"SingleSignOnToken\": \n\"047F539E-F1A7-4CBC-982D-0142CEBF4A5B\",\n\"SessionToken\": \n\"84C2D5FC-DBBB-4D30-8FF0-AA7DF3A3B712\",\n\"UserName\": \n\"TSTILWELL\",\n\"CreatedOn\": \n\"2024-02-22T09:25:02.490Z\",\n\"EncounterID\": \n\"21105855\",\n\"PatientID\": \n\"158536\",\n\"MRN\": \n\"502880\",\n\"DEM_FIRSTNAME\": \n\"THOMAS\",\n\"DEM_LASTNAME\": \n\"STILWELL\",\n\"DEM_DATEOFBIRTH\": \n\"1988-02-01T00:00:00.000Z\"\n}",
        "includeOtherFields": true,
        "options": {}
      },
      "id": "e6da5534-5a8c-4fcf-99e7-390614c945f7",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -800,
        480
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Profile Dashboard</title>\n\n    <!-- Tailwind CSS and ShadCN UI links -->\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/shadcn-ui/dist/shadcn.css\">\n\n    <style>\n        /* Styles */\n        body {\n            margin: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f5f7;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 10px;\n            gap: 10px;\n        }\n\n        .profile-banner {\n            width: 100%;\n            max-width: 1200px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            background: #ffffff;\n            padding: 10px;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            margin-bottom: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-info {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-image {\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            background: url('https://picsum.photos/60') center/cover;\n        }\n\n        .profile-details {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .profile-details h2 {\n            margin: 0;\n            font-size: 18px;\n        }\n\n        .profile-details p {\n            margin: 0;\n            color: #555;\n            font-size: 14px;\n        }\n\n        .return-btn {\n            padding: 6px 12px;\n            background-color: #f44336;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n\n        .return-btn:hover {\n            background-color: #d32f2f;\n        }\n\n        .grid-container {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n            gap: 10px;\n            width: 100%;\n            max-width: 1200px;\n        }\n\n        .card {\n            background: #ffffff;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            padding: 10px;\n            transition: transform 0.2s, box-shadow 0.2s;\n            cursor: pointer;\n        }\n\n        .card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n        }\n\n        .card-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            border-bottom: 1px solid #e5e7eb;\n            padding-bottom: 5px;\n            margin-bottom: 5px;\n        }\n\n        .card-title {\n            font-size: 16px;\n            font-weight: bold;\n        }\n\n        .modal {\n            position: fixed;\n            top: 2.5%;\n            left: 2.5%;\n            width: 95%;\n            height: 95%;\n            background: rgba(0, 0, 0, 0.8);\n            display: none;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            border-radius: 8px;\n            overflow: hidden;\n        }\n\n        .modal-content {\n            background: #ffffff;\n            padding: 10px;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            overflow-y: auto;\n            position: relative;\n        }\n\n        .modal-content h2 {\n            font-size: 24px;\n            font-weight: bold;\n            margin: 0;\n            text-align: center;\n        }\n\n        .close-button {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            padding: 6px 12px;\n            border: none;\n            background-color: #f87171;\n            color: white;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n            font-size: 14px;\n        }\n\n        .close-button:hover {\n            background-color: #ef4444;\n        }\n\n        @media (max-width: 600px) {\n            .profile-banner {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n\n            .return-btn {\n                margin-top: 10px;\n            }\n\n            .grid-container {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n\n<!-- Profile Banner -->\n<div class=\"profile-banner\">\n    <div class=\"profile-info\">\n        <div class=\"profile-image\"></div>\n        <div class=\"profile-details\">\n            <h2>Patient Name: John Doe</h2>\n            <p>MRN: 12345678</p>\n        </div>\n    </div>\n    <button class=\"return-btn\" onclick=\"window.close()\">Return to EHR</button>\n</div>\n\n<!-- Cards Section -->\n<div class=\"grid-container\">\n    <!-- The dynamic content from the code node will be inserted here -->\n    {{ $json.html }}\n</div>\n\n<script>\n    // Function to open the modal\n    function openModal(id) {\n        document.getElementById(id).style.display = 'flex';\n    }\n\n    // Function to close the modal\n    function closeModal(id) {\n        document.getElementById(id).style.display = 'none';\n    }\n\n    // Event listener for dynamically created cards and modals\n    document.addEventListener('DOMContentLoaded', function() {\n        // Attach event listeners to the cards\n        document.querySelectorAll('.card').forEach(card => {\n            const modalId = card.getAttribute('data-modal-id');\n            const url = card.getAttribute('data-url'); // Fetch URL from data-url attribute\n\n            card.addEventListener('click', () => {\n                openModal(modalId);\n\n                // Fetch data dynamically for the clicked card\n                fetch(url)\n                    .then(response => response.json())\n                    .then(data => {\n                        // Inject the fetched data into the modal's body and header\n                        const modalBody = document.getElementById(`modalBody${modalId.replace('modal', '')}`);\n                        \n                        modalBody.innerHTML = `\n                            ${data.modalContent || '<p>No content available</p>'}\n                            ${data.modalFooter || ''}\n                        `;\n                    })\n                    .catch(error => console.error('Error fetching data:', error));\n            });\n        });\n\n        // Attach event listeners to close buttons for modals\n        document.querySelectorAll('.close-button').forEach(button => {\n            const modalId = button.getAttribute('data-modal-id');\n            button.addEventListener('click', () => closeModal(modalId));\n        });\n    });\n</script>\n\n</body>\n</html>\n",
        "options": {}
      },
      "id": "31e0406e-eb4a-47ac-ba88-810dcf293dad",
      "name": "Respond to Webhook15",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        200,
        760
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Profile Dashboard</title>\n\n    <!-- Tailwind CSS and ShadCN UI links -->\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/shadcn-ui/dist/shadcn.css\">\n\n    <style>\n        /* Styles */\n        body {\n            margin: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f5f7;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 10px;\n            gap: 10px;\n        }\n\n        .profile-banner {\n            width: 100%;\n            max-width: 1200px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            background: #ffffff;\n            padding: 10px;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            margin-bottom: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-info {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-image {\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            background: url('https://picsum.photos/60') center/cover;\n        }\n\n        .profile-details {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .profile-details h2 {\n            margin: 0;\n            font-size: 18px;\n        }\n\n        .profile-details p {\n            margin: 0;\n            color: #555;\n            font-size: 14px;\n        }\n\n        .return-btn {\n            padding: 6px 12px;\n            background-color: #f44336;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n\n        .return-btn:hover {\n            background-color: #d32f2f;\n        }\n\n        .grid-container {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n            gap: 10px;\n            width: 100%;\n            max-width: 1200px;\n        }\n\n        .card {\n            background: #ffffff;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            padding: 10px;\n            transition: transform 0.2s, box-shadow 0.2s;\n            cursor: pointer;\n        }\n\n        .card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n        }\n\n        .card-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            border-bottom: 1px solid #e5e7eb;\n            padding-bottom: 5px;\n            margin-bottom: 5px;\n        }\n\n        .card-title {\n            font-size: 16px;\n            font-weight: bold;\n        }\n\n        .modal {\n            position: fixed;\n            top: 2.5%;\n            left: 2.5%;\n            width: 95%;\n            height: 95%;\n            background: rgba(0, 0, 0, 0.8);\n            display: none;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            border-radius: 8px;\n            overflow: hidden;\n        }\n\n        .modal-content {\n            background: #ffffff;\n            padding: 10px;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            overflow-y: auto;\n            position: relative;\n        }\n\n        .modal-content h2 {\n            font-size: 24px;\n            font-weight: bold;\n            margin: 0;\n            text-align: center;\n        }\n\n        .close-button {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            padding: 6px 12px;\n            border: none;\n            background-color: #f87171;\n            color: white;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n            font-size: 14px;\n        }\n\n        .close-button:hover {\n            background-color: #ef4444;\n        }\n\n        .loading-spinner {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100px;\n        }\n\n        .loading-spinner div {\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(0, 0, 0, 0.1);\n            border-left-color: #000;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        @media (max-width: 600px) {\n            .profile-banner {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n\n            .return-btn {\n                margin-top: 10px;\n            }\n\n            .grid-container {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n\n<!-- Profile Banner -->\n<div class=\"profile-banner\">\n    <div class=\"profile-info\">\n        <div class=\"profile-image\"></div>\n        <div class=\"profile-details\">\n            <h2>Patient Name: John Doe</h2>\n            <p>MRN: 12345678</p>\n        </div>\n    </div>\n    <button class=\"return-btn\" onclick=\"window.close()\">Return to EHR</button>\n</div>\n\n<!-- Cards Section -->\n<div class=\"grid-container\">\n    {{ $json.html }}\n</div>\n\n<script>\n    // Function to open the modal\n    function openModal(id) {\n        document.getElementById(id).style.display = 'flex';\n    }\n\n    // Function to close the modal\n    function closeModal(id) {\n        document.getElementById(id).style.display = 'none';\n    }\n\n    // Event listener for dynamically created cards and modals\n    document.addEventListener('DOMContentLoaded', function() {\n        document.querySelectorAll('.card').forEach(card => {\n            const modalId = card.getAttribute('data-modal-id');\n            const url = card.getAttribute('data-url');\n\n            card.addEventListener('click', () => {\n                openModal(modalId);\n\n                // Show loading spinner in the modal body\n                const modalBody = document.getElementById(`modalBody${modalId.replace('modal', '')}`);\n                modalBody.innerHTML = `\n                    <div class=\"loading-spinner\">\n                        <div></div>  <!-- Spinner animation -->\n                    </div>\n                `;\n\n                // Fetch data for the clicked card\n                fetch(url)\n                    .then(response => response.json())\n                    .then(data => {\n                        // Replace spinner with fetched data\n                        modalBody.innerHTML = `\n                            ${data.modalContent || '<p>No content available</p>'}\n                            ${data.modalFooter || ''}\n                        `;\n                    })\n                    .catch(error => {\n                        console.error('Error fetching data:', error);\n                        modalBody.innerHTML = '<p>Error loading content. Please try again.</p>';\n                    });\n            });\n        });\n\n        // Attach event listeners to close buttons for modals\n        document.querySelectorAll('.close-button').forEach(button => {\n            const modalId = button.getAttribute('data-modal-id');\n            button.addEventListener('click', () => closeModal(modalId));\n        });\n    });\n</script>\n\n</body>\n</html>\n",
        "options": {}
      },
      "id": "4efe3503-da00-47ef-a24d-9874748c7f3f",
      "name": "Respond to Webhook16",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        200,
        960
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Profile Dashboard</title>\n\n    <!-- Tailwind CSS and ShadCN UI links -->\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/shadcn-ui/dist/shadcn.css\">\n\n    <style>\n        /* Styles */\n        body {\n            margin: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f5f7;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 10px;\n            gap: 10px;\n        }\n\n        .profile-banner {\n            width: 100%;\n            max-width: 1200px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            background: #ffffff;\n            padding: 10px;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            margin-bottom: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-info {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-image {\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            background: url('https://picsum.photos/60') center/cover;\n        }\n\n        .profile-details {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .profile-details h2 {\n            margin: 0;\n            font-size: 18px;\n        }\n\n        .profile-details p {\n            margin: 0;\n            color: #555;\n            font-size: 14px;\n        }\n\n        .return-btn {\n            padding: 6px 12px;\n            background-color: #f44336;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n\n        .return-btn:hover {\n            background-color: #d32f2f;\n        }\n\n        .grid-container {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n            gap: 10px;\n            width: 100%;\n            max-width: 1200px;\n        }\n\n        .card {\n            background: #ffffff;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            padding: 10px;\n            transition: transform 0.2s, box-shadow 0.2s;\n            cursor: pointer;\n        }\n\n        .card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n        }\n\n        .card-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            border-bottom: 1px solid #e5e7eb;\n            padding-bottom: 5px;\n            margin-bottom: 5px;\n        }\n\n        .card-title {\n            font-size: 16px;\n            font-weight: bold;\n        }\n\n        .modal {\n            position: fixed;\n            top: 2.5%;\n            left: 2.5%;\n            width: 95%;\n            height: 95%;\n            background: rgba(0, 0, 0, 0.8);\n            display: none;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            border-radius: 8px;\n            overflow: hidden;\n        }\n\n        .modal-content {\n            background: #ffffff;\n            padding: 10px;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            overflow-y: auto;\n            position: relative;\n        }\n\n        .modal-content h2 {\n            font-size: 24px;\n            font-weight: bold;\n            margin: 0;\n            text-align: center;\n        }\n\n        .close-button {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            padding: 6px 12px;\n            border: none;\n            background-color: #f87171;\n            color: white;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n            font-size: 14px;\n        }\n\n        .close-button:hover {\n            background-color: #ef4444;\n        }\n\n        .loading-spinner {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100px;\n        }\n\n        .loading-spinner div {\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(0, 0, 0, 0.1);\n            border-left-color: #000;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }\n\n        .fade-message {\n            opacity: 0;\n            transition: opacity 1s ease-in-out;\n        }\n\n        .visible {\n            opacity: 1;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        @media (max-width: 600px) {\n            .profile-banner {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n\n            .return-btn {\n                margin-top: 10px;\n            }\n\n            .grid-container {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n\n<!-- Profile Banner -->\n<div class=\"profile-banner\">\n    <div class=\"profile-info\">\n        <div class=\"profile-image\"></div>\n        <div class=\"profile-details\">\n            <h2>Patient Name: John Doe</h2>\n            <p>MRN: 12345678</p>\n        </div>\n    </div>\n    <button class=\"return-btn\" onclick=\"window.close()\">Return to EHR</button>\n</div>\n\n<!-- Cards Section -->\n<div class=\"grid-container\">\n    {{ $json.html }}\n</div>\n\n<script>\n    // Function to open the modal\n    function openModal(id) {\n        document.getElementById(id).style.display = 'flex';\n    }\n\n    // Function to close the modal\n    function closeModal(id) {\n        document.getElementById(id).style.display = 'none';\n    }\n\n    // Event listener for dynamically created cards and modals\n    document.addEventListener('DOMContentLoaded', function() {\n        document.querySelectorAll('.card').forEach(card => {\n            const modalId = card.getAttribute('data-modal-id');\n            const url = card.getAttribute('data-url');\n\n            card.addEventListener('click', () => {\n                openModal(modalId);\n\n                // Show loading spinner and messages in the modal body\n                const modalBody = document.getElementById(`modalBody${modalId.replace('modal', '')}`);\n                modalBody.innerHTML = `\n                    <div class=\"loading-spinner\">\n                        <div></div>\n                    </div>\n                    <div class=\"fade-message\" id=\"message1\">Checking with data science...</div>\n                    <div class=\"fade-message\" id=\"message2\">Looking for the rest of the information...</div>\n                    <div class=\"fade-message\" id=\"message3\">Just found something...</div>\n                `;\n\n                // Fade-in and display messages one by one over 15 seconds\n                setTimeout(() => document.getElementById('message1').classList.add('visible'), 1000);\n                setTimeout(() => document.getElementById('message2').classList.add('visible'), 6000);\n                setTimeout(() => document.getElementById('message3').classList.add('visible'), 11000);\n\n                // Fetch data for the clicked card\n                fetch(url)\n                    .then(response => response.json())\n                    .then(data => {\n                        // Replace spinner and messages with fetched data after the countdown\n                        setTimeout(() => {\n                            modalBody.innerHTML = `\n                                ${data.modalContent || '<p>No content available</p>'}\n                                ${data.modalFooter || ''}\n                            `;\n                        }, 15000); // Wait 15 seconds before showing actual data\n                    })\n                    .catch(error => {\n                        console.error('Error fetching data:', error);\n                        modalBody.innerHTML = '<p>Error loading content. Please try again.</p>';\n                    });\n            });\n        });\n\n        // Attach event listeners to close buttons for modals\n        document.querySelectorAll('.close-button').forEach(button => {\n            const modalId = button.getAttribute('data-modal-id');\n            button.addEventListener('click', () => closeModal(modalId));\n        });\n    });\n</script>\n\n</body>\n</html>\n",
        "options": {}
      },
      "id": "b6843685-cc26-485c-8042-c3f729a20711",
      "name": "Respond to Webhook17",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        200,
        1160
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Profile Dashboard</title>\n\n    <!-- Tailwind CSS and ShadCN UI links -->\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/shadcn-ui/dist/shadcn.css\">\n\n    <style>\n        body {\n            margin: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f5f7;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 10px;\n            gap: 10px;\n        }\n\n        .profile-banner {\n            width: 100%;\n            max-width: 1200px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            background: #ffffff;\n            padding: 10px;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            margin-bottom: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-info {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-image {\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            background: url('https://picsum.photos/60') center/cover;\n        }\n\n        .profile-details {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .profile-details h2 {\n            margin: 0;\n            font-size: 18px;\n        }\n\n        .profile-details p {\n            margin: 0;\n            color: #555;\n            font-size: 14px;\n        }\n\n        .return-btn {\n            padding: 6px 12px;\n            background-color: #f44336;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n\n        .return-btn:hover {\n            background-color: #d32f2f;\n        }\n\n        .grid-container {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n            gap: 10px;\n            width: 100%;\n            max-width: 1200px;\n        }\n\n        .card {\n            background: #ffffff;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            padding: 10px;\n            transition: transform 0.2s, box-shadow 0.2s;\n            cursor: pointer;\n        }\n\n        .card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n        }\n\n        .card-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            border-bottom: 1px solid #e5e7eb;\n            padding-bottom: 5px;\n            margin-bottom: 5px;\n        }\n\n        .card-title {\n            font-size: 16px;\n            font-weight: bold;\n        }\n\n        .modal {\n            position: fixed;\n            top: 2.5%;\n            left: 2.5%;\n            width: 95%;\n            height: 95%;\n            background: rgba(0, 0, 0, 0.8);\n            display: none;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            border-radius: 8px;\n            overflow: hidden;\n        }\n\n        .modal-content {\n            background: #ffffff;\n            padding: 10px;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            gap: 10px;\n            overflow-y: auto;\n            position: relative;\n        }\n\n        .modal-content h2 {\n            font-size: 24px;\n            font-weight: bold;\n            margin: 0;\n            text-align: center;\n        }\n\n        .close-button {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            padding: 6px 12px;\n            border: none;\n            background-color: #f87171;\n            color: white;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n            font-size: 14px;\n        }\n\n        .close-button:hover {\n            background-color: #ef4444;\n        }\n\n        .loading-spinner {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100px;\n        }\n\n        .loading-spinner div {\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(0, 0, 0, 0.1);\n            border-left-color: #000;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }\n\n        .fade-message {\n            opacity: 0;\n            transition: opacity 1s ease-in-out;\n        }\n\n        .visible {\n            opacity: 1;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        @media (max-width: 600px) {\n            .profile-banner {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n\n            .return-btn {\n                margin-top: 10px;\n            }\n\n            .grid-container {\n                grid-template-columns: 1fr;\n            }\n        }\n\n        #countdown {\n            font-size: 18px;\n            margin-top: 10px;\n        }\n\n        .confetti {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n            display: none; /* Confetti hidden by default */\n        }\n    </style>\n</head>\n<body>\n\n<!-- Profile Banner -->\n<div class=\"profile-banner\">\n    <div class=\"profile-info\">\n        <div class=\"profile-image\"></div>\n        <div class=\"profile-details\">\n            <h2>Patient Name: John Doe</h2>\n            <p>MRN: 12345678</p>\n        </div>\n    </div>\n    <button class=\"return-btn\" onclick=\"window.close()\">Return to EHR</button>\n</div>\n\n<!-- Cards Section -->\n<div class=\"grid-container\">\n    {{ $json.html }}\n</div>\n\n<!-- Confetti Canvas -->\n<canvas id=\"confettiCanvas\" class=\"confetti\"></canvas>\n\n<script>\n    // Function to open the modal\n    function openModal(id) {\n        document.getElementById(id).style.display = 'flex';\n    }\n\n    // Function to close the modal\n    function closeModal(id) {\n        document.getElementById(id).style.display = 'none';\n        stopConfetti(); // Stop confetti when modal closes\n    }\n\n    // Countdown timer\n    function startCountdown(duration, display) {\n        let timer = duration, seconds;\n        const countdownInterval = setInterval(function () {\n            seconds = parseInt(timer);\n            display.textContent = `Loading in ${seconds} seconds...`;\n\n            if (--timer < 0) {\n                clearInterval(countdownInterval);\n            }\n        }, 1000);\n    }\n\n    // Confetti effect\n    function startConfetti() {\n        const confettiCanvas = document.getElementById('confettiCanvas');\n        confettiCanvas.style.display = 'block'; // Show confetti when modal is active\n        const ctx = confettiCanvas.getContext('2d');\n        confettiCanvas.width = window.innerWidth;\n        confettiCanvas.height = window.innerHeight;\n\n        const confettiElements = [];\n        const colors = ['#FFC107', '#FF5722', '#4CAF50', '#03A9F4', '#E91E63', '#FFEB3B'];\n\n        for (let i = 0; i < 100; i++) {\n            confettiElements.push({\n                x: Math.random() * confettiCanvas.width,\n                y: Math.random() * confettiCanvas.height - confettiCanvas.height,\n                r: Math.random() * 10 + 1,\n                d: Math.random() * 100,\n                color: colors[Math.floor(Math.random() * colors.length)],\n                tilt: Math.random() * 10 - 10\n            });\n        }\n\n        function drawConfetti() {\n            ctx.clearRect(0, 0, confettiCanvas.width, confettiCanvas.height);\n\n            confettiElements.forEach((element, index) => {\n                ctx.beginPath();\n                ctx.arc(element.x, element.y, element.r, 0, Math.PI * 2, false);\n                ctx.fillStyle = element.color;\n                ctx.fill();\n                element.y += Math.random() * 3 + 2;\n                if (element.y > confettiCanvas.height) {\n                    confettiElements[index].y = -confettiCanvas.height;\n                }\n            });\n\n            requestAnimationFrame(drawConfetti);\n        }\n\n        drawConfetti();\n    }\n\n    function stopConfetti() {\n        const confettiCanvas = document.getElementById('confettiCanvas');\n        confettiCanvas.style.display = 'none'; // Hide confetti when modal closes\n    }\n\n    // Event listener for dynamically created cards and modals\n    document.addEventListener('DOMContentLoaded', function() {\n        document.querySelectorAll('.card').forEach(card => {\n            const modalId = card.getAttribute('data-modal-id');\n            const url = card.getAttribute('data-url');\n\n            card.addEventListener('click', () => {\n                openModal(modalId);\n\n                // Show loading spinner and messages in the modal body\n                const modalBody = document.getElementById(`modalBody${modalId.replace('modal', '')}`);\n                modalBody.innerHTML = `\n                    <div class=\"loading-spinner\">\n                        <div></div>\n                    </div>\n                    <div class=\"fade-message\" id=\"message1\">Checking with data science...</div>\n                    <div class=\"fade-message\" id=\"message2\">Looking for the rest of the information...</div>\n                    <div class=\"fade-message\" id=\"message3\">Just found something...</div>\n                    <div id=\"countdown\"></div>\n                `;\n\n                // Start countdown\n                const display = document.getElementById('countdown');\n                startCountdown(15, display);\n\n                // Fade-in and display messages one by one over 15 seconds\n                setTimeout(() => document.getElementById('message1').classList.add('visible'), 1000);\n                setTimeout(() => document.getElementById('message2').classList.add('visible'), 6000);\n                setTimeout(() => document.getElementById('message3').classList.add('visible'), 11000);\n\n                // Fetch data for the clicked card\n                fetch(url)\n                    .then(response => response.json())\n                    .then(data => {\n                        // Immediately show the fetched data and stop the loading animation\n                        modalBody.innerHTML = `\n                            ${data.modalContent || '<p>No content available</p>'}\n                            ${data.modalFooter || ''}\n                        `;\n                        startConfetti(); // Start the confetti/fireworks effect when data is loaded\n                    })\n                    .catch(error => {\n                        console.error('Error fetching data:', error);\n                        modalBody.innerHTML = '<p>Error loading content. Please try again.</p>';\n                    });\n            });\n        });\n\n        // Attach event listeners to close buttons for modals\n        document.querySelectorAll('.close-button').forEach(button => {\n            const modalId = button.getAttribute('data-modal-id');\n            button.addEventListener('click', () => closeModal(modalId));\n        });\n    });\n</script>\n\n</body>\n</html>\n",
        "options": {}
      },
      "id": "8846059d-07a5-4c0b-ad7b-3670289ed6c4",
      "name": "Respond to Webhook18",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        380
      ]
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access MRN from the 'Edit Fields' node\nconst mrn = $node[\"Edit Fields\"].json.MRN;\n\nincomingData.forEach((item) => {\n    for (const [key, url] of Object.entries(item.json)) {\n        // Create the card HTML with data-url attribute, including MRN from 'Edit Fields' node\n        const fetchScript = `\n            <section class=\"card\" data-modal-id=\"modal${key}\" data-url=\"${url}?mrn=${mrn}\">\n                <div class=\"card-header\">\n                    <span class=\"card-title\">${key}</span>\n                </div>\n                <p>Click to view more details about ${key}</p>\n            </section>\n        `;\n        fetchScripts.push(fetchScript);\n\n        // Create the modal HTML\n        const modalScript = `\n            <div id=\"modal${key}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <h2>${key} Details</h2>\n                    <div class=\"modal-body\" id=\"modalBody${key}\">\n                        <!-- This will be populated with data fetched from the API -->\n                    </div>\n                    <button class=\"close-button\" data-modal-id=\"modal${key}\">Close</button>\n                </div>\n            </div>\n        `;\n        modalScripts.push(modalScript);\n    }\n});\n\n// Return the combined HTML for both cards and modals as a string\nreturn {\n    html: fetchScripts.join('') + modalScripts.join('')\n};\n"
      },
      "id": "612503dd-26d1-48a3-9ac7-1e7f97e03fd1",
      "name": "Code10",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Profile Dashboard</title>\n\n    <!-- Tailwind CSS and ShadCN UI links -->\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/shadcn-ui/dist/shadcn.css\">\n\n    <style>\n        body {\n            margin: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f5f7;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 10px;\n            gap: 10px;\n        }\n\n        .profile-banner {\n            width: 100%;\n            max-width: 1200px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            background: #ffffff;\n            padding: 10px;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            margin-bottom: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-info {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n\n        .profile-image {\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            background: url('https://picsum.photos/60') center/cover;\n        }\n\n        .profile-details {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .profile-details h2 {\n            margin: 0;\n            font-size: 18px;\n        }\n\n        .profile-details p {\n            margin: 0;\n            color: #555;\n            font-size: 14px;\n        }\n\n        .return-btn {\n            padding: 6px 12px;\n            background-color: #f44336;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n\n        .return-btn:hover {\n            background-color: #d32f2f;\n        }\n\n        .grid-container {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n            gap: 10px;\n            width: 100%;\n            max-width: 1200px;\n        }\n\n        .card {\n            background: #ffffff;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            padding: 10px;\n            transition: transform 0.2s, box-shadow 0.2s;\n            cursor: pointer;\n        }\n\n        .card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n        }\n\n        .card-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            border-bottom: 1px solid #e5e7eb;\n            padding-bottom: 5px;\n            margin-bottom: 5px;\n        }\n\n        .card-title {\n            font-size: 16px;\n            font-weight: bold;\n        }\n\n        .modal {\n            position: fixed;\n            top: 2.5%;\n            left: 2.5%;\n            width: 95%;\n            height: 95%;\n            background: rgba(0, 0, 0, 0.8);\n            display: none;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            border-radius: 8px;\n            overflow: hidden;\n        }\n\n        .modal-content {\n            background: #ffffff;\n            padding: 10px;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            gap: 10px;\n            overflow-y: auto;\n            position: relative;\n        }\n\n        .modal-content h2 {\n            font-size: 24px;\n            font-weight: bold;\n            margin: 0;\n            text-align: center;\n        }\n\n        .close-button {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            padding: 6px 12px;\n            border: none;\n            background-color: #f87171;\n            color: white;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background 0.3s;\n            font-size: 14px;\n        }\n\n        .close-button:hover {\n            background-color: #ef4444;\n        }\n\n        .loading-spinner {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100px;\n        }\n\n        .loading-spinner div {\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(0, 0, 0, 0.1);\n            border-left-color: #000;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }\n\n        .fade-message {\n            opacity: 0;\n            transition: opacity 1s ease-in-out;\n        }\n\n        .visible {\n            opacity: 1;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        @media (max-width: 600px) {\n            .profile-banner {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n\n            .return-btn {\n                margin-top: 10px;\n            }\n\n            .grid-container {\n                grid-template-columns: 1fr;\n            }\n        }\n\n        #countdown {\n            font-size: 18px;\n            margin-top: 10px;\n        }\n\n        .confetti {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n            display: none; /* Confetti hidden by default */\n        }\n    </style>\n</head>\n<body>\n\n<!-- Profile Banner -->\n<div class=\"profile-banner\">\n    <div class=\"profile-info\">\n        <div class=\"profile-image\"></div>\n        <div class=\"profile-details\">\n            <h2>Patient Name: John Doe</h2>\n            <p>MRN: 12345678</p>\n        </div>\n    </div>\n    <button class=\"return-btn\" onclick=\"window.close()\">Return to EHR</button>\n</div>\n\n<!-- Cards Section -->\n<div class=\"grid-container\">\n    {{ $json.html }}\n</div>\n\n<!-- Confetti Canvas -->\n<canvas id=\"confettiCanvas\" class=\"confetti\"></canvas>\n\n<script>\n    // Function to open the modal\n    function openModal(id) {\n        document.getElementById(id).style.display = 'flex';\n    }\n\n    // Function to close the modal\n    function closeModal(id) {\n        document.getElementById(id).style.display = 'none';\n        stopConfetti(); // Stop confetti when modal closes\n    }\n\n    // Countdown timer\n    function startCountdown(duration, display) {\n        let timer = duration, seconds;\n        const countdownInterval = setInterval(function () {\n            seconds = parseInt(timer);\n            display.textContent = `Loading in ${seconds} seconds...`;\n\n            if (--timer < 0) {\n                clearInterval(countdownInterval);\n            }\n        }, 1000);\n    }\n\n    // Confetti effect\n    function startConfetti() {\n        const confettiCanvas = document.getElementById('confettiCanvas');\n        confettiCanvas.style.display = 'block'; // Show confetti when modal is active\n        const ctx = confettiCanvas.getContext('2d');\n        confettiCanvas.width = window.innerWidth;\n        confettiCanvas.height = window.innerHeight;\n\n        const confettiElements = [];\n        const colors = ['#FFC107', '#FF5722', '#4CAF50', '#03A9F4', '#E91E63', '#FFEB3B'];\n\n        for (let i = 0; i < 100; i++) {\n            confettiElements.push({\n                x: Math.random() * confettiCanvas.width,\n                y: Math.random() * confettiCanvas.height - confettiCanvas.height,\n                r: Math.random() * 10 + 1,\n                d: Math.random() * 100,\n                color: colors[Math.floor(Math.random() * colors.length)],\n                tilt: Math.random() * 10 - 10\n            });\n        }\n\n        function drawConfetti() {\n            ctx.clearRect(0, 0, confettiCanvas.width, confettiCanvas.height);\n\n            confettiElements.forEach((element, index) => {\n                ctx.beginPath();\n                ctx.arc(element.x, element.y, element.r, 0, Math.PI * 2, false);\n                ctx.fillStyle = element.color;\n                ctx.fill();\n                element.y += Math.random() * 3 + 2;\n                if (element.y > confettiCanvas.height) {\n                    confettiElements[index].y = -confettiCanvas.height;\n                }\n            });\n\n            requestAnimationFrame(drawConfetti);\n        }\n\n        drawConfetti();\n    }\n\n    function stopConfetti() {\n        const confettiCanvas = document.getElementById('confettiCanvas');\n        confettiCanvas.style.display = 'none'; // Hide confetti when modal closes\n    }\n\n    // Function to check local storage for cached data\n    function getCachedData(key) {\n        const cachedData = localStorage.getItem(key);\n        return cachedData ? JSON.parse(cachedData) : null;\n    }\n\n    // Function to cache data in local storage\n    function setCachedData(key, data) {\n        localStorage.setItem(key, JSON.stringify(data));\n    }\n\n    // Event listener for dynamically created cards and modals\n    document.addEventListener('DOMContentLoaded', function() {\n        document.querySelectorAll('.card').forEach(card => {\n            const modalId = card.getAttribute('data-modal-id');\n            const url = card.getAttribute('data-url');\n            const cacheKey = `modalData_${modalId}`;\n\n            card.addEventListener('click', () => {\n                openModal(modalId);\n\n                const modalBody = document.getElementById(`modalBody${modalId.replace('modal', '')}`);\n\n                // Check if data is cached\n                const cachedData = getCachedData(cacheKey);\n                if (cachedData) {\n                    // Use cached data\n                    modalBody.innerHTML = cachedData.modalContent || '<p>No content available</p>';\n                    startConfetti(); // Start the confetti/fireworks effect when cached data is used\n                } else {\n                    // Show loading spinner and messages in the modal body\n                    modalBody.innerHTML = `\n                        <div class=\"loading-spinner\">\n                            <div></div>\n                        </div>\n                        <div class=\"fade-message\" id=\"message1\">Checking with data science...</div>\n                        <div class=\"fade-message\" id=\"message2\">Looking for the rest of the information...</div>\n                        <div class=\"fade-message\" id=\"message3\">Just found something...</div>\n                        <div id=\"countdown\"></div>\n                    `;\n\n                    // Start countdown\n                    const display = document.getElementById('countdown');\n                    startCountdown(15, display);\n\n                    // Fade-in and display messages one by one over 15 seconds\n                    setTimeout(() => document.getElementById('message1').classList.add('visible'), 1000);\n                    setTimeout(() => document.getElementById('message2').classList.add('visible'), 6000);\n                    setTimeout(() => document.getElementById('message3').classList.add('visible'), 11000);\n\n                    // Fetch data for the clicked card\n                    fetch(url)\n                        .then(response => response.json())\n                        .then(data => {\n                            // Store fetched data in local storage for future use\n                            setCachedData(cacheKey, data);\n\n                            // Immediately show the fetched data and stop the loading animation\n                            modalBody.innerHTML = data.modalContent || '<p>No content available</p>';\n                            startConfetti(); // Start the confetti/fireworks effect when data is loaded\n                        })\n                        .catch(error => {\n                            console.error('Error fetching data:', error);\n                            modalBody.innerHTML = '<p>Error loading content. Please try again.</p>';\n                        });\n                }\n            });\n        });\n\n        // Attach event listeners to close buttons for modals\n        document.querySelectorAll('.close-button').forEach(button => {\n            const modalId = button.getAttribute('data-modal-id');\n            button.addEventListener('click', () => closeModal(modalId));\n        });\n    });\n</script>\n\n</body>\n</html>\n",
        "options": {}
      },
      "id": "68b41a76-c0aa-4c16-958f-6f18fe0cd632",
      "name": "Respond to Webhook19",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        220
      ]
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access MRN from the 'Edit Fields' node\nconst mrn = $node[\"Edit Fields\"].json.MRN;\n\nincomingData.forEach((item) => {\n    for (const [key, url] of Object.entries(item.json)) {\n        // Create the card HTML with data-url attribute, including MRN from 'Edit Fields' node\n        const fetchScript = `\n            <section class=\"card\" data-modal-id=\"modal${key}\" data-url=\"${url}?mrn=${mrn}\">\n                <div class=\"card-header\">\n                    <span class=\"card-title\">${key}</span>\n                </div>\n                <p>Click to view more details about ${key}</p>\n            </section>\n        `;\n        fetchScripts.push(fetchScript);\n\n        // Create the modal HTML\n        const modalScript = `\n            <div id=\"modal${key}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <h2>${key} Details</h2>\n                    <div class=\"modal-body\" id=\"modalBody${key}\">\n                        <!-- This will be populated with data fetched from the API -->\n                    </div>\n                    <button class=\"close-button\" data-modal-id=\"modal${key}\">Close</button>\n                </div>\n            </div>\n        `;\n        modalScripts.push(modalScript);\n    }\n});\n\n// Return the combined HTML for both cards and modals as a string\nreturn {\n    html: fetchScripts.join('') + modalScripts.join('')\n};\n"
      },
      "id": "bee9f29c-a91e-4432-a252-942ff347292a",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -720,
        480
      ]
    },
    {
      "parameters": {
        "path": "b70b7ec1-3f60-4420-a7a6-e18868310d98",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "ecd5d63e-22cb-43ba-81a6-7cf2f29ba6d4",
      "name": "Patient Profile1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -1180,
        320
      ],
      "webhookId": "b70b7ec1-3f60-4420-a7a6-e18868310d98"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "240314fe-dbc5-4f20-9524-4501bd044115",
              "name": "query.mrn",
              "value": "={{ $('Webhook3').item.json.query.mrn }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "cbea1641-71db-4107-b90d-d02e90136e28",
      "name": "Edit Fields7",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1500,
        480
      ]
    },
    {
      "parameters": {
        "path": "641d690e-eb64-4bdc-a6a5-9f35cedb6ebf",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "6c9d1cb0-a582-419d-8292-b652f373be17",
      "name": "Webhook3",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1100,
        480
      ],
      "webhookId": "641d690e-eb64-4bdc-a6a5-9f35cedb6ebf"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select * from \npublic.\"Allpat_cweawvdue\" c\nwhere c.\"Patient_Number\" = '{{ $('Webhook3').item.json.query.mrn }}'\n--where c.\"Patient_Number\" = '{{ $('Webhook3').item.json.query.mrn }}'",
        "options": {}
      },
      "id": "505a67bc-f349-41e5-8a70-a58598d0f80a",
      "name": "Postgres",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1780,
        1100
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fgPA42YYbJlRydgk",
          "name": "PatientRiskProfile"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select * from \npublic.\"Allpat_cweawvdue\" c\nwhere c.\"Patient_Number\" = '{{ $('Webhook3').item.json.query.mrn }}'\n--where c.\"Patient_Number\" = '{{ $('Webhook3').item.json.query.mrn }}'",
        "options": {}
      },
      "id": "c83f82fd-1e1c-4389-8a49-37f93d449e7e",
      "name": "WellnessAllPatients",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1760,
        780
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fgPA42YYbJlRydgk",
          "name": "PatientRiskProfile"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "id": "1f57ae7e-aec9-47fa-851a-ffced795c20e",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2020,
        680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "5eb8da58-04b1-42df-b330-bb8be9c97438",
              "leftValue": "={{ $json.Patient_Number }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "1b8c5856-623f-47e3-afd4-95f548c33fa3",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        1820,
        560
      ]
    },
    {
      "parameters": {
        "path": "3afb84b5-5d60-4717-87c2-003986b125b2",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "6c1f6043-2556-4c19-8404-2e50ef7393b1",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        4920,
        1020
      ],
      "webhookId": "3afb84b5-5d60-4717-87c2-003986b125b2"
    },
    {
      "parameters": {
        "path": "8adebb70-1c58-4671-8c1a-7e6919e28403",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "39e2718c-d6df-42cb-b168-1a45410dddcb",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1100,
        820
      ],
      "webhookId": "8adebb70-1c58-4671-8c1a-7e6919e28403"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * \nFROM bir.monthly_riskscore_tracing\nWHERE \"MRN\" = '{{ $json.query.mrn }}';\n",
        "options": {}
      },
      "id": "01ff5090-da12-4f9c-8015-9b57162bbfbb",
      "name": "Postgres5",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -20,
        1540
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "6UhfXvPEQwS0wZ1c",
          "name": "BIREporting"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "68367d1f-6ef3-44ba-a48c-2a8baffa4429",
      "name": "Respond to Webhook1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        600,
        1540
      ]
    },
    {
      "parameters": {
        "path": "6d4e64da-509f-4e9d-b74a-e4b0d8e3961b",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "fe2ff4fd-00b0-4d19-a6cd-8a33c5e4d1d6",
      "name": "Webhook4",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -260,
        1540
      ],
      "webhookId": "6d4e64da-509f-4e9d-b74a-e4b0d8e3961b"
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = 'risk_profile_modal';\n\n// Access the first item in the input data\nconst mergeData = items[0].json || {};\n\nconst MRN = mergeData['MRN'] || 'N/A';\nconst patient_name = mergeData['patient_name'] || 'N/A';\nconst elixhauserRiskCategory = mergeData['Elixhauser_risk_category'] || 'N/A';\nconst overallVitalsRiskCategory = mergeData['Overall_Vitals_Risk_Category'] || 'N/A';\nconst showrateRiskCategory = mergeData['Showrate_Risk_Category'] || 'N/A';\nconst ageBasedRisk = mergeData['age_based_risk'] || 'N/A';\nconst criticalAlertRisk = mergeData['CriticalAlertRisk'] || 'N/A';\nconst totalRiskClassification = mergeData['Total_Risk_Classification'] || 'N/A';\nconst medRiskCategory = mergeData['med_risk_category'] || 'N/A';\nconst finalRiskClassification = mergeData['Final_Risk_Classification'] || 'N/A';\nconst uploadDate = mergeData['upload_date'] || 'N/A';\n\nconst modalContent = `\n  <div class=\"flex justify-center items-center bg-gray-100 p-6\">\n    <div class=\"bg-white rounded-lg shadow-lg max-w-lg w-full p-6\">\n        <!-- Table header -->\n        <div class=\"table-header flex items-center gap-2 text-xl font-bold text-gray-800 mb-6\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <span>Risk Profile</span>\n        </div>\n\n        <!-- Table content with faint horizontal lines between rows -->\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">MRN</div>\n            <div class=\"value text-gray-600\">${MRN}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Patient Name</div>\n            <div class=\"value text-gray-600\">${patient_name}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Elixhauser Risk Category</div>\n            <div class=\"value text-gray-600\">${elixhauserRiskCategory}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Overall Vitals Risk Category</div>\n            <div class=\"value text-gray-600\">${overallVitalsRiskCategory}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Showrate Risk Category</div>\n            <div class=\"value text-gray-600\">${showrateRiskCategory}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Age-Based Risk</div>\n            <div class=\"value text-gray-600\">${ageBasedRisk}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Critical Alert Risk</div>\n            <div class=\"value text-gray-600\">${criticalAlertRisk}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Total Risk Classification</div>\n            <div class=\"value text-gray-600\">${totalRiskClassification}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Medication Risk Category</div>\n            <div class=\"value text-gray-600\">${medRiskCategory}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Final Risk Classification</div>\n            <div class=\"value text-gray-600\">${finalRiskClassification}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Upload Date</div>\n            <div class=\"value text-gray-600\">${uploadDate}</div>\n        </div>\n    </div>\n  </div>\n`;\n\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "bb42dab1-dc09-4123-b306-d76d85b46887",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        1540
      ]
    },
    {
      "parameters": {
        "collection": "users",
        "options": {},
        "query": "={\n  \"patient_number\": {\n    \"$regex\": \".*{{ $json.query.mrn }}.*\",\n    \"$options\": \"i\"\n  }\n}\n"
      },
      "id": "5bbd2367-76ab-4ac9-bb14-dd9bf201f1bc",
      "name": "MongoDB",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [
        1920,
        1580
      ],
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "GcDoZP6kqt3fgy9H",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "path": "e0214145-9e11-4417-a6d6-914c94c7f498",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f4187d5d-48b4-4d72-b778-112b61a09058",
      "name": "Webhook2",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1760,
        1580
      ],
      "webhookId": "e0214145-9e11-4417-a6d6-914c94c7f498"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "8cbd6ffa-349b-4ac4-9e97-e266d6121a59",
      "name": "Respond to Webhook20",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2320,
        1580
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = 'patient_info_modal';\n\n// Access the first item in the input data\nconst patientData = items[0].json || {};\n\nconst firstName = patientData['first_name'] || 'N/A';\nconst lastName = patientData['last_name'] || 'N/A';\nconst email = patientData['email'] || 'N/A';\nconst dobRaw = patientData['dob'] || 'N/A';\nconst dob = dobRaw !== 'N/A' ? new Date(dobRaw).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' }) : 'N/A';\nconst mobileNumber = `+1${patientData['contact_details']?.['mobile_number'] || 'N/A'}`;\nconst isNewPatient = patientData['is_new_patient'] ? 'Yes' : 'No';\nconst patientId = patientData['patient_id'] || 'N/A';\nconst patientNumber = patientData['patient_number'] || 'N/A';\nconst mappingStatus = patientData['mapping_status'] || 'N/A';\nconst createdAt = patientData['createdAt'] || 'N/A';\nconst updatedAt = patientData['updatedAt'] || 'N/A';\n\nconst modalContent = `\n  <div class=\"flex justify-center items-center bg-gray-100 p-6\">\n    <div class=\"bg-white rounded-lg shadow-lg max-w-lg w-full p-6\">\n        <!-- Table header -->\n        <div class=\"table-header flex items-center gap-2 text-xl font-bold text-gray-800 mb-6\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <span>Patient Information</span>\n        </div>\n\n        <!-- Table content with faint horizontal lines between rows -->\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">First Name</div>\n            <div class=\"value text-gray-600\">${firstName}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Last Name</div>\n            <div class=\"value text-gray-600\">${lastName}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Email</div>\n            <div class=\"value text-gray-600\">${email}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Date of Birth</div>\n            <div class=\"value text-gray-600\">${dob}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Mobile Number</div>\n            <div class=\"value text-gray-600\">${mobileNumber}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Is New Patient</div>\n            <div class=\"value text-gray-600\">${isNewPatient}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Patient ID</div>\n            <div class=\"value text-gray-600\">${patientId}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Patient Number</div>\n            <div class=\"value text-gray-600\">${patientNumber}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Mapping Status</div>\n            <div class=\"value text-gray-600\">${mappingStatus}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Created At</div>\n            <div class=\"value text-gray-600\">${createdAt}</div>\n        </div>\n        <div class=\"grid grid-cols-2 gap-4 border-t border-gray-200 py-4\">\n            <div class=\"label font-semibold text-gray-900\">Updated At</div>\n            <div class=\"value text-gray-600\">${updatedAt}</div>\n        </div>\n    </div>\n  </div>\n`;\n\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "81e8740b-d8ee-4d05-9af6-80da4a13b6cd",
      "name": "Code11",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2120,
        1580
      ]
    },
    {
      "parameters": {
        "path": "5a681a08-6cfb-443b-9c18-4dee032e9d48",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "52d12113-af00-45fb-83e0-dda7942b8885",
      "name": "Webhook6",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1760,
        2200
      ],
      "webhookId": "5a681a08-6cfb-443b-9c18-4dee032e9d48"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.pastappts }}",
        "options": {}
      },
      "id": "d186d40a-0e0a-41ca-82fc-1d6e5ac800f3",
      "name": "Respond to Webhook7",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        5040,
        1820
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "3e928d8c-fac5-4c00-ae9d-5a58b5fd964d",
      "name": "Respond to Webhook21",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        3000,
        2200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM public.patientpreferences\n--WHERE \"MRN\" = '{{ $json.query.mrn }}';\nWHERE \"MRN\" = '502880';",
        "options": {}
      },
      "id": "66aaa563-9e5d-480f-9f30-4e44802188ea",
      "name": "Patient Heatmap",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -40,
        1880
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "YJJ1lHGSqfDYLwZL",
          "name": "Postgres officeops"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Access MRN from the 'Edit Fields' node\nconst mrn = $node[\"Microsoft SQL2\"].json.MRN;\n\n// Array to store HTML elements for collapsible sections\nlet sectionScripts = [];\n\nincomingData.forEach((item) => {\n    for (const [key, url] of Object.entries(item.json)) {\n        // Create the collapsible section HTML with data-url attribute, including MRN from 'Edit Fields' node\n        const sectionScript = `\n            <section class=\"collapsible-section\" data-url=\"${url}?mrn=${mrn}\">\n                <div class=\"section-header\" onclick=\"toggleSection('${key}')\">\n                    <h2>${key}</h2>\n                    <button class=\"collapse-button\" id=\"collapseButton${key}\">Collapse</button>\n                </div>\n                <div class=\"section-body\" id=\"sectionBody${key}\">\n                    <p>Loading...</p>\n                </div>\n            </section>\n        `;\n        sectionScripts.push(sectionScript);\n    }\n});\n\n// JavaScript for fetching data and handling collapse/expand functionality\nconst script = `\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            // Fetch and display data for each section on page load\n            const sections = document.querySelectorAll('.collapsible-section');\n            sections.forEach(section => {\n                const url = section.getAttribute('data-url');\n                const body = section.querySelector('.section-body');\n                \n                // Fetch data from the webhook and populate the section\n                fetch(url)\n                    .then(response => response.json())\n                    .then(data => {\n                        // Debugging: log the fetched data\n                        console.log('Data for', url, data);\n\n                        // Check if data contains expected 'html' property or fallback message\n                        if (data.html) {\n                            body.innerHTML = data.html;\n                        } else {\n                            body.innerHTML = \"<p>No data available</p>\";\n                        }\n                    })\n                    .catch(error => {\n                        body.innerHTML = \"<p>Error loading data.</p>\";\n                        console.error('Error fetching data:', error);\n                    });\n            });\n        });\n\n        // Function to toggle section visibility\n        function toggleSection(key) {\n            const body = document.getElementById('sectionBody' + key);\n            const button = document.getElementById('collapseButton' + key);\n            if (body.style.display === 'none') {\n                body.style.display = 'block';\n                button.textContent = 'Collapse';\n            } else {\n                body.style.display = 'none';\n                button.textContent = 'Expand';\n            }\n        }\n    </script>\n`;\n\n// CSS for styling the layout\nconst styles = `\n    <style>\n        .collapsible-section {\n            border: 1px solid #ddd;\n            margin: 10px 0;\n            padding: 10px;\n            border-radius: 5px;\n            background-color: #f9f9f9;\n        }\n        .section-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            cursor: pointer;\n        }\n        .collapse-button {\n            background-color: #007bff;\n            color: white;\n            border: none;\n            padding: 5px 10px;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        .section-body {\n            margin-top: 10px;\n        }\n    </style>\n`;\n\n// Combine sections, styles, and script into the final HTML\nreturn {\n    html: styles + sectionScripts.join('') + script\n};\n"
      },
      "id": "d2d2da37-913b-4518-bb75-c753a967c22d",
      "name": "Single page view",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -60,
        760
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "e6e65a42-4413-42fc-9517-7783fe1707d1",
      "name": "Respond to Webhook22",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        620,
        -900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = 'patient_info_modal';\n\n// Retrieve query parameters from n8n input\nconst queryParams = items[0].json.query || {};\n\n// Filter the query parameters to only include up to 'user'\nconst filteredQueryParams = {};\nfor (const key in queryParams) {\n  filteredQueryParams[key] = queryParams[key];\n  if (key === 'user') break; // Stop adding parameters after 'user'\n}\n\n// Convert the filtered query parameters to a URL string\nconst queryString = Object.keys(filteredQueryParams)\n  .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(filteredQueryParams[key])}`)\n  .join('&');\n\n// Define the iframe source URL, including the filtered query parameters\nconst iframeSrc = `https://xl.epicpc.com/webhook/nmn_suggestion_enhancement_request${queryString ? '?' + queryString : ''}`;\n\n// Create the modal content with the iframe, making it full screen without extra padding or margins\nconst modalContent = `\n  <div class=\"fixed inset-0 flex items-center justify-center bg-gray-100\">\n    <div class=\"w-full h-full\">\n        <!-- Header with Close Button, positioned absolutely -->\n        <div class=\"absolute top-0 right-0 m-4\">\n            <button onclick=\"document.getElementById('${modalId}').remove()\" class=\"bg-red-500 text-white px-3 py-1 rounded\">Close</button>\n        </div>\n\n        <!-- Full-Screen Iframe without padding or margin -->\n        <iframe src=\"${iframeSrc}\" class=\"w-full h-full border-0\" title=\"Patient Info\"></iframe>\n    </div>\n  </div>\n`;\n\n// Return the modal ID and content as JSON\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "09ee218c-d927-4b5a-92f5-b1354066bcee",
      "name": "Code12",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        -760
      ]
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access MRN from the 'Edit Fields' node\nconst mrn = $node[\"Microsoft SQL2\"].json.MRN;\n\nincomingData.forEach((item) => {\n    for (const [key, url] of Object.entries(item.json)) {\n        // Create the card HTML with data-url attribute, including MRN from 'Edit Fields' node\n        const fetchScript = `\n            <section class=\"card\" data-modal-id=\"modal${key}\" data-url=\"${url}?mrn=${mrn}\">\n                <div class=\"card-header\">\n                    <span class=\"card-title\">${key}</span>\n                </div>\n                <p>Click to view more details about ${key}</p>\n            </section>\n        `;\n        fetchScripts.push(fetchScript);\n\n        // Create the modal HTML\n        const modalScript = `\n            <div id=\"modal${key}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <h2>${key} Details</h2>\n                    <div class=\"modal-body\" id=\"modalBody${key}\">\n                        <!-- This will be populated with data fetched from the API -->\n                    </div>\n                    <button class=\"close-button\" data-modal-id=\"modal${key}\">Close</button>\n                </div>\n            </div>\n        `;\n        modalScripts.push(modalScript);\n    }\n});\n\n// Return the combined HTML for both cards and modals as a string\nreturn {\n    html: fetchScripts.join('') + modalScripts.join('')\n};\n"
      },
      "id": "cc891a04-876c-4e6f-888f-2227fbfe21ce",
      "name": "Code8",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        580
      ]
    },
    {
      "parameters": {
        "path": "2eaf4d02-e794-49c4-b0ab-d37ddb3cfc95",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "5677c6eb-81b0-4045-91b1-e105a234294b",
      "name": "SUGGESTION",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        220,
        -880
      ],
      "webhookId": "2eaf4d02-e794-49c4-b0ab-d37ddb3cfc95"
    },
    {
      "parameters": {
        "path": "f22f007f-fab3-4e25-903c-f2adc2ab493a",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "69ee0b3a-13df-49db-9cb4-fa8f337d583d",
      "name": "Scheduling Link",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -260,
        2240
      ],
      "webhookId": "f22f007f-fab3-4e25-903c-f2adc2ab493a"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d7b9752d-3e10-44e5-a39d-8bda58c05d9d",
      "name": "Respond to Webhook8",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        420,
        2240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = 'patient_info_modal';\n\n// Retrieve query parameters from n8n input\nconst queryParams = items[0].json.query || {};\n\n// Filter the query parameters to only include up to 'user'\nconst filteredQueryParams = {};\nfor (const key in queryParams) {\n  filteredQueryParams[key] = queryParams[key];\n  if (key === 'user') break; // Stop adding parameters after 'user'\n}\n\n// Convert the filtered query parameters to a URL string\nconst queryString = Object.keys(filteredQueryParams)\n  .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(filteredQueryParams[key])}`)\n  .join('&');\n\n// Define the iframe source URL, including the filtered query parameters\nconst iframeSrc = `https://xl.epicpc.com/webhook/f22f007f-fab3-4e25-903c-f2adc2ab493a${queryString ? '?' + queryString : ''}`; // Update to the new site\n\n// Create the modal content with the iframe, making it full screen without extra padding or margins\nconst modalContent = `\n  <div class=\"fixed inset-0 flex items-center justify-center bg-gray-100\">\n    <div class=\"w-full h-full\">\n        <!-- Header with Close Button, positioned absolutely -->\n        <div class=\"absolute top-0 right-0 m-4\">\n            <button onclick=\"document.getElementById('${modalId}').remove()\" class=\"bg-red-500 text-white px-3 py-1 rounded\">Close</button>\n        </div>\n\n        <!-- Full-Screen Iframe without padding or margin -->\n        <iframe src=\"${iframeSrc}\" class=\"w-full h-full border-0\" title=\"Patient Info\"></iframe>\n    </div>\n  </div>\n`;\n\n// Return the modal ID and content as JSON\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "a7b76899-4021-4910-b104-1f8b52d09b03",
      "name": "Code13",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20,
        2240
      ]
    },
    {
      "parameters": {
        "path": "f22f007f-fab3-4e25-903c-f2adc2ab493a2",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "d0a1fcdb-d598-463a-b3a8-28006d44c195",
      "name": "Scheduling Link1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -260,
        2440
      ],
      "webhookId": "f22f007f-fab3-4e25-903c-f2adc2ab493a"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "test",
        "options": {}
      },
      "id": "d9d96e93-2772-4514-822b-49304a2bfa89",
      "name": "Respond to Webhook9",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -40,
        2440
      ]
    },
    {
      "parameters": {
        "jsCode": "// Minimal Appointment Modal Code Node\nconst modalId = 'appointment_modal';\n\n// Helper function to parse datetime strings as local time\nfunction parseLocalDatetime(datetimeStr) {\n    // Expected format: \"YYYY-MM-DDTHH:mm:ss\" (without timezone info)\n    const [datePart, timePart] = datetimeStr.split('T');\n    const [year, month, day] = datePart.split('-').map(Number);\n    let hours = 0, minutes = 0, seconds = 0;\n    if (timePart) {\n        const timeParts = timePart.split(':').map(Number);\n        hours = timeParts[0];\n        minutes = timeParts[1];\n        seconds = timeParts[2] || 0;\n    }\n    // Construct date as local time\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n}\n\n// Helper to get a date string (YYYY-MM-DD) from a Date object in local time\nfunction getLocalDateString(date) {\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n}\n\n// Today's date in YYYY-MM-DD format (local)\nconst today = getLocalDateString(new Date());\n\n// Separate arrays for Future, Today, Past appointments\nlet futureAppointments = [];\nlet todayAppointments = [];\nlet pastAppointments = [];\n\n// Classify appointments using the custom local datetime parser\nitems.forEach(item => {\n    const appt = item.json;\n    const apptLocalDateObj = parseLocalDatetime(appt.Appt_DateTime);\n    const apptDate = getLocalDateString(apptLocalDateObj);\n    if (apptDate < today) {\n        pastAppointments.push(appt);\n    } else if (apptDate === today) {\n        todayAppointments.push(appt);\n    } else {\n        futureAppointments.push(appt);\n    }\n});\n\n// Sort Past (desc) & Future (asc) using local datetime parsing\npastAppointments.sort((a, b) => parseLocalDatetime(b.Appt_DateTime) - parseLocalDatetime(a.Appt_DateTime));\nfutureAppointments.sort((a, b) => parseLocalDatetime(a.Appt_DateTime) - parseLocalDatetime(b.Appt_DateTime));\n\n// Helper to generate table rows with optional action buttons\nfunction generateRows(appointments, showButtons = false) {\n    if (!appointments.length) {\n        // Adjust colspan based on whether action column is present (6 or 7)\n        const colspan = showButtons ? 7 : 6;\n        return `\n            <tr>\n                <td colspan=\"${colspan}\" class=\"text-center font-bold text-red-500\">\n                    No appointments available.\n                </td>\n            </tr>\n        `;\n    }\n    return appointments.map(appt => {\n        const dt = parseLocalDatetime(appt.Appt_DateTime).toLocaleString();\n        let buttonsHTML = '';\n        if (showButtons) {\n            // Three buttons: Confirm (green), Change (yellow), Reschedule (red)\n            // The appointment info is encoded as JSON to pass to the handler\n            const apptData = encodeURIComponent(JSON.stringify(appt));\n            buttonsHTML = `\n                <button class=\"btn confirm-btn\" style=\"background-color: green; color: white; margin-right: 5px;\" onclick=\"handleAppointmentAction(this, '${apptData}', 'Confirm')\">Confirm</button>\n                <button class=\"btn change-btn\" style=\"background-color: yellow; color: black; margin-right: 5px;\" onclick=\"handleAppointmentAction(this, '${apptData}', 'Change')\">Change</button>\n                <button class=\"btn reschedule-btn\" style=\"background-color: red; color: white;\" onclick=\"handleAppointmentAction(this, '${apptData}', 'Reschedule')\">Reschedule</button>\n            `;\n        }\n        return `\n            <tr>\n                <td class=\"border px-2 py-2\">${dt}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Sched_Location_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Resource_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Type_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Status}</td>\n                <td class=\"border px-2 py-2\">${appt.ApptInsight}</td>\n                ${ showButtons ? `<td class=\"border px-2 py-2\">${buttonsHTML}</td>` : '' }\n            </tr>\n        `;\n    }).join('');\n}\n\n// Function to generate a table (no search) with optional action buttons for appointments\nfunction generateSimpleTable(title, tableId, appointments, showButtons = false) {\n    const extraHeader = showButtons ? '<th class=\"border px-2 py-2\">Actions</th>' : '';\n    return `\n        <div class=\"mb-6\">\n            <h2 class=\"text-xl font-semibold text-purple-600 mb-2\">${title}</h2>\n            <table id=\"${tableId}\" class=\"table-auto w-full border border-gray-300 rounded-lg\">\n                <thead>\n                    <tr class=\"bg-gray-100 text-left\">\n                        <th class=\"border px-2 py-2\">Appointment Date/Time</th>\n                        <th class=\"border px-2 py-2\">Scheduled Location</th>\n                        <th class=\"border px-2 py-2\">Resource</th>\n                        <th class=\"border px-2 py-2\">Type</th>\n                        <th class=\"border px-2 py-2\">Status</th>\n                        <th class=\"border px-2 py-2\">Insight</th>\n                        ${ extraHeader }\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateRows(appointments, showButtons)}\n                </tbody>\n            </table>\n        </div>\n    `;\n}\n\n// Build the final modal content\n// Order: Future (top), Today (middle), Past (bottom)\nconst modalContent = `\n    <div class=\"bg-white rounded shadow-lg p-4\" style=\"max-height:80vh; overflow-y:auto;\">\n        <h1 class=\"text-2xl font-bold text-center mb-4\">Appointment Details</h1>\n        \n        <!-- Future Appointments (top, no search) with action buttons -->\n        ${generateSimpleTable('Future Appointments', 'futureAppointmentsTable', futureAppointments, true)}\n        \n        <!-- Today Appointments (middle, no search) with action buttons -->\n        ${generateSimpleTable('Today Appointments', 'todayAppointmentsTable', todayAppointments, true)}\n        \n        <!-- Past Appointments (bottom, search-enabled) without action buttons -->\n        <div class=\"mb-6\">\n            <h2 class=\"text-xl font-semibold text-purple-600 mb-2\">Past Appointments</h2>\n            <input\n                type=\"text\"\n                class=\"search-input border p-1 mb-2 w-full\"\n                placeholder=\"Search Past Appointments...\"\n                onkeyup=\"(function(){\n                    const filterVal = this.value.toLowerCase();\n                    const rows = document.querySelectorAll('#pastAppointmentsTable tbody tr');\n                    if (!filterVal) {\n                        // No search => show only the first 5\n                        let count = 0;\n                        for (let row of rows) {\n                            if (count < 5) {\n                                row.style.display = '';\n                                count++;\n                            } else {\n                                row.style.display = 'none';\n                            }\n                        }\n                    } else {\n                        // Searching => show all that match\n                        for (let row of rows) {\n                            row.style.display = row.innerText.toLowerCase().includes(filterVal) ? '' : 'none';\n                        }\n                    }\n                }).call(this)\"\n            >\n            <table id=\"pastAppointmentsTable\" class=\"table-auto w-full border border-gray-300 rounded-lg\">\n                <thead>\n                    <tr class=\"bg-gray-100 text-left\">\n                        <th class=\"border px-2 py-2\">Appointment Date/Time</th>\n                        <th class=\"border px-2 py-2\">Scheduled Location</th>\n                        <th class=\"border px-2 py-2\">Resource</th>\n                        <th class=\"border px-2 py-2\">Type</th>\n                        <th class=\"border px-2 py-2\">Status</th>\n                        <th class=\"border px-2 py-2\">Insight</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateRows(pastAppointments)}\n                </tbody>\n            </table>\n        </div>\n        <script>\n            // On DOM load, hide rows beyond the first 5 in Past if no search term\n            document.addEventListener('DOMContentLoaded', function(){\n                const rows = document.querySelectorAll('#pastAppointmentsTable tbody tr');\n                let count = 0;\n                for (let row of rows) {\n                    if (count < 5) {\n                        row.style.display = '';\n                        count++;\n                    } else {\n                        row.style.display = 'none';\n                    }\n                }\n            });\n            \n            // Function to handle appointment action buttons\n            function handleAppointmentAction(button, apptDataEncoded, action) {\n                button.disabled = true;\n                button.innerHTML = '<span class=\"loader\"></span> Processing...';\n                const apptDataStr = decodeURIComponent(apptDataEncoded);\n                const apptData = JSON.parse(apptDataStr);\n                \n                // Build URL with all appointment info, patient info, and the action taken\n                const baseUrl = \"https://xl.epicpc.com/webhook/1c213c82-7107-487e-8fce-d16ab27872c2\";\n                let params = new URLSearchParams();\n                params.append('action', action);\n                \n                // Append all appointment information as query parameters\n                for (let key in apptData) {\n                    if (apptData.hasOwnProperty(key)) {\n                        params.append(key, apptData[key]);\n                    }\n                }\n                \n                // Redirect to the webhook URL with query parameters\n                window.location.href = baseUrl + '?' + params.toString();\n            }\n        </script>\n    </div>\n`;\n\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "6c72644e-897b-40a3-84d8-f78326a77fe9",
      "name": "Code14",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2620,
        2200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = 'appointment_modal';\n\n// Get today's date\nconst today = new Date().toISOString().split('T')[0];\n\n// Initialize arrays to store past, today, and future appointments\nlet pastAppointments = [];\nlet todayAppointments = [];\nlet futureAppointments = [];\n\n// Loop through all incoming items\nitems.forEach(item => {\n    const appt = item.json; // Access the JSON data for each item\n    const apptDate = new Date(appt.Appt_DateTime).toISOString().split('T')[0];\n\n    // Categorize appointments into past, today, and future\n    if (apptDate < today) {\n        pastAppointments.push(appt);\n    } else if (apptDate === today) {\n        todayAppointments.push(appt);\n    } else {\n        futureAppointments.push(appt);\n    }\n});\n\n// Sort past appointments in descending order (newest first)\npastAppointments = pastAppointments.sort((a, b) => new Date(b.Appt_DateTime) - new Date(a.Appt_DateTime));\n\n// Sort future appointments in ascending order (nearest first)\nfutureAppointments = futureAppointments.sort((a, b) => new Date(a.Appt_DateTime) - new Date(b.Appt_DateTime));\n\n// Function to generate table rows for appointments\nconst generateAppointmentRows = (appointments) => {\n    if (appointments.length === 0) {\n        return `\n            <tr>\n                <td colspan=\"6\" class=\"text-center font-bold text-red-500\">\n                    No appointments available.\n                </td>\n            </tr>\n        `;\n    }\n    return appointments.map(appt => `\n        <tr>\n            <td class=\"border px-2 py-2\">${new Date(appt.Appt_DateTime).toLocaleString()}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Sched_Location_Descr}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Resource_Descr}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Type_Descr}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Status}</td>\n            <td class=\"border px-2 py-2\">${appt.ApptInsight}</td>\n        </tr>\n    `).join('');\n};\n\n// Generate HTML tables\nconst pastAppointmentsTable = `\n<table class=\"table-fixed w-full border border-gray-300\">\n    <thead>\n        <tr class=\"bg-gray-100 text-left\">\n            <th class=\"border px-2 py-2 w-1/6\">Appointment Date/Time</th>\n            <th class=\"border px-2 py-2 w-1/6\">Scheduled Location</th>\n            <th class=\"border px-2 py-2 w-1/6\">Resource</th>\n            <th class=\"border px-2 py-2 w-1/6\">Type</th>\n            <th class=\"border px-2 py-2 w-1/6\">Status</th>\n            <th class=\"border px-2 py-2 w-1/6\">Insight</th>\n        </tr>\n    </thead>\n    <tbody>\n        ${generateAppointmentRows(pastAppointments)}\n    </tbody>\n</table>\n`;\n\nconst todayAppointmentsTable = `\n<table class=\"table-fixed w-full border border-gray-300\">\n    <thead>\n        <tr class=\"bg-gray-100 text-left\">\n            <th class=\"border px-2 py-2 w-1/6\">Appointment Date/Time</th>\n            <th class=\"border px-2 py-2 w-1/6\">Scheduled Location</th>\n            <th class=\"border px-2 py-2 w-1/6\">Resource</th>\n            <th class=\"border px-2 py-2 w-1/6\">Type</th>\n            <th class=\"border px-2 py-2 w-1/6\">Status</th>\n            <th class=\"border px-2 py-2 w-1/6\">Insight</th>\n        </tr>\n    </thead>\n    <tbody>\n        ${generateAppointmentRows(todayAppointments)}\n    </tbody>\n</table>\n`;\n\nconst futureAppointmentsTable = `\n<table class=\"table-fixed w-full border border-gray-300\">\n    <thead>\n        <tr class=\"bg-gray-100 text-left\">\n            <th class=\"border px-2 py-2 w-1/6\">Appointment Date/Time</th>\n            <th class=\"border px-2 py-2 w-1/6\">Scheduled Location</th>\n            <th class=\"border px-2 py-2 w-1/6\">Resource</th>\n            <th class=\"border px-2 py-2 w-1/6\">Type</th>\n            <th class=\"border px-2 py-2 w-1/6\">Status</th>\n            <th class=\"border px-2 py-2 w-1/6\">Insight</th>\n        </tr>\n    </thead>\n    <tbody>\n        ${generateAppointmentRows(futureAppointments)}\n    </tbody>\n</table>\n`;\n\n// Combine modal content with tables\nconst modalContent = `\n  <div class=\"flex justify-center items-center bg-gray-100 p-6\">\n    <div class=\"bg-white rounded-lg shadow-lg w-full max-w-5xl p-6\">\n        <!-- Modal Header -->\n        <div class=\"table-header flex items-center gap-2 text-xl font-bold text-gray-800 mb-6\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-blue-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <span>Appointment Information</span>\n        </div>\n\n        <!-- Past Appointments -->\n        <div class=\"text-lg font-semibold text-gray-700 mb-4 mt-8\">Past Appointments</div>\n        <div class=\"past-appointments border-t border-gray-200 py-4\">\n            <div style=\"max-height: 20rem; min-height: 10rem; overflow-y: auto;\">\n              ${pastAppointmentsTable}\n            </div>\n        </div>\n\n        <!-- Today's Appointments -->\n        <div class=\"text-lg font-semibold text-green-700 mt-12 mb-4\">Today's Appointments</div>\n        <div class=\"today-appointments border-t border-gray-200 py-4\">\n            <div style=\"max-height: 20rem; min-height: 10rem; overflow-y: auto;\">\n              ${todayAppointmentsTable}\n            </div>\n        </div>\n\n        <!-- Future Appointments -->\n        <div class=\"text-lg font-semibold text-purple-700 mt-12 mb-4\">Future Appointments</div>\n        <div class=\"future-appointments border-t border-gray-200 py-4\">\n            <div style=\"max-height: 20rem; min-height: 10rem; overflow-y: auto;\">\n              ${futureAppointmentsTable}\n            </div>\n        </div>\n    </div>\n  </div>\n`;\n\n// Return the modal ID and content\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "622878aa-f209-47d8-bbe7-df3d57ab0ae8",
      "name": "Code15",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3680,
        2180
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = 'appointment_modal';\n\n// Get today's date\nconst today = new Date();\n\n// Initialize arrays to store past, today's, and future appointments\nlet pastAppointments = [];\nlet todayAppointments = [];\nlet futureAppointments = [];\n\n// Loop through all incoming items\nitems.forEach(item => {\n    const appt = item.json; // Access the JSON data for each item\n    const apptDate = new Date(appt.Appt_DateTime).toISOString().split('T')[0];\n\n    // Categorize appointments\n    if (apptDate < today.toISOString().split('T')[0]) {\n        pastAppointments.push(appt);\n    } else if (apptDate === today.toISOString().split('T')[0]) {\n        todayAppointments.push(appt);\n    } else {\n        futureAppointments.push(appt);\n    }\n});\n\n// Sort past appointments in descending order (newest first)\npastAppointments.sort((a, b) => new Date(b.Appt_DateTime) - new Date(a.Appt_DateTime));\n\n// Sort future appointments in ascending order (nearest first)\nfutureAppointments.sort((a, b) => new Date(a.Appt_DateTime) - new Date(b.Appt_DateTime));\n\n// Function to generate table rows for appointments\nconst generateAppointmentRows = (appointments) => {\n    if (appointments.length === 0) {\n        return `\n            <tr>\n                <td colspan=\"6\" class=\"text-center font-bold text-red-500\">\n                    No appointments available.\n                </td>\n            </tr>\n        `;\n    }\n    return appointments.map(appt => `\n        <tr>\n            <td class=\"border px-2 py-2\">${new Date(appt.Appt_DateTime).toLocaleString()}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Sched_Location_Descr}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Resource_Descr}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Type_Descr}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Status}</td>\n            <td class=\"border px-2 py-2\">${appt.ApptInsight}</td>\n        </tr>\n    `).join('');\n};\n\n// Generate HTML tables\nconst createTable = (title, appointments) => `\n    <div class=\"mb-6\">\n        <h2 class=\"text-2xl font-semibold text-purple-600 mb-2 text-center\">${title}</h2>\n        <div class=\"overflow-auto border border-gray-300 rounded-lg\">\n            <table class=\"table-auto w-full border-collapse border border-gray-300\">\n                <thead class=\"bg-gray-200\">\n                    <tr>\n                        <th class=\"border border-gray-300 px-2 py-2\">Appointment Date/Time</th>\n                        <th class=\"border border-gray-300 px-2 py-2\">Scheduled Location</th>\n                        <th class=\"border border-gray-300 px-2 py-2\">Resource</th>\n                        <th class=\"border border-gray-300 px-2 py-2\">Type</th>\n                        <th class=\"border border-gray-300 px-2 py-2\">Status</th>\n                        <th class=\"border border-gray-300 px-2 py-2\">Insight</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateAppointmentRows(appointments)}\n                </tbody>\n            </table>\n        </div>\n    </div>\n`;\n\n// Combine modal content with tables\nconst modalContent = `\n  <div class=\"flex justify-center items-center bg-gray-100 p-6\">\n    <div class=\"bg-white rounded-lg shadow-lg w-full max-w-5xl p-6\" style=\"max-height: 90vh; overflow-y: auto;\">\n        <!-- Modal Header -->\n        <div class=\"mb-6\">\n            <h1 class=\"text-3xl font-bold text-gray-800 text-center mb-6\">\n                Appointment Details\n            </h1>\n        </div>\n        <!-- Tables -->\n        ${createTable('Past Appointments', pastAppointments)}\n        ${createTable(\"Today's Appointments\", todayAppointments)}\n        ${createTable('Future Appointments', futureAppointments)}\n    </div>\n  </div>\n`;\n\n// Return the modal ID and content\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "47e60291-e2f4-47ee-9eda-8faa7cc8c1d9",
      "name": "Code16",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3520,
        2180
      ]
    },
    {
      "parameters": {
        "content": "# Old",
        "height": 391,
        "width": 531,
        "color": 7
      },
      "id": "d220f68f-2d57-4fbc-ae74-fae3cbfc5b1d",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3480,
        2040
      ]
    },
    {
      "parameters": {
        "path": "6831e3d7-75df-4c33-8ab0-bc3dc35b2481",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1780,
        2880
      ],
      "id": "cf687221-c82f-4164-8e67-b305d2b299d9",
      "name": "Webhook7",
      "webhookId": "6831e3d7-75df-4c33-8ab0-bc3dc35b2481"
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectURL": "=https://xl.epicpc.com/webhook/b4264e0e-085f-49c0-9471-1009eafa4ce01?fullName={{ $json.query.dem_firstname }}+{{ $json.query.dem_lastname }}&patientId={{ $json.query.mrn }}&reference={{ $json.query.singlesignontoken }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2080,
        2760
      ],
      "id": "d1391fd7-d729-4a24-8a8a-9b7b3569239c",
      "name": "Respond to Webhook23"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Full Screen iFrame with Header</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      overflow: hidden;\n      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    }\n    header {\n      width: 100%;\n      height: 60px;\n      background-color: #3498db;\n      display: flex;\n      align-items: center;\n      padding: 0 20px;\n      box-sizing: border-box;\n    }\n    header button {\n      background: linear-gradient(45deg, #f39c12, #e67e22);\n      border: none;\n      border-radius: 5px;\n      color: #fff;\n      padding: 10px 20px;\n      font-size: 16px;\n      cursor: pointer;\n      transition: background 0.3s ease, transform 0.2s ease;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n    }\n    header button:hover {\n      background: linear-gradient(45deg, #e67e22, #f39c12);\n      transform: scale(1.05);\n    }\n    iframe {\n      border: none;\n      width: 100%;\n      height: calc(100% - 60px); /* Adjusted for the header height */\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <button onclick=\"history.back();\">Back to PHP</button>\n  </header>\n  <iframe src=\"https://xl.epicpc.com/webhook/b4264e0e-085f-49c0-9471-1009eafa4ce01?fullName={{ $json.query.dem_firstname }}+{{ $json.query.dem_lastname }}&patientId={{ $json.query.mrn }}&reference={{ $json.query.singlesignontoken }}\" allowfullscreen></iframe>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2160,
        3160
      ],
      "id": "d8216d84-bb34-4c73-9407-fabec44f6430",
      "name": "Respond to Webhook24"
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access fields from the 'Edit Fields' node, excluding SingleSignOnToken and SessionToken\nconst fields = $node[\"Microsoft SQL2\"].json;\nconst params = Object.entries(fields)\n    .filter(([key]) => key !== \"SingleSignOnToken\" && key !== \"SessionToken\")\n    .map(([key, value]) => `${key.toLowerCase()}=${encodeURIComponent(value)}`)\n    .join('&');\n\nincomingData.forEach((item) => {\n    for (const [key, url] of Object.entries(item.json)) {\n        // Create the card HTML with data-url attribute, including all available params except tokens\n        const fetchScript = `\n            <section class=\"card\" data-modal-id=\"modal${key}\" data-url=\"${url}?${params}\">\n                <div class=\"card-header\">\n                    <span class=\"card-title\">${key}</span>\n                </div>\n                <p>Click to view more details about ${key}</p>\n            </section>\n        `;\n        fetchScripts.push(fetchScript);\n\n        // Create the modal HTML\n        const modalScript = `\n            <div id=\"modal${key}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <h2>${key} Details</h2>\n                    <div class=\"modal-body\" id=\"modalBody${key}\">\n                        <!-- This will be populated with data fetched from the API -->\n                    </div>\n                    <button class=\"close-button\" data-modal-id=\"modal${key}\">Close</button>\n                </div>\n            </div>\n        `;\n        modalScripts.push(modalScript);\n    }\n});\n\n// Return the combined HTML for both cards and modals as a string\nreturn {\n    html: fetchScripts.join('') + modalScripts.join('')\n};\n"
      },
      "id": "9b240726-964d-4e2e-8ea0-81f98b651408",
      "name": "Code9",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        840
      ]
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access fields from the 'Edit Fields' node, excluding SingleSignOnToken and SessionToken\nconst fields = $node[\"Microsoft SQL2\"].json;\nconst params = Object.entries(fields)\n    .filter(([key]) => key !== \"SingleSignOnToken\" && key !== \"SessionToken\")\n    .map(([key, value]) => `${key.toLowerCase()}=${encodeURIComponent(value)}`)\n    .join('&');\n\nincomingData.forEach((item) => {\n    for (const [key, url] of Object.entries(item.json)) {\n        // Check if the key includes '{newtab}' and remove it for display\n        const isNewTab = key.includes('{newtab}');\n        const cleanKey = key.replace('{newtab}', '').trim();\n        const fullUrl = `${url}?${params}`;\n        \n        if (isNewTab) {\n            // Create a card wrapped in an anchor that opens in a new tab\n            const fetchScript = `\n                <a href=\"${fullUrl}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"card-link\">\n                    <section class=\"card\">\n                        <div class=\"card-header\">\n                            <span class=\"card-title\">${cleanKey}</span>\n                        </div>\n                        <p>Click to view more details about ${cleanKey}</p>\n                    </section>\n                </a>\n            `;\n            fetchScripts.push(fetchScript);\n        } else {\n            // Create a card that will trigger a modal in the same page\n            const fetchScript = `\n                <section class=\"card\" data-modal-id=\"modal${cleanKey}\" data-url=\"${fullUrl}\">\n                    <div class=\"card-header\">\n                        <span class=\"card-title\">${cleanKey}</span>\n                    </div>\n                    <p>Click to view more details about ${cleanKey}</p>\n                </section>\n            `;\n            fetchScripts.push(fetchScript);\n\n            // Create the modal HTML using the cleaned key\n            const modalScript = `\n                <div id=\"modal${cleanKey}\" class=\"modal\">\n                    <div class=\"modal-content\">\n                        <h2>${cleanKey} Details</h2>\n                        <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                            <!-- This will be populated with data fetched from the API -->\n                        </div>\n                        <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n                    </div>\n                </div>\n            `;\n            modalScripts.push(modalScript);\n        }\n    }\n});\n\n// Return the combined HTML for both cards and modals as a string\nreturn {\n    html: fetchScripts.join('') + modalScripts.join('')\n};\n"
      },
      "id": "f553d4ee-cf10-4506-8a99-1ba9556a48a1",
      "name": "Code17",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -180,
        900
      ]
    },
    {
      "parameters": {
        "path": "6438b33a-a95c-4fa6-bf77-f1e5eba6c04c",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1800,
        3160
      ],
      "id": "ab37fe0f-67d6-495d-9e4c-304a6813989a",
      "name": "Webhook8",
      "webhookId": "6438b33a-a95c-4fa6-bf77-f1e5eba6c04c"
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access fields from the 'Edit Fields' node, now including SingleSignOnToken but excluding SessionToken\nconst fields = $node[\"Microsoft SQL2\"].json;\nconst fieldParams = Object.entries(fields)\n    .filter(([key]) => key !== \"SessionToken\") // Include SSOToken now!\n    .map(([key, value]) => `${key.toLowerCase()}=${encodeURIComponent(value)}`)\n    .join('&');\n\nincomingData.forEach((item) => {\n    for (const [key, url] of Object.entries(item.json)) {\n        // Check if the key includes '{newtab}' and remove it for display\n        const isNewTab = key.includes('{newtab}');\n        const cleanKey = key.replace('{newtab}', '').trim();\n        // Build the base URL using the fields parameters\n        const baseUrl = `${url}?${fieldParams}`;\n\n        if (isNewTab) {\n            // Create a card wrapped in an anchor that opens in a new tab.\n            // Store the base URL in a data attribute for later update with the current query params.\n            const fetchScript = `\n                <a href=\"${baseUrl}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n                    <section class=\"card\">\n                        <div class=\"card-header\">\n                            <span class=\"card-title\">${cleanKey}</span>\n                        </div>\n                        <p>Click to view more details about ${cleanKey}</p>\n                    </section>\n                </a>\n            `;\n            fetchScripts.push(fetchScript);\n        } else {\n            // Create a card that will trigger a modal in the same page.\n            // Again, store the base URL so that the current query params can be appended.\n            const fetchScript = `\n                <section class=\"card\" data-modal-id=\"modal${cleanKey}\" data-url=\"${baseUrl}\" data-base-url=\"${baseUrl}\">\n                    <div class=\"card-header\">\n                        <span class=\"card-title\">${cleanKey}</span>\n                    </div>\n                    <p>Click to view more details about ${cleanKey}</p>\n                </section>\n            `;\n            fetchScripts.push(fetchScript);\n\n            // Create the modal HTML using the cleaned key\n            const modalScript = `\n                <div id=\"modal${cleanKey}\" class=\"modal\">\n                    <div class=\"modal-content\">\n                        <h2>${cleanKey} Details</h2>\n                        <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                            <!-- This will be populated with data fetched from the API -->\n                        </div>\n                        <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n                    </div>\n                </div>\n            `;\n            modalScripts.push(modalScript);\n        }\n    }\n});\n\n// Append a script that, on page load, reads the current query parameters and updates the links\nconst script = `\n<script>\n  (function() {\n    // Remove the leading '?' from window.location.search\n    const currentParams = window.location.search.substring(1);\n    if (currentParams) {\n      const appendParams = (baseUrl) => {\n        // If the base URL already has parameters, append with '&', otherwise start with '?'\n        return baseUrl.indexOf('?') > -1 ? baseUrl + '&' + currentParams : baseUrl + '?' + currentParams;\n      };\n\n      // Update all anchor tags that have a data-base-url attribute\n      document.querySelectorAll('a.card-link[data-base-url]').forEach(anchor => {\n        const baseUrl = anchor.getAttribute('data-base-url');\n        anchor.href = appendParams(baseUrl);\n      });\n\n      // Update all card sections (for modals) that have a data-base-url attribute\n      document.querySelectorAll('section.card[data-base-url]').forEach(section => {\n        const baseUrl = section.getAttribute('data-base-url');\n        section.setAttribute('data-url', appendParams(baseUrl));\n      });\n    }\n  })();\n</script>\n`;\n\nreturn {\n    html: fetchScripts.join('') + modalScripts.join('') + script\n};\n"
      },
      "id": "eea0f7d8-fd90-41e3-9218-80e8b75bf278",
      "name": "Code18",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -260,
        960
      ]
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Helper function to build a valid base URL with field parameters\nconst buildBaseUrl = (url, params) => {\n  return url.includes('?') ? `${url}&${params}` : `${url}?${params}`;\n};\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access fields from the 'Microsoft SQL2' node; include SingleSignOnToken and exclude SessionToken\nconst fields = $node[\"Microsoft SQL2\"].json;\nconst fieldParams = Object.entries(fields)\n  .filter(([key]) => key !== \"SessionToken\")\n  .map(([key, value]) => `${key.toLowerCase()}=${encodeURIComponent(value)}`)\n  .join('&');\n\nincomingData.forEach((item) => {\n  for (const [key, url] of Object.entries(item.json)) {\n    // Check for markers in the key: {newtab}, {iframe}, and {redirect}\n    const isNewTab = key.includes('{newtab}');\n    const isIFrame = key.includes('{iframe}');\n    const isRedirect = key.includes('{redirect}');\n    // Remove all markers for display\n    const cleanKey = key.replace('{newtab}', '')\n                        .replace('{iframe}', '')\n                        .replace('{redirect}', '')\n                        .trim();\n    // Build the base URL with field parameters using the helper\n    const baseUrl = buildBaseUrl(url, fieldParams);\n    \n    if (isRedirect) {\n      // Render a card that, when clicked, redirects in the same tab\n      const fetchScript = `\n        <a href=\"${baseUrl}\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              <span class=\"card-title\">${cleanKey}</span>\n            </div>\n            <p>Click to view more details about ${cleanKey}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n      // No modal is created for redirects.\n    } else if (isNewTab) {\n      // Render a card wrapped in an anchor that opens in a new tab\n      const fetchScript = `\n        <a href=\"${baseUrl}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              <span class=\"card-title\">${cleanKey}</span>\n            </div>\n            <p>Click to view more details about ${cleanKey}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n      // No modal is created for new tab links.\n    } else {\n      // Render a card that triggers a modal popup on the same page\n      const fetchScript = `\n        <section class=\"card\" data-modal-id=\"modal${cleanKey}\" data-url=\"${baseUrl}\" data-base-url=\"${baseUrl}\">\n          <div class=\"card-header\">\n            <span class=\"card-title\">${cleanKey}</span>\n          </div>\n          <p>Click to view more details about ${cleanKey}</p>\n        </section>\n      `;\n      fetchScripts.push(fetchScript);\n      \n      // Create modal HTML based on whether {iframe} is present in the title\n      if (isIFrame) {\n        // Modal content will render an iframe\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <iframe data-base-url=\"${baseUrl}\" style=\"width:100%; height:500px; border:none;\"></iframe>\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      } else {\n        // Modal content will be populated dynamically (or via other means)\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <!-- This will be populated with data fetched from the API -->\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      }\n    }\n  }\n});\n\n// Inline script to update URLs by appending any current query parameters\nconst script = `\n<script>\n  window.addEventListener('DOMContentLoaded', function() {\n    // Get the current URL's query string (without the leading '?')\n    const currentParams = window.location.search.substring(1);\n    const appendParams = (baseUrl) => {\n      return currentParams ? (baseUrl.indexOf('?') > -1 ? baseUrl + '&' + currentParams : baseUrl + '?' + currentParams) : baseUrl;\n    };\n\n    // Update anchor tags (for new tab and redirect links)\n    document.querySelectorAll('a.card-link[data-base-url]').forEach(anchor => {\n      const baseUrl = anchor.getAttribute('data-base-url');\n      anchor.href = appendParams(baseUrl);\n    });\n\n    // Update card sections (for modal triggers)\n    document.querySelectorAll('section.card[data-base-url]').forEach(section => {\n      const baseUrl = section.getAttribute('data-base-url');\n      section.setAttribute('data-url', appendParams(baseUrl));\n    });\n      \n    // Update iframe elements (for modal iframes)\n    document.querySelectorAll('iframe[data-base-url]').forEach(iframe => {\n      const baseUrl = iframe.getAttribute('data-base-url');\n      iframe.src = appendParams(baseUrl);\n    });\n  });\n</script>\n`;\n\nreturn {\n  html: fetchScripts.join('') + modalScripts.join('') + script\n};\n"
      },
      "id": "7b575cce-e43d-48a1-8015-3dbc8b84ed88",
      "name": "Code19",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        1020
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Modal HTML\nconst modalId = 'appointment_modal';\n\n// Get today's date\nconst today = new Date().toISOString().split('T')[0];\n\n// Initialize arrays to store past, today's, and future appointments\nlet pastAppointments = [];\nlet todayAppointments = [];\nlet futureAppointments = [];\n\n// Loop through all incoming items\nitems.forEach(item => {\n    const appt = item.json; // Access the JSON data for each item\n    const apptDate = new Date(appt.Appt_DateTime).toISOString().split('T')[0];\n\n    // Categorize appointments into past, today, and future\n    if (apptDate < today) {\n        pastAppointments.push(appt);\n    } else if (apptDate === today) {\n        todayAppointments.push(appt);\n    } else {\n        futureAppointments.push(appt);\n    }\n});\n\n// Sort past appointments in descending order (newest first)\npastAppointments = pastAppointments.sort((a, b) => new Date(b.Appt_DateTime) - new Date(a.Appt_DateTime));\n\n// Sort future appointments in ascending order (nearest first)\nfutureAppointments = futureAppointments.sort((a, b) => new Date(a.Appt_DateTime) - new Date(b.Appt_DateTime));\n\n// Function to generate table rows for appointments\nconst generateAppointmentRows = (appointments) => {\n    if (appointments.length === 0) {\n        return `\n            <tr>\n                <td colspan=\"6\" class=\"text-center font-bold text-red-500\">\n                    No appointments available.\n                </td>\n            </tr>\n        `;\n    }\n    return appointments.map(appt => `\n        <tr>\n            <td class=\"border px-2 py-2\">${new Date(appt.Appt_DateTime).toLocaleString()}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Sched_Location_Descr}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Resource_Descr}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Type_Descr}</td>\n            <td class=\"border px-2 py-2\">${appt.Appt_Status}</td>\n            <td class=\"border px-2 py-2\">${appt.ApptInsight}</td>\n        </tr>\n    `).join('');\n};\n\n// Generate HTML tables with a scrollable div\nconst generateScrollableTable = (title, appointments) => `\n    <div class=\"mb-8\">\n        <h2 class=\"text-xl font-semibold text-center text-purple-600\">${title}</h2>\n        <div class=\"overflow-auto border border-gray-300 rounded-lg\" style=\"max-height: 15rem;\">\n            <table class=\"table-fixed w-full border-collapse\">\n                <thead>\n                    <tr class=\"bg-gray-100 text-left\">\n                        <th class=\"border px-2 py-2 w-1/6\">Appointment Date/Time</th>\n                        <th class=\"border px-2 py-2 w-1/6\">Scheduled Location</th>\n                        <th class=\"border px-2 py-2 w-1/6\">Resource</th>\n                        <th class=\"border px-2 py-2 w-1/6\">Type</th>\n                        <th class=\"border px-2 py-2 w-1/6\">Status</th>\n                        <th class=\"border px-2 py-2 w-1/6\">Insight</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateAppointmentRows(appointments)}\n                </tbody>\n            </table>\n        </div>\n    </div>\n`;\n\n// Combine modal content with tables\nconst modalContent = `\n  <div class=\"flex justify-center items-center bg-gray-100 p-6\">\n    <div class=\"bg-white rounded-lg shadow-lg w-full max-w-5xl p-6\">\n        <h1 class=\"text-3xl font-bold text-center mb-6\">Appointment Details</h1>\n        ${generateScrollableTable('Past Appointments', pastAppointments)}\n        ${generateScrollableTable(\"Today's Appointments\", todayAppointments)}\n        ${generateScrollableTable('Future Appointments', futureAppointments)}\n    </div>\n  </div>\n`;\n\n// Return the modal ID and content\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "b5d3aa3f-3300-44be-9747-c314e86897e1",
      "name": "Code20",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3820,
        2180
      ]
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Helper function to build a valid base URL with field parameters\nconst buildBaseUrl = (url, params) => {\n  return url.includes('?') ? `${url}&${params}` : `${url}?${params}`;\n};\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access fields from the 'Microsoft SQL2' node; include SingleSignOnToken and exclude SessionToken\nconst fields = $node[\"Microsoft SQL2\"].json;\nconst fieldParams = Object.entries(fields)\n  .filter(([key]) => key !== \"SessionToken\")\n  .map(([key, value]) => `${key.toLowerCase()}=${encodeURIComponent(value)}`)\n  .join('&');\n\nincomingData.forEach((item) => {\n  for (const [key, url] of Object.entries(item.json)) {\n    // Check for markers in the key: {newtab}, {iframe}, {redirect}, and {color:...}\n    const isNewTab = key.includes('{newtab}');\n    const isIFrame = key.includes('{iframe}');\n    const isRedirect = key.includes('{redirect}');\n    \n    // Extract color marker if present (e.g. {color:red} or {color:#ff0000})\n    const colorMatch = key.match(/\\{color:([^}]+)\\}/);\n    const color = colorMatch ? colorMatch[1] : null;\n    \n    // Remove all markers for display\n    const cleanKey = key\n      .replace('{newtab}', '')\n      .replace('{iframe}', '')\n      .replace('{redirect}', '')\n      .replace(/\\{color:[^}]+\\}/, '')\n      .trim();\n      \n    // Build the base URL with field parameters using the helper\n    const baseUrl = buildBaseUrl(url, fieldParams);\n    \n    // Create a span for the card header title with an inline style if a color was provided\n    const cardTitleSpan = `<span class=\"card-title\"${color ? ' style=\"color:' + color + ';\"' : ''}>${cleanKey}</span>`;\n    \n    if (isRedirect) {\n      // Render a card that, when clicked, immediately redirects (in the same tab)\n      const fetchScript = `\n        <a href=\"${baseUrl}\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              ${cardTitleSpan}\n            </div>\n            <p>Click to view more details about ${cleanKey}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n      // No modal is created for redirects.\n    } else if (isNewTab) {\n      // Render a card wrapped in an anchor that opens in a new tab\n      const fetchScript = `\n        <a href=\"${baseUrl}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              ${cardTitleSpan}\n            </div>\n            <p>Click to view more details about ${cleanKey}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n      // No modal is created for new tab links.\n    } else {\n      // Render a card that triggers a modal popup on the same page\n      const fetchScript = `\n        <section class=\"card\" data-modal-id=\"modal${cleanKey}\" data-url=\"${baseUrl}\" data-base-url=\"${baseUrl}\">\n          <div class=\"card-header\">\n            ${cardTitleSpan}\n          </div>\n          <p>Click to view more details about ${cleanKey}</p>\n        </section>\n      `;\n      fetchScripts.push(fetchScript);\n      \n      // Create modal HTML based on whether {iframe} is present in the title\n      if (isIFrame) {\n        // Modal content will render an iframe\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <iframe data-base-url=\"${baseUrl}\" style=\"width:100%; height:500px; border:none;\"></iframe>\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      } else {\n        // Modal content will be populated dynamically (or via other means)\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <!-- This will be populated with data fetched from the API -->\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      }\n    }\n  }\n});\n\n// Inline script to update URLs by appending any current query parameters\nconst script = `\n<script>\n  window.addEventListener('DOMContentLoaded', function() {\n    // Get the current URL's query string (without the leading '?')\n    const currentParams = window.location.search.substring(1);\n    const appendParams = (baseUrl) => {\n      return currentParams ? (baseUrl.indexOf('?') > -1 ? baseUrl + '&' + currentParams : baseUrl + '?' + currentParams) : baseUrl;\n    };\n\n    // Update anchor tags (for new tab and redirect links)\n    document.querySelectorAll('a.card-link[data-base-url]').forEach(anchor => {\n      const baseUrl = anchor.getAttribute('data-base-url');\n      anchor.href = appendParams(baseUrl);\n    });\n\n    // Update card sections (for modal triggers)\n    document.querySelectorAll('section.card[data-base-url]').forEach(section => {\n      const baseUrl = section.getAttribute('data-base-url');\n      section.setAttribute('data-url', appendParams(baseUrl));\n    });\n      \n    // Update iframe elements (for modal iframes)\n    document.querySelectorAll('iframe[data-base-url]').forEach(iframe => {\n      const baseUrl = iframe.getAttribute('data-base-url');\n      iframe.src = appendParams(baseUrl);\n    });\n  });\n</script>\n`;\n\nreturn {\n  html: fetchScripts.join('') + modalScripts.join('') + script\n};\n"
      },
      "id": "051b211a-edc9-4d2b-b057-e7e05f171148",
      "name": "Code21",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -380,
        1080
      ]
    },
    {
      "parameters": {
        "jsCode": "// Minimal Appointment Modal Code Node\nconst modalId = 'appointment_modal';\n\n// Today's date in YYYY-MM-DD format\nconst today = new Date().toISOString().split('T')[0];\n\n// Separate arrays for Future, Today, Past\nlet futureAppointments = [];\nlet todayAppointments = [];\nlet pastAppointments = [];\n\n// Classify appointments\nitems.forEach(item => {\n    const appt = item.json;\n    const apptDate = new Date(appt.Appt_DateTime).toISOString().split('T')[0];\n    if (apptDate < today) {\n        pastAppointments.push(appt);\n    } else if (apptDate === today) {\n        todayAppointments.push(appt);\n    } else {\n        futureAppointments.push(appt);\n    }\n});\n\n// Sort Past (desc) & Future (asc)\npastAppointments.sort((a, b) => new Date(b.Appt_DateTime) - new Date(a.Appt_DateTime));\nfutureAppointments.sort((a, b) => new Date(a.Appt_DateTime) - new Date(b.Appt_DateTime));\n\n// Helper to generate table rows\nfunction generateRows(appointments) {\n    if (!appointments.length) {\n        return \n            <tr>\n                <td colspan=\"6\" class=\"text-center font-bold text-red-500\">\n                    No appointments available.\n                </td>\n            </tr>\n        ;\n    }\n    return appointments.map(appt => {\n        const dt = new Date(appt.Appt_DateTime).toLocaleString();\n        return \n            <tr>\n                <td class=\"border px-2 py-2\">${dt}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Sched_Location_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Resource_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Type_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Status}</td>\n                <td class=\"border px-2 py-2\">${appt.ApptInsight}</td>\n            </tr>\n        ;\n    }).join('');\n}\n\n// Function to generate a table (no search) for Future & Today\nfunction generateSimpleTable(title, tableId, appointments) {\n    return \n        <div class=\"mb-6\">\n            <h2 class=\"text-xl font-semibold text-purple-600 mb-2\">${title}</h2>\n            <table id=\"${tableId}\" class=\"table-auto w-full border border-gray-300 rounded-lg\">\n                <thead>\n                    <tr class=\"bg-gray-100 text-left\">\n                        <th class=\"border px-2 py-2\">Appointment Date/Time</th>\n                        <th class=\"border px-2 py-2\">Scheduled Location</th>\n                        <th class=\"border px-2 py-2\">Resource</th>\n                        <th class=\"border px-2 py-2\">Type</th>\n                        <th class=\"border px-2 py-2\">Status</th>\n                        <th class=\"border px-2 py-2\">Insight</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateRows(appointments)}\n                </tbody>\n            </table>\n        </div>\n    ;\n}\n\n// Build the final modal content\n// Order: Future (top), Today (middle), Past (bottom)\n// Only Past has a search input, which shows 5 if empty, or all matches if searching.\nconst modalContent = \n    <div class=\"bg-white rounded shadow-lg p-4\" style=\"max-height:80vh; overflow-y:auto;\">\n        <h1 class=\"text-2xl font-bold text-center mb-4\">Appointment Details</h1>\n        \n        <!-- Future (top, no search) -->\n        ${generateSimpleTable('Future Appointments', 'futureAppointmentsTable', futureAppointments)}\n        \n        <!-- Today (middle, no search) -->\n        ${generateSimpleTable('Today Appointments', 'todayAppointmentsTable', todayAppointments)}\n        \n        <!-- Past (bottom, search-enabled) -->\n        <div class=\"mb-6\">\n            <h2 class=\"text-xl font-semibold text-purple-600 mb-2\">Past Appointments</h2>\n            <input\n                type=\"text\"\n                class=\"search-input border p-1 mb-2 w-full\"\n                placeholder=\"Search Past Appointments...\"\n                onkeyup=\"(function(){\n                    const filterVal = this.value.toLowerCase();\n                    const rows = document.querySelectorAll('#pastAppointmentsTable tbody tr');\n                    if (!filterVal) {\n                        // No search => show only the first 5\n                        let count = 0;\n                        for (let row of rows) {\n                            if (count < 5) {\n                                row.style.display = '';\n                                count++;\n                            } else {\n                                row.style.display = 'none';\n                            }\n                        }\n                    } else {\n                        // Searching => show all that match\n                        for (let row of rows) {\n                            row.style.display = row.innerText.toLowerCase().includes(filterVal) ? '' : 'none';\n                        }\n                    }\n                }).call(this)\"\n            >\n            <table id=\"pastAppointmentsTable\" class=\"table-auto w-full border border-gray-300 rounded-lg\">\n                <thead>\n                    <tr class=\"bg-gray-100 text-left\">\n                        <th class=\"border px-2 py-2\">Appointment Date/Time</th>\n                        <th class=\"border px-2 py-2\">Scheduled Location</th>\n                        <th class=\"border px-2 py-2\">Resource</th>\n                        <th class=\"border px-2 py-2\">Type</th>\n                        <th class=\"border px-2 py-2\">Status</th>\n                        <th class=\"border px-2 py-2\">Insight</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateRows(pastAppointments)}\n                </tbody>\n            </table>\n        </div>\n        <script>\n            // On DOM load, hide rows beyond the first 5 in Past if no search term\n            document.addEventListener('DOMContentLoaded', function(){\n                const rows = document.querySelectorAll('#pastAppointmentsTable tbody tr');\n                let count = 0;\n                for (let row of rows) {\n                    if (count < 5) {\n                        row.style.display = '';\n                        count++;\n                    } else {\n                        row.style.display = 'none';\n                    }\n                }\n            });\n        </script>\n    </div>\n;\n\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};"
      },
      "id": "ab167b4c-638f-41b6-8ef8-96d4d8e6df3a",
      "name": "Code22",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2620,
        2060
      ]
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Helper function to build a valid base URL with field parameters\nconst buildBaseUrl = (url, params) => {\n  return url.includes('?') ? `${url}&${params}` : `${url}?${params}`;\n};\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access fields from the 'Microsoft SQL2' node; include SingleSignOnToken and exclude SessionToken\nconst fields = $node[\"Microsoft SQL2\"].json;\nconst fieldParams = Object.entries(fields)\n  .filter(([key]) => key !== \"SessionToken\")\n  .map(([key, value]) => `${key.toLowerCase()}=${encodeURIComponent(value)}`)\n  .join('&');\n\nincomingData.forEach((item) => {\n  for (const [key, url] of Object.entries(item.json)) {\n    // Check for markers in the key: {newtab}, {iframe}, {redirect}, and {color:...}\n    const isNewTab = key.includes('{newtab}');\n    const isIFrame = key.includes('{iframe}');\n    const isRedirect = key.includes('{redirect}');\n    \n    // Extract color marker if present (e.g. {color:red} or {color:#ff0000})\n    const colorMatch = key.match(/\\{color:([^}]+)\\}/);\n    const color = colorMatch ? colorMatch[1] : null;\n    \n    // Remove all markers for display\n    const cleanKey = key\n      .replace('{newtab}', '')\n      .replace('{iframe}', '')\n      .replace('{redirect}', '')\n      .replace(/\\{color:[^}]+\\}/, '')\n      .trim();\n      \n    // Build the base URL with field parameters using the helper\n    const baseUrl = buildBaseUrl(url, fieldParams);\n    \n    // Create a span for the card header title with an inline style if a color was provided\n    const cardTitleSpan = `<span class=\"card-title\"${color ? ' style=\"color:' + color + ';\"' : ''}>${cleanKey}</span>`;\n    \n    if (isRedirect) {\n      // Render a card that, when clicked, immediately redirects (in the same tab)\n      const fetchScript = `\n        <a href=\"${baseUrl}\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              ${cardTitleSpan}\n            </div>\n            <p>Click to view more details about ${cleanKey}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n      // No modal is created for redirects.\n    } else if (isNewTab) {\n      // Render a card wrapped in an anchor that opens in a new tab\n      const fetchScript = `\n        <a href=\"${baseUrl}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              ${cardTitleSpan}\n            </div>\n            <p>Click to view more details about ${cleanKey}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n      // No modal is created for new tab links.\n    } else {\n      // Render a card that triggers a modal popup on the same page\n      const fetchScript = `\n        <section class=\"card\" data-modal-id=\"modal${cleanKey}\" data-url=\"${baseUrl}\" data-base-url=\"${baseUrl}\">\n          <div class=\"card-header\">\n            ${cardTitleSpan}\n          </div>\n          <p>Click to view more details about ${cleanKey}</p>\n        </section>\n      `;\n      fetchScripts.push(fetchScript);\n      \n      // Create modal HTML based on whether {iframe} is present in the title\n      if (isIFrame) {\n        // Modal content will render an iframe\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <iframe data-base-url=\"${baseUrl}\" style=\"width:100%; height:500px; border:none;\"></iframe>\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      } else {\n        // Modal content will be populated dynamically (or via other means)\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <!-- This will be populated with data fetched from the API -->\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      }\n    }\n  }\n});\n\n// Inline script to update URLs by appending any current query parameters and enable modal functionality\nconst script = `\n<script>\n  window.addEventListener('DOMContentLoaded', function() {\n    // Get the current URL's query string (without the leading '?')\n    const currentParams = window.location.search.substring(1);\n    const appendParams = (baseUrl) => {\n      return currentParams ? (baseUrl.indexOf('?') > -1 ? baseUrl + '&' + currentParams : baseUrl + '?' + currentParams) : baseUrl;\n    };\n\n    // Update anchor tags (for new tab and redirect links)\n    document.querySelectorAll('a.card-link[data-base-url]').forEach(anchor => {\n      const baseUrl = anchor.getAttribute('data-base-url');\n      anchor.href = appendParams(baseUrl);\n    });\n\n    // Update card sections (for modal triggers)\n    document.querySelectorAll('section.card[data-base-url]').forEach(section => {\n      const baseUrl = section.getAttribute('data-base-url');\n      section.setAttribute('data-url', appendParams(baseUrl));\n    });\n      \n    // Update iframe elements (for modal iframes)\n    document.querySelectorAll('iframe[data-base-url]').forEach(iframe => {\n      const baseUrl = iframe.getAttribute('data-base-url');\n      iframe.src = appendParams(baseUrl);\n    });\n    \n    // Enable modal functionality: when a card is clicked, display the corresponding modal\n    document.querySelectorAll('.card[data-modal-id]').forEach(card => {\n      card.addEventListener('click', function() {\n        const modalId = card.getAttribute('data-modal-id');\n        document.getElementById(modalId).style.display = 'block';\n      });\n    });\n    \n    // Close modal functionality\n    document.querySelectorAll('.close-button').forEach(button => {\n      button.addEventListener('click', function() {\n        const modalId = button.getAttribute('data-modal-id');\n        document.getElementById(modalId).style.display = 'none';\n      });\n    });\n    \n    // Click outside modal to close it\n    window.addEventListener('click', function(event) {\n      document.querySelectorAll('.modal').forEach(modal => {\n        if (event.target === modal) {\n          modal.style.display = 'none';\n        }\n      });\n    });\n  });\n</script>\n`;\n\n// Return a complete HTML page with enabled scripts\nreturn {\n  html: `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Main Page</title>\n        <style>\n          /* Basic styles for cards and modals */\n          .card {\n            border: 1px solid #ccc;\n            padding: 16px;\n            margin: 8px;\n            cursor: pointer;\n          }\n          .card:hover {\n            background-color: #f9f9f9;\n          }\n          .modal {\n            display: none;\n            position: fixed;\n            z-index: 1000;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0,0,0,0.5);\n            /* No overflow here; let .modal-content manage its own height. */\n          }\n          .modal-content {\n            background-color: #fff;\n            margin: 5% auto; /* Reduced from 15% to 5% to keep the modal higher on load */\n            padding: 20px;\n            border: 1px solid #888;\n            width: 80%;\n            max-height: 90vh; /* So it doesn't exceed the viewport height */\n            overflow-y: auto;  /* Scroll within the modal if content is large */\n            box-sizing: border-box;\n          }\n          .close-button {\n            background-color: #d33;\n            color: #fff;\n            border: none;\n            padding: 8px 16px;\n            cursor: pointer;\n          }\n          .close-button:hover {\n            background-color: #a00;\n          }\n        </style>\n      </head>\n      <body>\n        ${fetchScripts.join('')}\n        ${modalScripts.join('')}\n        ${script}\n      </body>\n    </html>\n  `\n};\n"
      },
      "id": "1f3dd27d-a907-48fc-b55b-9d86ab773cb8",
      "name": "Code23",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -540,
        1080
      ]
    },
    {
      "parameters": {
        "path": "1b11fd2a-4c3e-427c-a31e-ee6a3e106f3e",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -200,
        2780
      ],
      "id": "1225eefa-856c-4f8c-8113-619cd35d7863",
      "name": "Guardian",
      "webhookId": "1b11fd2a-4c3e-427c-a31e-ee6a3e106f3e"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -20,
        2780
      ],
      "id": "227a82e5-8478-4714-be4e-86637696716e",
      "name": "Respond to Webhook14"
    },
    {
      "parameters": {
        "jsCode": "// Minimal Appointment Modal Code Node\nconst modalId = 'appointment_modal';\n\n// Today's date in YYYY-MM-DD format\nconst today = new Date().toISOString().split('T')[0];\n\n// Separate arrays for Future, Today, Past\nlet futureAppointments = [];\nlet todayAppointments = [];\nlet pastAppointments = [];\n\n// Classify appointments\nitems.forEach(item => {\n    const appt = item.json;\n    const apptDate = new Date(appt.Appt_DateTime).toISOString().split('T')[0];\n    if (apptDate < today) {\n        pastAppointments.push(appt);\n    } else if (apptDate === today) {\n        todayAppointments.push(appt);\n    } else {\n        futureAppointments.push(appt);\n    }\n});\n\n// Sort Past (desc) & Future (asc)\npastAppointments.sort((a, b) => new Date(b.Appt_DateTime) - new Date(a.Appt_DateTime));\nfutureAppointments.sort((a, b) => new Date(a.Appt_DateTime) - new Date(b.Appt_DateTime));\n\n// Helper to generate table rows\nfunction generateRows(appointments) {\n    if (!appointments.length) {\n        return `\n            <tr>\n                <td colspan=\"6\" class=\"text-center font-bold text-red-500\">\n                    No appointments available.\n                </td>\n            </tr>\n        `;\n    }\n    return appointments.map(appt => {\n        const dt = new Date(appt.Appt_DateTime).toLocaleString();\n        return `\n            <tr>\n                <td class=\"border px-2 py-2\">${dt}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Sched_Location_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Resource_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Type_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Status}</td>\n                <td class=\"border px-2 py-2\">${appt.ApptInsight}</td>\n            </tr>\n        `;\n    }).join('');\n}\n\n// Function to generate a table (no search) for Future & Today\nfunction generateSimpleTable(title, tableId, appointments) {\n    return `\n        <div class=\"mb-6\">\n            <h2 class=\"text-xl font-semibold text-purple-600 mb-2\">${title}</h2>\n            <table id=\"${tableId}\" class=\"table-auto w-full border border-gray-300 rounded-lg\">\n                <thead>\n                    <tr class=\"bg-gray-100 text-left\">\n                        <th class=\"border px-2 py-2\">Appointment Date/Time</th>\n                        <th class=\"border px-2 py-2\">Scheduled Location</th>\n                        <th class=\"border px-2 py-2\">Resource</th>\n                        <th class=\"border px-2 py-2\">Type</th>\n                        <th class=\"border px-2 py-2\">Status</th>\n                        <th class=\"border px-2 py-2\">Insight</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateRows(appointments)}\n                </tbody>\n            </table>\n        </div>\n    `;\n}\n\n// Build the final modal content\n// Order: Future (top), Today (middle), Past (bottom)\n// Only Past has a search input, which shows 5 if empty, or all matches if searching.\nconst modalContent = `\n    <div class=\"bg-white rounded shadow-lg p-4\" style=\"max-height:80vh; overflow-y:auto;\">\n        <h1 class=\"text-2xl font-bold text-center mb-4\">Appointment Details</h1>\n        \n        <!-- Future (top, no search) -->\n        ${generateSimpleTable('Future Appointments', 'futureAppointmentsTable', futureAppointments)}\n        \n        <!-- Today (middle, no search) -->\n        ${generateSimpleTable('Today Appointments', 'todayAppointmentsTable', todayAppointments)}\n        \n        <!-- Past (bottom, search-enabled) -->\n        <div class=\"mb-6\">\n            <h2 class=\"text-xl font-semibold text-purple-600 mb-2\">Past Appointments</h2>\n            <input\n                type=\"text\"\n                class=\"search-input border p-1 mb-2 w-full\"\n                placeholder=\"Search Past Appointments...\"\n                onkeyup=\"(function(){\n                    const filterVal = this.value.toLowerCase();\n                    const rows = document.querySelectorAll('#pastAppointmentsTable tbody tr');\n                    if (!filterVal) {\n                        // No search => show only the first 5\n                        let count = 0;\n                        for (let row of rows) {\n                            if (count < 5) {\n                                row.style.display = '';\n                                count++;\n                            } else {\n                                row.style.display = 'none';\n                            }\n                        }\n                    } else {\n                        // Searching => show all that match\n                        for (let row of rows) {\n                            row.style.display = row.innerText.toLowerCase().includes(filterVal) ? '' : 'none';\n                        }\n                    }\n                }).call(this)\"\n            >\n            <table id=\"pastAppointmentsTable\" class=\"table-auto w-full border border-gray-300 rounded-lg\">\n                <thead>\n                    <tr class=\"bg-gray-100 text-left\">\n                        <th class=\"border px-2 py-2\">Appointment Date/Time</th>\n                        <th class=\"border px-2 py-2\">Scheduled Location</th>\n                        <th class=\"border px-2 py-2\">Resource</th>\n                        <th class=\"border px-2 py-2\">Type</th>\n                        <th class=\"border px-2 py-2\">Status</th>\n                        <th class=\"border px-2 py-2\">Insight</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateRows(pastAppointments)}\n                </tbody>\n            </table>\n        </div>\n        <script>\n            // On DOM load, hide rows beyond the first 5 in Past if no search term\n            document.addEventListener('DOMContentLoaded', function(){\n                const rows = document.querySelectorAll('#pastAppointmentsTable tbody tr');\n                let count = 0;\n                for (let row of rows) {\n                    if (count < 5) {\n                        row.style.display = '';\n                        count++;\n                    } else {\n                        row.style.display = 'none';\n                    }\n                }\n            });\n        </script>\n    </div>\n`;\n\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "bc006f49-0482-4a6d-b313-9360bca6bf45",
      "name": "Code24",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2620,
        1940
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n        g.Patient_ID,\n        g.Patient_Number,\n        g.Patient_Name,\n        g.Patient_LFI,\n        g.Patient_First_Name,\n        g.Patient_Last_Name,\n        g.Patient_Street1,\n        g.Patient_City,\n        g.Patient_State,\n        g.Patient_Zip_Code,\n        g.Patient_SSN,\n        g.Patient_Sex,\n        g.Patient_DOB, \n        g.Patient_Age,\n        g.Patient_Marital_Status,\n        g.Patient_Home_Phone,\n        g.Patient_Cell_Phone,\n        g.Patient_Primary_Phone_Number,\n       CASE \n            WHEN g.Patient_Email IS NULL OR g.Patient_Email NOT LIKE '%_@__%.__%' THEN 'nothing@nothing.com'\n            ELSE g.Patient_Email\n        END AS patient_email,\n        'EHS Patient' AS BitrixPatientStatus\n    FROM [PM].[vwGenPatInfo] g\n\nWHERE Patient_Cell_Phone = '{{ $json.query.To.slice(2) }}'"
      },
      "id": "8f8df83d-17c6-4947-b2e9-35f9f0d206a5",
      "name": "PM Patient Info1",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Minimal Appointment Modal Code Node\nconst modalId = 'appointment_modal';\n\n// Helper function to parse datetime strings as local time\nfunction parseLocalDatetime(datetimeStr) {\n    // Expected format: \"YYYY-MM-DDTHH:mm:ss\" (without timezone info)\n    const [datePart, timePart] = datetimeStr.split('T');\n    const [year, month, day] = datePart.split('-').map(Number);\n    let hours = 0, minutes = 0, seconds = 0;\n    if (timePart) {\n        const timeParts = timePart.split(':').map(Number);\n        hours = timeParts[0];\n        minutes = timeParts[1];\n        seconds = timeParts[2] || 0;\n    }\n    // Construct date as local time\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n}\n\n// Helper to get a date string (YYYY-MM-DD) from a Date object in local time\nfunction getLocalDateString(date) {\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2);\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n}\n\n// Today's date in YYYY-MM-DD format (local)\nconst today = getLocalDateString(new Date());\n\n// Separate arrays for Future, Today, Past appointments\nlet futureAppointments = [];\nlet todayAppointments = [];\nlet pastAppointments = [];\n\n// Classify appointments using the custom local datetime parser\nitems.forEach(item => {\n    const appt = item.json;\n    const apptLocalDateObj = parseLocalDatetime(appt.Appt_DateTime);\n    const apptDate = getLocalDateString(apptLocalDateObj);\n    if (apptDate < today) {\n        pastAppointments.push(appt);\n    } else if (apptDate === today) {\n        todayAppointments.push(appt);\n    } else {\n        futureAppointments.push(appt);\n    }\n});\n\n// Sort Past (desc) & Future (asc) using local datetime parsing\npastAppointments.sort((a, b) => parseLocalDatetime(b.Appt_DateTime) - parseLocalDatetime(a.Appt_DateTime));\nfutureAppointments.sort((a, b) => parseLocalDatetime(a.Appt_DateTime) - parseLocalDatetime(b.Appt_DateTime));\n\n// Helper to generate table rows\nfunction generateRows(appointments) {\n    if (!appointments.length) {\n        return `\n            <tr>\n                <td colspan=\"6\" class=\"text-center font-bold text-red-500\">\n                    No appointments available.\n                </td>\n            </tr>\n        `;\n    }\n    return appointments.map(appt => {\n        // Use the custom parser for display as well\n        const dt = parseLocalDatetime(appt.Appt_DateTime).toLocaleString();\n        return `\n            <tr>\n                <td class=\"border px-2 py-2\">${dt}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Sched_Location_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Resource_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Type_Descr}</td>\n                <td class=\"border px-2 py-2\">${appt.Appt_Status}</td>\n                <td class=\"border px-2 py-2\">${appt.ApptInsight}</td>\n            </tr>\n        `;\n    }).join('');\n}\n\n// Function to generate a table (no search) for Future & Today appointments\nfunction generateSimpleTable(title, tableId, appointments) {\n    return `\n        <div class=\"mb-6\">\n            <h2 class=\"text-xl font-semibold text-purple-600 mb-2\">${title}</h2>\n            <table id=\"${tableId}\" class=\"table-auto w-full border border-gray-300 rounded-lg\">\n                <thead>\n                    <tr class=\"bg-gray-100 text-left\">\n                        <th class=\"border px-2 py-2\">Appointment Date/Time</th>\n                        <th class=\"border px-2 py-2\">Scheduled Location</th>\n                        <th class=\"border px-2 py-2\">Resource</th>\n                        <th class=\"border px-2 py-2\">Type</th>\n                        <th class=\"border px-2 py-2\">Status</th>\n                        <th class=\"border px-2 py-2\">Insight</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateRows(appointments)}\n                </tbody>\n            </table>\n        </div>\n    `;\n}\n\n// Build the final modal content\n// Order: Future (top), Today (middle), Past (bottom)\n// Only Past has a search input, which shows 5 if empty, or all matches if searching.\nconst modalContent = `\n    <div class=\"bg-white rounded shadow-lg p-4\" style=\"max-height:80vh; overflow-y:auto;\">\n        <h1 class=\"text-2xl font-bold text-center mb-4\">Appointment Details</h1>\n        \n        <!-- Future Appointments (top, no search) -->\n        ${generateSimpleTable('Future Appointments', 'futureAppointmentsTable', futureAppointments)}\n        \n        <!-- Today Appointments (middle, no search) -->\n        ${generateSimpleTable('Today Appointments', 'todayAppointmentsTable', todayAppointments)}\n        \n        <!-- Past Appointments (bottom, search-enabled) -->\n        <div class=\"mb-6\">\n            <h2 class=\"text-xl font-semibold text-purple-600 mb-2\">Past Appointments</h2>\n            <input\n                type=\"text\"\n                class=\"search-input border p-1 mb-2 w-full\"\n                placeholder=\"Search Past Appointments...\"\n                onkeyup=\"(function(){\n                    const filterVal = this.value.toLowerCase();\n                    const rows = document.querySelectorAll('#pastAppointmentsTable tbody tr');\n                    if (!filterVal) {\n                        // No search => show only the first 5\n                        let count = 0;\n                        for (let row of rows) {\n                            if (count < 5) {\n                                row.style.display = '';\n                                count++;\n                            } else {\n                                row.style.display = 'none';\n                            }\n                        }\n                    } else {\n                        // Searching => show all that match\n                        for (let row of rows) {\n                            row.style.display = row.innerText.toLowerCase().includes(filterVal) ? '' : 'none';\n                        }\n                    }\n                }).call(this)\"\n            >\n            <table id=\"pastAppointmentsTable\" class=\"table-auto w-full border border-gray-300 rounded-lg\">\n                <thead>\n                    <tr class=\"bg-gray-100 text-left\">\n                        <th class=\"border px-2 py-2\">Appointment Date/Time</th>\n                        <th class=\"border px-2 py-2\">Scheduled Location</th>\n                        <th class=\"border px-2 py-2\">Resource</th>\n                        <th class=\"border px-2 py-2\">Type</th>\n                        <th class=\"border px-2 py-2\">Status</th>\n                        <th class=\"border px-2 py-2\">Insight</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${generateRows(pastAppointments)}\n                </tbody>\n            </table>\n        </div>\n        <script>\n            // On DOM load, hide rows beyond the first 5 in Past if no search term\n            document.addEventListener('DOMContentLoaded', function(){\n                const rows = document.querySelectorAll('#pastAppointmentsTable tbody tr');\n                let count = 0;\n                for (let row of rows) {\n                    if (count < 5) {\n                        row.style.display = '';\n                        count++;\n                    } else {\n                        row.style.display = 'none';\n                    }\n                }\n            });\n        </script>\n    </div>\n`;\n\nreturn {\n  json: {\n    modalId: modalId,\n    modalContent: modalContent\n  }\n};\n"
      },
      "id": "f83df2d9-ad8f-420d-b417-e7bd974a5dfe",
      "name": "Code25",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2660,
        1880
      ]
    },
    {
      "parameters": {
        "jsCode": "const incomingData = $input.all(); // Get all input data from the 'Set' node\n\n// Helper function to build a valid base URL with field parameters\nconst buildBaseUrl = (url, params) => {\n  return url.includes('?') ? `${url}&${params}` : `${url}?${params}`;\n};\n\n// Arrays to store dynamically created HTML elements for cards and modals\nlet fetchScripts = [];\nlet modalScripts = [];\n\n// Access fields from the 'Microsoft SQL2' node; include SingleSignOnToken and exclude SessionToken\nconst fields = $node[\"Microsoft SQL2\"].json;\nconst fieldParams = Object.entries(fields)\n  .filter(([key]) => key !== \"SessionToken\")\n  .map(([key, value]) => `${key.toLowerCase()}=${encodeURIComponent(value)}`)\n  .join('&');\n\nincomingData.forEach((item) => {\n  for (const [key, url] of Object.entries(item.json)) {\n\n    // --- 1) Identify markers using flexible regex (allows spaces) ---\n    const isNewTab   = /\\{newtab\\}/i.test(key);\n    const isIFrame   = /\\{iframe\\}/i.test(key);\n    const isRedirect = /\\{redirect\\}/i.test(key);\n\n    // Capture color if present (handles spaces, e.g. {color : #ff0000})\n    const colorMatch = key.match(/\\{color\\s*:\\s*([^}]+)\\}/i);\n    const color      = colorMatch ? colorMatch[1].trim() : null;\n\n    // Capture description if present (handles spaces, e.g. {description : Some text})\n    const descriptionMatch = key.match(/\\{description\\s*:\\s*([^}]+)\\}/i);\n    const description      = descriptionMatch ? descriptionMatch[1].trim() : '';\n\n    // --- 2) Remove all markers to get a \"clean\" title ---\n    const cleanKey = key\n      .replace(/\\{newtab\\}/i, '')\n      .replace(/\\{iframe\\}/i, '')\n      .replace(/\\{redirect\\}/i, '')\n      .replace(/\\{color\\s*:\\s*[^}]+\\}/i, '')\n      .replace(/\\{description\\s*:\\s*[^}]+\\}/i, '')\n      .trim();\n\n    // --- 3) Build the final URL with extra parameters ---\n    const baseUrl = buildBaseUrl(url, fieldParams);\n\n    // --- 4) Build the display elements ---\n    // Create a span for the card header title with inline color if provided\n    const cardTitleSpan = `<span class=\"card-title\"${color ? ' style=\"color:' + color + ';\"' : ''}>${cleanKey}</span>`;\n\n    // Use description if available; otherwise, show default text\n    const cardDescriptionHTML  = description ? description : `Click to view more details about ${cleanKey}`;\n    // For modals, show description if provided\n    const modalDescriptionHTML = description ? `<p class=\"modal-description\">${description}</p>` : '';\n\n    if (isRedirect) {\n      // Redirect (same tab) card\n      const fetchScript = `\n        <a href=\"${baseUrl}\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              ${cardTitleSpan}\n            </div>\n            <p>${cardDescriptionHTML}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n\n      // No modal for redirect links\n    } else if (isNewTab) {\n      // Opens in new tab\n      const fetchScript = `\n        <a href=\"${baseUrl}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"card-link\" data-base-url=\"${baseUrl}\">\n          <section class=\"card\">\n            <div class=\"card-header\">\n              ${cardTitleSpan}\n            </div>\n            <p>${cardDescriptionHTML}</p>\n          </section>\n        </a>\n      `;\n      fetchScripts.push(fetchScript);\n\n      // No modal for new tab links\n    } else {\n      // A normal card that triggers a modal\n      const fetchScript = `\n        <section class=\"card\" data-modal-id=\"modal${cleanKey}\" data-url=\"${baseUrl}\" data-base-url=\"${baseUrl}\">\n          <div class=\"card-header\">\n            ${cardTitleSpan}\n          </div>\n          <p>${cardDescriptionHTML}</p>\n        </section>\n      `;\n      fetchScripts.push(fetchScript);\n\n      // Modal content depends on iframe vs. non-iframe\n      if (isIFrame) {\n        // iFrame-based modal\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              ${modalDescriptionHTML}\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <iframe data-base-url=\"${baseUrl}\" style=\"width:100%; height:500px; border:none;\"></iframe>\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      } else {\n        // Normal modal (dynamic content)\n        const modalScript = `\n          <div id=\"modal${cleanKey}\" class=\"modal\">\n            <div class=\"modal-content\">\n              <h2>${cleanKey} Details</h2>\n              ${modalDescriptionHTML}\n              <div class=\"modal-body\" id=\"modalBody${cleanKey}\">\n                <!-- This will be populated with data fetched from the API -->\n              </div>\n              <button class=\"close-button\" data-modal-id=\"modal${cleanKey}\">Close</button>\n            </div>\n          </div>\n        `;\n        modalScripts.push(modalScript);\n      }\n    }\n  }\n});\n\n// Inline script to update URLs by appending any current query parameters and enable modal functionality\nconst script = `\n<script>\n  window.addEventListener('DOMContentLoaded', function() {\n    // Get the current URL's query string (without the leading '?')\n    const currentParams = window.location.search.substring(1);\n    const appendParams = (baseUrl) => {\n      return currentParams\n        ? (baseUrl.indexOf('?') > -1 ? baseUrl + '&' + currentParams : baseUrl + '?' + currentParams)\n        : baseUrl;\n    };\n\n    // Update anchor tags (for new tab and redirect links)\n    document.querySelectorAll('a.card-link[data-base-url]').forEach(anchor => {\n      const baseUrl = anchor.getAttribute('data-base-url');\n      anchor.href = appendParams(baseUrl);\n    });\n\n    // Update card sections (for modal triggers)\n    document.querySelectorAll('section.card[data-base-url]').forEach(section => {\n      const baseUrl = section.getAttribute('data-base-url');\n      section.setAttribute('data-url', appendParams(baseUrl));\n    });\n      \n    // Update iframe elements (for modal iframes)\n    document.querySelectorAll('iframe[data-base-url]').forEach(iframe => {\n      const baseUrl = iframe.getAttribute('data-base-url');\n      iframe.src = appendParams(baseUrl);\n    });\n    \n    // Enable modal functionality: when a card is clicked, display the corresponding modal\n    document.querySelectorAll('.card[data-modal-id]').forEach(card => {\n      card.addEventListener('click', function() {\n        const modalId = card.getAttribute('data-modal-id');\n        document.getElementById(modalId).style.display = 'block';\n      });\n    });\n    \n    // Close modal functionality\n    document.querySelectorAll('.close-button').forEach(button => {\n      button.addEventListener('click', function() {\n        const modalId = button.getAttribute('data-modal-id');\n        document.getElementById(modalId).style.display = 'none';\n      });\n    });\n    \n    // Click outside modal to close it\n    window.addEventListener('click', function(event) {\n      document.querySelectorAll('.modal').forEach(modal => {\n        if (event.target === modal) {\n          modal.style.display = 'none';\n        }\n      });\n    });\n  });\n</script>\n`;\n\n// Return a complete HTML page with enabled scripts\nreturn {\n  html: `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Main Page</title>\n        <style>\n          /* Basic styles for cards and modals */\n          .card {\n            border: 1px solid #ccc;\n            padding: 16px;\n            margin: 8px;\n            cursor: pointer;\n            display: inline-block;\n            vertical-align: top;\n            width: 200px;\n            box-sizing: border-box;\n          }\n          .card:hover {\n            background-color: #f9f9f9;\n          }\n          .card-header {\n            margin-bottom: 8px;\n          }\n          .modal {\n            display: none;\n            position: fixed;\n            z-index: 1000;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0,0,0,0.5);\n          }\n          .modal-content {\n            background-color: #fff;\n            margin: 5% auto;\n            padding: 20px;\n            border: 1px solid #888;\n            width: 80%;\n            max-height: 90vh;\n            overflow-y: auto;\n            box-sizing: border-box;\n          }\n          .close-button {\n            background-color: #d33;\n            color: #fff;\n            border: none;\n            padding: 8px 16px;\n            cursor: pointer;\n          }\n          .close-button:hover {\n            background-color: #a00;\n          }\n          .modal-description {\n            margin: 10px 0;\n            font-style: italic;\n          }\n        </style>\n      </head>\n      <body>\n        ${fetchScripts.join('')}\n        ${modalScripts.join('')}\n        ${script}\n      </body>\n    </html>\n  `\n};\n"
      },
      "id": "4af84e8f-2ad7-423e-adbf-a8a886dde12c",
      "name": "Code26",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1140,
        1200
      ]
    }
  ],
  "pinData": {
    "Microsoft SQL2": [
      {
        "json": {
          "SingleSignOnToken": "047F539E-F1A7-4CBC-982D-0142CEBF4A5B",
          "SessionToken": "84C2D5FC-DBBB-4D30-8FF0-AA7DF3A3B712",
          "UserName": "TSTILWELL",
          "CreatedOn": "2024-02-22T09:25:02.490Z",
          "EncounterID": "21105855",
          "PatientID": "158536",
          "MRN": "502880",
          "DEM_FIRSTNAME": "THOMAS",
          "DEM_LASTNAME": "STILWELL",
          "DEM_DATEOFBIRTH": "1988-02-01T00:00:00.000Z"
        }
      }
    ],
    "Login URL": [
      {
        "json": {
          "loginurl": "https://envision.epicpc.com/auth/userkey/login.php?key=073108aab46256b3546d4ce3ba7e03d2"
        }
      }
    ],
    "Date & Time2": [
      {
        "json": {
          "currentDate": "04/06/2024"
        }
      }
    ],
    "Date & Time1": [
      {
        "json": {
          "awvDate": "01/01/1900"
        }
      }
    ],
    "Date & Time": [
      {
        "json": {
          "cweDate": "04/09/2022"
        }
      }
    ],
    "Edit Fields1": [
      {
        "json": {
          "Elixhauser_risk_category": "High",
          "CriticalAlertRisk": "Low",
          "Showrate_Risk_Category": "High",
          "age_based_risk": "Medium",
          "Overall_Vitals_Risk_Category": "Medium",
          "Total_Risk_Classification": "High"
        }
      }
    ],
    "Postgres2": [
      {
        "json": {
          "Patient_ID": "137836",
          "Patient_Number": "197520",
          "Patient_Sex": "F",
          "Patient_Name": "TEDDY TEST MR",
          "Patient_DOB": "1971-02-01T05:00:00.000Z",
          "Patient_Age": "53",
          "Patient_Home_Phone": "2342329342",
          "prim_Carrierid": null,
          "prim_insurance": null,
          "sec_Carrierid": null,
          "sec_insurance": null,
          "lastcwedone": "2022-04-09T04:00:00.000Z",
          "lastcwecpt": "99396",
          "lastcwebillingcarriername": null,
          "lastawvdone": "1900-01-01T05:32:11.000Z",
          "lastawvcpt": null,
          "lastawvbillingcarriername": null,
          "APMCARRIERIDPERNIL": null,
          "Carrier name": null,
          "AWV Eligible (G0402, G0438, G0439)": null,
          "CWE Eligible": null,
          "Dual Eligible (OV & CWE/AWV)": null,
          "Calendar Year Plans (CWE)": null,
          "Calendar Year Plans (AWV )": null,
          "Seconday Eligible AWV": null,
          "Seconday Elgibile CWE": null,
          "Comments": null,
          "CWE Due": "NO",
          "AWV Due": "NO",
          "AWV CPT": null,
          "currentdate": "2024-04-06T11:00:23.315Z"
        }
      }
    ],
    "Code4": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Microsoft SQL5": [
      {
        "json": {
          "SingleSignOnToken": "047F539E-F1A7-4CBC-982D-0142CEBF4A5B",
          "SessionToken": "84C2D5FC-DBBB-4D30-8FF0-AA7DF3A3B712",
          "UserName": "TSTILWELL",
          "CreatedOn": "2024-02-22T09:25:02.490Z",
          "EncounterID": "21105855",
          "PatientID": "158536",
          "MRN": "502880",
          "DEM_FIRSTNAME": "THOMAS",
          "DEM_LASTNAME": "STILWELL",
          "DEM_DATEOFBIRTH": "1988-02-01T00:00:00.000Z"
        }
      }
    ],
    "Postgres4": [
      {
        "json": {
          "Patient_ID": "137836",
          "Patient_Number": "197520",
          "Patient_Sex": "F",
          "Patient_Name": "TEDDY TEST MR",
          "Patient_DOB": "1971-02-01T05:00:00.000Z",
          "Patient_Age": "53",
          "Patient_Home_Phone": "2342329342",
          "prim_Carrierid": null,
          "prim_insurance": null,
          "sec_Carrierid": null,
          "sec_insurance": null,
          "lastcwedone": "2022-04-09T04:00:00.000Z",
          "lastcwecpt": "99396",
          "lastcwebillingcarriername": null,
          "lastawvdone": "1900-01-01T05:32:11.000Z",
          "lastawvcpt": null,
          "lastawvbillingcarriername": null,
          "APMCARRIERIDPERNIL": null,
          "Carrier name": null,
          "AWV Eligible (G0402, G0438, G0439)": null,
          "CWE Eligible": null,
          "Dual Eligible (OV & CWE/AWV)": null,
          "Calendar Year Plans (CWE)": null,
          "Calendar Year Plans (AWV )": null,
          "Seconday Eligible AWV": null,
          "Seconday Elgibile CWE": null,
          "Comments": null,
          "CWE Due": "NO",
          "AWV Due": "NO",
          "AWV CPT": null,
          "currentdate": "2024-04-06T11:00:23.315Z"
        }
      }
    ],
    "Code10": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Code": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Webhook3": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "10.0.24.33",
            "x-forwarded-for": "10.0.24.33",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Google Chrome\";v=\"129\", \"Not=A?Brand\";v=\"8\", \"Chromium\";v=\"129\"",
            "dnt": "1",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://xl.epicpc.com/webhook/418b277c-e904-462b-b6ff-0acd3dbc46d122222",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX19UCS5YrmF%2Bm06Ff8KmkYhZ1lw0dfu5oBo%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX19KFsX8zHSY8R9vkYyEMra3%2FYkC%2Fapujog%3D; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImY5YWFiYmJkLTZiNjktNGIwMC1iMGUzLWQ5MTQzYTYzYWUzNCIsImhhc2giOiJZaXdOcHpaYzdGIiwiYnJvd3NlcklkIjoieHJIZ09sSUtLcFZjeWRqdlRHNmpYT0t1Zm1MeFovbzE5Sm1Hb00wS0x0MD0iLCJpYXQiOjE3MjcxNzcxODAsImV4cCI6MTcyNzc4MTk4MH0.7a91wmLqERD_sDPUSQfSecQi7gPTmFWjVrhbW4a3L6c; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX189bJGwRjt2HawtpbrrmSrDbOGSwd7a88sqoj7zssmK5WdOUFRHqgEGqxVExQma6525C8hoYrGflg%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX1%2BQH%2FRQr1e318M0lek%2BHuFRnsWRoZZbyaKgY8lE9ymKKeFLyLv6f6mmJNJFBttTbmj4MULmAHFJxnVKcWN0ywyU1Mz5ABJk%2BbCjyFWGbud%2FcZ1DiMoByUgZXrbwlHkX7pjKNk9%2BTYRCRw8W%2B0PuywUjfa2d8zEd2J8%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX1%2BSUBZdriCuOtDqJZLi7oh%2FPLRJ%2F6XsvGDIf%2BtRXUVE%2BhYfM1TaMK4gj8wfcX%2FEwFGHzKAtjvf7RNZzMkvteY09EUFHKBBgs6yDrbLXO180jScNjAEa3MkIwyQoB9hJ6PPOeM4B16Wi0w%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22fbbaa0fe7164b93e2c831f7816129952355ab8de07812c802f276efe6e8da0f3%23f9aabbbd-6b69-4b00-b0e3-d9143a63ae34%22%2C%22%24sesid%22%3A%5B1727215572627%2C%22019225ce-5383-7fc5-a9fc-a9b2884b7489%22%2C1727211131779%5D%2C%22%24epp%22%3Atrue%7D; rl_session=RudderEncrypt%3AU2FsdGVkX188ecnAvJ60X5a4EleNGeyk5r1evRY2K90TYqxwTcoMMjIJFXvPwwiiWxf1DS3ZFEdTj5Z3lCgMF6RHCjlnywXIeL99%2BXtK5sAiTEiVcew%2FiTIFpCm1xPPQPAKm9qphOBhqTisbVU6OYg%3D%3D"
          },
          "params": {},
          "query": {
            "mrn": "502880"
          },
          "body": {},
          "webhookUrl": "https://xl.epicpc.com/webhook/641d690e-eb64-4bdc-a6a5-9f35cedb6ebf",
          "executionMode": "production"
        }
      }
    ],
    "Postgres": [
      {
        "json": {
          "Patient_ID": "137836",
          "Patient_Number": "197520",
          "Patient_Sex": "F",
          "Patient_Name": "TEDDY TEST MR",
          "Patient_DOB": "1971-02-01T05:00:00.000Z",
          "Patient_Age": "53",
          "Patient_Home_Phone": "2342329342",
          "prim_Carrierid": null,
          "prim_insurance": null,
          "sec_Carrierid": null,
          "sec_insurance": null,
          "lastcwedone": "2022-04-09T04:00:00.000Z",
          "lastcwecpt": "99396",
          "lastcwebillingcarriername": null,
          "lastawvdone": "1900-01-01T05:32:11.000Z",
          "lastawvcpt": null,
          "lastawvbillingcarriername": null,
          "APMCARRIERIDPERNIL": null,
          "Carrier name": null,
          "AWV Eligible (G0402, G0438, G0439)": null,
          "CWE Eligible": null,
          "Dual Eligible (OV & CWE/AWV)": null,
          "Calendar Year Plans (CWE)": null,
          "Calendar Year Plans (AWV )": null,
          "Seconday Eligible AWV": null,
          "Seconday Elgibile CWE": null,
          "Comments": null,
          "CWE Due": "NO",
          "AWV Due": "NO",
          "AWV CPT": null,
          "currentdate": "2024-04-06T11:00:23.315Z"
        }
      }
    ],
    "WellnessAllPatients": [
      {
        "json": {
          "Patient_ID": "137836",
          "Patient_Number": "197520",
          "Patient_Sex": "F",
          "Patient_Name": "TEDDY TEST MR",
          "Patient_DOB": "1971-02-01T05:00:00.000Z",
          "Patient_Age": "53",
          "Patient_Home_Phone": "2342329342",
          "prim_Carrierid": null,
          "prim_insurance": null,
          "sec_Carrierid": null,
          "sec_insurance": null,
          "lastcwedone": "2022-04-09T04:00:00.000Z",
          "lastcwecpt": "99396",
          "lastcwebillingcarriername": null,
          "lastawvdone": "1900-01-01T05:32:11.000Z",
          "lastawvcpt": null,
          "lastawvbillingcarriername": null,
          "APMCARRIERIDPERNIL": null,
          "Carrier name": null,
          "AWV Eligible (G0402, G0438, G0439)": null,
          "CWE Eligible": null,
          "Dual Eligible (OV & CWE/AWV)": null,
          "Calendar Year Plans (CWE)": null,
          "Calendar Year Plans (AWV )": null,
          "Seconday Eligible AWV": null,
          "Seconday Elgibile CWE": null,
          "Comments": null,
          "CWE Due": "NO",
          "AWV Due": "NO",
          "AWV CPT": null,
          "currentdate": "2024-04-06T11:00:23.315Z"
        }
      }
    ],
    "Webhook4": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "10.0.1.54",
            "x-forwarded-for": "10.0.1.54",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Chromium\";v=\"130\", \"Google Chrome\";v=\"130\", \"Not?A_Brand\";v=\"99\"",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://xl.epicpc.com/webhook/b70b7ec1-3f60-4420-a7a6-e18868310d98?SSOToken=81ba5b94-2660-4cb6-a029-a59dcf3fb01f&AccountID=HEROERP",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9"
          },
          "params": {},
          "query": {
            "mrn": "197520"
          },
          "body": {},
          "webhookUrl": "https://xl.epicpc.com/webhook/6d4e64da-509f-4e9d-b74a-e4b0d8e3961b",
          "executionMode": "production"
        }
      }
    ],
    "Webhook2": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "10.0.1.54",
            "x-forwarded-for": "10.0.1.54",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Chromium\";v=\"130\", \"Google Chrome\";v=\"130\", \"Not?A_Brand\";v=\"99\"",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://xl.epicpc.com/webhook/b70b7ec1-3f60-4420-a7a6-e18868310d98?SSOToken=f41dffdf-0e0b-490f-8ae6-2b78ee2ec9c1&AccountID=HEROERP",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "if-none-match": "W/\"36d-ln1GNIObGGnoAyXqzovpNh/rTi0\""
          },
          "params": {},
          "query": {
            "mrn": "502880"
          },
          "body": {},
          "webhookUrl": "https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498",
          "executionMode": "production"
        }
      }
    ],
    "Webhook6": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "10.0.1.54",
            "x-forwarded-for": "10.0.1.54",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Chromium\";v=\"130\", \"Google Chrome\";v=\"130\", \"Not?A_Brand\";v=\"99\"",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://xl.epicpc.com/webhook/b70b7ec1-3f60-4420-a7a6-e18868310d98?SSOToken=98dae95e-bb49-478d-9b22-9e5356114b30&AccountID=HEROERP",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9"
          },
          "params": {},
          "query": {
            "mrn": "502880"
          },
          "body": {},
          "webhookUrl": "https://xl.epicpc.com/webhook/5a681a08-6cfb-443b-9c18-4dee032e9d48",
          "executionMode": "production"
        }
      }
    ],
    "Single page view": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Code8": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Webhook7": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "10.0.1.53",
            "x-forwarded-for": "10.0.1.53",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "sec-ch-ua": "\"Not(A:Brand\";v=\"99\", \"Google Chrome\";v=\"133\", \"Chromium\";v=\"133\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "upgrade-insecure-requests": "1",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "navigate",
            "sec-fetch-user": "?1",
            "sec-fetch-dest": "document",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2B6kBAJQBMZ9UPR7mZcR1zJXmBEta7g2oY%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX1%2BYgcSBsZj1pDGqLzuD1b%2FIfsvqrUqYYU0%3D; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2FOZV49x4JBeHuzrKu%2F4UxfclX%2Fns%2BSzznrH12CQjf1yrpQ7Ed4DHYK%2BW%2F7lfkuQTcsnC%2FpaKb40Q%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19YJMtPkhlFghMUxuFmEdp96sgQM43ZJyi8V6%2BfsxNYsliPhnb7k3U6nof1Ube5Bm7gNpHpEQrKtj6RucYNbY6tuQaL8E94OEDBn0PPlgXz%2F4LmS5PU7mw7ea4qOPS7PkmdQNA%2FOnmKoa6hmxpY619U%2F8Lu07hQiZ8%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX18zivTTQ1edY8OCvf%2BzFPxh47iAlCu72AxEsin0c5LajSocUVPXqcJAF9T%2B4JbpGyiJFnou7xt0G1CiWA3CbXq9PLkSB%2FCelxyKN7Ul5%2FgV1BWgSYmWOUYuk%2F28%2Brn6c%2BnY1EXOtmmgsQ%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22fbbaa0fe7164b93e2c831f7816129952355ab8de07812c802f276efe6e8da0f3%23f9aabbbd-6b69-4b00-b0e3-d9143a63ae34%22%2C%22%24sesid%22%3A%5B1716820885594%2C%22018fba7e-6763-714b-9fdc-982210db26a3%22%2C1716820797283%5D%2C%22%24epp%22%3Atrue%7D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2FUhWUKQlruKtQbhFwpnHBIeNmBl%2BtMzC17HK1W9x4nfT6F4OIgPpukV69fRL7bq1UQiEXVHcCvOdTxzFttewqN%2Fb8DOf9Wn13E8Alnw6buhRwX9%2FXS89ugbYE%2BjntDGu%2FnsBrjCceOQw%3D%3D"
          },
          "params": {},
          "query": {
            "singlesignontoken": "D80E9BC4-E023-4A78-A1F6-28C3ED583F95",
            "username": "TSTILWELL",
            "createdon": "2025-02-25T17:33:54.013Z",
            "encounterid": "25752487",
            "patientid": "158536",
            "mrn": "502880",
            "dem_firstname": "THOMAS",
            "dem_lastname": "STILWELL",
            "dem_dateofbirth": "1988-02-01T00:00:00.000Z",
            "SSOToken": "d80e9bc4-e023-4a78-a1f6-28c3ed583f95",
            "AccountID": "HEROERP"
          },
          "body": {},
          "webhookUrl": "https://xl.epicpc.com/webhook/6831e3d7-75df-4c33-8ab0-bc3dc35b2481",
          "executionMode": "production"
        }
      }
    ],
    "Code9": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Code17": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Code18": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Code19": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Code21": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Code23": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ],
    "Code26": [
      {
        "json": {
          "html": "\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Function to create a section for each URL's fetched data\n    function createSection(data) {\n        const section = document.createElement('section');\n        section.className = 'card';\n        section.innerHTML = `\n            <div class=\"card-header\">\n                <span class=\"card-title\">${data.title}</span>\n            </div>\n            <img src=\"${data.imageUrl}\" alt=\"${data.title}\" onerror=\"this.onerror=null;this.src='https://via.placeholder.com/150?text=Image+not+found';\">\n            <p>${data.cardContent}</p>\n            <div id=\"${data.modalId}\" class=\"modal\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" onclick=\"closeModal('${data.modalId}')\">Close</button>\n                    <h2>${data.modalTitle}</h2>\n                    ${data.modalContent}\n                </div>\n            </div>\n        `;\n        document.querySelector('.grid-container').appendChild(section);\n    }\n\n    // Function to fetch data from a URL and create a section\n    function fetchData(url) {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                createSection(data);\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n                // Add fallback error message to the page\n                const section = document.createElement('section');\n                section.className = 'card';\n                section.innerHTML = '<p>Error fetching data from ' + url + ': ' + error.message + '</p>';\n                document.querySelector('.grid-container').appendChild(section);\n            });\n    }\n\nfetchData('https://xl.epicpc.com/webhook/8adebb70-1c58-4671-8c1a-7e6919e28403');fetchData('https://xl.epicpc.com/webhook/e0214145-9e11-4417-a6d6-914c94c7f498');\n});\n</script>\n"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 15,
  "updatedAt": "2025-06-11T20:03:28.624Z",
  "versionId": "a6438600-b600-41c7-9dab-12d29f99ce4b"
}