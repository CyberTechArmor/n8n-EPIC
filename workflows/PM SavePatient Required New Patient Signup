{
  "active": true,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "USER18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PM Token1": {
      "main": [
        [
          {
            "node": "Extract PM Token1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PM Token1": {
      "main": [
        [
          {
            "node": "Check Token1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Token1": {
      "main": [
        [
          {
            "node": "Code29",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Execute Workflow12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF PM Token Valid1": {
      "main": [
        [
          {
            "node": "Read PM Token21",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PM Token21": {
      "main": [
        [
          {
            "node": "Extract PM Token21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PM Token21": {
      "main": [
        [
          {
            "node": "Edit Fields13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow12": {
      "main": [
        [
          {
            "node": "USER18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields13": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USER18": {
      "main": [
        [
          {
            "node": "Read PM Token1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code29": {
      "main": [
        [
          {
            "node": "IF PM Token Valid1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        []
      ]
    },
    "HTTP Create New Patient1": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Create New Patient": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          },
          {
            "node": "NocoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redirect to Schedule": {
      "main": [
        [
          {
            "node": "USER18",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "New Patient Website Form": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New Patient": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Talk to Clark": {
      "main": [
        [
          {
            "node": "Respond to Webhook5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Respond to Webhook12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Respond to Webhook18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "HTTP Create New Patient",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PM Token": {
      "main": [
        [
          {
            "node": "Extract PM Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PM Token": {
      "main": [
        [
          {
            "node": "Check Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Token": {
      "main": [
        [
          {
            "node": "Code30",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF PM Token Valid": {
      "main": [
        [
          {
            "node": "Read PM Token22",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PM Token22": {
      "main": [
        [
          {
            "node": "Extract PM Token22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PM Token22": {
      "main": [
        [
          {
            "node": "Edit Fields14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "USER",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields14": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USER": {
      "main": [
        [
          {
            "node": "Read PM Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code30": {
      "main": [
        [
          {
            "node": "IF PM Token Valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Create New Patient2": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Respond to Webhook24",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook25",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        [
          {
            "node": "HTTP Create New Patient2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "USER",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "createdAt": "2024-05-05T21:30:50.506Z",
  "id": "7QXVQIEqEqj6yVBz",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "PM SavePatient Required New Patient Signup",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        -500
      ],
      "id": "8a66330a-b573-46ca-bd51-32cb61807cbe",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4ced3612-0a23-403f-a7b6-eaef1164f3ec",
              "name": "",
              "value": "<patient>\n  <lastName></lastName>\n  <firstName></firstName>\n  <gender></gender> \n  <dob></dob>\n  <street1></street1>\n  <city></city>\n  <state></state>\n  <zip></zip>\n  <cellphone></cellphone>\n<email></email>\n</patient>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1280,
        80
      ],
      "id": "662fb715-2044-4696-a2d2-f0c0d215ceac",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "fileSelector": "=pmtoken-{{ $json.user }}.txt",
        "options": {}
      },
      "id": "381d45cb-9722-4001-9554-5e26ff456efa",
      "name": "Read PM Token1",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        600,
        -500
      ],
      "alwaysOutputData": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "1060d253-2148-4c5f-b90c-6b161cb6e761",
      "name": "Extract PM Token1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        740,
        -500
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"Action\":\"GetUserAuthentication\",\n\"AppUserID\":\"{{ $('USER18').item.json.user }}\",\n\"Appname\":\"EPICPC.NMNWokflow.TestApp\",\n\"PatientID\":\"\",\n\"Token\":\"{{ $json[\"data\"] }}\",\n\"Parameter1\":\"{{ $('USER18').item.json.password }}\"\n}\n",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "38dafe89-7812-4d86-84d6-3514c6b20b88",
      "name": "Check Token1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        920,
        -500
      ]
    },
    {
      "parameters": {
        "amount": 1
      },
      "id": "95cff449-eb0a-44c6-bb46-804f5209db4a",
      "name": "Wait3",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1360,
        -400
      ],
      "webhookId": "666ea0a7-be04-4fbf-80a1-d71780f7eac8"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.data[0].getuserauthenticationinfo[0].ValidUser }}",
              "value2": "YES"
            }
          ]
        }
      },
      "id": "e76516ad-b18c-46bf-b35a-3cf05124e7e8",
      "name": "IF PM Token Valid1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1200,
        -500
      ]
    },
    {
      "parameters": {
        "content": "# ASPM Authentication ELISEAI",
        "height": 373.491094826977,
        "width": 1498.6041394020742,
        "color": 6
      },
      "id": "2b04b474-e8e4-4cf9-bb87-886a7e037c29",
      "name": "Sticky Note24",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        400,
        -600
      ]
    },
    {
      "parameters": {
        "fileSelector": "=pmtoken-{{ $('USER18').item.json.user }}.txt",
        "options": {}
      },
      "id": "d4b6275b-a926-4433-b0c8-2fe0ad0b4da3",
      "name": "Read PM Token21",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1420,
        -560
      ],
      "alwaysOutputData": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "470d85d9-f35f-46de-ba5f-79c751f6ddf9",
      "name": "Extract PM Token21",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1560,
        -560
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "workflowId": "aUCNcTe36bHU5YKn",
        "options": {}
      },
      "id": "ce7edb40-dbbe-4bb4-a043-4f2677446a48",
      "name": "Execute Workflow12",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        1540,
        -400
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7588a9fa-9c56-4c5d-8e77-30bda7a5d1ef",
              "name": "Token",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "83cdcef1-f4d0-49a5-a897-2f336107e0c8",
      "name": "Edit Fields13",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1720,
        -560
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b806a87b-407c-47eb-b9ba-1aca0d81400d",
              "name": "user",
              "value": "eliseai",
              "type": "string"
            },
            {
              "id": "c45539b3-dcfd-4d9b-a267-54d31648d3b0",
              "name": "password",
              "value": "L3tsC0nnect!C0nf",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "3748cc1c-18a6-4f29-aac8-ab5f26012755",
      "name": "USER18",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        440,
        -500
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.data = JSON.parse(item.json.data);\n}\n\nreturn $input.all();"
      },
      "id": "e4c95c80-38a9-446d-9aaa-ee09bdee49db",
      "name": "Code29",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        -500
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "id": "5362d53e-c52c-48c0-8404-0041ad30702d",
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1980,
        -180
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c39c9862-83e9-448b-9d58-9a125283865d",
      "name": "Edit Fields6",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1980,
        -520
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "SavePatient"
            },
            {
              "name": "AppUserID",
              "value": "eliseai"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "="
            },
            {
              "name": "Token",
              "value": "={{ $json.Token }}"
            },
            {
              "name": "Parameter1",
              "value": "="
            },
            {
              "name": "Parameter2",
              "value": "=<patient>\n<lastName>{{ $json.body.lastName }}</lastName>\n<firstName>{{ $json.body.firstName }}</firstName>\n<gender>{{ $json.body.gender === \"Male\" ? \"M\" : \"F\" }}</gender>\n<dob>{{ $json.body.dob }}</dob>\n<street1>{{ $json.body.street1 }}</street1>\n<city>{{ $json.body.city }}</city>\n<state>{{ $json.body.state }}</state>\n<zip>{{ $json.body.zip }}</zip>\n<cellphone>{{ $json.body.cellphone.replace(/\\D/g, '') }}</cellphone>\n<email>{{ /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]+$/.test($json.body.email.replace(/,/g, '.').replace(/&/g, '').replace(/</g, '').replace(/>/g, '').replace(/\\.$/, '').replace(/[^a-zA-Z0-9](?=@)/g, '').replace(/^[^a-zA-Z0-9]+/, '')) ? $json.body.email.replace(/,/g, '.').replace(/&/g, '').replace(/</g, '').replace(/>/g, '').replace(/\\.$/, '').replace(/[^a-zA-Z0-9](?=@)/g, '').replace(/^[^a-zA-Z0-9]+/, '') : 'nothing@email.com' }}</email>\n</patient>"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "b3c01caf-d3c7-4723-8b07-45ad45042996",
      "name": "HTTP Create New Patient",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2340,
        -360
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4ced3612-0a23-403f-a7b6-eaef1164f3ec",
              "name": "",
              "value": "<patient>\n  <patientID></patientID> \n  <lastName></lastName>\n  <firstName></firstName>\n  <mi></mi>\n  <suffix></suffix>\n  <gender>F</gender> \n  <ssn>555555555</ssn>\n  <dob>1980-01-25</dob>\n  <street1>123 Blue Street</street1>\n  <street2>Apartment 321</street2>\n  <city>Santa Clara</city>\n  <state>CA</state>\n  <zip>99999</zip>\n  <phone>3122345467</phone>\n  <primaryphone></primaryphone>\n  <workphone>2125551212</workphone>\n  <workphoneext>1234</workphoneext>\n  <cellphone>2127771212</cellphone>\n  <email>test@example.com</email>\n   <maritalstatus>X</maritalstatus>\n  <HIPAAStmtExp>5/5/2025</HIPAAStmtExp>\n  <usualprov>MARFEE</usualprov>\n  <referringdr>MARFEE</referringdr>\n  <pcp>MARFEE</pcp>\n  <employer>AHS</employer>\n  <employmentstatus/>\n  <studentstatus/>\n  <IsGuarantor/>\n  <RelationToGuarantor/>\n  <IsEmergencyContact/>\n  <EmergencyContactRelation/>\n  <AccountType/>\n  <PatientComments/>\n  <MedRecLoc/>\n  <PatientNumber/>\n</patient>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1040,
        80
      ],
      "id": "c2138c2c-7e12-4243-a0e4-059a06a5eae8",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "GetRequiredFields"
            },
            {
              "name": "AppUserID",
              "value": "eliseai"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "="
            },
            {
              "name": "Token",
              "value": "={{ $json.Token }}"
            },
            {
              "name": "Parameter1",
              "value": "=SavePatient"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "a82c6d61-789b-43ed-981e-604924fa24c6",
      "name": "HTTP Create New Patient1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2120,
        -1100
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "getrequiredfieldsinfo",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2340,
        -1100
      ],
      "id": "76563b22-dd12-452c-bcd0-4a91ee591ea2",
      "name": "Split Out"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "acf9d391-a3bb-455b-823b-5bf8f0265587",
              "leftValue": "={{ $json.Required }}",
              "rightValue": "Y",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2560,
        -1100
      ],
      "id": "6e885ba3-57b3-417e-865b-843619e4f015",
      "name": "If"
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2800,
        -1100
      ],
      "id": "35770206-83b4-4a98-85af-3ce976c86f85",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "height": 500,
        "width": 1980,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        -1200
      ],
      "typeVersion": 1,
      "id": "5fd9e68a-5a4c-4476-9e57-eb3a3c1aea18",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "path": "227a6dae-afe1-4505-8dab-cc1021a48d5d",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -20,
        -1100
      ],
      "id": "ad3a6a61-94a1-4d75-933f-cd152895c646",
      "name": "New Patient Website Form",
      "webhookId": "227a6dae-afe1-4505-8dab-cc1021a48d5d"
    },
    {
      "parameters": {
        "content": "# SavePatient Required fields",
        "height": 300,
        "width": 1000,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2040,
        -1200
      ],
      "typeVersion": 1,
      "id": "02968d44-572e-4fc2-8088-4f6bf9d96778",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2700,
        -200
      ],
      "id": "d0468188-0315-43a3-b7f4-3a582c0814e7",
      "name": "Merge"
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectURL": "=https://xl.epicpc.com/webhook/141a4626-dfa8-4ad8-b96f-f4533a5af6eanumber={{ $('Redirect to Schedule').item.json.body.cellphone }}&dobYear={{ $json.body.dob }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        3080,
        0
      ],
      "id": "d8d31131-9030-43fc-9cec-03992abf6362",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        -160
      ],
      "id": "68de8d0c-ee3f-4057-b349-e5c7b44e941b",
      "name": "Redirect to Schedule",
      "webhookId": "cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <script>\n        window.addEventListener(\"pageshow\", function(event) {\n            var historyTraversal = event.persisted || \n                                   (typeof window.performance != \"undefined\" && \n                                    window.performance.navigation.type === 2);\n            if (historyTraversal) {\n                // Handle page restore.\n                window.location.reload();\n            }\n        });\n    </script>\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <!-- Updated title -->\n    <title>EPIC: Ready to Schedule? See Your Available Times 🚀</title>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background: #f5b800;\n            color: #fff;\n            text-align: center;\n        }\n        .container {\n            background: #333;\n            padding: 50px;\n            border-radius: 10px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n            max-width: 600px;\n            width: 100%;\n        }\n        h1 {\n            font-size: 2.4em;\n            margin-bottom: 30px;\n            text-align: center;\n            /* Allow long text to wrap within the container */\n            word-wrap: break-word;\n            overflow-wrap: break-word;\n        }\n        .step {\n            background: rgba(255, 255, 255, 0.1);\n            padding: 20px;\n            margin-bottom: 20px;\n            border-radius: 10px;\n        }\n        .step-label {\n            font-size: 1.3em;\n            margin-bottom: 10px;\n        }\n        select, input[type=\"text\"], input[type=\"date\"] {\n            width: 100%;\n            padding: 15px;\n            margin: 10px 0;\n            border: none;\n            border-radius: 5px;\n            font-size: 1.2em;\n            display: block;\n            color: #333;\n            height: 60px;\n        }\n        input[type=\"text\"] {\n            background-color: #fff;\n            color: #333;\n            border: 1px solid #ccc;\n            padding: 15px;\n        }\n        input#phone {\n            font-size: 2em;\n            font-weight: normal;\n            background-color: #fff;\n            color: #000;\n            border: 1px solid #ccc;\n            padding: 10px;\n            width: calc(100% - 22px);\n        }\n        input[type=\"submit\"] {\n            background-color: #ff6f61;\n            border: none;\n            border-radius: 5px;\n            color: #fff;\n            padding: 15px 30px;\n            font-size: 1.5em;\n            cursor: pointer;\n            transition: background-color 0.3s ease;\n            margin-top: 20px;\n            display: block;\n            width: 100%;\n        }\n        input[type=\"submit\"]:hover {\n            background-color: #ff3b2f;\n        }\n        .dropdown-container {\n            display: flex;\n            justify-content: space-between;\n            gap: 10px;\n            width: calc(100% - 20px);\n            margin: 0 auto;\n        }\n        .dropdown-container select {\n            flex: 1;\n        }\n        .dropdown-label {\n            font-size: 1.2em;\n            margin-bottom: 5px;\n            text-align: left;\n        }\n        .dropdown-group {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            width: 33%;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <!-- Updated header with a two-line message -->\n        <h1>EPIC: Ready to Schedule?<br>See Your Available Times 🚀</h1>\n        <!-- The webhook URL is set without query parameters.\n             All incoming URL parameters will be appended via JavaScript. -->\n        <form id=\"patientForm\" action=\"https://xl.epicpc.com/webhook/141a4626-dfa8-4ad8-b96f-f4533a5af6ea\" method=\"post\">\n            <div class=\"step\">\n                <div class=\"step-label\">Step 1: Select Date of Birth</div>\n                <div class=\"dropdown-container\">\n                    <div class=\"dropdown-group\">\n                        <label class=\"dropdown-label\" for=\"year\">Year</label>\n                        <select id=\"year\" required></select>\n                    </div>\n                    <div class=\"dropdown-group\">\n                        <label class=\"dropdown-label\" for=\"month\">Month</label>\n                        <select id=\"month\" required></select>\n                    </div>\n                    <div class=\"dropdown-group\">\n                        <label class=\"dropdown-label\" for=\"day\">Day</label>\n                        <select id=\"day\" required></select>\n                    </div>\n                </div>\n            </div>\n            <div class=\"step\">\n                <div class=\"step-label\">Step 2: Enter Phone Number</div>\n                <!-- Phone input uses the original name \"number\" -->\n                <input type=\"text\" id=\"phone\" name=\"number\" placeholder=\"Phone Number: 2485551234\" pattern=\"\\d*\" required>\n            </div>\n            <!-- Hidden DOB field uses the original name \"dobYear\" -->\n            <input type=\"hidden\" id=\"dob\" name=\"dobYear\">\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            // Append any incoming URL parameters to the form action\n            const form = document.getElementById('patientForm');\n            const currentSearch = window.location.search;\n            if (currentSearch && currentSearch.length > 0) {\n                // Use only the base URL from the action and append the current query string\n                const baseAction = form.getAttribute('action').split('?')[0];\n                form.setAttribute('action', baseAction + currentSearch);\n            }\n\n            // Populate the DOB dropdowns\n            const yearSelect = document.getElementById('year');\n            const monthSelect = document.getElementById('month');\n            const daySelect = document.getElementById('day');\n\n            const currentYear = new Date().getFullYear();\n            const earliestYear = 1900;\n\n            for (let year = currentYear; year >= earliestYear; year--) {\n                const option = document.createElement('option');\n                option.value = year;\n                option.textContent = year;\n                yearSelect.appendChild(option);\n            }\n\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n            for (let month = 1; month <= 12; month++) {\n                const option = document.createElement('option');\n                option.value = month;\n                option.textContent = monthNames[month - 1];\n                monthSelect.appendChild(option);\n            }\n\n            function updateDays() {\n                const year = parseInt(yearSelect.value);\n                const month = parseInt(monthSelect.value);\n                daySelect.innerHTML = '';\n\n                const daysInMonth = new Date(year, month, 0).getDate();\n                for (let day = 1; day <= daysInMonth; day++) {\n                    const option = document.createElement('option');\n                    option.value = day;\n                    option.textContent = day;\n                    daySelect.appendChild(option);\n                }\n            }\n\n            yearSelect.addEventListener('change', updateDays);\n            monthSelect.addEventListener('change', updateDays);\n\n            updateDays();\n\n            // On form submission, combine DOB parts into one value\n            form.addEventListener('submit', function(event) {\n                const year = yearSelect.value;\n                const month = monthSelect.value.padStart(2, '0');\n                const day = daySelect.value.padStart(2, '0');\n                document.getElementById('dob').value = `${year}-${month}-${day}`;\n                \n                // Disable submit button to prevent duplicate submissions\n                const submitButton = form.querySelector('input[type=\"submit\"]');\n                submitButton.disabled = true;\n                submitButton.value = 'Submitting...';\n            });\n\n            // Ensure only numeric input for phone number\n            document.getElementById('phone').addEventListener('input', function () {\n                this.value = this.value.replace(/[^0-9]/g, '');\n            });\n        });\n    </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        -1360
      ],
      "id": "a9b52e52-cb54-4435-8b9b-8e7066f6ac7e",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Patient Portal</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n      background-color: #333; /* Set background to match header */\n    }\n    /* Header & Navigation */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      z-index: 1000;\n    }\n    nav {\n      display: flex;\n    }\n    nav button {\n      border: none;\n      padding: 10px 20px;\n      margin-left: 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* Button Colors */\n    #scheduleBtn {\n      background: #4caf50;\n    }\n    #scheduleBtn:hover,\n    #scheduleBtn.active {\n      background: #43a047;\n    }\n    #referralBtn {\n      background: #555;\n    }\n    #referralBtn:hover,\n    #referralBtn.active {\n      background: #444;\n    }\n    /* Hamburger for Mobile */\n    .hamburger {\n      display: none;\n      background: none;\n      border: none;\n      color: #fff;\n      font-size: 24px;\n      cursor: pointer;\n    }\n    /* Iframe Container (top offset will be set dynamically) */\n    .iframe-container {\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n    /* Referral Modal */\n    #referralModal {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n      z-index: 2000;\n    }\n    #referralModal .modal-content {\n      background: #fff;\n      padding: 20px;\n      border-radius: 5px;\n      width: 90%;\n      max-width: 400px;\n      position: relative;\n    }\n    #referralModal .close {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      cursor: pointer;\n      font-size: 1.2em;\n    }\n    #referralModal form {\n      display: flex;\n      flex-direction: column;\n    }\n    #referralModal form label {\n      margin-top: 10px;\n    }\n    #referralModal form input {\n      padding: 8px;\n      margin-top: 5px;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n    #referralModal form button {\n      margin-top: 15px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #ff6f61;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #referralModal form button:hover {\n      background: #ff3b2f;\n    }\n    #scanMeBtn {\n      margin-top: 10px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #2196f3;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #scanMeBtn:hover {\n      background: #1e88e5;\n    }\n    /* QR Scanner Elements */\n    #video {\n      width: 100%;\n      max-width: 400px;\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      display: none;\n    }\n    #canvas {\n      display: none;\n    }\n    #result {\n      font-size: 1.2rem;\n      margin-top: 1rem;\n      color: green;\n      display: none;\n    }\n    /* Current Referral Display in Modal (Improved formatting) */\n    #currentReferralDisplay {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 10px;\n      padding: 8px;\n      background: #f9f9f9;\n      border-radius: 3px;\n    }\n    #currentReferralDisplay label {\n      flex-shrink: 0;\n      font-weight: bold;\n    }\n    /* Use a read-only input for the referral URL */\n    #currentReferralURL {\n      flex: 1;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n      padding: 6px;\n      font-size: 0.9em;\n      color: #333;\n      background: #fff;\n    }\n    /* Copy Link Button Styles */\n    #copyReferralUrl {\n      border: none;\n      border-radius: 3px;\n      background: #4caf50;\n      color: #fff;\n      font-size: 0.9em;\n      cursor: pointer;\n      padding: 6px 10px;\n    }\n    #copyReferralUrl:hover {\n      background: #43a047;\n    }\n    /* Raw Referral Params display */\n    #rawReferralParams {\n      margin-bottom: 10px;\n      font-size: 0.9em;\n      background: #f0f0f0;\n      padding: 8px;\n      border-radius: 3px;\n      word-break: break-all;\n    }\n    #rawReferralParams strong {\n      margin-right: 4px;\n    }\n    /* Mobile Styles */\n    @media (max-width: 600px) {\n      nav {\n        display: none;\n        flex-direction: column;\n        width: 100%;\n        background: #333;\n      }\n      nav.active {\n        display: flex;\n      }\n      .hamburger {\n        display: block;\n      }\n    }\n  </style>\n  <!-- Load jsQR library from CDN -->\n  <script src=\"https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.js\"></script>\n</head>\n<body>\n  <!-- Header with Hamburger Menu (no title shown) -->\n  <header>\n    <button id=\"hamburger\" class=\"hamburger\">&#9776;</button>\n    <nav id=\"navMenu\">\n      <button id=\"referralBtn\">Referral?</button>\n      <button id=\"scheduleBtn\" class=\"active\">Schedule Now</button>\n    </nav>\n  </header>\n\n  <!-- Main Iframe -->\n  <div class=\"iframe-container\">\n    <iframe id=\"contentFrame\" title=\"Patient Portal\"></iframe>\n  </div>\n\n  <!-- Referral Modal -->\n  <div id=\"referralModal\">\n    <div class=\"modal-content\">\n      <!-- The close button is hidden/disabled if no referral is set -->\n      <span class=\"close\" id=\"closeModal\">&times;</span>\n      <h2>Referral Information</h2>\n\n      <!-- Display full URL and copy button -->\n      <div id=\"currentReferralDisplay\">\n        <label for=\"currentReferralURL\">Referral URL:</label>\n        <input type=\"text\" id=\"currentReferralURL\" readonly value=\"None\" />\n        <button id=\"copyReferralUrl\">Copy Link</button>\n      </div>\n\n      <!-- Display raw referral params -->\n      <div id=\"rawReferralParams\">\n        <strong>Referral Params:</strong>\n        <span id=\"referralParamsValue\">None</span>\n      </div>\n\n      <!-- Manual Entry Form -->\n      <form id=\"referralForm\">\n        <label for=\"campaign\">Campaign:</label>\n        <input type=\"text\" id=\"campaign\" name=\"campaign\" placeholder=\"Enter campaign\" />\n        <label for=\"source\">Source:</label>\n        <input type=\"text\" id=\"source\" name=\"source\" placeholder=\"Enter source\" />\n        <label for=\"medium\">Medium:</label>\n        <input type=\"text\" id=\"medium\" name=\"medium\" placeholder=\"Enter medium\" />\n        <label for=\"event\">Event:</label>\n        <input type=\"text\" id=\"event\" name=\"event\" placeholder=\"Enter event\" />\n        <label for=\"other\">Other:</label>\n        <input type=\"text\" id=\"other\" name=\"other\" placeholder=\"Enter other info\" />\n        <button type=\"submit\">Submit Referral</button>\n      </form>\n\n      <!-- OR use QR Code Scan -->\n      <button type=\"button\" id=\"scanMeBtn\">Scan Me</button>\n      <!-- QR Scanner Elements -->\n      <video id=\"video\" autoplay muted playsinline></video>\n      <canvas id=\"canvas\"></canvas>\n      <p id=\"result\"></p>\n    </div>\n  </div>\n\n  <script>\n    // --- Disable Back Button ---\n    history.pushState(null, null, location.href);\n    window.onpopstate = function () {\n      history.go(1);\n    };\n\n    // --- Referral Caching ---\n    function getCachedReferral() {\n      return sessionStorage.getItem(\"referralParams\") || \"\";\n    }\n    function setCachedReferral(params) {\n      sessionStorage.setItem(\"referralParams\", params);\n    }\n\n    // We'll use this flag to prevent closing the modal if no referral is set\n    let forceReferral = false;\n\n    // Base URL for scheduling\n    const scheduleUrlBase = \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\";\n\n    function buildScheduleUrl() {\n      let url = scheduleUrlBase;\n      const referral = getCachedReferral();\n      if (referral.trim() !== \"\") {\n        url += \"?\" + referral;\n      }\n      return url;\n    }\n\n    // --- Fill the form fields if the cached referral has matching params ---\n    function fillFormFieldsFromReferralParams() {\n      const referral = getCachedReferral();\n      if (!referral) return;\n      const params = new URLSearchParams(referral);\n      if (params.has(\"campaign\")) {\n        document.getElementById(\"campaign\").value = params.get(\"campaign\");\n      }\n      if (params.has(\"source\")) {\n        document.getElementById(\"source\").value = params.get(\"source\");\n      }\n      if (params.has(\"medium\")) {\n        document.getElementById(\"medium\").value = params.get(\"medium\");\n      }\n      if (params.has(\"event\")) {\n        document.getElementById(\"event\").value = params.get(\"event\");\n      }\n      if (params.has(\"other\")) {\n        document.getElementById(\"other\").value = params.get(\"other\");\n      }\n    }\n\n    // --- Iframe & Navigation ---\n    const iframe = document.getElementById(\"contentFrame\");\n    const scheduleBtn = document.getElementById(\"scheduleBtn\");\n    const referralBtn = document.getElementById(\"referralBtn\");\n    const hamburger = document.getElementById(\"hamburger\");\n    const navMenu = document.getElementById(\"navMenu\");\n\n    // On initial load, use cached referral params if available.\n    // If no referral, we show the modal immediately & do NOT allow closing until set.\n    iframe.src = buildScheduleUrl();\n\n    if (!getCachedReferral()) {\n      forceReferral = true;\n      const referralModal = document.getElementById(\"referralModal\");\n      referralModal.style.display = \"flex\";\n      document.getElementById(\"closeModal\").style.display = \"none\";\n    }\n\n    function updateIframe(url, activeButton) {\n      iframe.src = url;\n      // Update active states.\n      scheduleBtn.classList.remove(\"active\");\n      referralBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n      // Close the header menu (if open)\n      navMenu.classList.remove(\"active\");\n    }\n\n    scheduleBtn.addEventListener(\"click\", function() {\n      updateIframe(buildScheduleUrl(), scheduleBtn);\n    });\n\n    // --- Hamburger Menu for Mobile ---\n    hamburger.addEventListener(\"click\", function() {\n      navMenu.classList.toggle(\"active\");\n    });\n\n    // --- Referral Modal & Current Referral Display ---\n    const referralModal = document.getElementById(\"referralModal\");\n    const closeModal = document.getElementById(\"closeModal\");\n    const referralForm = document.getElementById(\"referralForm\");\n    const currentReferralInput = document.getElementById(\"currentReferralURL\");\n    const referralParamsValue = document.getElementById(\"referralParamsValue\");\n\n    closeModal.addEventListener(\"click\", function() {\n      if (!forceReferral) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    window.addEventListener(\"click\", function(event) {\n      if (!forceReferral && event.target === referralModal) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    referralBtn.addEventListener(\"click\", function() {\n      referralModal.style.display = \"flex\";\n      navMenu.classList.remove(\"active\");\n      currentReferralInput.value = buildScheduleUrl();\n      const rawParams = getCachedReferral() || \"None\";\n      referralParamsValue.textContent = rawParams;\n      fillFormFieldsFromReferralParams();\n    });\n\n    document.getElementById(\"copyReferralUrl\").addEventListener(\"click\", function() {\n      const fullUrl = buildScheduleUrl();\n      navigator.clipboard.writeText(fullUrl)\n        .then(function() {\n          alert(\"Referral URL copied to clipboard!\");\n        })\n        .catch(function(err) {\n          alert(\"Failed to copy: \" + err);\n        });\n    });\n\n    referralForm.addEventListener(\"submit\", function(e) {\n      e.preventDefault();\n      const formData = new FormData(referralForm);\n      const referralParams = new URLSearchParams(formData).toString();\n      setCachedReferral(referralParams);\n      forceReferral = false;\n      closeModal.style.display = \"block\";\n      updateIframe(buildScheduleUrl(), scheduleBtn);\n      referralModal.style.display = \"none\";\n    });\n\n    // --- QR Scanner Functions using jsQR ---\n    const videoElem = document.getElementById(\"video\");\n    const canvasElem = document.getElementById(\"canvas\");\n    const canvasContext = canvasElem.getContext(\"2d\");\n    const resultElement = document.getElementById(\"result\");\n\n    let scanning = false;\n    let videoStream = null;\n\n    function startScanner() {\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(stream => {\n          videoStream = stream;\n          videoElem.srcObject = stream;\n          videoElem.setAttribute(\"playsinline\", true);\n          videoElem.style.display = \"block\";\n          videoElem.play();\n          scanning = true;\n          tick();\n        })\n        .catch(err => {\n          console.error(err);\n          alert(\"Error accessing camera: \" + err);\n        });\n    }\n\n    function stopScanner() {\n      scanning = false;\n      videoElem.style.display = \"none\";\n      if (videoStream) {\n        videoStream.getTracks().forEach(track => track.stop());\n      }\n    }\n\n    function tick() {\n      if (!scanning) return;\n      if (videoElem.readyState === videoElem.HAVE_ENOUGH_DATA) {\n        canvasElem.width = videoElem.videoWidth;\n        canvasElem.height = videoElem.videoHeight;\n        canvasContext.drawImage(videoElem, 0, 0, canvasElem.width, canvasElem.height);\n        const imageData = canvasContext.getImageData(0, 0, canvasElem.width, canvasElem.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: \"dontInvert\"\n        });\n        if (code) {\n          scanning = false;\n          stopScanner();\n          drawLine(code.location.topLeftCorner, code.location.topRightCorner, \"#FF3B58\");\n          drawLine(code.location.topRightCorner, code.location.bottomRightCorner, \"#FF3B58\");\n          drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, \"#FF3B58\");\n          drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, \"#FF3B58\");\n          resultElement.innerText = \"QR Code Data: \" + code.data;\n          resultElement.style.display = \"block\";\n          setCachedReferral(code.data);\n          forceReferral = false;\n          closeModal.style.display = \"block\";\n          updateIframe(buildScheduleUrl(), scheduleBtn);\n          referralModal.style.display = \"none\";\n        } else {\n          requestAnimationFrame(tick);\n        }\n      } else {\n        requestAnimationFrame(tick);\n      }\n    }\n\n    function drawLine(begin, end, color) {\n      canvasContext.beginPath();\n      canvasContext.moveTo(begin.x, begin.y);\n      canvasContext.lineTo(end.x, end.y);\n      canvasContext.lineWidth = 4;\n      canvasContext.strokeStyle = color;\n      canvasContext.stroke();\n    }\n\n    const scanMeBtn = document.getElementById(\"scanMeBtn\");\n    scanMeBtn.addEventListener(\"click\", function() {\n      resultElement.style.display = \"none\";\n      startScanner();\n    });\n\n    // --- Adjust Iframe Container to sit directly below the header ---\n    function adjustIframeContainer() {\n      const headerHeight = document.querySelector(\"header\").clientHeight;\n      document.querySelector(\".iframe-container\").style.top = headerHeight + \"px\";\n    }\n    window.addEventListener(\"resize\", adjustIframeContainer);\n    window.addEventListener(\"load\", adjustIframeContainer);\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        200,
        -1100
      ],
      "id": "cb8ecce0-4fbd-4d6d-a6ae-5fe9b128d7ef",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "path": "5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1300,
        -1420
      ],
      "id": "3d1ca5a2-c930-41c5-af0b-c1982f1b6733",
      "name": "Talk to Clark",
      "webhookId": "5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb"
    },
    {
      "parameters": {
        "path": "f0d240c5-da77-4580-b85e-be38eac4f1a6",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -20,
        -860
      ],
      "id": "0ea3b853-9358-4e09-b496-e52a9e6efabd",
      "name": "New Patient",
      "webhookId": "f0d240c5-da77-4580-b85e-be38eac4f1a6"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Prevent caching -->\n  <meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\" />\n  <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n  <meta http-equiv=\"Expires\" content=\"0\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>New EPIC Patient Signup! 🚀</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    body {\n      /* Fallback background before media queries apply */\n      background: #f5b800;\n      font-family: Arial, sans-serif;\n      color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      padding: 20px;\n    }\n    /* Mobile header: will be visible on mobile only */\n    .mobile-header {\n      display: none;\n    }\n    .container {\n      background: #333;\n      padding: 30px;\n      border-radius: 10px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      width: 100%;\n      max-width: 600px;\n      position: relative;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    /* QR Code Container */\n    .qr-code-container {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    .qr-code-container p {\n      margin-bottom: 10px;\n    }\n    .qr-code-container img {\n      border: 1px solid #fff;\n      border-radius: 8px;\n    }\n    /* Multi-Step Form */\n    .form-step {\n      display: none;\n    }\n    .form-step.active {\n      display: block;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n      color: #fff;\n    }\n    input,\n    select {\n      width: 100%;\n      padding: 10px;\n      border-radius: 5px;\n      border: none;\n      background: #555;\n      color: #fff;\n    }\n    /* Navigation Buttons */\n    .btn-container {\n      display: flex;\n      justify-content: space-between;\n      margin-top: 20px;\n    }\n    button {\n      padding: 10px 20px;\n      border: none;\n      border-radius: 5px;\n      color: #fff;\n      cursor: pointer;\n      transition: background 0.3s ease;\n    }\n    #next-1 {\n      background: #ff6f61;\n    }\n    #next-1:hover {\n      background: #ff3b2f;\n    }\n    #back-btn {\n      background: #555;\n    }\n    #back-btn:hover {\n      background: #444;\n    }\n    /* Dot Indicators */\n    .dots {\n      display: flex;\n      justify-content: center;\n      margin-top: 20px;\n    }\n    .dot {\n      height: 12px;\n      width: 12px;\n      margin: 0 5px;\n      background-color: #777;\n      border-radius: 50%;\n      display: inline-block;\n    }\n    .dot.active {\n      background-color: #fff;\n    }\n    /* Loader Overlay Styles */\n    #loaderOverlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.7);\n      display: none;\n      z-index: 9999;\n    }\n    #loaderOverlay .loader-content {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      text-align: center;\n      color: #fff;\n    }\n    .spinner {\n      border: 4px solid rgba(255, 255, 255, 0.3);\n      border-top: 4px solid #fff;\n      border-radius: 50%;\n      width: 30px;\n      height: 30px;\n      animation: spin 1s linear infinite;\n      margin: 0 auto 10px;\n    }\n    @keyframes spin {\n      to { transform: rotate(360deg); }\n    }\n\n    /* Responsive Styles Using EPIC Picture/Scrolling */\n\n    /* Mobile View (max-width: 600px) */\n    @media (max-width: 600px) {\n      body {\n        background: #2c2c2c;\n        flex-direction: column;\n        align-items: center;\n        padding: 0;\n      }\n      .mobile-header {\n        display: block;\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        z-index: 999;\n        text-align: center;\n        background: #2c2c2c;\n        padding: 10px 0;\n      }\n      .mobile-header img {\n        width: 95%;\n        max-width: 600px;\n        border-radius: 10px;\n      }\n      .container {\n        margin: 120px auto 20px auto; /* leave space for the mobile header */\n        padding: 30px 20px;\n      }\n    }\n\n    /* Desktop View (min-width: 601px) */\n    @media (min-width: 601px) {\n      body {\n        background: url(\"https://file.cybertech.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png\")\n          no-repeat center center fixed;\n        background-size: cover;\n        padding: 20px;\n      }\n      .mobile-header {\n        display: none;\n      }\n      .container {\n        margin: 50px auto;\n        padding: 50px;\n      }\n    }\n  </style>\n  <script>\n    // Force reload if the page is loaded via the back button or from cache\n    window.addEventListener(\"pageshow\", function (event) {\n      if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {\n        window.location.reload();\n      }\n    });\n\n    // Function to validate all required fields in a step\n    function validateStep(stepElement) {\n      let valid = true;\n      const fields = stepElement.querySelectorAll('input, select');\n      fields.forEach((field) => {\n        if (!field.checkValidity()) {\n          field.reportValidity();\n          valid = false;\n        }\n      });\n      return valid;\n    }\n    \n    // Populate hidden fields for cellphone and dob from URL parameters\n    window.addEventListener('DOMContentLoaded', () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const numberParam = urlParams.get('number');\n      const dobYearParam = urlParams.get('dobYear');\n      if(numberParam) {\n        document.getElementById('cellphone').value = numberParam;\n      }\n      if(dobYearParam) {\n        document.getElementById('dob').value = dobYearParam;\n      }\n    });\n  </script>\n</head>\n<body>\n  <!-- Mobile Header: Visible on mobile devices -->\n  <div class=\"mobile-header\">\n    <img src=\"https://file.cybertech.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png\" alt=\"EPIC Health\" />\n  </div>\n\n  <div class=\"container\">\n    <h1>New EPIC Patient Signup! 🚀</h1>\n    <!-- QR Code Section -->\n    <div class=\"qr-code-container\">\n      <p>Prefer to do on your mobile? Scan Me:</p>\n      <img id=\"qrCode\" src=\"\" alt=\"QR Code\" />\n    </div>\n    <form id=\"patientForm\" action=\"https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf\" method=\"post\">\n      <!-- Hidden fields for already captured data -->\n      <input type=\"hidden\" id=\"cellphone\" name=\"cellphone\" />\n      <input type=\"hidden\" id=\"dob\" name=\"dob\" />\n      \n      <!-- Step 1: Personal Information (First/Last Name, Email, Gender) -->\n      <div class=\"form-step active\" id=\"step-1\">\n        <div class=\"form-group\">\n          <label for=\"firstName\">First Name</label>\n          <input id=\"firstName\" type=\"text\" name=\"firstName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"lastName\">Last Name</label>\n          <input id=\"lastName\" type=\"text\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input id=\"email\" type=\"email\" name=\"email\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"gender\">Gender</label>\n          <select id=\"gender\" name=\"gender\" required>\n            <option value=\"\" disabled selected>Select Gender</option>\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"Other\">Other</option>\n          </select>\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"back-btn\" onclick=\"window.history.back()\">Oops, I'm not new, try again</button>\n          <button type=\"button\" id=\"next-1\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 2: Physical Address -->\n      <div class=\"form-step\" id=\"step-2\">\n        <div class=\"form-group\">\n          <label for=\"street1\">Street Address</label>\n          <input id=\"street1\" type=\"text\" name=\"street1\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"city\">City</label>\n          <input id=\"city\" type=\"text\" name=\"city\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"state\">State</label>\n          <input id=\"state\" type=\"text\" name=\"state\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"zip\">Zip Code</label>\n          <input id=\"zip\" type=\"text\" name=\"zip\" required pattern=\"\\d{5}\">\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-2\">Previous</button>\n          <button type=\"submit\" id=\"submitBtn\">Submit</button>\n        </div>\n      </div>\n\n      <!-- Dot Indicator for two steps -->\n      <div class=\"dots\">\n        <span class=\"dot active\" data-step=\"1\"></span>\n        <span class=\"dot\" data-step=\"2\"></span>\n      </div>\n    </form>\n  </div>\n\n  <!-- Loader Overlay -->\n  <div id=\"loaderOverlay\">\n    <div class=\"loader-content\">\n      <div class=\"spinner\"></div>\n      <p>Submitting...</p>\n    </div>\n  </div>\n\n  <script>\n    // Append current URL parameters to the form action (if any)\n    const form = document.getElementById('patientForm');\n    const currentSearch = window.location.search;\n    if (currentSearch && currentSearch.length > 0) {\n      const baseAction = form.getAttribute('action').split('?')[0];\n      form.setAttribute('action', baseAction + currentSearch);\n    }\n\n    // Generate QR code URL without the \"number\" and \"dobYear\" parameters\n    const qrCodeImg = document.getElementById('qrCode');\n    const urlParams = new URLSearchParams(window.location.search);\n    // Remove parameters that should not be shown\n    urlParams.delete('number');\n    urlParams.delete('dobYear');\n    const filteredQuery = urlParams.toString();\n    const qrBaseURL = \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\";\n    const qrURL = filteredQuery ? qrBaseURL + \"?\" + filteredQuery : qrBaseURL;\n    qrCodeImg.src = \"https://api.qrserver.com/v1/create-qr-code/?data=\" + encodeURIComponent(qrURL) + \"&size=150x150\";\n\n    // Multi-step navigation logic for two steps\n    const steps = document.querySelectorAll('.form-step');\n    const dots = document.querySelectorAll('.dot');\n\n    document.getElementById('next-1').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-1'))) {\n        steps[0].classList.remove('active');\n        steps[1].classList.add('active');\n        updateDots(2);\n      }\n    });\n\n    document.getElementById('prev-2').addEventListener('click', () => {\n      steps[1].classList.remove('active');\n      steps[0].classList.add('active');\n      updateDots(1);\n    });\n\n    function updateDots(activeStep) {\n      dots.forEach(dot => {\n        dot.classList.remove('active');\n        if (dot.getAttribute('data-step') == activeStep) {\n          dot.classList.add('active');\n        }\n      });\n    }\n\n    // Form submission event to disable submit button and show loader overlay\n    form.addEventListener('submit', function(e) {\n      document.getElementById('submitBtn').disabled = true;\n      document.getElementById('loaderOverlay').style.display = 'block';\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        -860
      ],
      "id": "9b982685-8ba9-4eeb-8bfa-fbd280baf652",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>New Patient Signup</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    body {\n      background: #f5b800;\n      font-family: Arial, sans-serif;\n      color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n    }\n    .container {\n      background: #333;\n      padding: 30px;\n      border-radius: 10px;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.3);\n      width: 90%;\n      max-width: 600px;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    /* Multi-Step Form */\n    .form-step {\n      display: none;\n    }\n    .form-step.active {\n      display: block;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n      color: #fff;\n    }\n    input,\n    select {\n      width: 100%;\n      padding: 10px;\n      border-radius: 5px;\n      border: none;\n      background: #555;\n      color: #fff;\n    }\n    /* Navigation Buttons */\n    .btn-container {\n      display: flex;\n      justify-content: flex-end;\n      margin-top: 20px;\n    }\n    button {\n      padding: 10px 20px;\n      background: #ff6f61;\n      border: none;\n      border-radius: 5px;\n      color: #fff;\n      cursor: pointer;\n      transition: background 0.3s ease;\n    }\n    button:hover {\n      background: #ff3b2f;\n    }\n    /* Dot Indicators */\n    .dots {\n      display: flex;\n      justify-content: center;\n      margin-top: 20px;\n    }\n    .dot {\n      height: 12px;\n      width: 12px;\n      margin: 0 5px;\n      background-color: #777;\n      border-radius: 50%;\n      display: inline-block;\n    }\n    .dot.active {\n      background-color: #fff;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>New Patient Signup</h1>\n    <form id=\"patientForm\" action=\"https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf\" method=\"post\">\n      <!-- Step 1: Personal Information -->\n      <div class=\"form-step active\" id=\"step-1\">\n        <div class=\"form-group\">\n          <label for=\"firstName\">First Name</label>\n          <input id=\"firstName\" type=\"text\" name=\"firstName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"lastName\">Last Name</label>\n          <input id=\"lastName\" type=\"text\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"gender\">Gender</label>\n          <select id=\"gender\" name=\"gender\" required>\n            <option value=\"\" disabled selected>Select Gender</option>\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"Other\">Other</option>\n          </select>\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"next-1\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 2: Contact Information -->\n      <div class=\"form-step\" id=\"step-2\">\n        <div class=\"form-group\">\n          <label for=\"dob\">Date of Birth</label>\n          <input id=\"dob\" type=\"date\" name=\"dob\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"cellphone\">Cellphone</label>\n          <input id=\"cellphone\" type=\"text\" name=\"cellphone\" placeholder=\"e.g., 2485551234\" required pattern=\"\\d+\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input id=\"email\" type=\"email\" name=\"email\" required>\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"next-2\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 3: Address Information -->\n      <div class=\"form-step\" id=\"step-3\">\n        <div class=\"form-group\">\n          <label for=\"street1\">Street Address</label>\n          <input id=\"street1\" type=\"text\" name=\"street1\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"city\">City</label>\n          <input id=\"city\" type=\"text\" name=\"city\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"state\">State</label>\n          <input id=\"state\" type=\"text\" name=\"state\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"zip\">Zip Code</label>\n          <input id=\"zip\" type=\"text\" name=\"zip\" required pattern=\"\\d{5}\">\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"submit\" id=\"submitBtn\">Submit</button>\n        </div>\n      </div>\n\n      <!-- Dot Indicator -->\n      <div class=\"dots\">\n        <span class=\"dot active\" data-step=\"1\"></span>\n        <span class=\"dot\" data-step=\"2\"></span>\n        <span class=\"dot\" data-step=\"3\"></span>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Get step elements and dot indicators\n    const steps = document.querySelectorAll('.form-step');\n    const dots = document.querySelectorAll('.dot');\n\n    // Move to Step 2\n    document.getElementById('next-1').addEventListener('click', () => {\n      steps[0].classList.remove('active');\n      steps[1].classList.add('active');\n      updateDots(2);\n    });\n\n    // Move to Step 3\n    document.getElementById('next-2').addEventListener('click', () => {\n      steps[1].classList.remove('active');\n      steps[2].classList.add('active');\n      updateDots(3);\n    });\n\n    function updateDots(activeStep) {\n      dots.forEach(dot => {\n        dot.classList.remove('active');\n        if (dot.getAttribute('data-step') == activeStep) {\n          dot.classList.add('active');\n        }\n      });\n    }\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        520,
        -860
      ],
      "id": "1853e4e0-ac5b-4804-bcf6-9169d3bca856",
      "name": "Respond to Webhook4"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>EPIC Scheduling 🚀 With Virtual Clark!</title>\n  <!-- Include Twilio Client SDK -->\n  <script src=\"https://media.twiliocdn.com/sdk/js/client/v1.10/twilio.min.js\"></script>\n  <style>\n    /* Color Scheme: Yellow (#f5b800) & Dark Grey (#333) with white text */\n    body {\n      margin: 0;\n      padding: 0;\n      background-color: #f5b800;\n      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n    }\n    .container {\n      background-color: #333;\n      color: #fff;\n      padding: 40px;\n      border-radius: 8px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      max-width: 600px;\n      width: 90%;\n      text-align: center;\n    }\n    h1 {\n      font-size: 2.5rem;\n      margin-bottom: 20px;\n    }\n    /* Default button style */\n    .btn {\n      display: inline-block;\n      background-color: #f5b800;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 12px 24px;\n      font-size: 1rem;\n      margin: 10px;\n      cursor: pointer;\n      text-transform: uppercase;\n      letter-spacing: 0.05em;\n      transition: background-color 0.3s ease;\n      font-weight: bold;\n    }\n    .btn:hover {\n      background-color: rgba(245, 184, 0, 0.85);\n    }\n    /* Specific styling for the Talk to Clark button */\n    #callNowBtn {\n      background-color: #28a745; /* Green background */\n    }\n    #callNowBtn:hover {\n      background-color: #218838; /* Darker green on hover */\n    }\n    /* QR Code styling with a white border */\n    .qr-code {\n      margin: 20px 0;\n    }\n    .qr-code img {\n      width: 150px;\n      height: 150px;\n      border: 4px solid #fff;\n      border-radius: 8px;\n    }\n    /* Popup styling for in-progress call */\n    .popup {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(51, 51, 51, 0.9);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n    }\n    .popup-content {\n      background-color: #333;\n      color: #fff;\n      padding: 30px;\n      border-radius: 8px;\n      text-align: center;\n      width: 90%;\n      max-width: 350px;\n    }\n    .popup-content p {\n      font-size: 1.2rem;\n      margin-bottom: 20px;\n    }\n    .popup-content button {\n      background-color: #f5b800;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 10px 20px;\n      font-size: 1rem;\n      cursor: pointer;\n      transition: background-color 0.3s ease;\n      font-weight: bold;\n    }\n    .popup-content button:hover {\n      background-color: rgba(245, 184, 0, 0.85);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>EPIC Scheduling 🚀<br>With Virtual Clark!</h1>\n    <!-- QR Code Container in the middle -->\n    <div class=\"qr-code\">\n      <img id=\"qrCode\" alt=\"QR Code\" />\n    </div>\n    <!-- \"Talk to Clark\" button at the bottom -->\n    <button id=\"callNowBtn\" class=\"btn\">Talk to Clark</button>\n  </div>\n\n  <!-- Popup for in-progress call -->\n  <div id=\"callPopup\" class=\"popup\" style=\"display: none;\">\n    <div class=\"popup-content\">\n      <p id=\"callStatusMessage\">Call in progress...</p>\n      <button id=\"endCallBtn\">End Call</button>\n    </div>\n  </div>\n\n  <script>\n    // --- QR Code Generation ---\n    document.addEventListener(\"DOMContentLoaded\", function() {\n      var currentUrl = window.location.href;\n      var qrCodeImage = document.getElementById(\"qrCode\");\n      // Using a free QR code generator API\n      qrCodeImage.src = \"https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=\" + encodeURIComponent(currentUrl);\n    });\n\n    // --- Twilio Softphone Integration ---\n    let activeConnection = null;\n    // Use a default user if one is not provided via the URL\n    const user = new URLSearchParams(window.location.search).get(\"user\") || \"user123\";\n    const phoneNumber = \"3134746044\"; // Number to be called\n\n    // Replace with your actual token endpoint\n    const TOKEN_URL = \"https://xl.epicpc.com/webhook/a41896ee-ba31-450d-9090-b3baed0b256b\";\n\n    function fetchAccessToken() {\n      return fetch(TOKEN_URL + window.location.search)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(\"Failed to fetch token\");\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (!data.token) {\n            throw new Error(\"No token received\");\n          }\n          return data.token;\n        });\n    }\n\n    function initTwilio() {\n      fetchAccessToken()\n        .then(token => {\n          Twilio.Device.setup(token, { debug: true });\n        })\n        .catch(err => {\n          console.error(\"Error initializing Twilio device:\", err);\n        });\n    }\n\n    window.onload = function() {\n      initTwilio();\n    };\n\n    // --- Functions to manage call popup and connection ---\n    function startCall() {\n      // Initiate a call via Twilio with parameters: phone number and user identifier.\n      const params = {\n        To: phoneNumber,\n        user: user\n      };\n      const connection = Twilio.Device.connect(params);\n      if (connection) {\n        activeConnection = connection;\n        showCallPopup();\n      } else {\n        console.error(\"Failed to establish connection.\");\n      }\n    }\n\n    function showCallPopup() {\n      document.getElementById(\"callPopup\").style.display = \"flex\";\n    }\n\n    function hideCallPopup() {\n      document.getElementById(\"callPopup\").style.display = \"none\";\n    }\n\n    function endCall() {\n      if (activeConnection) {\n        Twilio.Device.disconnectAll();\n        activeConnection = null;\n      }\n      hideCallPopup();\n    }\n\n    // --- Event Listeners ---\n    document.getElementById(\"callNowBtn\").addEventListener(\"click\", function () {\n      startCall();\n    });\n\n    document.getElementById(\"endCallBtn\").addEventListener(\"click\", function () {\n      endCall();\n    });\n\n    // Automatically hide the call popup if the call disconnects.\n    Twilio.Device.disconnect(function () {\n      hideCallPopup();\n      activeConnection = null;\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1640,
        -1420
      ],
      "id": "1db14c34-b1d6-404d-8f28-384817785925",
      "name": "Respond to Webhook5"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Prevent caching -->\n  <meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\" />\n  <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n  <meta http-equiv=\"Expires\" content=\"0\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>New EPIC Patient Signup! 🚀</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    body {\n      background: #f5b800;\n      font-family: Arial, sans-serif;\n      color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      padding: 20px;\n    }\n    .container {\n      background: #333;\n      padding: 30px;\n      border-radius: 10px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      width: 100%;\n      max-width: 600px;\n      position: relative;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    /* QR Code Container */\n    .qr-code-container {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    .qr-code-container img {\n      border: 2px solid #fff;\n      border-radius: 5px;\n    }\n    /* Multi-Step Form */\n    .form-step {\n      display: none;\n    }\n    .form-step.active {\n      display: block;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n      color: #fff;\n    }\n    input,\n    select {\n      width: 100%;\n      padding: 10px;\n      border-radius: 5px;\n      border: none;\n      background: #555;\n      color: #fff;\n    }\n    /* Navigation Buttons */\n    .btn-container {\n      display: flex;\n      justify-content: space-between;\n      margin-top: 20px;\n    }\n    button {\n      padding: 10px 20px;\n      background: #ff6f61;\n      border: none;\n      border-radius: 5px;\n      color: #fff;\n      cursor: pointer;\n      transition: background 0.3s ease;\n    }\n    button:hover {\n      background: #ff3b2f;\n    }\n    /* Dot Indicators */\n    .dots {\n      display: flex;\n      justify-content: center;\n      margin-top: 20px;\n    }\n    .dot {\n      height: 12px;\n      width: 12px;\n      margin: 0 5px;\n      background-color: #777;\n      border-radius: 50%;\n      display: inline-block;\n    }\n    .dot.active {\n      background-color: #fff;\n    }\n  </style>\n  <script>\n    // Force reload if the page is loaded via the back button or from cache\n    window.addEventListener(\"pageshow\", function (event) {\n      if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {\n        window.location.reload();\n      }\n    });\n\n    // Function to validate all required fields in a step\n    function validateStep(stepElement) {\n      let valid = true;\n      const fields = stepElement.querySelectorAll('input, select');\n      fields.forEach((field) => {\n        if (!field.checkValidity()) {\n          field.reportValidity();\n          valid = false;\n        }\n      });\n      return valid;\n    }\n  </script>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>New EPIC Patient Signup! 🚀</h1>\n    <!-- QR Code Section -->\n    <div class=\"qr-code-container\">\n      <p>Scan this QR code on your device to start the process:</p>\n      <img id=\"qrCode\" src=\"\" alt=\"QR Code\" />\n    </div>\n    <form id=\"patientForm\" action=\"https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf\" method=\"post\">\n      <!-- Step 1: Personal Information -->\n      <div class=\"form-step active\" id=\"step-1\">\n        <div class=\"form-group\">\n          <label for=\"firstName\">First Name</label>\n          <input id=\"firstName\" type=\"text\" name=\"firstName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"lastName\">Last Name</label>\n          <input id=\"lastName\" type=\"text\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"gender\">Gender</label>\n          <select id=\"gender\" name=\"gender\" required>\n            <option value=\"\" disabled selected>Select Gender</option>\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"Other\">Other</option>\n          </select>\n        </div>\n        <div class=\"btn-container\">\n          <!-- No previous button on step 1 -->\n          <span></span>\n          <button type=\"button\" id=\"next-1\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 2: Contact Information -->\n      <div class=\"form-step\" id=\"step-2\">\n        <div class=\"form-group\">\n          <label for=\"dob\">Date of Birth</label>\n          <input id=\"dob\" type=\"date\" name=\"dob\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"cellphone\">Cellphone</label>\n          <input id=\"cellphone\" type=\"text\" name=\"cellphone\" placeholder=\"e.g., 2485551234\" required pattern=\"\\d+\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input id=\"email\" type=\"email\" name=\"email\" required>\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-2\">Previous</button>\n          <button type=\"button\" id=\"next-2\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 3: Address Information -->\n      <div class=\"form-step\" id=\"step-3\">\n        <div class=\"form-group\">\n          <label for=\"street1\">Street Address</label>\n          <input id=\"street1\" type=\"text\" name=\"street1\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"city\">City</label>\n          <input id=\"city\" type=\"text\" name=\"city\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"state\">State</label>\n          <input id=\"state\" type=\"text\" name=\"state\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"zip\">Zip Code</label>\n          <input id=\"zip\" type=\"text\" name=\"zip\" required pattern=\"\\d{5}\">\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-3\">Previous</button>\n          <button type=\"submit\" id=\"submitBtn\">Submit</button>\n        </div>\n      </div>\n\n      <!-- Dot Indicator -->\n      <div class=\"dots\">\n        <span class=\"dot active\" data-step=\"1\"></span>\n        <span class=\"dot\" data-step=\"2\"></span>\n        <span class=\"dot\" data-step=\"3\"></span>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Append current URL parameters to the form action (if any)\n    const form = document.getElementById('patientForm');\n    const currentSearch = window.location.search;\n    if (currentSearch && currentSearch.length > 0) {\n      const baseAction = form.getAttribute('action').split('?')[0];\n      form.setAttribute('action', baseAction + currentSearch);\n    }\n\n    // Set the QR code to reflect the current URL (with query parameters)\n    const qrCodeImg = document.getElementById('qrCode');\n    const currentURL = window.location.href;\n    qrCodeImg.src = \"https://api.qrserver.com/v1/create-qr-code/?data=\" + encodeURIComponent(currentURL) + \"&size=150x150\";\n\n    // Multi-step navigation logic\n    const steps = document.querySelectorAll('.form-step');\n    const dots = document.querySelectorAll('.dot');\n\n    document.getElementById('next-1').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-1'))) {\n        steps[0].classList.remove('active');\n        steps[1].classList.add('active');\n        updateDots(2);\n      }\n    });\n\n    document.getElementById('next-2').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-2'))) {\n        steps[1].classList.remove('active');\n        steps[2].classList.add('active');\n        updateDots(3);\n      }\n    });\n\n    document.getElementById('prev-2').addEventListener('click', () => {\n      steps[1].classList.remove('active');\n      steps[0].classList.add('active');\n      updateDots(1);\n    });\n\n    document.getElementById('prev-3').addEventListener('click', () => {\n      steps[2].classList.remove('active');\n      steps[1].classList.add('active');\n      updateDots(2);\n    });\n\n    function updateDots(activeStep) {\n      dots.forEach(dot => {\n        dot.classList.remove('active');\n        if (dot.getAttribute('data-step') == activeStep) {\n          dot.classList.add('active');\n        }\n      });\n    }\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        740,
        -860
      ],
      "id": "f48e0b73-d6d0-439c-9fac-ef8b5b9feb06",
      "name": "Respond to Webhook6"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Patient Portal</title>\n  <style>\n    /* Reset & Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n    }\n    /* Fixed Header with Navigation Buttons */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      height: 60px;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1000;\n    }\n    header button {\n      border: none;\n      padding: 10px 20px;\n      margin: 0 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* New Patient: same as submit button */\n    #newPatientBtn {\n      background: #ff6f61;\n    }\n    #newPatientBtn:hover,\n    #newPatientBtn.active {\n      background: #ff3b2f;\n    }\n    /* Existing Patient: green */\n    #existingPatientBtn {\n      background: #4caf50;\n    }\n    #existingPatientBtn:hover,\n    #existingPatientBtn.active {\n      background: #43a047;\n    }\n    /* Talk to Clark: blue */\n    #talkToClarkBtn {\n      background: #2196f3;\n    }\n    #talkToClarkBtn:hover,\n    #talkToClarkBtn.active {\n      background: #1e88e5;\n    }\n    /* Iframe Container positioned absolutely below header */\n    .iframe-container {\n      position: absolute;\n      top: 60px;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n  </style>\n</head>\n<body>\n  <!-- Fixed Header with Navigation Buttons -->\n  <header>\n    <button id=\"newPatientBtn\" class=\"active\">New Patient</button>\n    <button id=\"existingPatientBtn\">Existing Patient</button>\n    <button id=\"talkToClarkBtn\">Talk to Clark</button>\n  </header>\n\n  <!-- Main Content Iframe -->\n  <div class=\"iframe-container\">\n    <iframe\n      id=\"contentFrame\"\n      src=\"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\"\n      title=\"Patient Portal\"\n    ></iframe>\n  </div>\n\n  <script>\n    // Define the URL for each button/iframe state\n    const urls = {\n      newPatient: \"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\",\n      existingPatient: \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\",\n      talkToClark: \"https://xl.epicpc.com/webhook/5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb\"\n    };\n\n    // Get button and iframe elements\n    const iframe = document.getElementById(\"contentFrame\");\n    const newPatientBtn = document.getElementById(\"newPatientBtn\");\n    const existingPatientBtn = document.getElementById(\"existingPatientBtn\");\n    const talkToClarkBtn = document.getElementById(\"talkToClarkBtn\");\n\n    // Helper function to update the iframe source and active button state\n    function updateIframe(url, activeButton) {\n      iframe.src = url;\n      // Update active class for buttons\n      newPatientBtn.classList.remove(\"active\");\n      existingPatientBtn.classList.remove(\"active\");\n      talkToClarkBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n    }\n\n    // Set event listeners on buttons to update the iframe source when clicked.\n    newPatientBtn.addEventListener(\"click\", function () {\n      updateIframe(urls.newPatient, newPatientBtn);\n    });\n    existingPatientBtn.addEventListener(\"click\", function () {\n      updateIframe(urls.existingPatient, existingPatientBtn);\n    });\n    talkToClarkBtn.addEventListener(\"click\", function () {\n      updateIframe(urls.talkToClark, talkToClarkBtn);\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        520,
        -1100
      ],
      "id": "357ad732-c87c-4a77-970d-251e0413077d",
      "name": "Respond to Webhook7"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Patient Portal</title>\n  <style>\n    /* Reset & Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n    }\n    /* Fixed Header with Navigation Buttons */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      height: 60px;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1000;\n    }\n    header button {\n      border: none;\n      padding: 10px 20px;\n      margin: 0 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* New Patient: same as submit button */\n    #newPatientBtn {\n      background: #ff6f61;\n    }\n    #newPatientBtn:hover,\n    #newPatientBtn.active {\n      background: #ff3b2f;\n    }\n    /* Existing Patient: green */\n    #existingPatientBtn {\n      background: #4caf50;\n    }\n    #existingPatientBtn:hover,\n    #existingPatientBtn.active {\n      background: #43a047;\n    }\n    /* Talk to Clark: blue */\n    #talkToClarkBtn {\n      background: #2196f3;\n    }\n    #talkToClarkBtn:hover,\n    #talkToClarkBtn.active {\n      background: #1e88e5;\n    }\n    /* Iframe Container positioned absolutely below header */\n    .iframe-container {\n      position: absolute;\n      top: 60px;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n  </style>\n</head>\n<body>\n  <!-- Fixed Header with Navigation Buttons -->\n  <header>\n    <button id=\"newPatientBtn\" class=\"active\">New Patient</button>\n    <button id=\"existingPatientBtn\">Existing Patient</button>\n    <button id=\"talkToClarkBtn\">Talk to Clark</button>\n  </header>\n\n  <!-- Main Content Iframe -->\n  <div class=\"iframe-container\">\n    <!-- The src will be set dynamically with query params appended -->\n    <iframe\n      id=\"contentFrame\"\n      title=\"Patient Portal\"\n    ></iframe>\n  </div>\n\n  <script>\n    // Grab the query string from the current URL\n    const queryParams = window.location.search; // e.g., \"?utm_source=google\"\n\n    /**\n     * Appends query parameters to the given base URL.\n     * If the base URL already contains a \"?\", it uses \"&\" to append additional parameters.\n     */\n    function appendParams(baseUrl) {\n      if (!queryParams) return baseUrl;\n      const separator = baseUrl.includes('?') ? '&' : '?';\n      return baseUrl + separator + queryParams.substring(1);\n    }\n\n    // Define the base URL for each iframe state\n    const urls = {\n      newPatient: \"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\",\n      existingPatient: \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\",\n      talkToClark: \"https://xl.epicpc.com/webhook/5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb\"\n    };\n\n    // Get button and iframe elements\n    const iframe = document.getElementById(\"contentFrame\");\n    const newPatientBtn = document.getElementById(\"newPatientBtn\");\n    const existingPatientBtn = document.getElementById(\"existingPatientBtn\");\n    const talkToClarkBtn = document.getElementById(\"talkToClarkBtn\");\n\n    // On initial page load, set the iframe src with query params appended.\n    iframe.src = appendParams(urls.newPatient);\n\n    // Helper function to update the iframe source and active button state\n    function updateIframe(url, activeButton) {\n      iframe.src = appendParams(url);\n      // Update active class for buttons\n      newPatientBtn.classList.remove(\"active\");\n      existingPatientBtn.classList.remove(\"active\");\n      talkToClarkBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n    }\n\n    // Set event listeners on buttons to update the iframe source when clicked.\n    newPatientBtn.addEventListener(\"click\", function () {\n      updateIframe(urls.newPatient, newPatientBtn);\n    });\n    existingPatientBtn.addEventListener(\"click\", function () {\n      updateIframe(urls.existingPatient, existingPatientBtn);\n    });\n    talkToClarkBtn.addEventListener(\"click\", function () {\n      updateIframe(urls.talkToClark, talkToClarkBtn);\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        740,
        -1080
      ],
      "id": "5899da1f-a227-40b5-9404-e6b7dce58ad5",
      "name": "Respond to Webhook8"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Patient Portal</title>\n  <style>\n    /* Reset & Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n    }\n    /* Fixed Header with Navigation Buttons */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      height: 60px;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1000;\n    }\n    header button {\n      border: none;\n      padding: 10px 20px;\n      margin: 0 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* New Patient: same as submit button */\n    #newPatientBtn {\n      background: #ff6f61;\n    }\n    #newPatientBtn:hover,\n    #newPatientBtn.active {\n      background: #ff3b2f;\n    }\n    /* Existing Patient: green */\n    #existingPatientBtn {\n      background: #4caf50;\n    }\n    #existingPatientBtn:hover,\n    #existingPatientBtn.active {\n      background: #43a047;\n    }\n    /* Talk to Clark: blue */\n    #talkToClarkBtn {\n      background: #2196f3;\n    }\n    #talkToClarkBtn:hover,\n    #talkToClarkBtn.active {\n      background: #1e88e5;\n    }\n    /* Referral: dark grey */\n    #referralBtn {\n      background: #555;\n    }\n    #referralBtn:hover,\n    #referralBtn.active {\n      background: #444;\n    }\n    /* Iframe Container positioned absolutely below header */\n    .iframe-container {\n      position: absolute;\n      top: 60px;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n    /* Modal Styles */\n    #referralModal {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n      z-index: 2000;\n    }\n    #referralModal .modal-content {\n      background: #fff;\n      padding: 20px;\n      border-radius: 5px;\n      width: 90%;\n      max-width: 400px;\n      position: relative;\n    }\n    #referralModal .close {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      cursor: pointer;\n      font-size: 1.2em;\n    }\n    #referralModal form {\n      display: flex;\n      flex-direction: column;\n    }\n    #referralModal form label {\n      margin-top: 10px;\n    }\n    #referralModal form input {\n      padding: 8px;\n      margin-top: 5px;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n    #referralModal form button {\n      margin-top: 15px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #ff6f61;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #referralModal form button:hover {\n      background: #ff3b2f;\n    }\n    #scanMeBtn {\n      margin-top: 10px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #2196f3;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #scanMeBtn:hover {\n      background: #1e88e5;\n    }\n    /* QR Reader Container (hidden by default) */\n    #qr-reader {\n      width: 100%;\n      height: 300px;\n      margin-top: 15px;\n      display: none;\n    }\n    /* Mobile Styles: Stack header buttons on small screens */\n    @media (max-width: 600px) {\n      header {\n        flex-direction: column;\n        height: auto;\n        padding: 10px;\n      }\n      header button {\n        margin: 5px 0;\n        width: 100%;\n      }\n    }\n  </style>\n  <!-- Include html5-qrcode library -->\n  <script src=\"https://unpkg.com/html5-qrcode/minified/html5-qrcode.min.js\"></script>\n</head>\n<body>\n  <!-- Fixed Header with Navigation Buttons -->\n  <header>\n    <button id=\"newPatientBtn\" class=\"active\">New Patient</button>\n    <button id=\"existingPatientBtn\">Existing Patient</button>\n    <button id=\"talkToClarkBtn\">Talk to Clark</button>\n    <button id=\"referralBtn\">Referral?</button>\n  </header>\n\n  <!-- Main Content Iframe -->\n  <div class=\"iframe-container\">\n    <iframe id=\"contentFrame\" title=\"Patient Portal\"></iframe>\n  </div>\n\n  <!-- Referral Modal -->\n  <div id=\"referralModal\">\n    <div class=\"modal-content\">\n      <span class=\"close\" id=\"closeModal\">&times;</span>\n      <h2>Referral Information</h2>\n      <form id=\"referralForm\">\n        <label for=\"campaign\">Campaign:</label>\n        <input type=\"text\" id=\"campaign\" name=\"campaign\" placeholder=\"Enter campaign\" />\n\n        <label for=\"source\">Source:</label>\n        <input type=\"text\" id=\"source\" name=\"source\" placeholder=\"Enter source\" />\n\n        <label for=\"medium\">Medium:</label>\n        <input type=\"text\" id=\"medium\" name=\"medium\" placeholder=\"Enter medium\" />\n\n        <label for=\"event\">Event:</label>\n        <input type=\"text\" id=\"event\" name=\"event\" placeholder=\"Enter event\" />\n\n        <label for=\"other\">Other:</label>\n        <input type=\"text\" id=\"other\" name=\"other\" placeholder=\"Enter other info\" />\n\n        <button type=\"button\" id=\"scanMeBtn\">Scan Me</button>\n        <button type=\"submit\">Submit Referral</button>\n      </form>\n      <!-- Container for the QR Code scanner -->\n      <div id=\"qr-reader\"></div>\n    </div>\n  </div>\n\n  <script>\n    // Grab the query string from the current URL (if any)\n    const queryParams = window.location.search; // e.g., \"?utm_source=google\"\n\n    /**\n     * Appends query parameters to the given base URL.\n     * If the base URL already contains a \"?\", it uses \"&\" to append additional parameters.\n     */\n    function appendParams(baseUrl) {\n      if (!queryParams) return baseUrl;\n      const separator = baseUrl.includes('?') ? '&' : '?';\n      return baseUrl + separator + queryParams.substring(1);\n    }\n\n    // Define the base URL for each iframe state\n    const urls = {\n      newPatient: \"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\",\n      existingPatient: \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\",\n      talkToClark: \"https://xl.epicpc.com/webhook/5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb\"\n    };\n\n    // Get button and iframe elements\n    const iframe = document.getElementById(\"contentFrame\");\n    const newPatientBtn = document.getElementById(\"newPatientBtn\");\n    const existingPatientBtn = document.getElementById(\"existingPatientBtn\");\n    const talkToClarkBtn = document.getElementById(\"talkToClarkBtn\");\n    const referralBtn = document.getElementById(\"referralBtn\");\n    const referralModal = document.getElementById(\"referralModal\");\n    const closeModal = document.getElementById(\"closeModal\");\n    const referralForm = document.getElementById(\"referralForm\");\n    const scanMeBtn = document.getElementById(\"scanMeBtn\");\n\n    // On initial page load, set the iframe src with query params appended.\n    iframe.src = appendParams(urls.newPatient);\n\n    // Helper function to update the iframe source and active button state\n    function updateIframe(url, activeButton) {\n      iframe.src = appendParams(url);\n      newPatientBtn.classList.remove(\"active\");\n      existingPatientBtn.classList.remove(\"active\");\n      talkToClarkBtn.classList.remove(\"active\");\n      referralBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n    }\n\n    // Set event listeners on navigation buttons\n    newPatientBtn.addEventListener(\"click\", function () {\n      updateIframe(urls.newPatient, newPatientBtn);\n    });\n    existingPatientBtn.addEventListener(\"click\", function () {\n      updateIframe(urls.existingPatient, existingPatientBtn);\n    });\n    talkToClarkBtn.addEventListener(\"click\", function () {\n      updateIframe(urls.talkToClark, talkToClarkBtn);\n    });\n\n    // Referral button: open the referral modal\n    referralBtn.addEventListener(\"click\", function () {\n      referralModal.style.display = \"flex\";\n    });\n\n    // Close modal when clicking the close icon or outside the modal content\n    closeModal.addEventListener(\"click\", function() {\n      referralModal.style.display = \"none\";\n    });\n    window.addEventListener(\"click\", function(event) {\n      if (event.target === referralModal) {\n        referralModal.style.display = \"none\";\n      }\n    });\n\n    // Use html5-qrcode for scanning QR codes via the camera\n    let qrScanner;\n    scanMeBtn.addEventListener(\"click\", function() {\n      const qrReader = document.getElementById(\"qr-reader\");\n      qrReader.style.display = \"block\";\n      // Initialize the QR scanner on the specified element\n      qrScanner = new Html5Qrcode(\"qr-reader\");\n      qrScanner.start(\n        { facingMode: \"environment\" },\n        { fps: 10, qrbox: 250 },\n        (decodedText, decodedResult) => {\n          console.log(\"QR Code scanned:\", decodedText);\n          // Stop the scanner and hide the QR reader container\n          qrScanner.stop().then(() => {\n            qrReader.style.display = \"none\";\n            // Parse the scanned QR code (assumed to be in query-string format)\n            const params = new URLSearchParams(decodedText);\n            document.getElementById(\"campaign\").value = params.get(\"campaign\") || \"\";\n            document.getElementById(\"source\").value = params.get(\"source\") || \"\";\n            document.getElementById(\"medium\").value = params.get(\"medium\") || \"\";\n            document.getElementById(\"event\").value = params.get(\"event\") || \"\";\n            document.getElementById(\"other\").value = params.get(\"other\") || \"\";\n          }).catch((err) => {\n            console.error(\"Failed to stop scanning\", err);\n          });\n        },\n        (errorMessage) => {\n          // Optionally handle scan errors (continuous errors may be logged here)\n          console.warn(\"QR scan error:\", errorMessage);\n        }\n      ).catch((err) => {\n        console.error(\"Unable to start scanning\", err);\n      });\n    });\n\n    // Handle referral form submission\n    referralForm.addEventListener(\"submit\", function(e) {\n      e.preventDefault();\n      const formData = new FormData(referralForm);\n      const referralParams = new URLSearchParams(formData).toString();\n      // Build the new URL for New Patient signup with referral params appended\n      const newUrl = urls.newPatient + \"?\" + referralParams;\n      updateIframe(newUrl, newPatientBtn);\n      // Hide the referral modal\n      referralModal.style.display = \"none\";\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        960,
        -1080
      ],
      "id": "758c0b8e-208d-4ef2-a7ac-7e9cb7520ba6",
      "name": "Respond to Webhook9"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Patient Portal</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n    }\n    /* Header & Navigation */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      z-index: 1000;\n    }\n    header .logo {\n      color: #fff;\n      font-size: 1.2em;\n    }\n    nav {\n      display: flex;\n    }\n    nav button {\n      border: none;\n      padding: 10px 20px;\n      margin-left: 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* Button Colors */\n    #newPatientBtn {\n      background: #ff6f61;\n    }\n    #newPatientBtn:hover,\n    #newPatientBtn.active {\n      background: #ff3b2f;\n    }\n    #existingPatientBtn {\n      background: #4caf50;\n    }\n    #existingPatientBtn:hover,\n    #existingPatientBtn.active {\n      background: #43a047;\n    }\n    #talkToClarkBtn {\n      background: #2196f3;\n    }\n    #talkToClarkBtn:hover,\n    #talkToClarkBtn.active {\n      background: #1e88e5;\n    }\n    #referralBtn {\n      background: #555;\n    }\n    #referralBtn:hover,\n    #referralBtn.active {\n      background: #444;\n    }\n    /* Hamburger for Mobile */\n    .hamburger {\n      display: none;\n      background: none;\n      border: none;\n      color: #fff;\n      font-size: 24px;\n      cursor: pointer;\n    }\n    /* Iframe Container */\n    .iframe-container {\n      position: absolute;\n      top: 60px;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n    /* Referral Modal */\n    #referralModal {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n      z-index: 2000;\n    }\n    #referralModal .modal-content {\n      background: #fff;\n      padding: 20px;\n      border-radius: 5px;\n      width: 90%;\n      max-width: 400px;\n      position: relative;\n    }\n    #referralModal .close {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      cursor: pointer;\n      font-size: 1.2em;\n    }\n    #referralModal form {\n      display: flex;\n      flex-direction: column;\n    }\n    #referralModal form label {\n      margin-top: 10px;\n    }\n    #referralModal form input {\n      padding: 8px;\n      margin-top: 5px;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n    #referralModal form button {\n      margin-top: 15px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #ff6f61;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #referralModal form button:hover {\n      background: #ff3b2f;\n    }\n    #scanMeBtn {\n      margin-top: 10px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #2196f3;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #scanMeBtn:hover {\n      background: #1e88e5;\n    }\n    /* QR Scanner Elements */\n    #video {\n      width: 100%;\n      max-width: 400px;\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      display: none;\n    }\n    #canvas {\n      display: none;\n    }\n    #result {\n      font-size: 1.2rem;\n      margin-top: 1rem;\n      color: green;\n      display: none;\n    }\n    /* Current Referral Display in Modal */\n    #currentReferralDisplay {\n      margin-bottom: 10px;\n      font-size: 0.9em;\n      background: #f0f0f0;\n      padding: 8px;\n      border-radius: 3px;\n    }\n    /* Mobile Styles */\n    @media (max-width: 600px) {\n      nav {\n        display: none;\n        flex-direction: column;\n        width: 100%;\n        background: #333;\n      }\n      nav.active {\n        display: flex;\n      }\n      .hamburger {\n        display: block;\n      }\n    }\n  </style>\n  <!-- Load jsQR library from CDN -->\n  <script src=\"https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.js\"></script>\n</head>\n<body>\n  <!-- Header with Hamburger Menu -->\n  <header>\n    <div class=\"logo\">Patient Portal</div>\n    <button id=\"hamburger\" class=\"hamburger\">&#9776;</button>\n    <nav id=\"navMenu\">\n      <button id=\"newPatientBtn\" class=\"active\">New Patient</button>\n      <button id=\"existingPatientBtn\">Existing Patient</button>\n      <button id=\"talkToClarkBtn\">Talk to Clark</button>\n      <button id=\"referralBtn\">Referral?</button>\n    </nav>\n  </header>\n\n  <!-- Main Iframe -->\n  <div class=\"iframe-container\">\n    <iframe id=\"contentFrame\" title=\"Patient Portal\"></iframe>\n  </div>\n\n  <!-- Referral Modal -->\n  <div id=\"referralModal\">\n    <div class=\"modal-content\">\n      <span class=\"close\" id=\"closeModal\">&times;</span>\n      <h2>Referral Information</h2>\n      <div id=\"currentReferralDisplay\">\n        Current Referral Params: <span id=\"currentReferralParams\">None</span>\n      </div>\n      <!-- Manual Entry Form -->\n      <form id=\"referralForm\">\n        <label for=\"campaign\">Campaign:</label>\n        <input type=\"text\" id=\"campaign\" name=\"campaign\" placeholder=\"Enter campaign\" />\n        <label for=\"source\">Source:</label>\n        <input type=\"text\" id=\"source\" name=\"source\" placeholder=\"Enter source\" />\n        <label for=\"medium\">Medium:</label>\n        <input type=\"text\" id=\"medium\" name=\"medium\" placeholder=\"Enter medium\" />\n        <label for=\"event\">Event:</label>\n        <input type=\"text\" id=\"event\" name=\"event\" placeholder=\"Enter event\" />\n        <label for=\"other\">Other:</label>\n        <input type=\"text\" id=\"other\" name=\"other\" placeholder=\"Enter other info\" />\n        <button type=\"submit\">Submit Referral</button>\n      </form>\n      <!-- OR use QR Code Scan -->\n      <button type=\"button\" id=\"scanMeBtn\">Scan Me</button>\n      <!-- QR Scanner Elements -->\n      <video id=\"video\" autoplay muted playsinline></video>\n      <canvas id=\"canvas\"></canvas>\n      <p id=\"result\"></p>\n    </div>\n  </div>\n\n  <script>\n    // --- Disable Back Button ---\n    history.pushState(null, null, location.href);\n    window.onpopstate = function () {\n      history.go(1);\n    };\n\n    // --- Referral Caching ---\n    // Use sessionStorage key \"referralParams\" to cache the query string.\n    function getCachedReferral() {\n      return sessionStorage.getItem(\"referralParams\") || \"\";\n    }\n    function setCachedReferral(params) {\n      sessionStorage.setItem(\"referralParams\", params);\n    }\n\n    // --- Build New Patient URL using Cached Referral Params ---\n    const urls = {\n      newPatient: \"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\",\n      existingPatient: \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\",\n      talkToClark: \"https://xl.epicpc.com/webhook/5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb\"\n    };\n    function buildNewPatientUrl() {\n      let url = urls.newPatient;\n      const referral = getCachedReferral();\n      if (referral.trim() !== \"\") {\n        url += \"?\" + referral;\n      }\n      return url;\n    }\n\n    // --- Iframe & Navigation ---\n    const iframe = document.getElementById(\"contentFrame\");\n    const newPatientBtn = document.getElementById(\"newPatientBtn\");\n    const existingPatientBtn = document.getElementById(\"existingPatientBtn\");\n    const talkToClarkBtn = document.getElementById(\"talkToClarkBtn\");\n    const referralBtn = document.getElementById(\"referralBtn\");\n    const hamburger = document.getElementById(\"hamburger\");\n    const navMenu = document.getElementById(\"navMenu\");\n\n    // On initial load, use cached referral params if available.\n    iframe.src = buildNewPatientUrl();\n\n    function updateIframe(url, activeButton) {\n      // For New Patient, use cached referral params.\n      if(activeButton === newPatientBtn) {\n        url = buildNewPatientUrl();\n      }\n      iframe.src = url;\n      // Update active states.\n      newPatientBtn.classList.remove(\"active\");\n      existingPatientBtn.classList.remove(\"active\");\n      talkToClarkBtn.classList.remove(\"active\");\n      referralBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n    }\n\n    newPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.newPatient, newPatientBtn);\n    });\n    existingPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.existingPatient, existingPatientBtn);\n    });\n    talkToClarkBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.talkToClark, talkToClarkBtn);\n    });\n\n    // --- Hamburger Menu for Mobile ---\n    hamburger.addEventListener(\"click\", function() {\n      navMenu.classList.toggle(\"active\");\n    });\n\n    // --- Referral Modal & Current Referral Display ---\n    const referralModal = document.getElementById(\"referralModal\");\n    const closeModal = document.getElementById(\"closeModal\");\n    const referralForm = document.getElementById(\"referralForm\");\n    const currentReferralParamsElem = document.getElementById(\"currentReferralParams\");\n\n    referralBtn.addEventListener(\"click\", function() {\n      // Update the display of currently cached referral params.\n      currentReferralParamsElem.innerText = getCachedReferral() || \"None\";\n      referralModal.style.display = \"flex\";\n    });\n    closeModal.addEventListener(\"click\", function() {\n      referralModal.style.display = \"none\";\n      stopScanner();\n    });\n    window.addEventListener(\"click\", function(event) {\n      if (event.target === referralModal) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    // --- Referral Form Submission (Manual Entry) ---\n    referralForm.addEventListener(\"submit\", function(e) {\n      e.preventDefault();\n      const formData = new FormData(referralForm);\n      const referralParams = new URLSearchParams(formData).toString();\n      setCachedReferral(referralParams);\n      // Update the New Patient iframe with the new referral parameters.\n      updateIframe(urls.newPatient, newPatientBtn);\n      referralModal.style.display = \"none\";\n    });\n\n    // --- QR Scanner Functions using jsQR ---\n    const videoElem = document.getElementById(\"video\");\n    const canvasElem = document.getElementById(\"canvas\");\n    const canvasContext = canvasElem.getContext(\"2d\");\n    const resultElement = document.getElementById(\"result\");\n\n    let scanning = false;\n    let videoStream = null;\n\n    function startScanner() {\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(stream => {\n          videoStream = stream;\n          videoElem.srcObject = stream;\n          videoElem.setAttribute(\"playsinline\", true);\n          videoElem.style.display = \"block\";\n          videoElem.play();\n          scanning = true;\n          tick();\n        })\n        .catch(err => {\n          console.error(err);\n          alert(\"Error accessing camera: \" + err);\n        });\n    }\n\n    function stopScanner() {\n      scanning = false;\n      videoElem.style.display = \"none\";\n      if (videoStream) {\n        videoStream.getTracks().forEach(track => track.stop());\n      }\n    }\n\n    function tick() {\n      if (!scanning) return;\n      if (videoElem.readyState === videoElem.HAVE_ENOUGH_DATA) {\n        canvasElem.width = videoElem.videoWidth;\n        canvasElem.height = videoElem.videoHeight;\n        canvasContext.drawImage(videoElem, 0, 0, canvasElem.width, canvasElem.height);\n        const imageData = canvasContext.getImageData(0, 0, canvasElem.width, canvasElem.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n        if (code) {\n          scanning = false;\n          stopScanner();\n          // Optionally, draw a box around the QR code.\n          drawLine(code.location.topLeftCorner, code.location.topRightCorner, \"#FF3B58\");\n          drawLine(code.location.topRightCorner, code.location.bottomRightCorner, \"#FF3B58\");\n          drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, \"#FF3B58\");\n          drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, \"#FF3B58\");\n          resultElement.innerText = \"QR Code Data: \" + code.data;\n          resultElement.style.display = \"block\";\n          // Cache the scanned referral params and update New Patient URL.\n          setCachedReferral(code.data);\n          updateIframe(urls.newPatient, newPatientBtn);\n          referralModal.style.display = \"none\";\n        } else {\n          requestAnimationFrame(tick);\n        }\n      } else {\n        requestAnimationFrame(tick);\n      }\n    }\n\n    function drawLine(begin, end, color) {\n      canvasContext.beginPath();\n      canvasContext.moveTo(begin.x, begin.y);\n      canvasContext.lineTo(end.x, end.y);\n      canvasContext.lineWidth = 4;\n      canvasContext.strokeStyle = color;\n      canvasContext.stroke();\n    }\n\n    // --- Start QR Scanning When \"Scan Me\" is Clicked ---\n    const scanMeBtn = document.getElementById(\"scanMeBtn\");\n    scanMeBtn.addEventListener(\"click\", function() {\n      resultElement.style.display = \"none\";\n      startScanner();\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1160,
        -1080
      ],
      "id": "e53918a9-f4e6-4748-9004-03fc1618d9b7",
      "name": "Respond to Webhook10"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Patient Portal</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n    }\n    /* Header & Navigation */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      z-index: 1000;\n    }\n    /* (Removed the logo heading \"Patient Portal\") */\n    nav {\n      display: flex;\n    }\n    nav button {\n      border: none;\n      padding: 10px 20px;\n      margin-left: 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* Button Colors */\n    #newPatientBtn {\n      background: #ff6f61;\n    }\n    #newPatientBtn:hover,\n    #newPatientBtn.active {\n      background: #ff3b2f;\n    }\n    #existingPatientBtn {\n      background: #4caf50;\n    }\n    #existingPatientBtn:hover,\n    #existingPatientBtn.active {\n      background: #43a047;\n    }\n    #talkToClarkBtn {\n      background: #2196f3;\n    }\n    #talkToClarkBtn:hover,\n    #talkToClarkBtn.active {\n      background: #1e88e5;\n    }\n    #referralBtn {\n      background: #555;\n    }\n    #referralBtn:hover,\n    #referralBtn.active {\n      background: #444;\n    }\n    /* Hamburger for Mobile */\n    .hamburger {\n      display: none;\n      background: none;\n      border: none;\n      color: #fff;\n      font-size: 24px;\n      cursor: pointer;\n    }\n    /* Iframe Container (top offset will be set dynamically) */\n    .iframe-container {\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n    /* Referral Modal */\n    #referralModal {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n      z-index: 2000;\n    }\n    #referralModal .modal-content {\n      background: #fff;\n      padding: 20px;\n      border-radius: 5px;\n      width: 90%;\n      max-width: 400px;\n      position: relative;\n    }\n    #referralModal .close {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      cursor: pointer;\n      font-size: 1.2em;\n    }\n    #referralModal form {\n      display: flex;\n      flex-direction: column;\n    }\n    #referralModal form label {\n      margin-top: 10px;\n    }\n    #referralModal form input {\n      padding: 8px;\n      margin-top: 5px;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n    #referralModal form button {\n      margin-top: 15px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #ff6f61;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #referralModal form button:hover {\n      background: #ff3b2f;\n    }\n    #scanMeBtn {\n      margin-top: 10px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #2196f3;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #scanMeBtn:hover {\n      background: #1e88e5;\n    }\n    /* QR Scanner Elements */\n    #video {\n      width: 100%;\n      max-width: 400px;\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      display: none;\n    }\n    #canvas {\n      display: none;\n    }\n    #result {\n      font-size: 1.2rem;\n      margin-top: 1rem;\n      color: green;\n      display: none;\n    }\n    /* Current Referral Display in Modal */\n    #currentReferralDisplay {\n      margin-bottom: 10px;\n      font-size: 0.9em;\n      background: #f0f0f0;\n      padding: 8px;\n      border-radius: 3px;\n    }\n    /* Mobile Styles */\n    @media (max-width: 600px) {\n      nav {\n        display: none;\n        flex-direction: column;\n        width: 100%;\n        background: #333;\n      }\n      nav.active {\n        display: flex;\n      }\n      .hamburger {\n        display: block;\n      }\n    }\n  </style>\n  <!-- Load jsQR library from CDN -->\n  <script src=\"https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.js\"></script>\n</head>\n<body>\n  <!-- Header with Hamburger Menu (no title shown) -->\n  <header>\n    <button id=\"hamburger\" class=\"hamburger\">&#9776;</button>\n    <nav id=\"navMenu\">\n      <button id=\"newPatientBtn\" class=\"active\">New Patient</button>\n      <button id=\"existingPatientBtn\">Existing Patient</button>\n      <button id=\"talkToClarkBtn\">Talk to Clark</button>\n      <button id=\"referralBtn\">Referral?</button>\n    </nav>\n  </header>\n\n  <!-- Main Iframe -->\n  <div class=\"iframe-container\">\n    <iframe id=\"contentFrame\" title=\"Patient Portal\"></iframe>\n  </div>\n\n  <!-- Referral Modal -->\n  <div id=\"referralModal\">\n    <div class=\"modal-content\">\n      <span class=\"close\" id=\"closeModal\">&times;</span>\n      <h2>Referral Information</h2>\n      <div id=\"currentReferralDisplay\">\n        Current Referral Params: <span id=\"currentReferralParams\">None</span>\n      </div>\n      <!-- Manual Entry Form -->\n      <form id=\"referralForm\">\n        <label for=\"campaign\">Campaign:</label>\n        <input type=\"text\" id=\"campaign\" name=\"campaign\" placeholder=\"Enter campaign\" />\n        <label for=\"source\">Source:</label>\n        <input type=\"text\" id=\"source\" name=\"source\" placeholder=\"Enter source\" />\n        <label for=\"medium\">Medium:</label>\n        <input type=\"text\" id=\"medium\" name=\"medium\" placeholder=\"Enter medium\" />\n        <label for=\"event\">Event:</label>\n        <input type=\"text\" id=\"event\" name=\"event\" placeholder=\"Enter event\" />\n        <label for=\"other\">Other:</label>\n        <input type=\"text\" id=\"other\" name=\"other\" placeholder=\"Enter other info\" />\n        <button type=\"submit\">Submit Referral</button>\n      </form>\n      <!-- OR use QR Code Scan -->\n      <button type=\"button\" id=\"scanMeBtn\">Scan Me</button>\n      <!-- QR Scanner Elements -->\n      <video id=\"video\" autoplay muted playsinline></video>\n      <canvas id=\"canvas\"></canvas>\n      <p id=\"result\"></p>\n    </div>\n  </div>\n\n  <script>\n    // --- Disable Back Button ---\n    history.pushState(null, null, location.href);\n    window.onpopstate = function () {\n      history.go(1);\n    };\n\n    // --- Referral Caching ---\n    function getCachedReferral() {\n      return sessionStorage.getItem(\"referralParams\") || \"\";\n    }\n    function setCachedReferral(params) {\n      sessionStorage.setItem(\"referralParams\", params);\n    }\n\n    // --- Build New Patient URL using Cached Referral Params ---\n    const urls = {\n      newPatient: \"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\",\n      existingPatient: \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\",\n      talkToClark: \"https://xl.epicpc.com/webhook/5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb\"\n    };\n    function buildNewPatientUrl() {\n      let url = urls.newPatient;\n      const referral = getCachedReferral();\n      if (referral.trim() !== \"\") {\n        url += \"?\" + referral;\n      }\n      return url;\n    }\n\n    // --- Iframe & Navigation ---\n    const iframe = document.getElementById(\"contentFrame\");\n    const newPatientBtn = document.getElementById(\"newPatientBtn\");\n    const existingPatientBtn = document.getElementById(\"existingPatientBtn\");\n    const talkToClarkBtn = document.getElementById(\"talkToClarkBtn\");\n    const referralBtn = document.getElementById(\"referralBtn\");\n    const hamburger = document.getElementById(\"hamburger\");\n    const navMenu = document.getElementById(\"navMenu\");\n\n    // On initial load, use cached referral params if available.\n    iframe.src = buildNewPatientUrl();\n\n    function updateIframe(url, activeButton) {\n      // For New Patient, always rebuild URL with cached referral params.\n      if (activeButton === newPatientBtn) {\n        url = buildNewPatientUrl();\n      }\n      iframe.src = url;\n      // Update active states.\n      newPatientBtn.classList.remove(\"active\");\n      existingPatientBtn.classList.remove(\"active\");\n      talkToClarkBtn.classList.remove(\"active\");\n      referralBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n      // Close the header menu (if open)\n      navMenu.classList.remove(\"active\");\n    }\n\n    newPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.newPatient, newPatientBtn);\n    });\n    existingPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.existingPatient, existingPatientBtn);\n    });\n    talkToClarkBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.talkToClark, talkToClarkBtn);\n    });\n\n    // --- Hamburger Menu for Mobile ---\n    hamburger.addEventListener(\"click\", function() {\n      navMenu.classList.toggle(\"active\");\n    });\n\n    // --- Referral Modal & Current Referral Display ---\n    const referralModal = document.getElementById(\"referralModal\");\n    const closeModal = document.getElementById(\"closeModal\");\n    const referralForm = document.getElementById(\"referralForm\");\n    const currentReferralParamsElem = document.getElementById(\"currentReferralParams\");\n\n    referralBtn.addEventListener(\"click\", function() {\n      currentReferralParamsElem.innerText = getCachedReferral() || \"None\";\n      referralModal.style.display = \"flex\";\n      // Also close the nav menu\n      navMenu.classList.remove(\"active\");\n    });\n    closeModal.addEventListener(\"click\", function() {\n      referralModal.style.display = \"none\";\n      stopScanner();\n    });\n    window.addEventListener(\"click\", function(event) {\n      if (event.target === referralModal) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    // --- Referral Form Submission (Manual Entry) ---\n    referralForm.addEventListener(\"submit\", function(e) {\n      e.preventDefault();\n      const formData = new FormData(referralForm);\n      const referralParams = new URLSearchParams(formData).toString();\n      setCachedReferral(referralParams);\n      updateIframe(urls.newPatient, newPatientBtn);\n      referralModal.style.display = \"none\";\n    });\n\n    // --- QR Scanner Functions using jsQR ---\n    const videoElem = document.getElementById(\"video\");\n    const canvasElem = document.getElementById(\"canvas\");\n    const canvasContext = canvasElem.getContext(\"2d\");\n    const resultElement = document.getElementById(\"result\");\n\n    let scanning = false;\n    let videoStream = null;\n\n    function startScanner() {\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(stream => {\n          videoStream = stream;\n          videoElem.srcObject = stream;\n          videoElem.setAttribute(\"playsinline\", true);\n          videoElem.style.display = \"block\";\n          videoElem.play();\n          scanning = true;\n          tick();\n        })\n        .catch(err => {\n          console.error(err);\n          alert(\"Error accessing camera: \" + err);\n        });\n    }\n\n    function stopScanner() {\n      scanning = false;\n      videoElem.style.display = \"none\";\n      if (videoStream) {\n        videoStream.getTracks().forEach(track => track.stop());\n      }\n    }\n\n    function tick() {\n      if (!scanning) return;\n      if (videoElem.readyState === videoElem.HAVE_ENOUGH_DATA) {\n        canvasElem.width = videoElem.videoWidth;\n        canvasElem.height = videoElem.videoHeight;\n        canvasContext.drawImage(videoElem, 0, 0, canvasElem.width, canvasElem.height);\n        const imageData = canvasContext.getImageData(0, 0, canvasElem.width, canvasElem.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n        if (code) {\n          scanning = false;\n          stopScanner();\n          // Optionally, draw a box around the QR code.\n          drawLine(code.location.topLeftCorner, code.location.topRightCorner, \"#FF3B58\");\n          drawLine(code.location.topRightCorner, code.location.bottomRightCorner, \"#FF3B58\");\n          drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, \"#FF3B58\");\n          drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, \"#FF3B58\");\n          resultElement.innerText = \"QR Code Data: \" + code.data;\n          resultElement.style.display = \"block\";\n          // Cache the scanned referral params and update New Patient URL.\n          setCachedReferral(code.data);\n          updateIframe(urls.newPatient, newPatientBtn);\n          referralModal.style.display = \"none\";\n        } else {\n          requestAnimationFrame(tick);\n        }\n      } else {\n        requestAnimationFrame(tick);\n      }\n    }\n\n    function drawLine(begin, end, color) {\n      canvasContext.beginPath();\n      canvasContext.moveTo(begin.x, begin.y);\n      canvasContext.lineTo(end.x, end.y);\n      canvasContext.lineWidth = 4;\n      canvasContext.strokeStyle = color;\n      canvasContext.stroke();\n    }\n\n    // --- Start QR Scanning When \"Scan Me\" is Clicked ---\n    const scanMeBtn = document.getElementById(\"scanMeBtn\");\n    scanMeBtn.addEventListener(\"click\", function() {\n      resultElement.style.display = \"none\";\n      startScanner();\n    });\n\n    // --- Adjust Iframe Container to sit directly below the header ---\n    function adjustIframeContainer() {\n      const headerHeight = document.querySelector(\"header\").clientHeight;\n      document.querySelector(\".iframe-container\").style.top = headerHeight + \"px\";\n    }\n    window.addEventListener(\"resize\", adjustIframeContainer);\n    window.addEventListener(\"load\", adjustIframeContainer);\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1340,
        -1080
      ],
      "id": "e091c959-d80d-4e9a-97a5-cfb5c98aa658",
      "name": "Respond to Webhook11"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f4dffe0c-da7c-4c0f-8b40-eba5ca72899b",
              "leftValue": "={{ $json.Error }}",
              "rightValue": "Magic Error",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2520,
        -360
      ],
      "id": "a6f679a2-6a1a-46de-b739-151373b66774",
      "name": "If1"
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectURL": "=https://xl.epicpc.com/webhook/141a4626-dfa8-4ad8-b96f-f4533a5af6ea?number={{ $('Redirect to Schedule').item.json.body.cellphone }}&dobYear={{ $json.body.dob }}&campaign=",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2740,
        -380
      ],
      "id": "ed901718-820a-4c94-be29-4b2c04e53213",
      "name": "Respond to Webhook12"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        3080,
        -200
      ],
      "id": "3f49c450-6194-4ab5-b66f-896ca32cb805",
      "name": "Respond to Webhook13"
    },
    {
      "parameters": {
        "jsCode": "// This code is intended for an n8n Function node.\nconst results = [];\n\nfor (const item of $input.all()) {\n\t// Extract form data from the incoming JSON.\n\tconst formData = item.json.body;\n\t\n\t// Process the cellphone number as per your reference.\n\tconst phone = formData.cellphone || \"\";\n\tconst processedNumber = phone.startsWith(\"1\") ? phone.slice(1) : phone;\n\t\n\t// Get the date of birth and assign it to dobYear in full YYYY-MM-DD format.\n\tconst dob = formData.dob; // expecting format \"YYYY-MM-DD\"\n\tconst dobYear = dob || \"\";\n\t\n\t// Create a formatted date (MM/DD/YYYY) from the dob.\n\tlet formattedDate = \"\";\n\tif (dob) {\n\t\tconst parts = dob.split(\"-\");\n\t\t// parts[0]=year, parts[1]=month, parts[2]=day\n\t\tformattedDate = `${parts[1]}/${parts[2]}/${parts[0]}`;\n\t}\n\t\n\t// Build the request body including all form fields plus our transformed values.\n\tconst bodyData = {\n\t\tfirstName: formData.firstName,\n\t\tlastName: formData.lastName,\n\t\tgender: formData.gender,\n\t\tdob: dob,\n\t\tformattedDate: formattedDate,\n\t\tnumber: processedNumber,  // this field is used in your SQL-like reference\n\t\tdobYear: dobYear,\n\t\temail: formData.email,\n\t\tstreet1: formData.street1,\n\t\tcity: formData.city,\n\t\tstate: formData.state,\n\t\tzip: formData.zip\n\t};\n\t\n\t// Build the POST options.\n\t// Here we post as JSON; adjust if the endpoint requires URL-encoded form data.\n\tconst options = {\n\t\tmethod: \"POST\",\n\t\turl: \"http://localhost:5678/webhook/141a4626-dfa8-4ad8-b96f-f4533a5af6ea\",\n\t\tbody: bodyData,\n\t\tjson: true\n\t};\n\t\n\ttry {\n\t\t// Make the POST request to the second webhook.\n\t\tconst html = await this.helpers.request(options);\n\t\tresults.push({\n\t\t\tjson: {\n\t\t\t\thtml,\n\t\t\t\t// Optionally, pass along the processed form data.\n\t\t\t\t...bodyData\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t\t// In case of error, push an item with the error details.\n\t\tresults.push({\n\t\t\tjson: {\n\t\t\t\terror: error.toString()\n\t\t\t}\n\t\t});\n\t}\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2860,
        -200
      ],
      "id": "2cb12003-cff5-410d-9402-143de49c2e1e",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// This code is intended for an n8n Function node.\n// It processes each incoming item, extracts the needed form data,\n// calls the second webhook, and returns the HTML response.\n\nconst results = [];\n\nfor (const item of $input.all()) {\n\t// The form data is nested under the \"body\" property in your incoming JSON.\n\tconst formData = item.json.body;\n\tconst cellphone = formData.cellphone;\n\tconst dob = formData.dob; // expected format \"YYYY-MM-DD\"\n\tconst dobYear = dob ? dob.split('-')[0] : '';\n\t\n\t// Construct the URL for the second webhook.\n\t// Make sure to include a '?' to delimit the query parameters.\n\tconst secondWebhookUrl = `http://localhost:5678/webhook/141a4626-dfa8-4ad8-b96f-f4533a5af6ea?number=${encodeURIComponent(cellphone)}&dobYear=${encodeURIComponent(dobYear)}`;\n\t\n\t// Options for the POST request\n\tconst options = {\n\t\tmethod: 'POST',\n\t\turl: secondWebhookUrl,\n\t};\n\n\t// Use n8n's built‑in request helper (this.helpers.request) to make the HTTP call.\n\t// (This helper is available in Function nodes.)\n\tconst html = await this.helpers.request(options);\n\t\n\t// Return an item with the HTML response.\n\tresults.push({\n\t\tjson: {\n\t\t\thtml,\n\t\t\t// You can also pass along other form data if needed.\n\t\t\t...formData\n\t\t},\n\t});\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2860,
        0
      ],
      "id": "9b4cd734-4711-48e5-942a-8cc2de5f4a22",
      "name": "Code2"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Prevent caching -->\n  <meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\" />\n  <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n  <meta http-equiv=\"Expires\" content=\"0\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>New EPIC Patient Signup! 🚀</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    body {\n      background: #f5b800;\n      font-family: Arial, sans-serif;\n      color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      padding: 20px;\n    }\n    .container {\n      background: #333;\n      padding: 30px;\n      border-radius: 10px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      width: 100%;\n      max-width: 600px;\n      position: relative;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    /* QR Code Container */\n    .qr-code-container {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    .qr-code-container p {\n      margin-bottom: 10px;\n    }\n    .qr-code-container img {\n      border: 1px solid #fff;\n      border-radius: 8px;\n    }\n    /* Multi-Step Form */\n    .form-step {\n      display: none;\n    }\n    .form-step.active {\n      display: block;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n      color: #fff;\n    }\n    input,\n    select {\n      width: 100%;\n      padding: 10px;\n      border-radius: 5px;\n      border: none;\n      background: #555;\n      color: #fff;\n    }\n    /* Navigation Buttons */\n    .btn-container {\n      display: flex;\n      justify-content: space-between;\n      margin-top: 20px;\n    }\n    button {\n      padding: 10px 20px;\n      background: #ff6f61;\n      border: none;\n      border-radius: 5px;\n      color: #fff;\n      cursor: pointer;\n      transition: background 0.3s ease;\n    }\n    button:hover {\n      background: #ff3b2f;\n    }\n    /* Dot Indicators */\n    .dots {\n      display: flex;\n      justify-content: center;\n      margin-top: 20px;\n    }\n    .dot {\n      height: 12px;\n      width: 12px;\n      margin: 0 5px;\n      background-color: #777;\n      border-radius: 50%;\n      display: inline-block;\n    }\n    .dot.active {\n      background-color: #fff;\n    }\n  </style>\n  <script>\n    // Force reload if the page is loaded via the back button or from cache\n    window.addEventListener(\"pageshow\", function (event) {\n      if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {\n        window.location.reload();\n      }\n    });\n\n    // Function to validate all required fields in a step\n    function validateStep(stepElement) {\n      let valid = true;\n      const fields = stepElement.querySelectorAll('input, select');\n      fields.forEach((field) => {\n        if (!field.checkValidity()) {\n          field.reportValidity();\n          valid = false;\n        }\n      });\n      return valid;\n    }\n  </script>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>New EPIC Patient Signup! 🚀</h1>\n    <!-- QR Code Section -->\n    <div class=\"qr-code-container\">\n      <p>Scan Me:</p>\n      <img id=\"qrCode\" src=\"\" alt=\"QR Code\" />\n    </div>\n    <form id=\"patientForm\" action=\"https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf\" method=\"post\">\n      <!-- Step 1: Personal Information -->\n      <div class=\"form-step active\" id=\"step-1\">\n        <div class=\"form-group\">\n          <label for=\"firstName\">First Name</label>\n          <input id=\"firstName\" type=\"text\" name=\"firstName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"lastName\">Last Name</label>\n          <input id=\"lastName\" type=\"text\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"gender\">Gender</label>\n          <select id=\"gender\" name=\"gender\" required>\n            <option value=\"\" disabled selected>Select Gender</option>\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"Other\">Other</option>\n          </select>\n        </div>\n        <div class=\"btn-container\">\n          <!-- No previous button on step 1 -->\n          <span></span>\n          <button type=\"button\" id=\"next-1\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 2: Contact Information -->\n      <div class=\"form-step\" id=\"step-2\">\n        <div class=\"form-group\">\n          <label for=\"dob\">Date of Birth</label>\n          <input id=\"dob\" type=\"date\" name=\"dob\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"cellphone\">Cellphone</label>\n          <input id=\"cellphone\" type=\"text\" name=\"cellphone\" placeholder=\"e.g., 2485551234\" required pattern=\"\\d+\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input id=\"email\" type=\"email\" name=\"email\" required>\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-2\">Previous</button>\n          <button type=\"button\" id=\"next-2\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 3: Address Information -->\n      <div class=\"form-step\" id=\"step-3\">\n        <div class=\"form-group\">\n          <label for=\"street1\">Street Address</label>\n          <input id=\"street1\" type=\"text\" name=\"street1\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"city\">City</label>\n          <input id=\"city\" type=\"text\" name=\"city\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"state\">State</label>\n          <input id=\"state\" type=\"text\" name=\"state\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"zip\">Zip Code</label>\n          <input id=\"zip\" type=\"text\" name=\"zip\" required pattern=\"\\d{5}\">\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-3\">Previous</button>\n          <button type=\"submit\" id=\"submitBtn\">Submit</button>\n        </div>\n      </div>\n\n      <!-- Dot Indicator -->\n      <div class=\"dots\">\n        <span class=\"dot active\" data-step=\"1\"></span>\n        <span class=\"dot\" data-step=\"2\"></span>\n        <span class=\"dot\" data-step=\"3\"></span>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Append current URL parameters to the form action (if any)\n    const form = document.getElementById('patientForm');\n    const currentSearch = window.location.search;\n    if (currentSearch && currentSearch.length > 0) {\n      const baseAction = form.getAttribute('action').split('?')[0];\n      form.setAttribute('action', baseAction + currentSearch);\n    }\n\n    // Set the QR code to reflect the current URL (with query parameters)\n    const qrCodeImg = document.getElementById('qrCode');\n    const currentURL = window.location.href;\n    qrCodeImg.src = \"https://api.qrserver.com/v1/create-qr-code/?data=\" + encodeURIComponent(currentURL) + \"&size=150x150\";\n\n    // Multi-step navigation logic\n    const steps = document.querySelectorAll('.form-step');\n    const dots = document.querySelectorAll('.dot');\n\n    document.getElementById('next-1').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-1'))) {\n        steps[0].classList.remove('active');\n        steps[1].classList.add('active');\n        updateDots(2);\n      }\n    });\n\n    document.getElementById('next-2').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-2'))) {\n        steps[1].classList.remove('active');\n        steps[2].classList.add('active');\n        updateDots(3);\n      }\n    });\n\n    document.getElementById('prev-2').addEventListener('click', () => {\n      steps[1].classList.remove('active');\n      steps[0].classList.add('active');\n      updateDots(1);\n    });\n\n    document.getElementById('prev-3').addEventListener('click', () => {\n      steps[2].classList.remove('active');\n      steps[1].classList.add('active');\n      updateDots(2);\n    });\n\n    function updateDots(activeStep) {\n      dots.forEach(dot => {\n        dot.classList.remove('active');\n        if (dot.getAttribute('data-step') == activeStep) {\n          dot.classList.add('active');\n        }\n      });\n    }\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        960,
        -860
      ],
      "id": "3980c0c8-6509-4808-947e-04637fdf46dc",
      "name": "Respond to Webhook14"
    },
    {
      "parameters": {
        "content": "# Clark",
        "height": 460,
        "width": 640,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        -1720
      ],
      "typeVersion": 1,
      "id": "eb928632-ccb5-473f-8d5a-453b7b6dc750",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pdrfzomezdyaecj",
        "table": "mnx1ann5acss8m7",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Patient_Number",
              "fieldValue": "={{ $json.savepatientinfo[0].PatientNumber }}"
            },
            {
              "fieldName": "Scheduler",
              "fieldValue": "New Patient Signup"
            },
            {
              "fieldName": "SchedulingLink",
              "fieldValue": "={{ $json.headers.referer }}"
            },
            {
              "fieldName": "Patient_Name",
              "fieldValue": "={{ $json.body.firstName }} {{ $json.body.lastName }}"
            },
            {
              "fieldName": "Patient_ID",
              "fieldValue": "={{ $json.savepatientinfo[0].PatientID }}"
            },
            {
              "fieldName": "PatientPhone",
              "fieldValue": "={{ $json.body.cellphone }}"
            },
            {
              "fieldName": "PatientSex",
              "fieldValue": "={{ $json.body.gender === \"Male\" ? \"M\" : \"F\" }}"
            },
            {
              "fieldName": "PatientZip",
              "fieldValue": "={{ $json.body.zip }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        2860,
        200
      ],
      "id": "e8895608-a1b8-456a-8783-83654570d1ce",
      "name": "NocoDB",
      "alwaysOutputData": true,
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Patient Portal</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n      background-color: #333; /* Set background to match header */\n    }\n    /* Header & Navigation */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      z-index: 1000;\n    }\n    /* Navigation buttons */\n    nav {\n      display: flex;\n    }\n    nav button {\n      border: none;\n      padding: 10px 20px;\n      margin-left: 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* Button Colors */\n    #newPatientBtn {\n      background: #ff6f61;\n    }\n    #newPatientBtn:hover,\n    #newPatientBtn.active {\n      background: #ff3b2f;\n    }\n    #existingPatientBtn {\n      background: #4caf50;\n    }\n    #existingPatientBtn:hover,\n    #existingPatientBtn.active {\n      background: #43a047;\n    }\n    #talkToClarkBtn {\n      background: #2196f3;\n    }\n    #talkToClarkBtn:hover,\n    #talkToClarkBtn.active {\n      background: #1e88e5;\n    }\n    #referralBtn {\n      background: #555;\n    }\n    #referralBtn:hover,\n    #referralBtn.active {\n      background: #444;\n    }\n    /* Hamburger for Mobile */\n    .hamburger {\n      display: none;\n      background: none;\n      border: none;\n      color: #fff;\n      font-size: 24px;\n      cursor: pointer;\n    }\n    /* Iframe Container (top offset will be set dynamically) */\n    .iframe-container {\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n    /* Referral Modal */\n    #referralModal {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n      z-index: 2000;\n    }\n    #referralModal .modal-content {\n      background: #fff;\n      padding: 20px;\n      border-radius: 5px;\n      width: 90%;\n      max-width: 400px;\n      position: relative;\n    }\n    #referralModal .close {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      cursor: pointer;\n      font-size: 1.2em;\n    }\n    #referralModal form {\n      display: flex;\n      flex-direction: column;\n    }\n    #referralModal form label {\n      margin-top: 10px;\n    }\n    #referralModal form input {\n      padding: 8px;\n      margin-top: 5px;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n    #referralModal form button {\n      margin-top: 15px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #ff6f61;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #referralModal form button:hover {\n      background: #ff3b2f;\n    }\n    #scanMeBtn {\n      margin-top: 10px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #2196f3;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #scanMeBtn:hover {\n      background: #1e88e5;\n    }\n    /* QR Scanner Elements */\n    #video {\n      width: 100%;\n      max-width: 400px;\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      display: none;\n    }\n    #canvas {\n      display: none;\n    }\n    #result {\n      font-size: 1.2rem;\n      margin-top: 1rem;\n      color: green;\n      display: none;\n    }\n    /* Current Referral Display in Modal */\n    #currentReferralDisplay {\n      margin-bottom: 10px;\n      font-size: 0.9em;\n      background: #f0f0f0;\n      padding: 8px;\n      border-radius: 3px;\n      word-break: break-all;\n    }\n    /* Mobile Styles */\n    @media (max-width: 600px) {\n      nav {\n        display: none;\n        flex-direction: column;\n        width: 100%;\n        background: #333;\n      }\n      nav.active {\n        display: flex;\n      }\n      .hamburger {\n        display: block;\n      }\n    }\n  </style>\n  <!-- Load jsQR library from CDN -->\n  <script src=\"https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.js\"></script>\n</head>\n<body>\n  <!-- Header with Hamburger Menu (no title shown) -->\n  <header>\n    <button id=\"hamburger\" class=\"hamburger\">&#9776;</button>\n    <nav id=\"navMenu\">\n      <button id=\"newPatientBtn\" class=\"active\">New Patient</button>\n      <button id=\"existingPatientBtn\">Existing Patient</button>\n      <button id=\"talkToClarkBtn\">Talk to Clark</button>\n      <button id=\"referralBtn\">Referral?</button>\n    </nav>\n  </header>\n\n  <!-- Main Iframe -->\n  <div class=\"iframe-container\">\n    <iframe id=\"contentFrame\" title=\"Patient Portal\"></iframe>\n  </div>\n\n  <!-- Referral Modal -->\n  <div id=\"referralModal\">\n    <div class=\"modal-content\">\n      <span class=\"close\" id=\"closeModal\">&times;</span>\n      <h2>Referral Information</h2>\n      <div id=\"currentReferralDisplay\">\n        Current Referral Params: <span id=\"currentReferralParams\">None</span>\n      </div>\n      <!-- Manual Entry Form -->\n      <form id=\"referralForm\">\n        <label for=\"campaign\">Campaign:</label>\n        <input type=\"text\" id=\"campaign\" name=\"campaign\" placeholder=\"Enter campaign\" />\n        <label for=\"source\">Source:</label>\n        <input type=\"text\" id=\"source\" name=\"source\" placeholder=\"Enter source\" />\n        <label for=\"medium\">Medium:</label>\n        <input type=\"text\" id=\"medium\" name=\"medium\" placeholder=\"Enter medium\" />\n        <label for=\"event\">Event:</label>\n        <input type=\"text\" id=\"event\" name=\"event\" placeholder=\"Enter event\" />\n        <label for=\"other\">Other:</label>\n        <input type=\"text\" id=\"other\" name=\"other\" placeholder=\"Enter other info\" />\n        <button type=\"submit\">Submit Referral</button>\n      </form>\n      <!-- OR use QR Code Scan -->\n      <button type=\"button\" id=\"scanMeBtn\">Scan Me</button>\n      <!-- QR Scanner Elements -->\n      <video id=\"video\" autoplay muted playsinline></video>\n      <canvas id=\"canvas\"></canvas>\n      <p id=\"result\"></p>\n    </div>\n  </div>\n\n  <script>\n    // --- Disable Back Button ---\n    history.pushState(null, null, location.href);\n    window.onpopstate = function () {\n      history.go(1);\n    };\n\n    // --- Referral Caching ---\n    function getCachedReferral() {\n      return sessionStorage.getItem(\"referralParams\") || \"\";\n    }\n    function setCachedReferral(params) {\n      sessionStorage.setItem(\"referralParams\", params);\n    }\n\n    // --- Build New Patient URL using Cached Referral Params ---\n    const urls = {\n      newPatient: \"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\",\n      existingPatient: \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\",\n      talkToClark: \"https://xl.epicpc.com/webhook/5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb\"\n    };\n    function buildNewPatientUrl() {\n      let url = urls.newPatient;\n      const referral = getCachedReferral();\n      if (referral.trim() !== \"\") {\n        url += \"?\" + referral;\n      }\n      return url;\n    }\n\n    // --- Iframe & Navigation ---\n    const iframe = document.getElementById(\"contentFrame\");\n    const newPatientBtn = document.getElementById(\"newPatientBtn\");\n    const existingPatientBtn = document.getElementById(\"existingPatientBtn\");\n    const talkToClarkBtn = document.getElementById(\"talkToClarkBtn\");\n    const referralBtn = document.getElementById(\"referralBtn\");\n    const hamburger = document.getElementById(\"hamburger\");\n    const navMenu = document.getElementById(\"navMenu\");\n\n    // On initial load, use cached referral params if available.\n    iframe.src = buildNewPatientUrl();\n\n    function updateIframe(url, activeButton) {\n      // For New Patient, always rebuild URL with cached referral params.\n      if (activeButton === newPatientBtn) {\n        url = buildNewPatientUrl();\n      }\n      iframe.src = url;\n      // Update active states.\n      newPatientBtn.classList.remove(\"active\");\n      existingPatientBtn.classList.remove(\"active\");\n      talkToClarkBtn.classList.remove(\"active\");\n      referralBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n      // Close the header menu (if open)\n      navMenu.classList.remove(\"active\");\n    }\n\n    newPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.newPatient, newPatientBtn);\n    });\n    existingPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.existingPatient, existingPatientBtn);\n    });\n    talkToClarkBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.talkToClark, talkToClarkBtn);\n    });\n\n    // --- Hamburger Menu for Mobile ---\n    hamburger.addEventListener(\"click\", function() {\n      navMenu.classList.toggle(\"active\");\n    });\n\n    // --- Referral Modal & Current Referral Display ---\n    const referralModal = document.getElementById(\"referralModal\");\n    const closeModal = document.getElementById(\"closeModal\");\n    const referralForm = document.getElementById(\"referralForm\");\n    const currentReferralParamsElem = document.getElementById(\"currentReferralParams\");\n\n    referralBtn.addEventListener(\"click\", function() {\n      currentReferralParamsElem.innerText = getCachedReferral() || \"None\";\n      referralModal.style.display = \"flex\";\n      // Also close the nav menu\n      navMenu.classList.remove(\"active\");\n    });\n    closeModal.addEventListener(\"click\", function() {\n      referralModal.style.display = \"none\";\n      stopScanner();\n    });\n    window.addEventListener(\"click\", function(event) {\n      if (event.target === referralModal) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    // --- Referral Form Submission (Manual Entry) ---\n    referralForm.addEventListener(\"submit\", function(e) {\n      e.preventDefault();\n      const formData = new FormData(referralForm);\n      const referralParams = new URLSearchParams(formData).toString();\n      setCachedReferral(referralParams);\n      updateIframe(urls.newPatient, newPatientBtn);\n      referralModal.style.display = \"none\";\n    });\n\n    // --- QR Scanner Functions using jsQR ---\n    const videoElem = document.getElementById(\"video\");\n    const canvasElem = document.getElementById(\"canvas\");\n    const canvasContext = canvasElem.getContext(\"2d\");\n    const resultElement = document.getElementById(\"result\");\n\n    let scanning = false;\n    let videoStream = null;\n\n    function startScanner() {\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(stream => {\n          videoStream = stream;\n          videoElem.srcObject = stream;\n          videoElem.setAttribute(\"playsinline\", true);\n          videoElem.style.display = \"block\";\n          videoElem.play();\n          scanning = true;\n          tick();\n        })\n        .catch(err => {\n          console.error(err);\n          alert(\"Error accessing camera: \" + err);\n        });\n    }\n\n    function stopScanner() {\n      scanning = false;\n      videoElem.style.display = \"none\";\n      if (videoStream) {\n        videoStream.getTracks().forEach(track => track.stop());\n      }\n    }\n\n    function tick() {\n      if (!scanning) return;\n      if (videoElem.readyState === videoElem.HAVE_ENOUGH_DATA) {\n        canvasElem.width = videoElem.videoWidth;\n        canvasElem.height = videoElem.videoHeight;\n        canvasContext.drawImage(videoElem, 0, 0, canvasElem.width, canvasElem.height);\n        const imageData = canvasContext.getImageData(0, 0, canvasElem.width, canvasElem.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n        if (code) {\n          scanning = false;\n          stopScanner();\n          // Optionally, draw a box around the QR code.\n          drawLine(code.location.topLeftCorner, code.location.topRightCorner, \"#FF3B58\");\n          drawLine(code.location.topRightCorner, code.location.bottomRightCorner, \"#FF3B58\");\n          drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, \"#FF3B58\");\n          drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, \"#FF3B58\");\n          resultElement.innerText = \"QR Code Data: \" + code.data;\n          resultElement.style.display = \"block\";\n          // Cache the scanned referral params and update New Patient URL.\n          setCachedReferral(code.data);\n          updateIframe(urls.newPatient, newPatientBtn);\n          referralModal.style.display = \"none\";\n        } else {\n          requestAnimationFrame(tick);\n        }\n      } else {\n        requestAnimationFrame(tick);\n      }\n    }\n\n    function drawLine(begin, end, color) {\n      canvasContext.beginPath();\n      canvasContext.moveTo(begin.x, begin.y);\n      canvasContext.lineTo(end.x, end.y);\n      canvasContext.lineWidth = 4;\n      canvasContext.strokeStyle = color;\n      canvasContext.stroke();\n    }\n\n    // --- Start QR Scanning When \"Scan Me\" is Clicked ---\n    const scanMeBtn = document.getElementById(\"scanMeBtn\");\n    scanMeBtn.addEventListener(\"click\", function() {\n      resultElement.style.display = \"none\";\n      startScanner();\n    });\n\n    // --- Adjust Iframe Container to sit directly below the header ---\n    function adjustIframeContainer() {\n      const headerHeight = document.querySelector(\"header\").clientHeight;\n      document.querySelector(\".iframe-container\").style.top = headerHeight + \"px\";\n    }\n    window.addEventListener(\"resize\", adjustIframeContainer);\n    window.addEventListener(\"load\", adjustIframeContainer);\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1520,
        -1080
      ],
      "id": "1408ff0c-799f-45e3-93a2-30923e5f831b",
      "name": "Respond to Webhook15"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Patient Portal</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n      background-color: #333; /* Set background to match header */\n    }\n    /* Header & Navigation */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      z-index: 1000;\n    }\n    /* Navigation buttons */\n    nav {\n      display: flex;\n    }\n    nav button {\n      border: none;\n      padding: 10px 20px;\n      margin-left: 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* Button Colors */\n    #newPatientBtn {\n      background: #ff6f61;\n    }\n    #newPatientBtn:hover,\n    #newPatientBtn.active {\n      background: #ff3b2f;\n    }\n    #existingPatientBtn {\n      background: #4caf50;\n    }\n    #existingPatientBtn:hover,\n    #existingPatientBtn.active {\n      background: #43a047;\n    }\n    #talkToClarkBtn {\n      background: #2196f3;\n    }\n    #talkToClarkBtn:hover,\n    #talkToClarkBtn.active {\n      background: #1e88e5;\n    }\n    #referralBtn {\n      background: #555;\n    }\n    #referralBtn:hover,\n    #referralBtn.active {\n      background: #444;\n    }\n    /* Hamburger for Mobile */\n    .hamburger {\n      display: none;\n      background: none;\n      border: none;\n      color: #fff;\n      font-size: 24px;\n      cursor: pointer;\n    }\n    /* Iframe Container (top offset will be set dynamically) */\n    .iframe-container {\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n    /* Referral Modal */\n    #referralModal {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n      z-index: 2000;\n    }\n    #referralModal .modal-content {\n      background: #fff;\n      padding: 20px;\n      border-radius: 5px;\n      width: 90%;\n      max-width: 400px;\n      position: relative;\n    }\n    #referralModal .close {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      cursor: pointer;\n      font-size: 1.2em;\n    }\n    #referralModal form {\n      display: flex;\n      flex-direction: column;\n    }\n    #referralModal form label {\n      margin-top: 10px;\n    }\n    #referralModal form input {\n      padding: 8px;\n      margin-top: 5px;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n    #referralModal form button {\n      margin-top: 15px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #ff6f61;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #referralModal form button:hover {\n      background: #ff3b2f;\n    }\n    #scanMeBtn {\n      margin-top: 10px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #2196f3;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #scanMeBtn:hover {\n      background: #1e88e5;\n    }\n    /* QR Scanner Elements */\n    #video {\n      width: 100%;\n      max-width: 400px;\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      display: none;\n    }\n    #canvas {\n      display: none;\n    }\n    #result {\n      font-size: 1.2rem;\n      margin-top: 1rem;\n      color: green;\n      display: none;\n    }\n    /* Current Referral Display in Modal (Improved formatting) */\n    #currentReferralDisplay {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 10px;\n      padding: 8px;\n      background: #f9f9f9;\n      border-radius: 3px;\n    }\n    #currentReferralDisplay label {\n      flex-shrink: 0;\n      font-weight: bold;\n    }\n    /* Use a read-only input for the referral URL */\n    #currentReferralURL {\n      flex: 1;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n      padding: 6px;\n      font-size: 0.9em;\n      color: #333;\n      background: #fff;\n    }\n    /* Copy Link Button Styles */\n    #copyReferralUrl {\n      border: none;\n      border-radius: 3px;\n      background: #4caf50;\n      color: #fff;\n      font-size: 0.9em;\n      cursor: pointer;\n      padding: 6px 10px;\n    }\n    #copyReferralUrl:hover {\n      background: #43a047;\n    }\n    /* Mobile Styles */\n    @media (max-width: 600px) {\n      nav {\n        display: none;\n        flex-direction: column;\n        width: 100%;\n        background: #333;\n      }\n      nav.active {\n        display: flex;\n      }\n      .hamburger {\n        display: block;\n      }\n    }\n  </style>\n  <!-- Load jsQR library from CDN -->\n  <script src=\"https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.js\"></script>\n</head>\n<body>\n  <!-- Header with Hamburger Menu (no title shown) -->\n  <header>\n    <button id=\"hamburger\" class=\"hamburger\">&#9776;</button>\n    <nav id=\"navMenu\">\n      <button id=\"newPatientBtn\" class=\"active\">New Patient</button>\n      <button id=\"existingPatientBtn\">Existing Patient</button>\n      <button id=\"talkToClarkBtn\">Talk to Clark</button>\n      <button id=\"referralBtn\">Referral?</button>\n    </nav>\n  </header>\n\n  <!-- Main Iframe -->\n  <div class=\"iframe-container\">\n    <iframe id=\"contentFrame\" title=\"Patient Portal\"></iframe>\n  </div>\n\n  <!-- Referral Modal -->\n  <div id=\"referralModal\">\n    <div class=\"modal-content\">\n      <span class=\"close\" id=\"closeModal\">&times;</span>\n      <h2>Referral Information</h2>\n      <div id=\"currentReferralDisplay\">\n        <label for=\"currentReferralURL\">Referral URL:</label>\n        <input type=\"text\" id=\"currentReferralURL\" readonly value=\"None\" />\n        <button id=\"copyReferralUrl\">Copy Link</button>\n      </div>\n      <!-- Manual Entry Form -->\n      <form id=\"referralForm\">\n        <label for=\"campaign\">Campaign:</label>\n        <input type=\"text\" id=\"campaign\" name=\"campaign\" placeholder=\"Enter campaign\" />\n        <label for=\"source\">Source:</label>\n        <input type=\"text\" id=\"source\" name=\"source\" placeholder=\"Enter source\" />\n        <label for=\"medium\">Medium:</label>\n        <input type=\"text\" id=\"medium\" name=\"medium\" placeholder=\"Enter medium\" />\n        <label for=\"event\">Event:</label>\n        <input type=\"text\" id=\"event\" name=\"event\" placeholder=\"Enter event\" />\n        <label for=\"other\">Other:</label>\n        <input type=\"text\" id=\"other\" name=\"other\" placeholder=\"Enter other info\" />\n        <button type=\"submit\">Submit Referral</button>\n      </form>\n      <!-- OR use QR Code Scan -->\n      <button type=\"button\" id=\"scanMeBtn\">Scan Me</button>\n      <!-- QR Scanner Elements -->\n      <video id=\"video\" autoplay muted playsinline></video>\n      <canvas id=\"canvas\"></canvas>\n      <p id=\"result\"></p>\n    </div>\n  </div>\n\n  <script>\n    // --- Disable Back Button ---\n    history.pushState(null, null, location.href);\n    window.onpopstate = function () {\n      history.go(1);\n    };\n\n    // --- Referral Caching ---\n    function getCachedReferral() {\n      return sessionStorage.getItem(\"referralParams\") || \"\";\n    }\n    function setCachedReferral(params) {\n      sessionStorage.setItem(\"referralParams\", params);\n    }\n\n    // --- Build New Patient URL using Cached Referral Params ---\n    const urls = {\n      newPatient: \"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\",\n      existingPatient: \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\",\n      talkToClark: \"https://xl.epicpc.com/webhook/5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb\"\n    };\n    function buildNewPatientUrl() {\n      let url = urls.newPatient;\n      const referral = getCachedReferral();\n      if (referral.trim() !== \"\") {\n        url += \"?\" + referral;\n      }\n      return url;\n    }\n\n    // --- Iframe & Navigation ---\n    const iframe = document.getElementById(\"contentFrame\");\n    const newPatientBtn = document.getElementById(\"newPatientBtn\");\n    const existingPatientBtn = document.getElementById(\"existingPatientBtn\");\n    const talkToClarkBtn = document.getElementById(\"talkToClarkBtn\");\n    const referralBtn = document.getElementById(\"referralBtn\");\n    const hamburger = document.getElementById(\"hamburger\");\n    const navMenu = document.getElementById(\"navMenu\");\n\n    // On initial load, use cached referral params if available.\n    iframe.src = buildNewPatientUrl();\n\n    function updateIframe(url, activeButton) {\n      // For New Patient, always rebuild URL with cached referral params.\n      if (activeButton === newPatientBtn) {\n        url = buildNewPatientUrl();\n      }\n      iframe.src = url;\n      // Update active states.\n      newPatientBtn.classList.remove(\"active\");\n      existingPatientBtn.classList.remove(\"active\");\n      talkToClarkBtn.classList.remove(\"active\");\n      referralBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n      // Close the header menu (if open)\n      navMenu.classList.remove(\"active\");\n    }\n\n    newPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.newPatient, newPatientBtn);\n    });\n    existingPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.existingPatient, existingPatientBtn);\n    });\n    talkToClarkBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.talkToClark, talkToClarkBtn);\n    });\n\n    // --- Hamburger Menu for Mobile ---\n    hamburger.addEventListener(\"click\", function() {\n      navMenu.classList.toggle(\"active\");\n    });\n\n    // --- Referral Modal & Current Referral Display ---\n    const referralModal = document.getElementById(\"referralModal\");\n    const closeModal = document.getElementById(\"closeModal\");\n    const referralForm = document.getElementById(\"referralForm\");\n    const currentReferralInput = document.getElementById(\"currentReferralURL\");\n\n    referralBtn.addEventListener(\"click\", function() {\n      // Update the display with the full referral URL\n      currentReferralInput.value = buildNewPatientUrl();\n      referralModal.style.display = \"flex\";\n      // Also close the nav menu\n      navMenu.classList.remove(\"active\");\n    });\n    closeModal.addEventListener(\"click\", function() {\n      referralModal.style.display = \"none\";\n      stopScanner();\n    });\n    window.addEventListener(\"click\", function(event) {\n      if (event.target === referralModal) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    // --- Copy Referral URL Button ---\n    document.getElementById(\"copyReferralUrl\").addEventListener(\"click\", function() {\n      const fullUrl = buildNewPatientUrl();\n      navigator.clipboard.writeText(fullUrl)\n        .then(function() {\n          alert(\"Referral URL copied to clipboard!\");\n        })\n        .catch(function(err) {\n          alert(\"Failed to copy: \" + err);\n        });\n    });\n\n    // --- Referral Form Submission (Manual Entry) ---\n    referralForm.addEventListener(\"submit\", function(e) {\n      e.preventDefault();\n      const formData = new FormData(referralForm);\n      const referralParams = new URLSearchParams(formData).toString();\n      setCachedReferral(referralParams);\n      updateIframe(urls.newPatient, newPatientBtn);\n      referralModal.style.display = \"none\";\n    });\n\n    // --- QR Scanner Functions using jsQR ---\n    const videoElem = document.getElementById(\"video\");\n    const canvasElem = document.getElementById(\"canvas\");\n    const canvasContext = canvasElem.getContext(\"2d\");\n    const resultElement = document.getElementById(\"result\");\n\n    let scanning = false;\n    let videoStream = null;\n\n    function startScanner() {\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(stream => {\n          videoStream = stream;\n          videoElem.srcObject = stream;\n          videoElem.setAttribute(\"playsinline\", true);\n          videoElem.style.display = \"block\";\n          videoElem.play();\n          scanning = true;\n          tick();\n        })\n        .catch(err => {\n          console.error(err);\n          alert(\"Error accessing camera: \" + err);\n        });\n    }\n\n    function stopScanner() {\n      scanning = false;\n      videoElem.style.display = \"none\";\n      if (videoStream) {\n        videoStream.getTracks().forEach(track => track.stop());\n      }\n    }\n\n    function tick() {\n      if (!scanning) return;\n      if (videoElem.readyState === videoElem.HAVE_ENOUGH_DATA) {\n        canvasElem.width = videoElem.videoWidth;\n        canvasElem.height = videoElem.videoHeight;\n        canvasContext.drawImage(videoElem, 0, 0, canvasElem.width, canvasElem.height);\n        const imageData = canvasContext.getImageData(0, 0, canvasElem.width, canvasElem.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n        if (code) {\n          scanning = false;\n          stopScanner();\n          // Optionally, draw a box around the QR code.\n          drawLine(code.location.topLeftCorner, code.location.topRightCorner, \"#FF3B58\");\n          drawLine(code.location.topRightCorner, code.location.bottomRightCorner, \"#FF3B58\");\n          drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, \"#FF3B58\");\n          drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, \"#FF3B58\");\n          resultElement.innerText = \"QR Code Data: \" + code.data;\n          resultElement.style.display = \"block\";\n          // Cache the scanned referral params and update New Patient URL.\n          setCachedReferral(code.data);\n          updateIframe(urls.newPatient, newPatientBtn);\n          referralModal.style.display = \"none\";\n        } else {\n          requestAnimationFrame(tick);\n        }\n      } else {\n        requestAnimationFrame(tick);\n      }\n    }\n\n    function drawLine(begin, end, color) {\n      canvasContext.beginPath();\n      canvasContext.moveTo(begin.x, begin.y);\n      canvasContext.lineTo(end.x, end.y);\n      canvasContext.lineWidth = 4;\n      canvasContext.strokeStyle = color;\n      canvasContext.stroke();\n    }\n\n    // --- Start QR Scanning When \"Scan Me\" is Clicked ---\n    const scanMeBtn = document.getElementById(\"scanMeBtn\");\n    scanMeBtn.addEventListener(\"click\", function() {\n      resultElement.style.display = \"none\";\n      startScanner();\n    });\n\n    // --- Adjust Iframe Container to sit directly below the header ---\n    function adjustIframeContainer() {\n      const headerHeight = document.querySelector(\"header\").clientHeight;\n      document.querySelector(\".iframe-container\").style.top = headerHeight + \"px\";\n    }\n    window.addEventListener(\"resize\", adjustIframeContainer);\n    window.addEventListener(\"load\", adjustIframeContainer);\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1660,
        -1080
      ],
      "id": "62f7a2e6-8815-44c0-a3b1-d617f60a3222",
      "name": "Respond to Webhook16"
    },
    {
      "parameters": {
        "path": "df709613-29f9-4a63-ae5d-98d9041516fb",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        2260,
        -1400
      ],
      "id": "c4884fd6-bdbf-4318-ab3d-d2f52c494e38",
      "name": "Webhook",
      "webhookId": "df709613-29f9-4a63-ae5d-98d9041516fb"
    },
    {
      "parameters": {
        "jsCode": "const newItems = items.map(item => {\n  // Get the query object from the incoming item\n  const queryParams = item.json.query || {};\n  \n  // Create a query string by mapping each key-value pair to \"key=value\" and joining them with \"&\"\n  const queryString = Object.entries(queryParams)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n  \n  // Add the queryString to the output\n  return {\n    json: {\n      ...item.json,\n      queryString\n    }\n  };\n});\n\nreturn newItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        -1400
      ],
      "id": "61624e65-7485-4ca3-a68d-6dd780b8e911",
      "name": "Code1"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Patient Portal</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n      background-color: #333; /* Set background to match header */\n    }\n    /* Header & Navigation */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      z-index: 1000;\n    }\n    nav {\n      display: flex;\n    }\n    nav button {\n      border: none;\n      padding: 10px 20px;\n      margin-left: 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* Button Colors */\n    #newPatientBtn {\n      background: #ff6f61;\n    }\n    #newPatientBtn:hover,\n    #newPatientBtn.active {\n      background: #ff3b2f;\n    }\n    #existingPatientBtn {\n      background: #4caf50;\n    }\n    #existingPatientBtn:hover,\n    #existingPatientBtn.active {\n      background: #43a047;\n    }\n    #talkToClarkBtn {\n      background: #2196f3;\n    }\n    #talkToClarkBtn:hover,\n    #talkToClarkBtn.active {\n      background: #1e88e5;\n    }\n    #referralBtn {\n      background: #555;\n    }\n    #referralBtn:hover,\n    #referralBtn.active {\n      background: #444;\n    }\n    /* Hamburger for Mobile */\n    .hamburger {\n      display: none;\n      background: none;\n      border: none;\n      color: #fff;\n      font-size: 24px;\n      cursor: pointer;\n    }\n    /* Iframe Container (top offset will be set dynamically) */\n    .iframe-container {\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n    /* Referral Modal */\n    #referralModal {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n      z-index: 2000;\n    }\n    #referralModal .modal-content {\n      background: #fff;\n      padding: 20px;\n      border-radius: 5px;\n      width: 90%;\n      max-width: 400px;\n      position: relative;\n    }\n    #referralModal .close {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      cursor: pointer;\n      font-size: 1.2em;\n    }\n    #referralModal form {\n      display: flex;\n      flex-direction: column;\n    }\n    #referralModal form label {\n      margin-top: 10px;\n    }\n    #referralModal form input {\n      padding: 8px;\n      margin-top: 5px;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n    #referralModal form button {\n      margin-top: 15px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #ff6f61;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #referralModal form button:hover {\n      background: #ff3b2f;\n    }\n    #scanMeBtn {\n      margin-top: 10px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #2196f3;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #scanMeBtn:hover {\n      background: #1e88e5;\n    }\n    /* QR Scanner Elements */\n    #video {\n      width: 100%;\n      max-width: 400px;\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      display: none;\n    }\n    #canvas {\n      display: none;\n    }\n    #result {\n      font-size: 1.2rem;\n      margin-top: 1rem;\n      color: green;\n      display: none;\n    }\n    /* Current Referral Display in Modal (Improved formatting) */\n    #currentReferralDisplay {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 10px;\n      padding: 8px;\n      background: #f9f9f9;\n      border-radius: 3px;\n    }\n    #currentReferralDisplay label {\n      flex-shrink: 0;\n      font-weight: bold;\n    }\n    /* Use a read-only input for the referral URL */\n    #currentReferralURL {\n      flex: 1;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n      padding: 6px;\n      font-size: 0.9em;\n      color: #333;\n      background: #fff;\n    }\n    /* Copy Link Button Styles */\n    #copyReferralUrl {\n      border: none;\n      border-radius: 3px;\n      background: #4caf50;\n      color: #fff;\n      font-size: 0.9em;\n      cursor: pointer;\n      padding: 6px 10px;\n    }\n    #copyReferralUrl:hover {\n      background: #43a047;\n    }\n    /* Raw Referral Params display */\n    #rawReferralParams {\n      margin-bottom: 10px;\n      font-size: 0.9em;\n      background: #f0f0f0;\n      padding: 8px;\n      border-radius: 3px;\n      word-break: break-all;\n    }\n    #rawReferralParams strong {\n      margin-right: 4px;\n    }\n    /* Mobile Styles */\n    @media (max-width: 600px) {\n      nav {\n        display: none;\n        flex-direction: column;\n        width: 100%;\n        background: #333;\n      }\n      nav.active {\n        display: flex;\n      }\n      .hamburger {\n        display: block;\n      }\n    }\n  </style>\n  <!-- Load jsQR library from CDN -->\n  <script src=\"https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.js\"></script>\n</head>\n<body>\n  <!-- Header with Hamburger Menu (no title shown) -->\n  <header>\n    <button id=\"hamburger\" class=\"hamburger\">&#9776;</button>\n    <nav id=\"navMenu\">\n      <button id=\"newPatientBtn\" class=\"active\">New Patient</button>\n      <button id=\"existingPatientBtn\">Existing Patient</button>\n      <button id=\"talkToClarkBtn\">Talk to Clark</button>\n      <button id=\"referralBtn\">Referral?</button>\n    </nav>\n  </header>\n\n  <!-- Main Iframe -->\n  <div class=\"iframe-container\">\n    <iframe id=\"contentFrame\" title=\"Patient Portal\"></iframe>\n  </div>\n\n  <!-- Referral Modal -->\n  <div id=\"referralModal\">\n    <div class=\"modal-content\">\n      <!-- The close button is hidden/disabled if no referral is set -->\n      <span class=\"close\" id=\"closeModal\">&times;</span>\n      <h2>Referral Information</h2>\n\n      <!-- Display full URL and copy button -->\n      <div id=\"currentReferralDisplay\">\n        <label for=\"currentReferralURL\">Referral URL:</label>\n        <input type=\"text\" id=\"currentReferralURL\" readonly value=\"None\" />\n        <button id=\"copyReferralUrl\">Copy Link</button>\n      </div>\n\n      <!-- Display raw referral params -->\n      <div id=\"rawReferralParams\">\n        <strong>Referral Params:</strong>\n        <span id=\"referralParamsValue\">None</span>\n      </div>\n\n      <!-- Manual Entry Form -->\n      <form id=\"referralForm\">\n        <label for=\"campaign\">Campaign:</label>\n        <input type=\"text\" id=\"campaign\" name=\"campaign\" placeholder=\"Enter campaign\" />\n        <label for=\"source\">Source:</label>\n        <input type=\"text\" id=\"source\" name=\"source\" placeholder=\"Enter source\" />\n        <label for=\"medium\">Medium:</label>\n        <input type=\"text\" id=\"medium\" name=\"medium\" placeholder=\"Enter medium\" />\n        <label for=\"event\">Event:</label>\n        <input type=\"text\" id=\"event\" name=\"event\" placeholder=\"Enter event\" />\n        <label for=\"other\">Other:</label>\n        <input type=\"text\" id=\"other\" name=\"other\" placeholder=\"Enter other info\" />\n        <button type=\"submit\">Submit Referral</button>\n      </form>\n\n      <!-- OR use QR Code Scan -->\n      <button type=\"button\" id=\"scanMeBtn\">Scan Me</button>\n      <!-- QR Scanner Elements -->\n      <video id=\"video\" autoplay muted playsinline></video>\n      <canvas id=\"canvas\"></canvas>\n      <p id=\"result\"></p>\n    </div>\n  </div>\n\n  <script>\n    // --- Disable Back Button ---\n    history.pushState(null, null, location.href);\n    window.onpopstate = function () {\n      history.go(1);\n    };\n\n    // --- Referral Caching ---\n    function getCachedReferral() {\n      return sessionStorage.getItem(\"referralParams\") || \"\";\n    }\n    function setCachedReferral(params) {\n      sessionStorage.setItem(\"referralParams\", params);\n    }\n\n    // We'll use this flag to prevent closing the modal if no referral is set\n    let forceReferral = false;\n\n    // --- Build New Patient URL using Cached Referral Params ---\n    const urls = {\n      newPatient: \"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\",\n      existingPatient: \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\",\n      talkToClark: \"https://xl.epicpc.com/webhook/5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb\"\n    };\n\n    function buildNewPatientUrl() {\n      let url = urls.newPatient;\n      const referral = getCachedReferral();\n      // If referral is non-empty, append it\n      if (referral.trim() !== \"\") {\n        url += \"?\" + referral;\n      }\n      return url;\n    }\n\n    // --- Fill the form fields if the cached referral has matching params ---\n    function fillFormFieldsFromReferralParams() {\n      const referral = getCachedReferral();\n      if (!referral) return;\n\n      const params = new URLSearchParams(referral);\n      // Populate known fields if present\n      if (params.has(\"campaign\")) {\n        document.getElementById(\"campaign\").value = params.get(\"campaign\");\n      }\n      if (params.has(\"source\")) {\n        document.getElementById(\"source\").value = params.get(\"source\");\n      }\n      if (params.has(\"medium\")) {\n        document.getElementById(\"medium\").value = params.get(\"medium\");\n      }\n      if (params.has(\"event\")) {\n        document.getElementById(\"event\").value = params.get(\"event\");\n      }\n      if (params.has(\"other\")) {\n        document.getElementById(\"other\").value = params.get(\"other\");\n      }\n    }\n\n    // --- Iframe & Navigation ---\n    const iframe = document.getElementById(\"contentFrame\");\n    const newPatientBtn = document.getElementById(\"newPatientBtn\");\n    const existingPatientBtn = document.getElementById(\"existingPatientBtn\");\n    const talkToClarkBtn = document.getElementById(\"talkToClarkBtn\");\n    const referralBtn = document.getElementById(\"referralBtn\");\n    const hamburger = document.getElementById(\"hamburger\");\n    const navMenu = document.getElementById(\"navMenu\");\n\n    // On initial load, use cached referral params if available\n    // If no referral, we show the modal immediately & do NOT allow closing until set.\n    iframe.src = buildNewPatientUrl();\n\n    // Check if there's no referral set\n    if (!getCachedReferral()) {\n      forceReferral = true;\n      // Show the modal\n      const referralModal = document.getElementById(\"referralModal\");\n      referralModal.style.display = \"flex\";\n      // Hide the close button until referral is set\n      document.getElementById(\"closeModal\").style.display = \"none\";\n    }\n\n    function updateIframe(url, activeButton) {\n      // For New Patient, always rebuild URL with cached referral params.\n      if (activeButton === newPatientBtn) {\n        url = buildNewPatientUrl();\n      }\n      iframe.src = url;\n\n      // Update active states.\n      newPatientBtn.classList.remove(\"active\");\n      existingPatientBtn.classList.remove(\"active\");\n      talkToClarkBtn.classList.remove(\"active\");\n      referralBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n\n      // Close the header menu (if open)\n      navMenu.classList.remove(\"active\");\n    }\n\n    newPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.newPatient, newPatientBtn);\n    });\n    existingPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.existingPatient, existingPatientBtn);\n    });\n    talkToClarkBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.talkToClark, talkToClarkBtn);\n    });\n\n    // --- Hamburger Menu for Mobile ---\n    hamburger.addEventListener(\"click\", function() {\n      navMenu.classList.toggle(\"active\");\n    });\n\n    // --- Referral Modal & Current Referral Display ---\n    const referralModal = document.getElementById(\"referralModal\");\n    const closeModal = document.getElementById(\"closeModal\");\n    const referralForm = document.getElementById(\"referralForm\");\n    const currentReferralInput = document.getElementById(\"currentReferralURL\");\n    const referralParamsValue = document.getElementById(\"referralParamsValue\");\n\n    // If the user tries to click the close button, only allow if forceReferral is false\n    closeModal.addEventListener(\"click\", function() {\n      if (!forceReferral) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    // We'll check outside clicks, but again only close if forceReferral is false\n    window.addEventListener(\"click\", function(event) {\n      if (!forceReferral && event.target === referralModal) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    referralBtn.addEventListener(\"click\", function() {\n      // If user clicks \"Referral?\" button, open the modal (unless already forced)\n      referralModal.style.display = \"flex\";\n      // Also close the nav menu\n      navMenu.classList.remove(\"active\");\n\n      // Update the display with the full referral URL\n      currentReferralInput.value = buildNewPatientUrl();\n\n      // Show the raw referral params (or \"None\")\n      const rawParams = getCachedReferral() || \"None\";\n      referralParamsValue.textContent = rawParams;\n\n      // Fill form fields if the referral params match known fields\n      fillFormFieldsFromReferralParams();\n    });\n\n    // --- Copy Referral URL Button ---\n    document.getElementById(\"copyReferralUrl\").addEventListener(\"click\", function() {\n      const fullUrl = buildNewPatientUrl();\n      navigator.clipboard.writeText(fullUrl)\n        .then(function() {\n          alert(\"Referral URL copied to clipboard!\");\n        })\n        .catch(function(err) {\n          alert(\"Failed to copy: \" + err);\n        });\n    });\n\n    // --- Referral Form Submission (Manual Entry) ---\n    referralForm.addEventListener(\"submit\", function(e) {\n      e.preventDefault();\n      const formData = new FormData(referralForm);\n      const referralParams = new URLSearchParams(formData).toString();\n\n      // Cache the new referral params\n      setCachedReferral(referralParams);\n\n      // Once referral is set, we can allow closing the modal\n      forceReferral = false;\n      closeModal.style.display = \"block\"; // show the close button again\n\n      // Reload the New Patient URL with updated params\n      updateIframe(urls.newPatient, newPatientBtn);\n\n      // Close modal\n      referralModal.style.display = \"none\";\n    });\n\n    // --- QR Scanner Functions using jsQR ---\n    const videoElem = document.getElementById(\"video\");\n    const canvasElem = document.getElementById(\"canvas\");\n    const canvasContext = canvasElem.getContext(\"2d\");\n    const resultElement = document.getElementById(\"result\");\n\n    let scanning = false;\n    let videoStream = null;\n\n    function startScanner() {\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(stream => {\n          videoStream = stream;\n          videoElem.srcObject = stream;\n          videoElem.setAttribute(\"playsinline\", true);\n          videoElem.style.display = \"block\";\n          videoElem.play();\n          scanning = true;\n          tick();\n        })\n        .catch(err => {\n          console.error(err);\n          alert(\"Error accessing camera: \" + err);\n        });\n    }\n\n    function stopScanner() {\n      scanning = false;\n      videoElem.style.display = \"none\";\n      if (videoStream) {\n        videoStream.getTracks().forEach(track => track.stop());\n      }\n    }\n\n    function tick() {\n      if (!scanning) return;\n      if (videoElem.readyState === videoElem.HAVE_ENOUGH_DATA) {\n        canvasElem.width = videoElem.videoWidth;\n        canvasElem.height = videoElem.videoHeight;\n        canvasContext.drawImage(videoElem, 0, 0, canvasElem.width, canvasElem.height);\n        const imageData = canvasContext.getImageData(0, 0, canvasElem.width, canvasElem.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: \"dontInvert\"\n        });\n        if (code) {\n          scanning = false;\n          stopScanner();\n          // Optionally, draw a box around the QR code.\n          drawLine(code.location.topLeftCorner, code.location.topRightCorner, \"#FF3B58\");\n          drawLine(code.location.topRightCorner, code.location.bottomRightCorner, \"#FF3B58\");\n          drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, \"#FF3B58\");\n          drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, \"#FF3B58\");\n          resultElement.innerText = \"QR Code Data: \" + code.data;\n          resultElement.style.display = \"block\";\n\n          // Cache the scanned referral params\n          setCachedReferral(code.data);\n\n          // Once referral is set, we can allow closing the modal\n          forceReferral = false;\n          closeModal.style.display = \"block\";\n\n          // Reload the New Patient URL with the scanned params\n          updateIframe(urls.newPatient, newPatientBtn);\n\n          // Close modal\n          referralModal.style.display = \"none\";\n        } else {\n          requestAnimationFrame(tick);\n        }\n      } else {\n        requestAnimationFrame(tick);\n      }\n    }\n\n    function drawLine(begin, end, color) {\n      canvasContext.beginPath();\n      canvasContext.moveTo(begin.x, begin.y);\n      canvasContext.lineTo(end.x, end.y);\n      canvasContext.lineWidth = 4;\n      canvasContext.strokeStyle = color;\n      canvasContext.stroke();\n    }\n\n    // --- Start QR Scanning When \"Scan Me\" is Clicked ---\n    const scanMeBtn = document.getElementById(\"scanMeBtn\");\n    scanMeBtn.addEventListener(\"click\", function() {\n      resultElement.style.display = \"none\";\n      startScanner();\n    });\n\n    // --- Adjust Iframe Container to sit directly below the header ---\n    function adjustIframeContainer() {\n      const headerHeight = document.querySelector(\"header\").clientHeight;\n      document.querySelector(\".iframe-container\").style.top = headerHeight + \"px\";\n    }\n    window.addEventListener(\"resize\", adjustIframeContainer);\n    window.addEventListener(\"load\", adjustIframeContainer);\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        -1500
      ],
      "id": "88f37a24-7bf4-4c77-8c90-9a95f7b1611c",
      "name": "Respond to Webhook17"
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectURL": "=https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1?{{ $json.queryString }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2700,
        -1400
      ],
      "id": "811c6715-b781-4f4e-84a5-b1ec16341c6c",
      "name": "Respond to Webhook18"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Prevent caching -->\n  <meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\" />\n  <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n  <meta http-equiv=\"Expires\" content=\"0\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>New EPIC Patient Signup! 🚀</title>\n  <!-- Flatpickr CSS -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css\">\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    body {\n      background: #f5b800;\n      font-family: Arial, sans-serif;\n      color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      padding: 20px;\n    }\n    .container {\n      background: #333;\n      padding: 30px;\n      border-radius: 10px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      width: 100%;\n      max-width: 600px;\n      position: relative;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    /* QR Code Container */\n    .qr-code-container {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    .qr-code-container p {\n      margin-bottom: 10px;\n    }\n    .qr-code-container img {\n      border: 1px solid #fff;\n      border-radius: 8px;\n    }\n    /* Multi-Step Form */\n    .form-step {\n      display: none;\n    }\n    .form-step.active {\n      display: block;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n      color: #fff;\n    }\n    input,\n    select {\n      width: 100%;\n      padding: 10px;\n      border-radius: 5px;\n      border: none;\n      background: #555;\n      color: #fff;\n    }\n    /* Navigation Buttons */\n    .btn-container {\n      display: flex;\n      justify-content: space-between;\n      margin-top: 20px;\n    }\n    button {\n      padding: 10px 20px;\n      background: #ff6f61;\n      border: none;\n      border-radius: 5px;\n      color: #fff;\n      cursor: pointer;\n      transition: background 0.3s ease;\n    }\n    button:hover {\n      background: #ff3b2f;\n    }\n    /* Dot Indicators */\n    .dots {\n      display: flex;\n      justify-content: center;\n      margin-top: 20px;\n    }\n    .dot {\n      height: 12px;\n      width: 12px;\n      margin: 0 5px;\n      background-color: #777;\n      border-radius: 50%;\n      display: inline-block;\n    }\n    .dot.active {\n      background-color: #fff;\n    }\n    /* Loader Overlay Styles */\n    #loaderOverlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.7);\n      display: none;\n      z-index: 9999;\n    }\n    #loaderOverlay .loader-content {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      text-align: center;\n      color: #fff;\n    }\n    .spinner {\n      border: 4px solid rgba(255, 255, 255, 0.3);\n      border-top: 4px solid #fff;\n      border-radius: 50%;\n      width: 30px;\n      height: 30px;\n      animation: spin 1s linear infinite;\n      margin: 0 auto 10px;\n    }\n    @keyframes spin {\n      to { transform: rotate(360deg); }\n    }\n  </style>\n  <script>\n    // Force reload if the page is loaded via the back button or from cache\n    window.addEventListener(\"pageshow\", function (event) {\n      if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {\n        window.location.reload();\n      }\n    });\n\n    // Function to validate all required fields in a step\n    function validateStep(stepElement) {\n      let valid = true;\n      const fields = stepElement.querySelectorAll('input, select');\n      fields.forEach((field) => {\n        if (!field.checkValidity()) {\n          field.reportValidity();\n          valid = false;\n        }\n      });\n      return valid;\n    }\n  </script>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>New EPIC Patient Signup! 🚀</h1>\n    <!-- QR Code Section -->\n    <div class=\"qr-code-container\">\n      <p>Prefer to do on your mobile? Scan Me:</p>\n      <img id=\"qrCode\" src=\"\" alt=\"QR Code\" />\n    </div>\n    <form id=\"patientForm\" action=\"https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf\" method=\"post\">\n      <!-- Step 1: Personal Information -->\n      <div class=\"form-step active\" id=\"step-1\">\n        <div class=\"form-group\">\n          <label for=\"firstName\">First Name</label>\n          <input id=\"firstName\" type=\"text\" name=\"firstName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"lastName\">Last Name</label>\n          <input id=\"lastName\" type=\"text\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"gender\">Gender</label>\n          <select id=\"gender\" name=\"gender\" required>\n            <option value=\"\" disabled selected>Select Gender</option>\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"Other\">Other</option>\n          </select>\n        </div>\n        <div class=\"btn-container\">\n          <!-- No previous button on step 1 -->\n          <span></span>\n          <button type=\"button\" id=\"next-1\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 2: Contact Information -->\n      <div class=\"form-step\" id=\"step-2\">\n        <div class=\"form-group\">\n          <label for=\"dob\">Date of Birth</label>\n          <!-- Use Flatpickr for a mobile-friendly calendar picker -->\n          <input id=\"dob\" type=\"text\" name=\"dob\" required placeholder=\"YYYY-MM-DD\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"cellphone\">Cellphone</label>\n          <input id=\"cellphone\" type=\"text\" name=\"cellphone\" placeholder=\"e.g., 2485551234\" required pattern=\"\\d+\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input id=\"email\" type=\"email\" name=\"email\" required>\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-2\">Previous</button>\n          <button type=\"button\" id=\"next-2\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 3: Address Information -->\n      <div class=\"form-step\" id=\"step-3\">\n        <div class=\"form-group\">\n          <label for=\"street1\">Street Address</label>\n          <input id=\"street1\" type=\"text\" name=\"street1\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"city\">City</label>\n          <input id=\"city\" type=\"text\" name=\"city\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"state\">State</label>\n          <input id=\"state\" type=\"text\" name=\"state\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"zip\">Zip Code</label>\n          <input id=\"zip\" type=\"text\" name=\"zip\" required pattern=\"\\d{5}\">\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-3\">Previous</button>\n          <button type=\"submit\" id=\"submitBtn\">Submit</button>\n        </div>\n      </div>\n\n      <!-- Dot Indicator -->\n      <div class=\"dots\">\n        <span class=\"dot active\" data-step=\"1\"></span>\n        <span class=\"dot\" data-step=\"2\"></span>\n        <span class=\"dot\" data-step=\"3\"></span>\n      </div>\n    </form>\n  </div>\n\n  <!-- Loader Overlay -->\n  <div id=\"loaderOverlay\">\n    <div class=\"loader-content\">\n      <div class=\"spinner\"></div>\n      <p>Submitting...</p>\n    </div>\n  </div>\n\n  <!-- Flatpickr JS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/flatpickr\"></script>\n  <script>\n    // Append current URL parameters to the form action (if any)\n    const form = document.getElementById('patientForm');\n    const currentSearch = window.location.search;\n    if (currentSearch && currentSearch.length > 0) {\n      const baseAction = form.getAttribute('action').split('?')[0];\n      form.setAttribute('action', baseAction + currentSearch);\n    }\n\n    // Set the QR code to reflect the current URL (with query parameters)\n    const qrCodeImg = document.getElementById('qrCode');\n    const currentURL = window.location.href;\n    qrCodeImg.src = \"https://api.qrserver.com/v1/create-qr-code/?data=\" + encodeURIComponent(currentURL) + \"&size=150x150\";\n\n    // Multi-step navigation logic\n    const steps = document.querySelectorAll('.form-step');\n    const dots = document.querySelectorAll('.dot');\n\n    document.getElementById('next-1').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-1'))) {\n        steps[0].classList.remove('active');\n        steps[1].classList.add('active');\n        updateDots(2);\n      }\n    });\n\n    document.getElementById('next-2').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-2'))) {\n        steps[1].classList.remove('active');\n        steps[2].classList.add('active');\n        updateDots(3);\n      }\n    });\n\n    document.getElementById('prev-2').addEventListener('click', () => {\n      steps[1].classList.remove('active');\n      steps[0].classList.add('active');\n      updateDots(1);\n    });\n\n    document.getElementById('prev-3').addEventListener('click', () => {\n      steps[2].classList.remove('active');\n      steps[1].classList.add('active');\n      updateDots(2);\n    });\n\n    function updateDots(activeStep) {\n      dots.forEach(dot => {\n        dot.classList.remove('active');\n        if (dot.getAttribute('data-step') == activeStep) {\n          dot.classList.add('active');\n        }\n      });\n    }\n\n    // Form submission event to disable submit button and show loader overlay\n    form.addEventListener('submit', function(e) {\n      document.getElementById('submitBtn').disabled = true;\n      document.getElementById('loaderOverlay').style.display = 'block';\n    });\n\n    // Initialize Flatpickr on the Date of Birth input with a calendar picker.\n    // The format is kept as YYYY-MM-DD and maxDate is set to today.\n    flatpickr(\"#dob\", {\n      dateFormat: \"Y-m-d\",\n      maxDate: \"today\"\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        -760
      ],
      "id": "9f6c41b1-e143-4e3e-ba3b-bc40088d2fd5",
      "name": "Respond to Webhook19"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Patient Portal</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    html, body {\n      height: 100%;\n      font-family: Arial, sans-serif;\n      overflow: hidden;\n      background-color: #333; /* Set background to match header */\n    }\n    /* Header & Navigation */\n    header {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      background: #333;\n      padding: 10px 20px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      z-index: 1000;\n    }\n    nav {\n      display: flex;\n    }\n    nav button {\n      border: none;\n      padding: 10px 20px;\n      margin-left: 10px;\n      border-radius: 5px;\n      font-size: 1em;\n      cursor: pointer;\n      transition: background 0.3s ease;\n      color: #fff;\n    }\n    /* Button Colors */\n    #newPatientBtn {\n      background: #ff6f61;\n    }\n    #newPatientBtn:hover,\n    #newPatientBtn.active {\n      background: #ff3b2f;\n    }\n    #existingPatientBtn {\n      background: #4caf50;\n    }\n    #existingPatientBtn:hover,\n    #existingPatientBtn.active {\n      background: #43a047;\n    }\n    #talkToClarkBtn {\n      background: #2196f3;\n    }\n    #talkToClarkBtn:hover,\n    #talkToClarkBtn.active {\n      background: #1e88e5;\n    }\n    #referralBtn {\n      background: #555;\n    }\n    #referralBtn:hover,\n    #referralBtn.active {\n      background: #444;\n    }\n    /* Hamburger for Mobile */\n    .hamburger {\n      display: none;\n      background: none;\n      border: none;\n      color: #fff;\n      font-size: 24px;\n      cursor: pointer;\n    }\n    /* Iframe Container (top offset will be set dynamically) */\n    .iframe-container {\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    .iframe-container iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n    /* Referral Modal */\n    #referralModal {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n      z-index: 2000;\n    }\n    #referralModal .modal-content {\n      background: #fff;\n      padding: 20px;\n      border-radius: 5px;\n      width: 90%;\n      max-width: 400px;\n      position: relative;\n    }\n    #referralModal .close {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      cursor: pointer;\n      font-size: 1.2em;\n    }\n    #referralModal form {\n      display: flex;\n      flex-direction: column;\n    }\n    #referralModal form label {\n      margin-top: 10px;\n    }\n    #referralModal form input {\n      padding: 8px;\n      margin-top: 5px;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n    #referralModal form button {\n      margin-top: 15px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #ff6f61;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #referralModal form button:hover {\n      background: #ff3b2f;\n    }\n    #scanMeBtn {\n      margin-top: 10px;\n      padding: 10px;\n      border: none;\n      border-radius: 5px;\n      background: #2196f3;\n      color: #fff;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #scanMeBtn:hover {\n      background: #1e88e5;\n    }\n    /* QR Scanner Elements */\n    #video {\n      width: 100%;\n      max-width: 400px;\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      display: none;\n    }\n    #canvas {\n      display: none;\n    }\n    #result {\n      font-size: 1.2rem;\n      margin-top: 1rem;\n      color: green;\n      display: none;\n    }\n    /* Current Referral Display in Modal (Improved formatting) */\n    #currentReferralDisplay {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 10px;\n      padding: 8px;\n      background: #f9f9f9;\n      border-radius: 3px;\n    }\n    #currentReferralDisplay label {\n      flex-shrink: 0;\n      font-weight: bold;\n    }\n    /* Use a read-only input for the referral URL */\n    #currentReferralURL {\n      flex: 1;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n      padding: 6px;\n      font-size: 0.9em;\n      color: #333;\n      background: #fff;\n    }\n    /* Copy Link Button Styles */\n    #copyReferralUrl {\n      border: none;\n      border-radius: 3px;\n      background: #4caf50;\n      color: #fff;\n      font-size: 0.9em;\n      cursor: pointer;\n      padding: 6px 10px;\n    }\n    #copyReferralUrl:hover {\n      background: #43a047;\n    }\n    /* Raw Referral Params display */\n    #rawReferralParams {\n      margin-bottom: 10px;\n      font-size: 0.9em;\n      background: #f0f0f0;\n      padding: 8px;\n      border-radius: 3px;\n      word-break: break-all;\n    }\n    #rawReferralParams strong {\n      margin-right: 4px;\n    }\n    /* Mobile Styles */\n    @media (max-width: 600px) {\n      nav {\n        display: none;\n        flex-direction: column;\n        width: 100%;\n        background: #333;\n      }\n      nav.active {\n        display: flex;\n      }\n      .hamburger {\n        display: block;\n      }\n    }\n  </style>\n  <!-- Load jsQR library from CDN -->\n  <script src=\"https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.js\"></script>\n</head>\n<body>\n  <!-- Header with Hamburger Menu (no title shown) -->\n  <header>\n    <button id=\"hamburger\" class=\"hamburger\">&#9776;</button>\n    <nav id=\"navMenu\">\n      <button id=\"newPatientBtn\" class=\"active\">New Patient</button>\n      <button id=\"existingPatientBtn\">Existing Patient</button>\n      <button id=\"talkToClarkBtn\">Talk to Clark</button>\n      <button id=\"referralBtn\">Referral?</button>\n    </nav>\n  </header>\n\n  <!-- Main Iframe -->\n  <div class=\"iframe-container\">\n    <iframe id=\"contentFrame\" title=\"Patient Portal\"></iframe>\n  </div>\n\n  <!-- Referral Modal -->\n  <div id=\"referralModal\">\n    <div class=\"modal-content\">\n      <!-- The close button is hidden/disabled if no referral is set -->\n      <span class=\"close\" id=\"closeModal\">&times;</span>\n      <h2>Referral Information</h2>\n\n      <!-- Display full URL and copy button -->\n      <div id=\"currentReferralDisplay\">\n        <label for=\"currentReferralURL\">Referral URL:</label>\n        <input type=\"text\" id=\"currentReferralURL\" readonly value=\"None\" />\n        <button id=\"copyReferralUrl\">Copy Link</button>\n      </div>\n\n      <!-- Display raw referral params -->\n      <div id=\"rawReferralParams\">\n        <strong>Referral Params:</strong>\n        <span id=\"referralParamsValue\">None</span>\n      </div>\n\n      <!-- Manual Entry Form -->\n      <form id=\"referralForm\">\n        <label for=\"campaign\">Campaign:</label>\n        <input type=\"text\" id=\"campaign\" name=\"campaign\" placeholder=\"Enter campaign\" />\n        <label for=\"source\">Source:</label>\n        <input type=\"text\" id=\"source\" name=\"source\" placeholder=\"Enter source\" />\n        <label for=\"medium\">Medium:</label>\n        <input type=\"text\" id=\"medium\" name=\"medium\" placeholder=\"Enter medium\" />\n        <label for=\"event\">Event:</label>\n        <input type=\"text\" id=\"event\" name=\"event\" placeholder=\"Enter event\" />\n        <label for=\"other\">Other:</label>\n        <input type=\"text\" id=\"other\" name=\"other\" placeholder=\"Enter other info\" />\n        <button type=\"submit\">Submit Referral</button>\n      </form>\n\n      <!-- OR use QR Code Scan -->\n      <button type=\"button\" id=\"scanMeBtn\">Scan Me</button>\n      <!-- QR Scanner Elements -->\n      <video id=\"video\" autoplay muted playsinline></video>\n      <canvas id=\"canvas\"></canvas>\n      <p id=\"result\"></p>\n    </div>\n  </div>\n\n  <script>\n    // --- Disable Back Button ---\n    history.pushState(null, null, location.href);\n    window.onpopstate = function () {\n      history.go(1);\n    };\n\n    // --- Referral Caching ---\n    function getCachedReferral() {\n      return sessionStorage.getItem(\"referralParams\") || \"\";\n    }\n    function setCachedReferral(params) {\n      sessionStorage.setItem(\"referralParams\", params);\n    }\n\n    // We'll use this flag to prevent closing the modal if no referral is set\n    let forceReferral = false;\n\n    // --- Build URLs for each section ---\n    const urls = {\n      newPatient: \"https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6\",\n      // Updated the existing patient URL to the new endpoint\n      existingPatient: \"https://xl.epicpc.com/webhook/df709613-29f9-4a63-ae5d-98d9041516fb\",\n      talkToClark: \"https://xl.epicpc.com/webhook/5ff7d61f-09e8-4133-8d04-f0ffc6d94fbb\"\n    };\n\n    function buildNewPatientUrl() {\n      let url = urls.newPatient;\n      const referral = getCachedReferral();\n      if (referral.trim() !== \"\") {\n        url += \"?\" + referral;\n      }\n      return url;\n    }\n\n    // New helper to build the Existing Patient URL with all query parameters\n    function buildExistingPatientUrl() {\n      let url = urls.existingPatient;\n      const referral = getCachedReferral();\n      if (referral.trim() !== \"\") {\n        url += \"?\" + referral;\n      }\n      return url;\n    }\n\n    // --- Fill the form fields if the cached referral has matching params ---\n    function fillFormFieldsFromReferralParams() {\n      const referral = getCachedReferral();\n      if (!referral) return;\n\n      const params = new URLSearchParams(referral);\n      if (params.has(\"campaign\")) {\n        document.getElementById(\"campaign\").value = params.get(\"campaign\");\n      }\n      if (params.has(\"source\")) {\n        document.getElementById(\"source\").value = params.get(\"source\");\n      }\n      if (params.has(\"medium\")) {\n        document.getElementById(\"medium\").value = params.get(\"medium\");\n      }\n      if (params.has(\"event\")) {\n        document.getElementById(\"event\").value = params.get(\"event\");\n      }\n      if (params.has(\"other\")) {\n        document.getElementById(\"other\").value = params.get(\"other\");\n      }\n    }\n\n    // --- Iframe & Navigation ---\n    const iframe = document.getElementById(\"contentFrame\");\n    const newPatientBtn = document.getElementById(\"newPatientBtn\");\n    const existingPatientBtn = document.getElementById(\"existingPatientBtn\");\n    const talkToClarkBtn = document.getElementById(\"talkToClarkBtn\");\n    const referralBtn = document.getElementById(\"referralBtn\");\n    const hamburger = document.getElementById(\"hamburger\");\n    const navMenu = document.getElementById(\"navMenu\");\n\n    // On initial load, use cached referral params if available.\n    // If no referral, we show the modal immediately & do NOT allow closing until set.\n    iframe.src = buildNewPatientUrl();\n\n    if (!getCachedReferral()) {\n      forceReferral = true;\n      const referralModal = document.getElementById(\"referralModal\");\n      referralModal.style.display = \"flex\";\n      document.getElementById(\"closeModal\").style.display = \"none\";\n    }\n\n    function updateIframe(url, activeButton) {\n      // For New Patient, always rebuild URL with cached referral params.\n      if (activeButton === newPatientBtn) {\n        url = buildNewPatientUrl();\n      }\n      iframe.src = url;\n\n      // Update active states.\n      newPatientBtn.classList.remove(\"active\");\n      existingPatientBtn.classList.remove(\"active\");\n      talkToClarkBtn.classList.remove(\"active\");\n      referralBtn.classList.remove(\"active\");\n      activeButton.classList.add(\"active\");\n\n      // Close the header menu (if open)\n      navMenu.classList.remove(\"active\");\n    }\n\n    newPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.newPatient, newPatientBtn);\n    });\n    // Updated to use buildExistingPatientUrl() for the existing patient section\n    existingPatientBtn.addEventListener(\"click\", function() {\n      updateIframe(buildExistingPatientUrl(), existingPatientBtn);\n    });\n    talkToClarkBtn.addEventListener(\"click\", function() {\n      updateIframe(urls.talkToClark, talkToClarkBtn);\n    });\n\n    // --- Hamburger Menu for Mobile ---\n    hamburger.addEventListener(\"click\", function() {\n      navMenu.classList.toggle(\"active\");\n    });\n\n    // --- Referral Modal & Current Referral Display ---\n    const referralModal = document.getElementById(\"referralModal\");\n    const closeModal = document.getElementById(\"closeModal\");\n    const referralForm = document.getElementById(\"referralForm\");\n    const currentReferralInput = document.getElementById(\"currentReferralURL\");\n    const referralParamsValue = document.getElementById(\"referralParamsValue\");\n\n    closeModal.addEventListener(\"click\", function() {\n      if (!forceReferral) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    window.addEventListener(\"click\", function(event) {\n      if (!forceReferral && event.target === referralModal) {\n        referralModal.style.display = \"none\";\n        stopScanner();\n      }\n    });\n\n    referralBtn.addEventListener(\"click\", function() {\n      referralModal.style.display = \"flex\";\n      navMenu.classList.remove(\"active\");\n      currentReferralInput.value = buildNewPatientUrl();\n      const rawParams = getCachedReferral() || \"None\";\n      referralParamsValue.textContent = rawParams;\n      fillFormFieldsFromReferralParams();\n    });\n\n    document.getElementById(\"copyReferralUrl\").addEventListener(\"click\", function() {\n      const fullUrl = buildNewPatientUrl();\n      navigator.clipboard.writeText(fullUrl)\n        .then(function() {\n          alert(\"Referral URL copied to clipboard!\");\n        })\n        .catch(function(err) {\n          alert(\"Failed to copy: \" + err);\n        });\n    });\n\n    referralForm.addEventListener(\"submit\", function(e) {\n      e.preventDefault();\n      const formData = new FormData(referralForm);\n      const referralParams = new URLSearchParams(formData).toString();\n      setCachedReferral(referralParams);\n      forceReferral = false;\n      closeModal.style.display = \"block\";\n      updateIframe(urls.newPatient, newPatientBtn);\n      referralModal.style.display = \"none\";\n    });\n\n    // --- QR Scanner Functions using jsQR ---\n    const videoElem = document.getElementById(\"video\");\n    const canvasElem = document.getElementById(\"canvas\");\n    const canvasContext = canvasElem.getContext(\"2d\");\n    const resultElement = document.getElementById(\"result\");\n\n    let scanning = false;\n    let videoStream = null;\n\n    function startScanner() {\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(stream => {\n          videoStream = stream;\n          videoElem.srcObject = stream;\n          videoElem.setAttribute(\"playsinline\", true);\n          videoElem.style.display = \"block\";\n          videoElem.play();\n          scanning = true;\n          tick();\n        })\n        .catch(err => {\n          console.error(err);\n          alert(\"Error accessing camera: \" + err);\n        });\n    }\n\n    function stopScanner() {\n      scanning = false;\n      videoElem.style.display = \"none\";\n      if (videoStream) {\n        videoStream.getTracks().forEach(track => track.stop());\n      }\n    }\n\n    function tick() {\n      if (!scanning) return;\n      if (videoElem.readyState === videoElem.HAVE_ENOUGH_DATA) {\n        canvasElem.width = videoElem.videoWidth;\n        canvasElem.height = videoElem.videoHeight;\n        canvasContext.drawImage(videoElem, 0, 0, canvasElem.width, canvasElem.height);\n        const imageData = canvasContext.getImageData(0, 0, canvasElem.width, canvasElem.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: \"dontInvert\"\n        });\n        if (code) {\n          scanning = false;\n          stopScanner();\n          drawLine(code.location.topLeftCorner, code.location.topRightCorner, \"#FF3B58\");\n          drawLine(code.location.topRightCorner, code.location.bottomRightCorner, \"#FF3B58\");\n          drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, \"#FF3B58\");\n          drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, \"#FF3B58\");\n          resultElement.innerText = \"QR Code Data: \" + code.data;\n          resultElement.style.display = \"block\";\n          setCachedReferral(code.data);\n          forceReferral = false;\n          closeModal.style.display = \"block\";\n          updateIframe(urls.newPatient, newPatientBtn);\n          referralModal.style.display = \"none\";\n        } else {\n          requestAnimationFrame(tick);\n        }\n      } else {\n        requestAnimationFrame(tick);\n      }\n    }\n\n    function drawLine(begin, end, color) {\n      canvasContext.beginPath();\n      canvasContext.moveTo(begin.x, begin.y);\n      canvasContext.lineTo(end.x, end.y);\n      canvasContext.lineWidth = 4;\n      canvasContext.strokeStyle = color;\n      canvasContext.stroke();\n    }\n\n    const scanMeBtn = document.getElementById(\"scanMeBtn\");\n    scanMeBtn.addEventListener(\"click\", function() {\n      resultElement.style.display = \"none\";\n      startScanner();\n    });\n\n    // --- Adjust Iframe Container to sit directly below the header ---\n    function adjustIframeContainer() {\n      const headerHeight = document.querySelector(\"header\").clientHeight;\n      document.querySelector(\".iframe-container\").style.top = headerHeight + \"px\";\n    }\n    window.addEventListener(\"resize\", adjustIframeContainer);\n    window.addEventListener(\"load\", adjustIframeContainer);\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        -1600
      ],
      "id": "7b5f8092-4bf2-457b-8de9-cc4344355dab",
      "name": "Respond to Webhook20"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Prevent caching -->\n  <meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\" />\n  <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n  <meta http-equiv=\"Expires\" content=\"0\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>New EPIC Patient Signup! 🚀</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    body {\n      background: #f5b800;\n      font-family: Arial, sans-serif;\n      color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      padding: 20px;\n    }\n    .container {\n      background: #333;\n      padding: 30px;\n      border-radius: 10px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      width: 100%;\n      max-width: 600px;\n      position: relative;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    /* QR Code Container */\n    .qr-code-container {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    .qr-code-container p {\n      margin-bottom: 10px;\n    }\n    .qr-code-container img {\n      border: 1px solid #fff;\n      border-radius: 8px;\n    }\n    /* Multi-Step Form */\n    .form-step {\n      display: none;\n    }\n    .form-step.active {\n      display: block;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n      color: #fff;\n    }\n    input,\n    select {\n      width: 100%;\n      padding: 10px;\n      border-radius: 5px;\n      border: none;\n      background: #555;\n      color: #fff;\n    }\n    /* Navigation Buttons */\n    .btn-container {\n      display: flex;\n      justify-content: space-between;\n      margin-top: 20px;\n    }\n    button {\n      padding: 10px 20px;\n      background: #ff6f61;\n      border: none;\n      border-radius: 5px;\n      color: #fff;\n      cursor: pointer;\n      transition: background 0.3s ease;\n    }\n    button:hover {\n      background: #ff3b2f;\n    }\n    /* Dot Indicators */\n    .dots {\n      display: flex;\n      justify-content: center;\n      margin-top: 20px;\n    }\n    .dot {\n      height: 12px;\n      width: 12px;\n      margin: 0 5px;\n      background-color: #777;\n      border-radius: 50%;\n      display: inline-block;\n    }\n    .dot.active {\n      background-color: #fff;\n    }\n    /* Loader Overlay Styles */\n    #loaderOverlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.7);\n      display: none;\n      z-index: 9999;\n    }\n    #loaderOverlay .loader-content {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      text-align: center;\n      color: #fff;\n    }\n    .spinner {\n      border: 4px solid rgba(255, 255, 255, 0.3);\n      border-top: 4px solid #fff;\n      border-radius: 50%;\n      width: 30px;\n      height: 30px;\n      animation: spin 1s linear infinite;\n      margin: 0 auto 10px;\n    }\n    @keyframes spin {\n      to { transform: rotate(360deg); }\n    }\n  </style>\n  <script>\n    // Force reload if the page is loaded via the back button or from cache\n    window.addEventListener(\"pageshow\", function (event) {\n      if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {\n        window.location.reload();\n      }\n    });\n\n    // Function to validate all required fields in a step\n    function validateStep(stepElement) {\n      let valid = true;\n      const fields = stepElement.querySelectorAll('input, select');\n      fields.forEach((field) => {\n        if (!field.checkValidity()) {\n          field.reportValidity();\n          valid = false;\n        }\n      });\n      return valid;\n    }\n    \n    // Populate hidden fields for cellphone and dob from URL parameters\n    window.addEventListener('DOMContentLoaded', () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const numberParam = urlParams.get('number');\n      const dobYearParam = urlParams.get('dobYear');\n      if(numberParam) {\n        document.getElementById('cellphone').value = numberParam;\n      }\n      if(dobYearParam) {\n        document.getElementById('dob').value = dobYearParam;\n      }\n    });\n  </script>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>New EPIC Patient Signup! 🚀</h1>\n    <!-- QR Code Section -->\n    <div class=\"qr-code-container\">\n      <p>Prefer to do on your mobile? Scan Me:</p>\n      <img id=\"qrCode\" src=\"\" alt=\"QR Code\" />\n    </div>\n    <form id=\"patientForm\" action=\"https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf\" method=\"post\">\n      <!-- Hidden fields for already captured data -->\n      <input type=\"hidden\" id=\"cellphone\" name=\"cellphone\" />\n      <input type=\"hidden\" id=\"dob\" name=\"dob\" />\n      \n      <!-- Step 1: Personal Information (First/Last Name, Email, Gender) -->\n      <div class=\"form-step active\" id=\"step-1\">\n        <div class=\"form-group\">\n          <label for=\"firstName\">First Name</label>\n          <input id=\"firstName\" type=\"text\" name=\"firstName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"lastName\">Last Name</label>\n          <input id=\"lastName\" type=\"text\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input id=\"email\" type=\"email\" name=\"email\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"gender\">Gender</label>\n          <select id=\"gender\" name=\"gender\" required>\n            <option value=\"\" disabled selected>Select Gender</option>\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"Other\">Other</option>\n          </select>\n        </div>\n        <div class=\"btn-container\">\n          <span></span>\n          <button type=\"button\" id=\"next-1\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 2: Physical Address -->\n      <div class=\"form-step\" id=\"step-2\">\n        <div class=\"form-group\">\n          <label for=\"street1\">Street Address</label>\n          <input id=\"street1\" type=\"text\" name=\"street1\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"city\">City</label>\n          <input id=\"city\" type=\"text\" name=\"city\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"state\">State</label>\n          <input id=\"state\" type=\"text\" name=\"state\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"zip\">Zip Code</label>\n          <input id=\"zip\" type=\"text\" name=\"zip\" required pattern=\"\\d{5}\">\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-2\">Previous</button>\n          <button type=\"submit\" id=\"submitBtn\">Submit</button>\n        </div>\n      </div>\n\n      <!-- Dot Indicator for two steps -->\n      <div class=\"dots\">\n        <span class=\"dot active\" data-step=\"1\"></span>\n        <span class=\"dot\" data-step=\"2\"></span>\n      </div>\n    </form>\n  </div>\n\n  <!-- Loader Overlay -->\n  <div id=\"loaderOverlay\">\n    <div class=\"loader-content\">\n      <div class=\"spinner\"></div>\n      <p>Submitting...</p>\n    </div>\n  </div>\n\n  <script>\n    // Append current URL parameters to the form action (if any)\n    const form = document.getElementById('patientForm');\n    const currentSearch = window.location.search;\n    if (currentSearch && currentSearch.length > 0) {\n      const baseAction = form.getAttribute('action').split('?')[0];\n      form.setAttribute('action', baseAction + currentSearch);\n    }\n\n    // Set the QR code to reflect the current URL (with query parameters)\n    const qrCodeImg = document.getElementById('qrCode');\n    const currentURL = window.location.href;\n    qrCodeImg.src = \"https://api.qrserver.com/v1/create-qr-code/?data=\" + encodeURIComponent(currentURL) + \"&size=150x150\";\n\n    // Multi-step navigation logic for two steps\n    const steps = document.querySelectorAll('.form-step');\n    const dots = document.querySelectorAll('.dot');\n\n    document.getElementById('next-1').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-1'))) {\n        steps[0].classList.remove('active');\n        steps[1].classList.add('active');\n        updateDots(2);\n      }\n    });\n\n    document.getElementById('prev-2').addEventListener('click', () => {\n      steps[1].classList.remove('active');\n      steps[0].classList.add('active');\n      updateDots(1);\n    });\n\n    function updateDots(activeStep) {\n      dots.forEach(dot => {\n        dot.classList.remove('active');\n        if (dot.getAttribute('data-step') == activeStep) {\n          dot.classList.add('active');\n        }\n      });\n    }\n\n    // Form submission event to disable submit button and show loader overlay\n    form.addEventListener('submit', function(e) {\n      document.getElementById('submitBtn').disabled = true;\n      document.getElementById('loaderOverlay').style.display = 'block';\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        -680
      ],
      "id": "6c6c7a8d-676f-4346-91c4-613090f18508",
      "name": "Respond to Webhook21"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Prevent caching -->\n  <meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\" />\n  <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n  <meta http-equiv=\"Expires\" content=\"0\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>New EPIC Patient Signup! 🚀</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    body {\n      background: #f5b800;\n      font-family: Arial, sans-serif;\n      color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      padding: 20px;\n    }\n    .container {\n      background: #333;\n      padding: 30px;\n      border-radius: 10px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      width: 100%;\n      max-width: 600px;\n      position: relative;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    /* QR Code Container */\n    .qr-code-container {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    .qr-code-container p {\n      margin-bottom: 10px;\n    }\n    .qr-code-container img {\n      border: 1px solid #fff;\n      border-radius: 8px;\n    }\n    /* Multi-Step Form */\n    .form-step {\n      display: none;\n    }\n    .form-step.active {\n      display: block;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n      color: #fff;\n    }\n    input,\n    select {\n      width: 100%;\n      padding: 10px;\n      border-radius: 5px;\n      border: none;\n      background: #555;\n      color: #fff;\n    }\n    /* Navigation Buttons */\n    .btn-container {\n      display: flex;\n      justify-content: space-between;\n      margin-top: 20px;\n    }\n    button {\n      padding: 10px 20px;\n      background: #ff6f61;\n      border: none;\n      border-radius: 5px;\n      color: #fff;\n      cursor: pointer;\n      transition: background 0.3s ease;\n    }\n    button:hover {\n      background: #ff3b2f;\n    }\n    /* Dot Indicators */\n    .dots {\n      display: flex;\n      justify-content: center;\n      margin-top: 20px;\n    }\n    .dot {\n      height: 12px;\n      width: 12px;\n      margin: 0 5px;\n      background-color: #777;\n      border-radius: 50%;\n      display: inline-block;\n    }\n    .dot.active {\n      background-color: #fff;\n    }\n    /* Loader Overlay Styles */\n    #loaderOverlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.7);\n      display: none;\n      z-index: 9999;\n    }\n    #loaderOverlay .loader-content {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      text-align: center;\n      color: #fff;\n    }\n    .spinner {\n      border: 4px solid rgba(255, 255, 255, 0.3);\n      border-top: 4px solid #fff;\n      border-radius: 50%;\n      width: 30px;\n      height: 30px;\n      animation: spin 1s linear infinite;\n      margin: 0 auto 10px;\n    }\n    @keyframes spin {\n      to { transform: rotate(360deg); }\n    }\n  </style>\n  <script>\n    // Force reload if the page is loaded via the back button or from cache\n    window.addEventListener(\"pageshow\", function (event) {\n      if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {\n        window.location.reload();\n      }\n    });\n\n    // Function to validate all required fields in a step\n    function validateStep(stepElement) {\n      let valid = true;\n      const fields = stepElement.querySelectorAll('input, select');\n      fields.forEach((field) => {\n        if (!field.checkValidity()) {\n          field.reportValidity();\n          valid = false;\n        }\n      });\n      return valid;\n    }\n    \n    // Populate hidden fields for cellphone and dob from URL parameters\n    window.addEventListener('DOMContentLoaded', () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const numberParam = urlParams.get('number');\n      const dobYearParam = urlParams.get('dobYear');\n      if(numberParam) {\n        document.getElementById('cellphone').value = numberParam;\n      }\n      if(dobYearParam) {\n        document.getElementById('dob').value = dobYearParam;\n      }\n    });\n  </script>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>New EPIC Patient Signup! 🚀</h1>\n    <!-- QR Code Section -->\n    <div class=\"qr-code-container\">\n      <p>Prefer to do on your mobile? Scan Me:</p>\n      <img id=\"qrCode\" src=\"\" alt=\"QR Code\" />\n    </div>\n    <form id=\"patientForm\" action=\"https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf\" method=\"post\">\n      <!-- Hidden fields for already captured data -->\n      <input type=\"hidden\" id=\"cellphone\" name=\"cellphone\" />\n      <input type=\"hidden\" id=\"dob\" name=\"dob\" />\n      \n      <!-- Step 1: Personal Information (First/Last Name, Email, Gender) -->\n      <div class=\"form-step active\" id=\"step-1\">\n        <div class=\"form-group\">\n          <label for=\"firstName\">First Name</label>\n          <input id=\"firstName\" type=\"text\" name=\"firstName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"lastName\">Last Name</label>\n          <input id=\"lastName\" type=\"text\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input id=\"email\" type=\"email\" name=\"email\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"gender\">Gender</label>\n          <select id=\"gender\" name=\"gender\" required>\n            <option value=\"\" disabled selected>Select Gender</option>\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"Other\">Other</option>\n          </select>\n        </div>\n        <div class=\"btn-container\">\n          <span></span>\n          <button type=\"button\" id=\"next-1\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 2: Physical Address -->\n      <div class=\"form-step\" id=\"step-2\">\n        <div class=\"form-group\">\n          <label for=\"street1\">Street Address</label>\n          <input id=\"street1\" type=\"text\" name=\"street1\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"city\">City</label>\n          <input id=\"city\" type=\"text\" name=\"city\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"state\">State</label>\n          <input id=\"state\" type=\"text\" name=\"state\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"zip\">Zip Code</label>\n          <input id=\"zip\" type=\"text\" name=\"zip\" required pattern=\"\\d{5}\">\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-2\">Previous</button>\n          <button type=\"submit\" id=\"submitBtn\">Submit</button>\n        </div>\n      </div>\n\n      <!-- Dot Indicator for two steps -->\n      <div class=\"dots\">\n        <span class=\"dot active\" data-step=\"1\"></span>\n        <span class=\"dot\" data-step=\"2\"></span>\n      </div>\n    </form>\n  </div>\n\n  <!-- Loader Overlay -->\n  <div id=\"loaderOverlay\">\n    <div class=\"loader-content\">\n      <div class=\"spinner\"></div>\n      <p>Submitting...</p>\n    </div>\n  </div>\n\n  <script>\n    // Append current URL parameters to the form action (if any)\n    const form = document.getElementById('patientForm');\n    const currentSearch = window.location.search;\n    if (currentSearch && currentSearch.length > 0) {\n      const baseAction = form.getAttribute('action').split('?')[0];\n      form.setAttribute('action', baseAction + currentSearch);\n    }\n\n    // Generate QR code URL without the \"number\" and \"dobYear\" parameters\n    const qrCodeImg = document.getElementById('qrCode');\n    const urlParams = new URLSearchParams(window.location.search);\n    // Remove the parameters that should not be shown\n    urlParams.delete('number');\n    urlParams.delete('dobYear');\n    const filteredQuery = urlParams.toString();\n    const qrBaseURL = \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\";\n    const qrURL = filteredQuery ? qrBaseURL + \"?\" + filteredQuery : qrBaseURL;\n    qrCodeImg.src = \"https://api.qrserver.com/v1/create-qr-code/?data=\" + encodeURIComponent(qrURL) + \"&size=150x150\";\n\n    // Multi-step navigation logic for two steps\n    const steps = document.querySelectorAll('.form-step');\n    const dots = document.querySelectorAll('.dot');\n\n    document.getElementById('next-1').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-1'))) {\n        steps[0].classList.remove('active');\n        steps[1].classList.add('active');\n        updateDots(2);\n      }\n    });\n\n    document.getElementById('prev-2').addEventListener('click', () => {\n      steps[1].classList.remove('active');\n      steps[0].classList.add('active');\n      updateDots(1);\n    });\n\n    function updateDots(activeStep) {\n      dots.forEach(dot => {\n        dot.classList.remove('active');\n        if (dot.getAttribute('data-step') == activeStep) {\n          dot.classList.add('active');\n        }\n      });\n    }\n\n    // Form submission event to disable submit button and show loader overlay\n    form.addEventListener('submit', function(e) {\n      document.getElementById('submitBtn').disabled = true;\n      document.getElementById('loaderOverlay').style.display = 'block';\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        -620
      ],
      "id": "4990f334-a931-4c67-85ac-739880f8506d",
      "name": "Respond to Webhook22"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Prevent caching -->\n  <meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\" />\n  <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n  <meta http-equiv=\"Expires\" content=\"0\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>New EPIC Patient Signup! 🚀</title>\n  <style>\n    /* Base Styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    body {\n      background: #f5b800;\n      font-family: Arial, sans-serif;\n      color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      padding: 20px;\n    }\n    .container {\n      background: #333;\n      padding: 30px;\n      border-radius: 10px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      width: 100%;\n      max-width: 600px;\n      position: relative;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    /* QR Code Container */\n    .qr-code-container {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    .qr-code-container p {\n      margin-bottom: 10px;\n    }\n    .qr-code-container img {\n      border: 1px solid #fff;\n      border-radius: 8px;\n    }\n    /* Multi-Step Form */\n    .form-step {\n      display: none;\n    }\n    .form-step.active {\n      display: block;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n      color: #fff;\n    }\n    input,\n    select {\n      width: 100%;\n      padding: 10px;\n      border-radius: 5px;\n      border: none;\n      background: #555;\n      color: #fff;\n    }\n    /* Navigation Buttons */\n    .btn-container {\n      display: flex;\n      justify-content: space-between;\n      margin-top: 20px;\n    }\n    button {\n      padding: 10px 20px;\n      border: none;\n      border-radius: 5px;\n      color: #fff;\n      cursor: pointer;\n      transition: background 0.3s ease;\n    }\n    #next-1 {\n      background: #ff6f61;\n    }\n    #next-1:hover {\n      background: #ff3b2f;\n    }\n    #back-btn {\n      background: #555;\n    }\n    #back-btn:hover {\n      background: #444;\n    }\n    /* Dot Indicators */\n    .dots {\n      display: flex;\n      justify-content: center;\n      margin-top: 20px;\n    }\n    .dot {\n      height: 12px;\n      width: 12px;\n      margin: 0 5px;\n      background-color: #777;\n      border-radius: 50%;\n      display: inline-block;\n    }\n    .dot.active {\n      background-color: #fff;\n    }\n    /* Loader Overlay Styles */\n    #loaderOverlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.7);\n      display: none;\n      z-index: 9999;\n    }\n    #loaderOverlay .loader-content {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      text-align: center;\n      color: #fff;\n    }\n    .spinner {\n      border: 4px solid rgba(255, 255, 255, 0.3);\n      border-top: 4px solid #fff;\n      border-radius: 50%;\n      width: 30px;\n      height: 30px;\n      animation: spin 1s linear infinite;\n      margin: 0 auto 10px;\n    }\n    @keyframes spin {\n      to { transform: rotate(360deg); }\n    }\n  </style>\n  <script>\n    // Force reload if the page is loaded via the back button or from cache\n    window.addEventListener(\"pageshow\", function (event) {\n      if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {\n        window.location.reload();\n      }\n    });\n\n    // Function to validate all required fields in a step\n    function validateStep(stepElement) {\n      let valid = true;\n      const fields = stepElement.querySelectorAll('input, select');\n      fields.forEach((field) => {\n        if (!field.checkValidity()) {\n          field.reportValidity();\n          valid = false;\n        }\n      });\n      return valid;\n    }\n    \n    // Populate hidden fields for cellphone and dob from URL parameters\n    window.addEventListener('DOMContentLoaded', () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const numberParam = urlParams.get('number');\n      const dobYearParam = urlParams.get('dobYear');\n      if(numberParam) {\n        document.getElementById('cellphone').value = numberParam;\n      }\n      if(dobYearParam) {\n        document.getElementById('dob').value = dobYearParam;\n      }\n    });\n  </script>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>New EPIC Patient Signup! 🚀</h1>\n    <!-- QR Code Section -->\n    <div class=\"qr-code-container\">\n      <p>Prefer to do on your mobile? Scan Me:</p>\n      <img id=\"qrCode\" src=\"\" alt=\"QR Code\" />\n    </div>\n    <form id=\"patientForm\" action=\"https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf\" method=\"post\">\n      <!-- Hidden fields for already captured data -->\n      <input type=\"hidden\" id=\"cellphone\" name=\"cellphone\" />\n      <input type=\"hidden\" id=\"dob\" name=\"dob\" />\n      \n      <!-- Step 1: Personal Information (First/Last Name, Email, Gender) -->\n      <div class=\"form-step active\" id=\"step-1\">\n        <div class=\"form-group\">\n          <label for=\"firstName\">First Name</label>\n          <input id=\"firstName\" type=\"text\" name=\"firstName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"lastName\">Last Name</label>\n          <input id=\"lastName\" type=\"text\" name=\"lastName\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <input id=\"email\" type=\"email\" name=\"email\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"gender\">Gender</label>\n          <select id=\"gender\" name=\"gender\" required>\n            <option value=\"\" disabled selected>Select Gender</option>\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"Other\">Other</option>\n          </select>\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"back-btn\" onclick=\"window.history.back()\">Oops, I'm not new, try again</button>\n          <button type=\"button\" id=\"next-1\">Next</button>\n        </div>\n      </div>\n\n      <!-- Step 2: Physical Address -->\n      <div class=\"form-step\" id=\"step-2\">\n        <div class=\"form-group\">\n          <label for=\"street1\">Street Address</label>\n          <input id=\"street1\" type=\"text\" name=\"street1\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"city\">City</label>\n          <input id=\"city\" type=\"text\" name=\"city\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"state\">State</label>\n          <input id=\"state\" type=\"text\" name=\"state\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"zip\">Zip Code</label>\n          <input id=\"zip\" type=\"text\" name=\"zip\" required pattern=\"\\d{5}\">\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"button\" id=\"prev-2\">Previous</button>\n          <button type=\"submit\" id=\"submitBtn\">Submit</button>\n        </div>\n      </div>\n\n      <!-- Dot Indicator for two steps -->\n      <div class=\"dots\">\n        <span class=\"dot active\" data-step=\"1\"></span>\n        <span class=\"dot\" data-step=\"2\"></span>\n      </div>\n    </form>\n  </div>\n\n  <!-- Loader Overlay -->\n  <div id=\"loaderOverlay\">\n    <div class=\"loader-content\">\n      <div class=\"spinner\"></div>\n      <p>Submitting...</p>\n    </div>\n  </div>\n\n  <script>\n    // Append current URL parameters to the form action (if any)\n    const form = document.getElementById('patientForm');\n    const currentSearch = window.location.search;\n    if (currentSearch && currentSearch.length > 0) {\n      const baseAction = form.getAttribute('action').split('?')[0];\n      form.setAttribute('action', baseAction + currentSearch);\n    }\n\n    // Generate QR code URL without the \"number\" and \"dobYear\" parameters\n    const qrCodeImg = document.getElementById('qrCode');\n    const urlParams = new URLSearchParams(window.location.search);\n    // Remove the parameters that should not be shown\n    urlParams.delete('number');\n    urlParams.delete('dobYear');\n    const filteredQuery = urlParams.toString();\n    const qrBaseURL = \"https://xl.epicpc.com/webhook/740dec40-0ecd-4ce3-964c-bea05503f4e1\";\n    const qrURL = filteredQuery ? qrBaseURL + \"?\" + filteredQuery : qrBaseURL;\n    qrCodeImg.src = \"https://api.qrserver.com/v1/create-qr-code/?data=\" + encodeURIComponent(qrURL) + \"&size=150x150\";\n\n    // Multi-step navigation logic for two steps\n    const steps = document.querySelectorAll('.form-step');\n    const dots = document.querySelectorAll('.dot');\n\n    document.getElementById('next-1').addEventListener('click', () => {\n      if (validateStep(document.getElementById('step-1'))) {\n        steps[0].classList.remove('active');\n        steps[1].classList.add('active');\n        updateDots(2);\n      }\n    });\n\n    document.getElementById('prev-2').addEventListener('click', () => {\n      steps[1].classList.remove('active');\n      steps[0].classList.add('active');\n      updateDots(1);\n    });\n\n    function updateDots(activeStep) {\n      dots.forEach(dot => {\n        dot.classList.remove('active');\n        if (dot.getAttribute('data-step') == activeStep) {\n          dot.classList.add('active');\n        }\n      });\n    }\n\n    // Form submission event to disable submit button and show loader overlay\n    form.addEventListener('submit', function(e) {\n      document.getElementById('submitBtn').disabled = true;\n      document.getElementById('loaderOverlay').style.display = 'block';\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        -560
      ],
      "id": "39cb2c97-df1d-424e-9436-27d7d0e16ece",
      "name": "Respond to Webhook23"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        2160,
        -360
      ],
      "id": "ddb15d65-6499-4bf2-a0a8-4f5ac31400cf",
      "name": "Limit"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>EPIC Scheduling 🚀 With Virtual Clark!</title>\n  <!-- Include Twilio Client SDK -->\n  <script src=\"https://media.twiliocdn.com/sdk/js/client/v1.10/twilio.min.js\"></script>\n  <style>\n    /* Color Scheme: Yellow (#f5b800) & Dark Grey (#333) with white text */\n    body {\n      margin: 0;\n      padding: 0;\n      background-color: #f5b800;\n      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n    }\n    .container {\n      background-color: #333;\n      color: #fff;\n      padding: 40px;\n      border-radius: 8px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      max-width: 600px;\n      width: 90%;\n      text-align: center;\n    }\n    h1 {\n      font-size: 2.5rem;\n      margin-bottom: 20px;\n    }\n    /* Default button style */\n    .btn {\n      display: inline-block;\n      background-color: #f5b800;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 12px 24px;\n      font-size: 1rem;\n      margin: 10px;\n      cursor: pointer;\n      text-transform: uppercase;\n      letter-spacing: 0.05em;\n      transition: background-color 0.3s ease;\n      font-weight: bold;\n    }\n    .btn:hover {\n      background-color: rgba(245, 184, 0, 0.85);\n    }\n    /* Specific styling for the Talk to Clark button */\n    #callNowBtn {\n      background-color: #28a745; /* Green background */\n    }\n    #callNowBtn:hover {\n      background-color: #218838; /* Darker green on hover */\n    }\n    /* QR Code styling with a white border */\n    .qr-code {\n      margin: 20px 0;\n    }\n    .qr-code img {\n      width: 150px;\n      height: 150px;\n      border: 4px solid #fff;\n      border-radius: 8px;\n    }\n    /* Popup styling for in-progress call */\n    .popup {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(51, 51, 51, 0.9);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n    }\n    .popup-content {\n      background-color: #333;\n      color: #fff;\n      padding: 30px;\n      border-radius: 8px;\n      text-align: center;\n      width: 90%;\n      max-width: 350px;\n    }\n    .popup-content p {\n      font-size: 1.2rem;\n      margin-bottom: 20px;\n    }\n    .popup-content button {\n      background-color: #f5b800;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 10px 20px;\n      font-size: 1rem;\n      cursor: pointer;\n      transition: background-color 0.3s ease;\n      font-weight: bold;\n    }\n    .popup-content button:hover {\n      background-color: rgba(245, 184, 0, 0.85);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>EPIC Scheduling 🚀<br>With Virtual Clark!</h1>\n    <!-- QR Code Container in the middle -->\n    <div class=\"qr-code\">\n      <img id=\"qrCode\" alt=\"QR Code\" />\n    </div>\n    <!-- \"Talk to Clark\" button at the bottom -->\n    <button id=\"callNowBtn\" class=\"btn\">Talk to Clark</button>\n  </div>\n\n  <!-- Popup for in-progress call -->\n  <div id=\"callPopup\" class=\"popup\" style=\"display: none;\">\n    <div class=\"popup-content\">\n      <p id=\"callStatusMessage\">Call in progress...</p>\n      <button id=\"endCallBtn\">End Call</button>\n    </div>\n  </div>\n\n  <script>\n    // --- QR Code Generation ---\n    document.addEventListener(\"DOMContentLoaded\", function() {\n      var currentUrl = window.location.href;\n      var qrCodeImage = document.getElementById(\"qrCode\");\n      // Using a free QR code generator API\n      qrCodeImage.src = \"https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=\" + encodeURIComponent(currentUrl);\n    });\n\n    // --- Twilio Softphone Integration ---\n    let activeConnection = null;\n    // Use a default user if one is not provided via the URL\n    const user = new URLSearchParams(window.location.search).get(\"user\") || \"user123\";\n    const phoneNumber = \"3139227244\"; // Number to be called\n\n    // Replace with your actual token endpoint\n    const TOKEN_URL = \"https://xl.epicpc.com/webhook/a41896ee-ba31-450d-9090-b3baed0b256b\";\n\n    function fetchAccessToken() {\n      return fetch(TOKEN_URL + window.location.search)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(\"Failed to fetch token\");\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (!data.token) {\n            throw new Error(\"No token received\");\n          }\n          return data.token;\n        });\n    }\n\n    function initTwilio() {\n      fetchAccessToken()\n        .then(token => {\n          Twilio.Device.setup(token, { debug: true });\n        })\n        .catch(err => {\n          console.error(\"Error initializing Twilio device:\", err);\n        });\n    }\n\n    window.onload = function() {\n      initTwilio();\n    };\n\n    // --- Functions to manage call popup and connection ---\n    function startCall() {\n      // Initiate a call via Twilio with parameters: phone number and user identifier.\n      const params = {\n        To: phoneNumber,\n        user: user\n      };\n      const connection = Twilio.Device.connect(params);\n      if (connection) {\n        activeConnection = connection;\n        showCallPopup();\n      } else {\n        console.error(\"Failed to establish connection.\");\n      }\n    }\n\n    function showCallPopup() {\n      document.getElementById(\"callPopup\").style.display = \"flex\";\n    }\n\n    function hideCallPopup() {\n      document.getElementById(\"callPopup\").style.display = \"none\";\n    }\n\n    function endCall() {\n      if (activeConnection) {\n        Twilio.Device.disconnectAll();\n        activeConnection = null;\n      }\n      hideCallPopup();\n    }\n\n    // --- Event Listeners ---\n    document.getElementById(\"callNowBtn\").addEventListener(\"click\", function () {\n      startCall();\n    });\n\n    document.getElementById(\"endCallBtn\").addEventListener(\"click\", function () {\n      endCall();\n    });\n\n    // Automatically hide the call popup if the call disconnects.\n    Twilio.Device.disconnect(function () {\n      hideCallPopup();\n      activeConnection = null;\n    });\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1640,
        -1580
      ],
      "id": "a0b02360-8692-4181-999a-17e810f8857d",
      "name": "Jane"
    },
    {
      "parameters": {
        "fileSelector": "=pmtoken-{{ $json.user }}.txt",
        "options": {}
      },
      "id": "ba2bd854-0327-4bca-8611-742f9131f4fa",
      "name": "Read PM Token",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        520,
        1400
      ],
      "alwaysOutputData": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "c6eba4e9-07bd-4f5e-99f8-de3c7eec10ed",
      "name": "Extract PM Token",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        660,
        1400
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"Action\":\"GetUserAuthentication\",\n\"AppUserID\":\"{{ $('USER').item.json.user }}\",\n\"Appname\":\"EPICPC.NMNWokflow.TestApp\",\n\"PatientID\":\"\",\n\"Token\":\"{{ $json[\"data\"] }}\",\n\"Parameter1\":\"{{ $('USER').item.json.password }}\"\n}\n",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "3edb5d94-6d03-4efe-9166-ca5611a20109",
      "name": "Check Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        840,
        1400
      ]
    },
    {
      "parameters": {
        "amount": 1
      },
      "id": "cec62a68-e354-45c7-b105-606fbf102195",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1280,
        1500
      ],
      "webhookId": "666ea0a7-be04-4fbf-80a1-d71780f7eac8"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.data[0].getuserauthenticationinfo[0].ValidUser }}",
              "value2": "YES"
            }
          ]
        }
      },
      "id": "fa20ad95-c097-4d5e-b034-e0653efeb855",
      "name": "IF PM Token Valid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1120,
        1400
      ]
    },
    {
      "parameters": {
        "content": "# ASPM Authentication ELISEAI",
        "height": 373.491094826977,
        "width": 1498.6041394020742,
        "color": 6
      },
      "id": "e81a76c5-36c1-4e6a-b225-ddd59431b9ca",
      "name": "Sticky Note25",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        1300
      ]
    },
    {
      "parameters": {
        "fileSelector": "=pmtoken-{{ $('USER').item.json.user }}.txt",
        "options": {}
      },
      "id": "a12d40b9-6c82-49de-9fae-1d5785e0ebd9",
      "name": "Read PM Token22",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1340,
        1340
      ],
      "alwaysOutputData": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "201a2417-44a5-4835-8573-2c9f1b98d88b",
      "name": "Extract PM Token22",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1480,
        1340
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "workflowId": "aUCNcTe36bHU5YKn",
        "options": {}
      },
      "id": "3c31f4d9-b1fb-4000-a109-ffc4e01d62d2",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        1460,
        1500
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7588a9fa-9c56-4c5d-8e77-30bda7a5d1ef",
              "name": "Token",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e6048231-d21a-4ddb-a46c-9c7bdec5ddfb",
      "name": "Edit Fields14",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1640,
        1340
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b806a87b-407c-47eb-b9ba-1aca0d81400d",
              "name": "user",
              "value": "eliseai",
              "type": "string"
            },
            {
              "id": "c45539b3-dcfd-4d9b-a267-54d31648d3b0",
              "name": "password",
              "value": "L3tsC0nnect!C0nf",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "0300d4b5-ea3e-4bf8-b859-1fbf145f2601",
      "name": "USER",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        360,
        1400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.data = JSON.parse(item.json.data);\n}\n\nreturn $input.all();"
      },
      "id": "9298f5d0-ba54-4183-a229-933c3335ae74",
      "name": "Code30",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        980,
        1400
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "id": "ad3f85bc-4e3d-425f-8abf-33622579aca4",
      "name": "Merge5",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1900,
        1720
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "7095cece-6d0c-46a6-9610-80a74fa09619",
      "name": "Edit Fields7",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1900,
        1380
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "SavePatient"
            },
            {
              "name": "AppUserID",
              "value": "eliseai"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "="
            },
            {
              "name": "Token",
              "value": "={{ $json.Token }}"
            },
            {
              "name": "Parameter1",
              "value": "="
            },
            {
              "name": "Parameter2",
              "value": "=<patient>\n<lastName>{{ $json.body.lastName }}</lastName>\n<firstName>{{ $json.body.firstName }}</firstName>\n<gender>{{ $json.body.gender === \"Male\" ? \"M\" : \"F\" }}</gender>\n<dob>{{ $json.body.dob }}</dob>\n<street1>{{ $json.body.street1 }}</street1>\n<city>{{ $json.body.city }}</city>\n<state>{{ $json.body.state }}</state>\n<zip>{{ $json.body.zip }}</zip>\n<cellphone>{{ $json.body.cellphone.replace(/\\D/g, '') }}</cellphone>\n<email>{{ /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]+$/.test($json.body.email.replace(/,/g, '.').replace(/&/g, '').replace(/</g, '').replace(/>/g, '').replace(/\\.$/, '').replace(/[^a-zA-Z0-9](?=@)/g, '').replace(/^[^a-zA-Z0-9]+/, '')) ? $json.body.email.replace(/,/g, '.').replace(/&/g, '').replace(/</g, '').replace(/>/g, '').replace(/\\.$/, '').replace(/[^a-zA-Z0-9](?=@)/g, '').replace(/^[^a-zA-Z0-9]+/, '') : 'nothing@email.com' }}</email>\n</patient>"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "f3ca9414-0b38-4ff7-9f46-14019df3a92a",
      "name": "HTTP Create New Patient2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2260,
        1540
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f4dffe0c-da7c-4c0f-8b40-eba5ca72899b",
              "leftValue": "={{ $json.Error }}",
              "rightValue": "Magic Error",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2440,
        1540
      ],
      "id": "d894166c-142a-4e60-bc52-14e42c3d1f08",
      "name": "If2"
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectURL": "=https://xl.epicpc.com/webhook/141a4626-dfa8-4ad8-b96f-f4533a5af6ea?number={{ $('Redirect to Schedule').item.json.body.cellphone }}&dobYear={{ $json.body.dob }}&campaign=",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2740,
        1340
      ],
      "id": "639b5dee-96f8-4b5d-98fd-209bbf91e180",
      "name": "Respond to Webhook24"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        2080,
        1540
      ],
      "id": "724a0464-fb91-47a7-822c-7ffca5d85929",
      "name": "Limit1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "6de41a6a-ce21-4a05-9000-ab9de0c8bb66",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        20,
        1740
      ],
      "id": "284ecd22-ec18-4781-8a6a-ddbcd657cea7",
      "name": "Webhook1",
      "webhookId": "6de41a6a-ce21-4a05-9000-ab9de0c8bb66"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2740,
        1560
      ],
      "id": "24fa89c0-67fc-4055-a874-d97100b2438e",
      "name": "Respond to Webhook25"
    }
  ],
  "pinData": {
    "Edit Fields6": [
      {
        "json": {
          "Token": "C533510D-A9A1-4706-A9A2-B97656E52918",
          "Patient_ID": 174619,
          "Patient_Number": "502880",
          "Patient_Name": "THOMAS STILWELL",
          "Patient_LFI": "STILWELL, THOMAS",
          "Patient_First_Name": "THOMAS",
          "Patient_Last_Name": "STILWELL",
          "Patient_Street1": "511 SOUTH CROOKS RD,",
          "Patient_City": "CLAWSON",
          "Patient_State": "MI",
          "Patient_Zip_Code": "48017",
          "Patient_SSN": null,
          "Patient_Sex": "M",
          "Patient_DOB": "1988-02-01T00:00:00.000Z",
          "Patient_Age": 36,
          "Patient_Marital_Status": "Separated",
          "Patient_Home_Phone": "2488726322",
          "Patient_Cell_Phone": "2488726322",
          "Patient_Primary_Phone_Number": "2488726322",
          "patient_email": "thomas@tagarmor.com",
          "BitrixPatientStatus": "EHS Patient",
          "params": {
            "fullName": "Firstname+Lastname",
            "patientId": "502880",
            "caretype": "PCARE",
            "schedule": "%7B%22index%22%3A6%2C%22slots_available%22%3A0%2C%22start_fixer%22%3A%2209%3A20%22%2C%22start%22%3A%229%3A20%20AM%22%2C%22end%22%3A%2209%3A30%22%2C%22location%22%3A%22EPICCLAW%22%2C%22date%22%3A%2211-20-2024%22%2C%22location_description%22%3A%22EPIC%20PC%20%22%2C%22provider_name%22%3A%22TOUBIA%2C%20ALLEN%22%2C%22duration%22%3A%2210%22%2C%22provider%22%3A%22AT-FNP%20%20%22%2C%22altered_provider%22%3A%22--%22%2C%22resource_abbr%22%3A%22AT-FNP%20%20%22%2C%22orderkeytime%22%3A%222024-11-20%2009%3A20%3A00%22%2C%22activity_type_abbr%22%3A%22ACT10N%20%20%22%2C%22scheduling_location_id%22%3A95%2C%22bookable_appt%22%3A%22BookableSlot%22%2C%22res_resource_id%22%3A1117%2C%22res_abbreviation%22%3A%22AT-FNP%20%20%22%2C%22res_description%22%3A%22Toubia%2C%20Allen%22%2C%22res_appointment_group_id%22%3A42%2C%22appt_gp_abbreviation%22%3A%22ACT%20%20%20%20%20%22%2C%22appt_gp_description%22%3A%22ACT%20-%20Advanced%20Care%20Team%20%22%2C%22res_practitioner_id%22%3A2145%2C%22prac_practitioner_id%22%3A2145%2C%22is_ref_source%22%3Afalse%2C%22is_physician%22%3Afalse%2C%22prac_abbreviation%22%3A%22AT-FNP%20%20%22%2C%22first_name%22%3A%22ALLEN%22%2C%22last_name%22%3A%22TOUBIA%22%2C%22sex%22%3A%22M%22%2C%22street1%22%3A%22911%20E%209%20Mile%22%2C%22city%22%3A%22Ferndale%22%2C%22state%22%3A%22MI%22%2C%22zip_code%22%3A%2248220%22%2C%22phone%22%3A%222483364000%22%2C%22phone_ext%22%3Anull%2C%22fax_number%22%3A%222483369137%22%2C%22upin%22%3Anull%2C%22specialty_id%22%3A20%2C%22is_non_person%22%3Afalse%2C%22spec_specialty_id%22%3A20%2C%22spec_abbreviation%22%3A%2250%20%20%20%20%20%20%22%2C%22spec_description%22%3A%22Nurse%20Practitioner%22%2C%22is_mid_level%22%3Afalse%2C%22is_mid_level_pa%22%3Afalse%2C%22inactivation_date%22%3Anull%2C%22is_locum_tenan%22%3Afalse%7D"
          },
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "10.0.24.39",
            "x-forwarded-for": "10.0.24.39",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "1526",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"",
            "dnt": "1",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "https://xl.epicpc.com",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://xl.epicpc.com/webhook/b4264e0e-085f-49c0-9471-1009eafa4ce01?fullName=Firstname+Lastname&patientId=502880&caretype=PCARE&schedule=%257B%2522index%2522%253A6%252C%2522slots_available%2522%253A0%252C%2522start_fixer%2522%253A%252209%253A20%2522%252C%2522start%2522%253A%25229%253A20%2520AM%2522%252C%2522end%2522%253A%252209%253A30%2522%252C%2522location%2522%253A%2522EPICCLAW%2522%252C%2522date%2522%253A%252211-20-2024%2522%252C%2522location_description%2522%253A%2522EPIC%2520PC%2520%2522%252C%2522provider_name%2522%253A%2522TOUBIA%252C%2520ALLEN%2522%252C%2522duration%2522%253A%252210%2522%252C%2522provider%2522%253A%2522AT-FNP%2520%2520%2522%252C%2522altered_provider%2522%253A%2522--%2522%252C%2522resource_abbr%2522%253A%2522AT-FNP%2520%2520%2522%252C%2522orderkeytime%2522%253A%25222024-11-20%252009%253A20%253A00%2522%252C%2522activity_type_abbr%2522%253A%2522ACT10N%2520%2520%2522%252C%2522scheduling_location_id%2522%253A95%252C%2522bookable_appt%2522%253A%2522BookableSlot%2522%252C%2522res_resource_id%2522%253A1117%252C%2522res_abbreviation%2522%253A%2522AT-FNP%2520%2520%2522%252C%2522res_description%2522%253A%2522Toubia%252C%2520Allen%2522%252C%2522res_appointment_group_id%2522%253A42%252C%2522appt_gp_abbreviation%2522%253A%2522ACT%2520%2520%2520%2520%2520%2522%252C%2522appt_gp_description%2522%253A%2522ACT%2520-%2520Advanced%2520Care%2520Team%2520%2522%252C%2522res_practitioner_id%2522%253A2145%252C%2522prac_practitioner_id%2522%253A2145%252C%2522is_ref_source%2522%253Afalse%252C%2522is_physician%2522%253Afalse%252C%2522prac_abbreviation%2522%253A%2522AT-FNP%2520%2520%2522%252C%2522first_name%2522%253A%2522ALLEN%2522%252C%2522last_name%2522%253A%2522TOUBIA%2522%252C%2522sex%2522%253A%2522M%2522%252C%2522street1%2522%253A%2522911%2520E%25209%2520Mile%2522%252C%2522city%2522%253A%2522Ferndale%2522%252C%2522state%2522%253A%2522MI%2522%252C%2522zip_code%2522%253A%252248220%2522%252C%2522phone%2522%253A%25222483364000%2522%252C%2522phone_ext%2522%253Anull%252C%2522fax_number%2522%253A%25222483369137%2522%252C%2522upin%2522%253Anull%252C%2522specialty_id%2522%253A20%252C%2522is_non_person%2522%253Afalse%252C%2522spec_specialty_id%2522%253A20%252C%2522spec_abbreviation%2522%253A%252250%2520%2520%2520%2520%2520%2520%2522%252C%2522spec_description%2522%253A%2522Nurse%2520Practitioner%2522%252C%2522is_mid_level%2522%253Afalse%252C%2522is_mid_level_pa%2522%253Afalse%252C%2522inactivation_date%2522%253Anull%252C%2522is_locum_tenan%2522%253Afalse%257D",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX19UCS5YrmF%2Bm06Ff8KmkYhZ1lw0dfu5oBo%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX19KFsX8zHSY8R9vkYyEMra3%2FYkC%2Fapujog%3D; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImY5YWFiYmJkLTZiNjktNGIwMC1iMGUzLWQ5MTQzYTYzYWUzNCIsImhhc2giOiJZaXdOcHpaYzdGIiwiYnJvd3NlcklkIjoiZnRhdFJNSHQ2dThEVWlnNmtZUGdVb2pIRlhmQ0FDeGlxaUEvRHpRaGlKMD0iLCJpYXQiOjE3MzIxMjgwODgsImV4cCI6MTczMjczMjg4OH0.sLH1WgOD-44wtkcLrPRYvft5JpLmbOlVm8KCo5n5izw; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX19qc0LoabFea5mBH0DWfx70XyBMGAoL5ff%2BUR8CctidFhYI8RxvRmWFpLSc%2FUHohR4RuAFRuAj6%2FQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19r3YA1XmOA5DTX6tQXtgCqKbNwVzryYNfk3f9GWo588en720nmWoaFWUukYYnwb7wgVSVTwPCFz2kUw7YvghnHjlQ1L3CR8nb1%2Fee6LIha2v2qcisRqHgHthqPcpF1mTJs2W84d4H%2Fjtc7Hp9erRaVJG6W6J86UsE%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX19kNIfpvmsyJaD%2FG%2B7F2WVR8Qe%2F5TSxTa8g7%2FUVw4NsuiQ2d4VETkU48EQAJcxJSvvKKRDLZRDik%2BrjFcoWfXq810lo8kRdgV%2Bu3UZlyxoRg7bjyS5frU3Md00itALCS8MuKtUxDz897g%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22fbbaa0fe7164b93e2c831f7816129952355ab8de07812c802f276efe6e8da0f3%23f9aabbbd-6b69-4b00-b0e3-d9143a63ae34%22%2C%22%24sesid%22%3A%5B1732230711262%2C%22019350c5-c72c-733a-9b09-6cf254af1e88%22%2C1732226959148%5D%2C%22%24epp%22%3Atrue%7D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2Bv0nhdm6PNMlft8eDn0E8oK5RKL2yqn77eXqtN3JuN3K%2F3wEGFepNONY%2F%2BsHL%2BpN26La2fPiacjVEzgY6LtCN%2BS37msa5xLJ%2F26C8hFhSST6qeWeUKgOiQ8%2Fo1gW73cJSeIzRKXb0ShQ%3D%3D"
          },
          "query": {},
          "body": {
            "selectedDetails": {
              "index": 6,
              "slots_available": 0,
              "start_fixer": "09:20",
              "start": "9:20 AM",
              "end": "09:30",
              "location": "EPICCLAW",
              "date": "11/20/2024",
              "location_description": "EPIC PC ",
              "provider_name": "TOUBIA, ALLEN",
              "duration": "10",
              "provider": "AT-FNP  ",
              "altered_provider": "--",
              "resource_abbr": "AT-FNP  ",
              "orderkeytime": "2024-11-20 09:20:00",
              "activity_type_abbr": "ACT10N  ",
              "scheduling_location_id": 95,
              "bookable_appt": "BookableSlot",
              "res_resource_id": 1117,
              "res_abbreviation": "AT-FNP  ",
              "res_description": "Toubia, Allen",
              "res_appointment_group_id": 42,
              "appt_gp_abbreviation": "ACT     ",
              "appt_gp_description": "ACT - Advanced Care Team ",
              "res_practitioner_id": 2145,
              "prac_practitioner_id": 2145,
              "is_ref_source": false,
              "is_physician": false,
              "prac_abbreviation": "AT-FNP  ",
              "first_name": "ALLEN",
              "last_name": "TOUBIA",
              "sex": "M",
              "street1": "911 E 9 Mile",
              "city": "Ferndale",
              "state": "MI",
              "zip_code": "48220",
              "phone": "2483364000",
              "phone_ext": null,
              "fax_number": "2483369137",
              "upin": null,
              "specialty_id": 20,
              "is_non_person": false,
              "spec_specialty_id": 20,
              "spec_abbreviation": "50      ",
              "spec_description": "Nurse Practitioner",
              "is_mid_level": false,
              "is_mid_level_pa": false,
              "inactivation_date": null,
              "is_locum_tenan": false,
              "date_start_combined": "11/20/2024 9:20 AM",
              "Appointment_Type_ID": 184,
              "AT_Abbreviation": "ACTSV-CV",
              "AppoinmentTypeToDisplay": "Cardiology Office Visit shared visit with PCP",
              "Description": "Shared Visit - Cardiology",
              "Virtual_Visit": false,
              "Appointment_Group_ID": 42,
              "AG_Abbreviation": "ACT     ",
              "AG_Description": "ACT - Advanced Care Team "
            }
          },
          "webhookUrl": "https://xl.epicpc.com/webhook/071d4348-0cab-4636-a74e-675d0942f05e",
          "executionMode": "production"
        }
      }
    ],
    "HTTP Create New Patient1": [
      {
        "json": {
          "getrequiredfieldsinfo": [
            {
              "Action": "SavePatient",
              "Required": "N",
              "Field": "MedRecLoc"
            },
            {
              "Action": "SavePatient",
              "Required": "Y",
              "Field": "Address1"
            },
            {
              "Action": "SavePatient",
              "Required": "Y",
              "Field": "CellPhone"
            },
            {
              "Action": "SavePatient",
              "Required": "Y",
              "Field": "City"
            },
            {
              "Action": "SavePatient",
              "Required": "Y",
              "Field": "DateOfBirth"
            },
            {
              "Action": "SavePatient",
              "Required": "N",
              "Field": "EMail"
            },
            {
              "Action": "SavePatient",
              "Required": "Y",
              "Field": "FirstName"
            },
            {
              "Action": "SavePatient",
              "Required": "N",
              "Field": "HomePhone"
            },
            {
              "Action": "SavePatient",
              "Required": "Y",
              "Field": "LastName"
            },
            {
              "Action": "SavePatient",
              "Required": "N",
              "Field": "MI"
            },
            {
              "Action": "SavePatient",
              "Required": "Y",
              "Field": "Sex"
            },
            {
              "Action": "SavePatient",
              "Required": "N",
              "Field": "SSN"
            },
            {
              "Action": "SavePatient",
              "Required": "Y",
              "Field": "State"
            },
            {
              "Action": "SavePatient",
              "Required": "N",
              "Field": "Suffix"
            },
            {
              "Action": "SavePatient",
              "Required": "N",
              "Field": "WorkPhone"
            },
            {
              "Action": "SavePatient",
              "Required": "N",
              "Field": "WPhoneExt"
            },
            {
              "Action": "SavePatient",
              "Required": "Y",
              "Field": "ZipCode"
            }
          ]
        }
      }
    ],
    "Edit Fields2": [
      {
        "json": {
          "Action": "SavePatient",
          "Required": "Y",
          "Field": "Address1"
        }
      },
      {
        "json": {
          "Action": "SavePatient",
          "Required": "Y",
          "Field": "CellPhone"
        }
      },
      {
        "json": {
          "Action": "SavePatient",
          "Required": "Y",
          "Field": "City"
        }
      },
      {
        "json": {
          "Action": "SavePatient",
          "Required": "Y",
          "Field": "DateOfBirth"
        }
      },
      {
        "json": {
          "Action": "SavePatient",
          "Required": "Y",
          "Field": "FirstName"
        }
      },
      {
        "json": {
          "Action": "SavePatient",
          "Required": "Y",
          "Field": "LastName"
        }
      },
      {
        "json": {
          "Action": "SavePatient",
          "Required": "Y",
          "Field": "Sex"
        }
      },
      {
        "json": {
          "Action": "SavePatient",
          "Required": "Y",
          "Field": "State"
        }
      },
      {
        "json": {
          "Action": "SavePatient",
          "Required": "Y",
          "Field": "ZipCode"
        }
      }
    ],
    "Redirect to Schedule": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "172.58.126.115",
            "x-forwarded-for": "172.58.126.115",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "172",
            "cache-control": "max-age=0",
            "sec-ch-ua": "\"Not(A:Brand\";v=\"99\", \"Google Chrome\";v=\"133\", \"Chromium\";v=\"133\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "origin": "https://xl.epicpc.com",
            "dnt": "1",
            "upgrade-insecure-requests": "1",
            "content-type": "application/x-www-form-urlencoded",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "navigate",
            "sec-fetch-user": "?1",
            "sec-fetch-dest": "iframe",
            "referer": "https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6?testparam=yes&testcampaign=test",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX19UCS5YrmF%2Bm06Ff8KmkYhZ1lw0dfu5oBo%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX19KFsX8zHSY8R9vkYyEMra3%2FYkC%2Fapujog%3D; cw_conversation=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiJiNmNkODVjMy1hODAwLTRmMjAtODkzZS1hY2QwNDcxMDkyMWIiLCJpbmJveF9pZCI6MX0.fp8aJf245MSaS7_5Mfu-Znx7JozowX0uB4hZWNZyLAI; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImY5YWFiYmJkLTZiNjktNGIwMC1iMGUzLWQ5MTQzYTYzYWUzNCIsImhhc2giOiJZaXdOcHpaYzdGIiwiYnJvd3NlcklkIjoiZnRhdFJNSHQ2dThEVWlnNmtZUGdVb2pIRlhmQ0FDeGlxaUEvRHpRaGlKMD0iLCJpYXQiOjE3Mzk4MTc2NzYsImV4cCI6MTc0MDQyMjQ3Nn0.03ZnIEOVpp-XMHTK68_RxxQqdGG1UEWA0hAhDpoS7s4; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2BqX3uEUt9AY%2Fg5yr82xP4OaHc%2FLOgANWX%2Fdz4cWi%2BXfhF%2Bznus%2Be4vJhR0REQJX1HJ3NfGSz3ywA%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX18tKGRXs27XOX%2BwY%2BSUVsOnPMeUd%2BkDP0nI4PXp0Fq7TwCbNdu7yH2KurHYO%2F%2FiEx1vkoQ%2FBSeQ0c1TMgzCCR2A6AAjmpv99b69BlyE1VGalO%2BWG46R9%2FCIu%2BKyxi7ZlHwfu9VNzG5mQYSjBRd5Ao2OoOUDhOqXlCo%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX1%2Bh%2Ft9cksY8QUTxUb1lVnyXvUd7rkglIgTQap8uzUvMXl6ghXB7zzMJ9tj47%2BqEOGdfkSPrijUlvkisBvU2ioKWzQ5YEH5nemFw5151ynqMaIMoT0K6LPPEkSFWhRPqIWlf6dGDaHV1fw%3D%3D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2Bw8LlwxivsW6XaElE7HFKFBTrMv0wTU9%2BQjTZeiWLE1myakmAfIzucv9n8Aw36ljU%2BvuBhxK%2BslTWZGYT9rhQ6HqPjWOWjaumHsI3aduxP5pGdTQEkIYRpAHvOJcf5SNE14K5OdRJMiA%3D%3D; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2FQl3WiOp9NIQd3H7rC4H0fMRBgaRQ%2Fo%2BsakSzOcYnyj6xUCn25B58dFM%2BqnCkHaYZVhiJgEHMxyA%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19cGo%2Bdah7Qk2jly8kAPu6BwPk%2FpYASFKlsZJ3XJf2KPr4Igf3XCGw%2FsYPOz2JLquO7GUSGuSe6a0a5SpVdDAof8ckFGOKnKG34C4bTbvS2IFmwUJMmxBErOr31wqXKcEsuTvRea2oDj56%2FQnbCIjgdOxmZl4rY9L4%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX1%2B2gRTG03sMcvlFyGh41AarFZ7o9nvJnQFedRYsnyc0E0vK%2B2y5KUipndrSzT%2FYtsFUj5bk3TAQUASgvR5fS6SahgFn9P%2F2ikcZ8mONkeUlyvUXEkFfrgkOFyy8Tp%2FXjCBCWcXO880crA%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22fbbaa0fe7164b93e2c831f7816129952355ab8de07812c802f276efe6e8da0f3%23f9aabbbd-6b69-4b00-b0e3-d9143a63ae34%22%2C%22%24sesid%22%3A%5B1739992838051%2C%2201951f99-6d6b-7437-ac68-33949b157b77%22%2C1739991903595%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fxl.epicpc.com%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX19SscZssy242CdpVkCFiDHRo59KOxWmTfkqrWm%2Fl7FmbU9skqX%2FLH7WcBuI6palJ1IAi6Q0lSG5rAJt4vWK8Wbl%2BbuWr06l0ZmabZFJFAJRSjmZIURRcmy1WXeR6fyQDk6V2K%2FIib9YWw%3D%3D"
          },
          "params": {},
          "query": {
            "testparam": "yes",
            "testcampaign": "test"
          },
          "body": {
            "firstName": "Thomas",
            "lastName": "Stilwell",
            "gender": "Male",
            "dob": "1988-02-01",
            "cellphone": "2488726322",
            "email": "thomas@tagarmor.com",
            "street1": "511 South Crooks Road",
            "city": "Clawson",
            "state": "MI",
            "zip": "48017"
          },
          "webhookUrl": "https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf",
          "executionMode": "production"
        }
      }
    ],
    "Merge": [
      {
        "json": {
          "savepatientinfo": [
            {
              "AddressID": "314949",
              "AccountID": "258107",
              "AccountDate": "2/19/2025 12:00:00 AM",
              "ContactID": "323158",
              "AccountNumber": "1356380",
              "PatientNumber": "1356380",
              "PatientID": "260253",
              "MRN": "237359"
            }
          ],
          "Token": "00E63FA2-298A-4B0E-9CEB-8F9E6A359F78",
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "172.58.124.212",
            "x-forwarded-for": "172.58.124.212",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "179",
            "cache-control": "max-age=0",
            "sec-ch-ua": "\"Not(A:Brand\";v=\"99\", \"Google Chrome\";v=\"133\", \"Chromium\";v=\"133\"",
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "\"Android\"",
            "origin": "https://xl.epicpc.com",
            "dnt": "1",
            "upgrade-insecure-requests": "1",
            "content-type": "application/x-www-form-urlencoded",
            "user-agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Mobile Safari/537.36",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "navigate",
            "sec-fetch-user": "?1",
            "sec-fetch-dest": "iframe",
            "referer": "https://xl.epicpc.com/webhook/f0d240c5-da77-4580-b85e-be38eac4f1a6?campaign=First+test+patient&source=&medium=&event=&other=",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2FTBOZ6qp2CfLyrsgyXqbUBIDwJbrYe7Ck%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX1%2FTTKO8r%2Bx6b4OutswOWNiARtTpK5jWxNc%3D; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2B2q%2FJNsBWQMqQJ0tao56NKRWeVaohrpFe9bXBb9OOJ%2Bk3l5qk1CFOQoBPLAcMH%2B4S5AVsGZ%2BF0Kw%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19vQskeqRaFEh%2FrFyWPACpWgUkmi3WZ23xqrDGyMPqz8NDFLVsNi9tgBSMrF3cyHZuC6aBO95To8anghQ53pDZ92xIDK2pJJTVamBDNKNkeDdv37zniueqFwlOtGXmjEqK2tMwFQ4uptTmiRHlhJ%2BVsZFnTHgls1Sc%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX19QtkkJUKVbK9ISwZcIl7eaQV3pWw6Bqsh0296yNhYLiaA9TheIvQoRv0TvPZ%2BBL2SUU09LxAABfszYbBs5dGh7xueQSF9%2BO7QYF%2BjBzKW0Y4Hyrr1VGsZpulm4DxthbzQ9Xno%2FUDKbwg%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22fbbaa0fe7164b93e2c831f7816129952355ab8de07812c802f276efe6e8da0f3%23f9aabbbd-6b69-4b00-b0e3-d9143a63ae34%22%2C%22%24sesid%22%3A%5B1739270808091%2C%220194f492-7250-7efa-8e8d-fc584a30a78e%22%2C1739270025808%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fxl.epicpc.com%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX19sPFKzoq4eblEktb1SnaT8tkHBVwROaliQ0uPgnkyDuUYkV8uhVtFu89lLtuqwlH40RibFC3Re8YXm9ZgZt%2F3YML99hJi6hPx6k4xpCpJ%2BnrH%2BVligOb4uLACDzskBE94zgPYT0kC9Dg%3D%3D"
          },
          "params": {},
          "query": {
            "campaign": "First test patient",
            "source": "",
            "medium": "",
            "event": "",
            "other": ""
          },
          "body": {
            "firstName": "NewPatient",
            "lastName": "TestSignup",
            "gender": "Male",
            "dob": "1988-02-01",
            "cellphone": "2488726322",
            "email": "tstilwell@epichs.org",
            "street1": "511 South Crooks Road",
            "city": "Clawson",
            "state": "MI",
            "zip": "48017"
          },
          "webhookUrl": "https://xl.epicpc.com/webhook/cb1ae1b6-c11f-4cf0-a572-2ab535dd9daf",
          "executionMode": "production"
        }
      }
    ],
    "Code": [
      {
        "json": {
          "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Record Not Found - Please Call for Scheduling</title>\n  <!-- Include Twilio Client SDK -->\n  <script src=\"https://media.twiliocdn.com/sdk/js/client/v1.10/twilio.min.js\"></script>\n  <style>\n    /* Color Scheme: Yellow (#f5b800) & Dark Grey (#333) with white text */\n    body {\n      margin: 0;\n      padding: 0;\n      background-color: #f5b800;\n      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n    }\n    .container {\n      background-color: #333;\n      color: #fff;\n      padding: 40px;\n      border-radius: 8px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      max-width: 600px;\n      width: 90%;\n      text-align: center;\n    }\n    h1 {\n      font-size: 2.5rem;\n      margin-bottom: 20px;\n    }\n    p {\n      font-size: 1.2rem;\n      margin-bottom: 20px;\n    }\n    .call-us a {\n      color: #fff;\n      text-decoration: none;\n      font-weight: bold;\n      font-size: 1.8rem;\n    }\n    .call-us a:hover {\n      text-decoration: underline;\n    }\n    /* Default button style */\n    .btn {\n      display: inline-block;\n      background-color: #f5b800;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 12px 24px;\n      font-size: 1rem;\n      margin: 10px;\n      cursor: pointer;\n      text-transform: uppercase;\n      letter-spacing: 0.05em;\n      transition: background-color 0.3s ease;\n      font-weight: bold;\n    }\n    .btn:hover {\n      background-color: rgba(245, 184, 0, 0.85);\n    }\n    /* Specific styling for the Talk to Clark button */\n    #callNowBtn {\n      background-color: #28a745; /* Green background */\n    }\n    #callNowBtn:hover {\n      background-color: #218838; /* Darker green on hover */\n    }\n    /* Start Over button: only as wide as its text and slightly lighter than the container */\n    .btn.start-over-btn {\n      background-color: #444; /* Slightly lighter than #333 */\n    }\n    .btn.start-over-btn:hover {\n      background-color: #555;\n    }\n    /* Popup styling for in-progress call */\n    .popup {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(51, 51, 51, 0.9);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n    }\n    .popup-content {\n      background-color: #333;\n      color: #fff;\n      padding: 30px;\n      border-radius: 8px;\n      text-align: center;\n      width: 90%;\n      max-width: 350px;\n    }\n    .popup-content p {\n      font-size: 1.2rem;\n      margin-bottom: 20px;\n    }\n    .popup-content button {\n      background-color: #f5b800;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 10px 20px;\n      font-size: 1rem;\n      cursor: pointer;\n      transition: background-color 0.3s ease;\n      font-weight: bold;\n    }\n    .popup-content button:hover {\n      background-color: rgba(245, 184, 0, 0.85);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>We didn't find an exact match, but Clark can help!</h1>\n    <p>Please let Clark get you scheduled in the next few minutes, as a new or existing patient!</p>\n    <div class=\"call-us\">\n      <a href=\"tel:3139227244\">(313) 922-7244</a>\n    </div>\n    <!-- \"Talk to Clark\" button -->\n    <button id=\"callNowBtn\" class=\"btn\">Talk to Clark</button>\n    <!-- \"Start Over\" button (only as wide as its text) -->\n    <button class=\"btn start-over-btn\" onclick=\"window.history.back();\">Start Over</button>\n  </div>\n\n  <!-- Popup for in-progress call -->\n  <div id=\"callPopup\" class=\"popup\" style=\"display: none;\">\n    <div class=\"popup-content\">\n      <p id=\"callStatusMessage\">Call in progress...</p>\n      <button id=\"endCallBtn\">End Call</button>\n    </div>\n  </div>\n\n  <script>\n    // --- Twilio Softphone Integration ---\n    let activeConnection = null;\n    // Use a default user if one is not provided via the URL\n    const user = new URLSearchParams(window.location.search).get(\"user\") || \"user123\";\n    const phoneNumber = \"3139227244\"; // Number to be called\n\n    // Replace with your actual token endpoint\n    const TOKEN_URL = \"https://xl.epicpc.com/webhook/a41896ee-ba31-450d-9090-b3baed0b256b\";\n\n    function fetchAccessToken() {\n      return fetch(TOKEN_URL + window.location.search)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(\"Failed to fetch token\");\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (!data.token) {\n            throw new Error(\"No token received\");\n          }\n          return data.token;\n        });\n    }\n\n    function initTwilio() {\n      fetchAccessToken()\n        .then(token => {\n          Twilio.Device.setup(token, { debug: true });\n        })\n        .catch(err => {\n          console.error(\"Error initializing Twilio device:\", err);\n        });\n    }\n\n    window.onload = function() {\n      initTwilio();\n    };\n\n    // --- Functions to manage call popup and connection ---\n    function startCall() {\n      // Initiate a call via Twilio with parameters: phone number and user identifier.\n      const params = {\n        To: phoneNumber,\n        user: user\n      };\n      const connection = Twilio.Device.connect(params);\n      if (connection) {\n        activeConnection = connection;\n        showCallPopup();\n      } else {\n        console.error(\"Failed to establish connection.\");\n      }\n    }\n\n    function showCallPopup() {\n      document.getElementById(\"callPopup\").style.display = \"flex\";\n    }\n\n    function hideCallPopup() {\n      document.getElementById(\"callPopup\").style.display = \"none\";\n    }\n\n    function endCall() {\n      if (activeConnection) {\n        Twilio.Device.disconnectAll();\n        activeConnection = null;\n      }\n      hideCallPopup();\n    }\n\n    // --- Event Listeners ---\n    // \"Talk to Clark\" now always uses Twilio functionality.\n    document.getElementById(\"callNowBtn\").addEventListener(\"click\", function () {\n      startCall();\n    });\n\n    document.getElementById(\"endCallBtn\").addEventListener(\"click\", function () {\n      endCall();\n    });\n\n    // Automatically hide the call popup if the call disconnects.\n    Twilio.Device.disconnect(function () {\n      hideCallPopup();\n      activeConnection = null;\n    });\n  </script>\n</body>\n</html>\n",
          "firstName": "Thomas",
          "lastName": "Stilwell",
          "gender": "Male",
          "dob": "1988-02-01",
          "cellphone": "2488726322",
          "email": "thomas@tagarmor.com",
          "street1": "511 South Crooks Road",
          "city": "Clawson",
          "state": "MI",
          "zip": "48017"
        }
      }
    ],
    "Code2": [
      {
        "json": {
          "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Record Not Found - Please Call for Scheduling</title>\n  <!-- Include Twilio Client SDK -->\n  <script src=\"https://media.twiliocdn.com/sdk/js/client/v1.10/twilio.min.js\"></script>\n  <style>\n    /* Color Scheme: Yellow (#f5b800) & Dark Grey (#333) with white text */\n    body {\n      margin: 0;\n      padding: 0;\n      background-color: #f5b800;\n      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n    }\n    .container {\n      background-color: #333;\n      color: #fff;\n      padding: 40px;\n      border-radius: 8px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n      max-width: 600px;\n      width: 90%;\n      text-align: center;\n    }\n    h1 {\n      font-size: 2.5rem;\n      margin-bottom: 20px;\n    }\n    p {\n      font-size: 1.2rem;\n      margin-bottom: 20px;\n    }\n    .call-us a {\n      color: #fff;\n      text-decoration: none;\n      font-weight: bold;\n      font-size: 1.8rem;\n    }\n    .call-us a:hover {\n      text-decoration: underline;\n    }\n    /* Default button style */\n    .btn {\n      display: inline-block;\n      background-color: #f5b800;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 12px 24px;\n      font-size: 1rem;\n      margin: 10px;\n      cursor: pointer;\n      text-transform: uppercase;\n      letter-spacing: 0.05em;\n      transition: background-color 0.3s ease;\n      font-weight: bold;\n    }\n    .btn:hover {\n      background-color: rgba(245, 184, 0, 0.85);\n    }\n    /* Specific styling for the Talk to Clark button */\n    #callNowBtn {\n      background-color: #28a745; /* Green background */\n    }\n    #callNowBtn:hover {\n      background-color: #218838; /* Darker green on hover */\n    }\n    /* Start Over button: only as wide as its text and slightly lighter than the container */\n    .btn.start-over-btn {\n      background-color: #444; /* Slightly lighter than #333 */\n    }\n    .btn.start-over-btn:hover {\n      background-color: #555;\n    }\n    /* Popup styling for in-progress call */\n    .popup {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(51, 51, 51, 0.9);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n    }\n    .popup-content {\n      background-color: #333;\n      color: #fff;\n      padding: 30px;\n      border-radius: 8px;\n      text-align: center;\n      width: 90%;\n      max-width: 350px;\n    }\n    .popup-content p {\n      font-size: 1.2rem;\n      margin-bottom: 20px;\n    }\n    .popup-content button {\n      background-color: #f5b800;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 10px 20px;\n      font-size: 1rem;\n      cursor: pointer;\n      transition: background-color 0.3s ease;\n      font-weight: bold;\n    }\n    .popup-content button:hover {\n      background-color: rgba(245, 184, 0, 0.85);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>We didn't find an exact match, but Clark can help!</h1>\n    <p>Please let Clark get you scheduled in the next few minutes, as a new or existing patient!</p>\n    <div class=\"call-us\">\n      <a href=\"tel:3139227244\">(313) 922-7244</a>\n    </div>\n    <!-- \"Talk to Clark\" button -->\n    <button id=\"callNowBtn\" class=\"btn\">Talk to Clark</button>\n    <!-- \"Start Over\" button (only as wide as its text) -->\n    <button class=\"btn start-over-btn\" onclick=\"window.history.back();\">Start Over</button>\n  </div>\n\n  <!-- Popup for in-progress call -->\n  <div id=\"callPopup\" class=\"popup\" style=\"display: none;\">\n    <div class=\"popup-content\">\n      <p id=\"callStatusMessage\">Call in progress...</p>\n      <button id=\"endCallBtn\">End Call</button>\n    </div>\n  </div>\n\n  <script>\n    // --- Twilio Softphone Integration ---\n    let activeConnection = null;\n    // Use a default user if one is not provided via the URL\n    const user = new URLSearchParams(window.location.search).get(\"user\") || \"user123\";\n    const phoneNumber = \"3139227244\"; // Number to be called\n\n    // Replace with your actual token endpoint\n    const TOKEN_URL = \"https://xl.epicpc.com/webhook/a41896ee-ba31-450d-9090-b3baed0b256b\";\n\n    function fetchAccessToken() {\n      return fetch(TOKEN_URL + window.location.search)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(\"Failed to fetch token\");\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (!data.token) {\n            throw new Error(\"No token received\");\n          }\n          return data.token;\n        });\n    }\n\n    function initTwilio() {\n      fetchAccessToken()\n        .then(token => {\n          Twilio.Device.setup(token, { debug: true });\n        })\n        .catch(err => {\n          console.error(\"Error initializing Twilio device:\", err);\n        });\n    }\n\n    window.onload = function() {\n      initTwilio();\n    };\n\n    // --- Functions to manage call popup and connection ---\n    function startCall() {\n      // Initiate a call via Twilio with parameters: phone number and user identifier.\n      const params = {\n        To: phoneNumber,\n        user: user\n      };\n      const connection = Twilio.Device.connect(params);\n      if (connection) {\n        activeConnection = connection;\n        showCallPopup();\n      } else {\n        console.error(\"Failed to establish connection.\");\n      }\n    }\n\n    function showCallPopup() {\n      document.getElementById(\"callPopup\").style.display = \"flex\";\n    }\n\n    function hideCallPopup() {\n      document.getElementById(\"callPopup\").style.display = \"none\";\n    }\n\n    function endCall() {\n      if (activeConnection) {\n        Twilio.Device.disconnectAll();\n        activeConnection = null;\n      }\n      hideCallPopup();\n    }\n\n    // --- Event Listeners ---\n    // \"Talk to Clark\" now always uses Twilio functionality.\n    document.getElementById(\"callNowBtn\").addEventListener(\"click\", function () {\n      startCall();\n    });\n\n    document.getElementById(\"endCallBtn\").addEventListener(\"click\", function () {\n      endCall();\n    });\n\n    // Automatically hide the call popup if the call disconnects.\n    Twilio.Device.disconnect(function () {\n      hideCallPopup();\n      activeConnection = null;\n    });\n  </script>\n</body>\n</html>\n",
          "firstName": "Thomas",
          "lastName": "Stilwell",
          "gender": "Male",
          "dob": "1988-02-01",
          "cellphone": "2488726322",
          "email": "thomas@tagarmor.com",
          "street1": "511 South Crooks Road",
          "city": "Clawson",
          "state": "MI",
          "zip": "48017"
        }
      }
    ],
    "HTTP Create New Patient": [
      {
        "json": {
          "savepatientinfo": [
            {
              "AddressID": "314949",
              "AccountID": "258107",
              "AccountDate": "2/19/2025 12:00:00 AM",
              "ContactID": "323158",
              "AccountNumber": "1356380",
              "PatientNumber": "1356380",
              "PatientID": "260253",
              "MRN": "237359"
            }
          ]
        }
      }
    ],
    "Code1": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "24.127.131.242",
            "x-forwarded-for": "24.127.131.242",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "sec-ch-ua": "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Microsoft Edge\";v=\"134\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "upgrade-insecure-requests": "1",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "navigate",
            "sec-fetch-user": "?1",
            "sec-fetch-dest": "iframe",
            "referer": "https://xl.epicpc.com/webhook/227a6dae-afe1-4505-8dab-cc1021a48d5d",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2Bi2wlGyWUrU8csBnMpC2ky94UMvv6i1l8%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX1%2BlOAQjwoHJTIaa%2BnRWw%2FuYu7Q4OoFm%2BVc%3D; cw_conversation=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiJkOGU0ZmExYy0yMTk2LTQ3ODAtYjFhMi0zNGI5NzYyYWZhMjciLCJpbmJveF9pZCI6MX0.0lRACgYRzS4v3ie0Q3KCpE2J2om9Qu4ndLgNQa8saXU; theme=light; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImY5YWFiYmJkLTZiNjktNGIwMC1iMGUzLWQ5MTQzYTYzYWUzNCIsImhhc2giOiJZaXdOcHpaYzdGIiwiYnJvd3NlcklkIjoiYW9ldjhjM1NoOG5jMDNLc1A4R2dYK1dkUElNWFVaTWE0ejl6WjNZVndjZz0iLCJpYXQiOjE3NDE5NzkzNTksImV4cCI6MTc0MjU4NDE1OX0.ZhbVtWtOiolN8C9JIXXwVc62imrnqjVdwFHkB_gL5QY; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX19NVOBdZeUTWJ27ok%2FQwSMvJLJGwzeRmNFsNFDoXplwsjzl5xivEnDgGopbhA6zvhx2Hf8kh8%2FfGQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19W3OWqVdADLYrSi4TI12OHiwmYVyhI5Y%2BhNv9Wg6J02c7%2B2%2Bf6jO7ntWaQfOj9YqtU3KoQxKA%2BEcFiyPPppBEc%2B%2BiKXSMaDez4WV6C6ev4umJRy3oip8c2KIei7MP5Nc3HLsE8SdCuUf0SJXLFjHNaGkOknWsNOdA%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX185Qi%2B3uk1xX42f01mnjbdvlXCSexVn9fkAFx9kgbvt8pk8EmVC5nBsFyL2GTeLaOQzio2x2n4L0RYAigQwtaqurNvStLFptDD8kbrkOW3bCFs2sq7arXe5NN6ezBkr0ZE9q8m6Uzehhw%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22fbbaa0fe7164b93e2c831f7816129952355ab8de07812c802f276efe6e8da0f3%23f9aabbbd-6b69-4b00-b0e3-d9143a63ae34%22%2C%22%24sesid%22%3A%5B1742145809543%2C%2201959fe5-8483-7eaf-a604-8a021443addb%22%2C1742144373891%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fxl.epicpc.com%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2FRVnMNZgQNRrUnNAXzCquEMa%2FYsLtSuktb6AX%2FWxUQIb%2F45ZG5EomnXumy9i%2FIpVtq11pnQDdMUYsIBpib2h3NgGdTs4yNXIcg9SbxMFqYK%2Bwi8EPVAk1Ti8E6im7Z7mgrDp4Tc2Oc9Q%3D%3D",
            "if-none-match": "W/\"22-6OS7cK0FzqnV2NeDHdOSGS1bVUs\""
          },
          "params": {},
          "query": {
            "campaign": "",
            "source": "",
            "medium": "",
            "event": "",
            "other": "test"
          },
          "body": {},
          "webhookUrl": "https://xl.epicpc.com/webhook/df709613-29f9-4a63-ae5d-98d9041516fb",
          "executionMode": "production",
          "queryString": "campaign=&source=&medium=&event=&other=test"
        }
      }
    ],
    "HTTP Create New Patient2": [
      {
        "json": {
          "savepatientinfo": [
            {
              "AddressID": "320530",
              "AccountID": "263287",
              "AccountDate": "6/5/2025 12:00:00 AM",
              "ContactID": "328931",
              "AccountNumber": "1408060",
              "PatientNumber": "1408060",
              "PatientID": "265431",
              "MRN": "249354"
            }
          ]
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 6,
  "updatedAt": "2025-06-05T21:03:01.957Z",
  "versionId": "25ef551a-e60f-4bfe-9be0-09dc7270af9b"
}