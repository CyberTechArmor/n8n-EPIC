{
  "active": true,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "NocoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook3": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "NocoDB3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          },
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "NocoDB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB2": {
      "main": [
        []
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB3": {
      "main": [
        [
          {
            "node": "NocoDB4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code16": {
      "main": [
        [
          {
            "node": "Code17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code14": {
      "main": [
        [
          {
            "node": "Code18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "NocoDB5",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP 24 Bitrix24 Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code18": {
      "main": [
        [
          {
            "node": "Code20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code20": {
      "main": [
        [
          {
            "node": "Code21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code21": {
      "main": [
        [
          {
            "node": "Code22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code17": {
      "main": [
        [
          {
            "node": "Code23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code23": {
      "main": [
        [
          {
            "node": "Code24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Code25",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NocoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code25": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code24": {
      "main": [
        [
          {
            "node": "Code33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "NocoDB1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NocoDB6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB6": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "NocoDB7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NocoDB3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB7": {
      "main": [
        [
          {
            "node": "NocoDB4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code33": {
      "main": [
        [
          {
            "node": "Code42",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code40": {
      "main": [
        [
          {
            "node": "Code39",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code43": {
      "main": [
        [
          {
            "node": "Code40",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code45": {
      "main": [
        [
          {
            "node": "Code43",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code46": {
      "main": [
        [
          {
            "node": "Code45",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code47": {
      "main": [
        [
          {
            "node": "Code46",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code42": {
      "main": [
        [
          {
            "node": "Code49",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code52": {
      "main": [
        [
          {
            "node": "Code47",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code48": {
      "main": [
        [
          {
            "node": "Code53",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-25T22:44:41.132Z",
  "id": "JbzZw0zydWp7leNJ",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "DynamicTicketSystemGenerator",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "bcf5234f-6ac7-49fa-8bbe-2341becc25dc",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pwvejbwcowen0as",
        "table": "mn2c37f3xnlbre3",
        "returnAll": true,
        "options": {
          "where": "=(TicketSystem,eq,{{ $json.query.system }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        220,
        0
      ],
      "id": "dc2800b5-9534-4506-93b1-41e1bbb7eaae",
      "name": "NocoDB",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    },
    {
      "parameters": {
        "path": "a5de8712-c0cd-4925-9510-f78b1dbdcf79",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -300,
        -200
      ],
      "id": "4e21682a-c857-4fca-9645-29ff77e5642a",
      "name": "Webhook",
      "webhookId": "a5de8712-c0cd-4925-9510-f78b1dbdcf79"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = 'question_' + question.Id;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number, text, and optional marker)\n  const questionHeader = '<div class=\"question-header\">' +\n    '<span class=\"question-number\">' + (stepIndex + 1) + '.</span>' +\n    '<span class=\"question-text\"><strong>' + question.Question + ' ' + requiredMarker + '</strong></span>' +\n    '</div>';\n\n  // Optional help text\n  const helpTextHtml = question.HelpText ? '<div class=\"question-helptext\">' + question.HelpText + '</div>' : '';\n\n  let answerHtml = '';\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n  switch (qType) {\n    case 'text':\n      answerHtml = '<textarea id=\"' + fieldId + '\" name=\"' + fieldId + '\" rows=\"4\" ' + isRequired + '></textarea>';\n      break;\n    case 'singleselect': {\n      const options = question.QuestionOptions ? question.QuestionOptions.split(',').map(opt => opt.trim()) : [];\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        const normalizedOption = option.replace(/[{}:]/g, '').trim().toLowerCase();\n        if (normalizedOption === 'other') {\n          return '<div class=\"option-container\">' +\n            '<input type=\"radio\" id=\"' + fieldId + '_otherRadio\" name=\"' + fieldId + '\" value=\"other\" ' + reqAttr + '>' +\n            '<label for=\"' + fieldId + '_otherRadio\">Other:</label>' +\n            '<input type=\"text\" id=\"' + fieldId + '_other\" name=\"' + fieldId + '_other\" placeholder=\"Please specify\" oninput=\"document.getElementById(\\'' + fieldId + '_otherRadio\\').checked = true\">' +\n            '</div>';\n        } else {\n          return '<div class=\"option-container\">' +\n            '<input type=\"radio\" id=\"' + fieldId + '_' + index + '\" name=\"' + fieldId + '\" value=\"' + option + '\" ' + reqAttr + '>' +\n            '<label for=\"' + fieldId + '_' + index + '\">' + option + '</label>' +\n            '</div>';\n        }\n      }).join('');\n      break;\n    }\n    case 'multiselect': {\n      const options = question.QuestionOptions ? question.QuestionOptions.split(',').map(opt => opt.trim()) : [];\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        const normalizedOption = option.replace(/[{}:]/g, '').trim().toLowerCase();\n        if (normalizedOption === 'other') {\n          return '<div class=\"option-container\">' +\n            '<input type=\"checkbox\" id=\"' + fieldId + '_otherCheck\" name=\"' + fieldId + '\" value=\"other\" ' + reqAttr + '>' +\n            '<label for=\"' + fieldId + '_otherCheck\">Other:</label>' +\n            '<input type=\"text\" id=\"' + fieldId + '_other\" name=\"' + fieldId + '_other\" placeholder=\"Please specify\" oninput=\"document.getElementById(\\'' + fieldId + '_otherCheck\\').checked = true\">' +\n            '</div>';\n        } else {\n          return '<div class=\"option-container\">' +\n            '<input type=\"checkbox\" id=\"' + fieldId + '_' + index + '\" name=\"' + fieldId + '\" value=\"' + option + '\" ' + reqAttr + '>' +\n            '<label for=\"' + fieldId + '_' + index + '\">' + option + '</label>' +\n            '</div>';\n        }\n      }).join('');\n      break;\n    }\n    case 'date':\n      answerHtml = '<input type=\"date\" id=\"' + fieldId + '\" name=\"' + fieldId + '\" ' + isRequired + '>';\n      break;\n    case 'attachment':\n      answerHtml = '<textarea id=\"' + fieldId + '\" name=\"' + fieldId + '\" rows=\"4\" ' + isRequired + '></textarea>' +\n        '<br/>' +\n        '<button type=\"button\" onclick=\"document.getElementById(\\'' + fieldId + '_file\\').click();\">Upload Attachments</button>' +\n        '<input type=\"file\" id=\"' + fieldId + '_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange(\\'' + fieldId + '\\', this)\">' +\n        '<div id=\"' + fieldId + '_display\" class=\"attachment-display\"></div>';\n      break;\n    default:\n      answerHtml = '<textarea id=\"' + fieldId + '\" name=\"' + fieldId + '\" rows=\"4\" ' + isRequired + '></textarea>';\n  }\n\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n  return '<div class=\"question-step\" style=\"display: ' + displayStyle + ';\">' +\n         '<div class=\"question-container\">' +\n         questionHeader +\n         helpTextHtml +\n         '<div class=\"question-answer\">' + answerHtml + '</div>' +\n         '</div>' +\n         '</div>';\n}\n\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML using concatenation to avoid nested template literal conflicts\nconst html =\n  '<!DOCTYPE html>' +\n  '<html lang=\"en\">' +\n  '<head>' +\n  '  <meta charset=\"UTF-8\" />' +\n  '  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />' +\n  '  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />' +\n  '  <title>' + questions[0].TicketSystem + ' Ticket</title>' +\n  '  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>' +\n  '  <style>' +\n  '    body { font-family: \"Trebuchet MS\", Arial, sans-serif; font-size: 27px; background-color: #ffffff; color: #000000; display: flex; flex-direction: column; align-items: center; margin: 0; padding-top: 20px; }' +\n  '    .title { font-size: 42px; font-weight: bold; margin-bottom: 20px; padding: 10px 20px; border: 2px solid #d3d3d3; border-radius: 8px; text-align: center; background-color: #ffffff; position: sticky; top: 0; z-index: 1000; }' +\n  '    .form-container { width: 90%; max-width: 800px; margin: 0 auto; background-color: #ffffff; padding: 0 20px 20px; }' +\n  '    .qr-code { margin-bottom: 20px; }' +\n  '    @media (max-width: 768px) { .qr-code { display: none; } }' +\n  '    .progress-container { display: flex; align-items: center; justify-content: center; margin-bottom: 20px; }' +\n  '    .progress-label { font-weight: bold; }' +\n  '    .progress-bar { background-color: #ccc; flex-grow: 1; height: 10px; margin: 0 10px; border-radius: 5px; overflow: hidden; }' +\n  '    .progress { background-color: #000; height: 100%; width: 0; transition: width 0.3s ease; }' +\n  '    .question-step { margin-bottom: 30px; }' +\n  '    .question-container { border-bottom: 1px solid #eaeaea; padding-bottom: 20px; margin-bottom: 20px; }' +\n  '    .question-header { margin-bottom: 8px; }' +\n  '    .question-number { margin-right: 5px; }' +\n  '    .question-text strong { font-size: 1.1em; }' +\n  '    .required-asterisk { color: red; margin-left: 5px; }' +\n  '    .question-helptext { font-size: 0.8em; color: #666; font-style: italic; margin-bottom: 10px; }' +\n  '    .question-answer { margin-top: 5px; }' +\n  '    input[type=\"text\"], input[type=\"date\"], textarea { width: 100%; box-sizing: border-box; padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-size: 0.8em; }' +\n  '    textarea { resize: vertical; }' +\n  '    .option-container { margin: 5px 0; cursor: pointer; display: flex; align-items: center; }' +\n  '    .option-container input[type=\"radio\"], .option-container input[type=\"checkbox\"] { transform: scale(1.2); margin-right: 10px; cursor: pointer; }' +\n  '    .option-container label { font-size: 0.9em; margin: 0; cursor: pointer; }' +\n  '    .navigation-buttons { display: flex; margin-top: 30px; justify-content: flex-end; }' +\n  '    button { background-color: #000000; color: #ffffff; padding: 12px 24px; border: none; border-radius: 4px; cursor: pointer; font-size: 0.7em; transition: background-color 0.3s ease; }' +\n  '    button:hover { background-color: #333333; }' +\n  '    #prevBtn { margin-right: auto; }' +\n  '    #prevBtn.hidden { visibility: hidden; }' +\n  '  </style>' +\n  '</head>' +\n  '<body>' +\n  '  <div class=\"title\">' + questions[0].TicketSystem + ' Ticket</div>' +\n  '  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />' +\n  '  <div class=\"form-container\">' +\n  '    <div class=\"progress-container\">' +\n  '      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>' +\n  '      <div class=\"progress-bar\">' +\n  '        <div class=\"progress\" id=\"progress\"></div>' +\n  '      </div>' +\n  '      <span id=\"totalStepsLabel\" class=\"progress-label\">' + totalSteps + '</span>' +\n  '    </div>' +\n  '    <form id=\"multiStepForm\">' +\n         stepsHtml +\n  '      <div class=\"navigation-buttons\">' +\n  '        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>' +\n  '        <button type=\"button\" id=\"nextBtn\">Next</button>' +\n  '      </div>' +\n  '    </form>' +\n  '  </div>' +\n  '  <script>' +\n  '    const totalSteps = ' + totalSteps + ';' +\n  '    const questions = ' + JSON.stringify(questions) + ';' +\n  '    let currentStep = 0;' +\n  '    const steps = document.querySelectorAll(\\'.question-step\\');' +\n  '    const prevBtn = document.getElementById(\\'prevBtn\\');' +\n  '    const nextBtn = document.getElementById(\\'nextBtn\\');' +\n  '    const currentStepLabel = document.getElementById(\\'currentStepLabel\\');' +\n  '    const totalStepsLabel = document.getElementById(\\'totalStepsLabel\\');' +\n  '    const progressBar = document.getElementById(\\'progress\\');' +\n  '    const systemParam = \"' + questions[0].TicketSystem + '\";' +\n  '    const systemUrl = window.location.origin + window.location.pathname + \"?system=\" + encodeURIComponent(systemParam);' +\n  '    const qrImg = document.getElementById(\\'qrCode\\');' +\n  '    qrImg.src = \"https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=\" + encodeURIComponent(systemUrl);' +\n  '    function handleAttachmentChange(fieldId, inputElem) {' +\n  '      const files = inputElem.files;' +\n  '      const uniqueFiles = {};' +\n  '      const fileArray = [];' +\n  '      for (let i = 0; i < files.length; i++) {' +\n  '        const file = files[i];' +\n  '        if (!uniqueFiles[file.name]) {' +\n  '          uniqueFiles[file.name] = true;' +\n  '          fileArray.push(file);' +\n  '        }' +\n  '      }' +\n  '      window.uniqueAttachments = window.uniqueAttachments || {};' +\n  '      window.uniqueAttachments[fieldId] = fileArray;' +\n  '      const displayElem = document.getElementById(fieldId + \"_display\");' +\n  '      if (displayElem) {' +\n  '        displayElem.textContent = fileArray.map(file => file.name).join(\", \");' +\n  '      }' +\n  '    }' +\n  '    showStep(currentStep);' +\n  '    function showStep(stepIndex) {' +\n  '      steps.forEach(function(step) { step.style.display = \"none\"; });' +\n  '      steps[stepIndex].style.display = \"block\";' +\n  '      if (stepIndex === 0) {' +\n  '        prevBtn.classList.add(\"hidden\");' +\n  '      } else {' +\n  '        prevBtn.classList.remove(\"hidden\");' +\n  '      }' +\n  '      nextBtn.textContent = (stepIndex === totalSteps - 1) ? \"Submit Request\" : \"Next\";' +\n  '      currentStepLabel.textContent = stepIndex + 1;' +\n  '      progressBar.style.width = ((stepIndex + 1) / totalSteps * 100) + \"%\";' +\n  '    }' +\n  '    function changeStep(delta) {' +\n  '      currentStep += delta;' +\n  '      if (currentStep < 0) currentStep = 0;' +\n  '      if (currentStep >= totalSteps) currentStep = totalSteps - 1;' +\n  '      showStep(currentStep);' +\n  '    }' +\n  '    function validateStep(stepIndex) {' +\n  '      const stepEl = steps[stepIndex];' +\n  '      const requiredEls = stepEl.querySelectorAll(\"[required]\");' +\n  '      for (let i = 0; i < requiredEls.length; i++) {' +\n  '        const el = requiredEls[i];' +\n  '        if (el.type === \"radio\" || el.type === \"checkbox\") {' +\n  '          const name = el.name;' +\n  '          const groupEls = stepEl.querySelectorAll(\"[name=\\\\\"\" + name + \"\\\\\"]\");' +\n  '          let isChecked = false;' +\n  '          for (let j = 0; j < groupEls.length; j++) {' +\n  '            if (groupEls[j].checked) {' +\n  '              isChecked = true;' +\n  '              break;' +\n  '            }' +\n  '          }' +\n  '          if (!isChecked) {' +\n  '            return false;' +\n  '          }' +\n  '        } else {' +\n  '          if (!el.value.trim()) {' +\n  '            return false;' +\n  '          }' +\n  '        }' +\n  '      }' +\n  '      return true;' +\n  '    }' +\n  '    prevBtn.addEventListener(\"click\", function() { changeStep(-1); });' +\n  '    nextBtn.addEventListener(\"click\", function() {' +\n  '      if (!validateStep(currentStep)) {' +\n  '        alert(\"Please fill out all required fields.\");' +\n  '        return;' +\n  '      }' +\n  '      if (currentStep === totalSteps - 1) {' +\n  '        submitFormData();' +\n  '      } else {' +\n  '        changeStep(1);' +\n  '      }' +\n  '    });' +\n  '    function launchConfetti() {' +\n  '      confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } });' +\n  '    }' +\n  '    async function submitFormData() {' +\n  '      const formData = new FormData();' +\n  '      formData.append(\"ticketSystem\", \"' + questions[0].TicketSystem + '\");' +\n  '      formData.append(\"ticketSystemId\", \"' + questions[0].TicketSystemId + '\");' +\n  '      formData.append(\"Bitrix24Project\", \"' + questions[0].Bitrix24Project + '\");' +\n  '      questions.forEach(function(q, i) {' +\n  '        formData.append(\"questions[\" + i + \"][question]\", q.Question);' +\n  '        formData.append(\"questions[\" + i + \"][required]\", (q.Required && q.Required.toLowerCase() === \"yes\") ? \"Yes\" : \"No\");' +\n  '        var typeStr = \"\";' +\n  '        switch ((q.QuestionType || \"text\").toLowerCase()) {' +\n  '          case \"text\": typeStr = \"Longtext\"; break;' +\n  '          case \"attachment\": typeStr = \"Attachment\"; break;' +\n  '          case \"singleselect\":' +\n  '          case \"multiselect\": typeStr = \"Selection\"; break;' +\n  '          default: typeStr = \"Longtext\";' +\n  '        }' +\n  '        formData.append(\"questions[\" + i + \"][type]\", typeStr);' +\n  '        formData.append(\"questions[\" + i + \"][taskTitle]\", (q.Bitrix24Title && q.Bitrix24Title.toLowerCase() === \"yes\") ? \"yes\" : \"[empty]\");' +\n  '        formData.append(\"questions[\" + i + \"][taskTag]\", (q.Bitrix24Tags && q.Bitrix24Tags.toLowerCase() === \"yes\") ? \"yes\" : \"[empty]\");' +\n  '        const elems = document.getElementsByName(\"question_\" + q.Id);' +\n  '        var answer = \"\";' +\n  '        if (elems.length > 0) {' +\n  '          if (elems[0].type === \"radio\") {' +\n  '            for (let j = 0; j < elems.length; j++) {' +\n  '              if (elems[j].checked) {' +\n  '                answer = elems[j].value;' +\n  '                if (answer === \"other\") {' +\n  '                  const otherInput = document.getElementById(\"question_\" + q.Id + \"_other\");' +\n  '                  answer = \"other:\" + otherInput.value;' +\n  '                }' +\n  '                break;' +\n  '              }' +\n  '            }' +\n  '          } else if (elems[0].type === \"checkbox\") {' +\n  '            const arr = [];' +\n  '            for (let j = 0; j < elems.length; j++) {' +\n  '              if (elems[j].checked) {' +\n  '                if (elems[j].value === \"other\") {' +\n  '                  const otherInput = document.getElementById(\"question_\" + q.Id + \"_other\");' +\n  '                  arr.push(\"other:\" + otherInput.value);' +\n  '                } else {' +\n  '                  arr.push(elems[j].value);' +\n  '                }' +\n  '              }' +\n  '            }' +\n  '            answer = arr.join(\", \");' +\n  '          } else {' +\n  '            answer = elems[0].value;' +\n  '          }' +\n  '        }' +\n  '        formData.append(\"questions[\" + i + \"][answer]\", answer);' +\n  '        if (q.QuestionType && (q.QuestionType.toLowerCase() === \"singleselect\" || q.QuestionType.toLowerCase() === \"multiselect\") && q.QuestionOptions) {' +\n  '          const opts = q.QuestionOptions.split(\\',\\').map(function(o){ return o.trim(); });' +\n  '          opts.forEach(function(option, index) {' +\n  '            formData.append(\"questions[\" + i + \"][options][\" + index + \"]\", option);' +\n  '          });' +\n  '        }' +\n  '      });' +\n  '      if (window.uniqueAttachments) {' +\n  '        for (const field in window.uniqueAttachments) {' +\n  '          window.uniqueAttachments[field].forEach(function(file){' +\n  '            formData.append(field, file);' +\n  '          });' +\n  '        }' +\n  '      }' +\n  '      const urlParams = new URLSearchParams(window.location.search);' +\n  '      for (const [key, value] of urlParams.entries()) {' +\n  '        formData.append(key, value);' +\n  '      }' +\n  '      try {' +\n  '        const response = await fetch(\"https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083\", {' +\n  '          method: \"POST\",' +\n  '          body: formData' +\n  '        });' +\n  '        if (!response.ok) {' +\n  '          throw new Error(\"Failed to post data to webhook\");' +\n  '        }' +\n  '        launchConfetti();' +\n  '        document.getElementById(\"multiStepForm\").reset();' +\n  '        window.uniqueAttachments = {};' +\n  '        currentStep = 0;' +\n  '        showStep(currentStep);' +\n  '      } catch (error) {' +\n  '        alert(\"Error submitting form: \" + error.message);' +\n  '      }' +\n  '    }' +\n  '  </script>' +\n  '</body>' +\n  '</html>';\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        0
      ],
      "id": "7b16a605-7ef4-4022-9bc2-3d6f5153c6ab",
      "name": "Code"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        660,
        0
      ],
      "id": "78e7cd5b-3dc4-4b1f-9e41-7f655f05d157",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required === \"Yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  switch (question.QuestionType) {\n    case 'Text':\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'SingleSelect': {\n      // Split comma-separated options and trim whitespace\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      // For radio groups, typically only one can be selected\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'MultiSelect': {\n      // Split comma-separated options and trim whitespace\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'Date':\n      // A simple date picker\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    default:\n      // Fallback: simple text input\n      answerHtml = `\n        <input type=\"text\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.05em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.9em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n    }\n    .option-container input {\n      margin-right: 6px;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      justify-content: space-between;\n      margin-top: 30px;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 16px;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" style=\"display: none;\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    const totalSteps = ${totalSteps};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Show the initial step\n    showStep(currentStep);\n\n    // Update the UI to show the current step\n    function showStep(stepIndex) {\n      // Hide all steps\n      steps.forEach(step => (step.style.display = 'none'));\n      // Show the current step\n      steps[stepIndex].style.display = 'block';\n\n      // Update button visibility\n      prevBtn.style.display = stepIndex === 0 ? 'none' : 'inline-block';\n      // If we're on the last step, show \"Submit Request\" instead of \"Next\"\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n\n      // Update progress bar and labels\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    // Go to the next or previous step\n    function changeStep(delta) {\n      currentStep += delta;\n      // Keep in valid range\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    // Navigation button event listeners\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (currentStep === totalSteps - 1) {\n        // Last step => \"Submit\"\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Collect and POST form data to a placeholder webhook\n    async function submitFormData() {\n      const form = document.getElementById('multiStepForm');\n      // Build a FormData object from the entire form\n      const formData = new FormData(form);\n      // Convert to a plain object so we can JSON-stringify\n      const formObject = {};\n\n      for (let [key, value] of formData.entries()) {\n        // If a key already exists, it means multiple checkboxes (multi-select)\n        // Convert to an array to capture all values\n        if (formObject[key]) {\n          if (Array.isArray(formObject[key])) {\n            formObject[key].push(value);\n          } else {\n            formObject[key] = [formObject[key], value];\n          }\n        } else {\n          formObject[key] = value;\n        }\n      }\n\n      try {\n        const response = await fetch('https://placeholder-webhook.com', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formObject),\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        alert('Form submitted successfully!');\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        -160
      ],
      "id": "51c63062-8e89-4e3c-a664-efa9e0c50981",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required === \"Yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  switch (question.QuestionType) {\n    case 'Text':\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'SingleSelect': {\n      // Split comma-separated options and trim whitespace\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      // For radio groups, typically only one can be selected\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'MultiSelect': {\n      // Split comma-separated options and trim whitespace\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      // If required, put 'required' on the first checkbox to force at least one selection\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'Date':\n      // A simple date picker\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    default:\n      // Fallback: simple text input\n      answerHtml = `\n        <input type=\"text\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px; /* Increased font size */\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.05em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.9em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n    }\n    .option-container input {\n      margin-right: 6px;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      /* Force the next button to the right */\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 16px;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    /* Style for the back button so it can be left-aligned when visible */\n    #prevBtn {\n      margin-right: auto;\n    }\n    /* Hide the back button entirely when not needed */\n    #prevBtn.hidden {\n      visibility: hidden; /* keeps layout so Next stays on the right */\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    const totalSteps = ${totalSteps};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Show the initial step\n    showStep(currentStep);\n\n    // Display the correct step and update UI\n    function showStep(stepIndex) {\n      // Hide all steps\n      steps.forEach(step => (step.style.display = 'none'));\n      // Show the current step\n      steps[stepIndex].style.display = 'block';\n\n      // Back button visibility\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n\n      // If we're on the last step, show \"Submit Request\" instead of \"Next\"\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n\n      // Update progress bar and labels\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    // Go to the next or previous step\n    function changeStep(delta) {\n      currentStep += delta;\n      // Keep in valid range\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    // Validate required fields for the current step\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      // Find all elements in this step with [required]\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          // Check if at least one option in this group is checked\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          // For text, date, textarea, etc., check if value is non-empty\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    // Navigation button event listeners\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      // Validate the current step before proceeding\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n\n      // If on the last step, submit the form\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Collect and POST form data to a placeholder webhook\n    async function submitFormData() {\n      const form = document.getElementById('multiStepForm');\n      // Build a FormData object from the entire form\n      const formData = new FormData(form);\n      // Convert to a plain object so we can JSON-stringify\n      const formObject = {};\n\n      for (let [key, value] of formData.entries()) {\n        // If a key already exists, it means multiple checkboxes (multi-select)\n        // Convert to an array to capture all values\n        if (formObject[key]) {\n          if (Array.isArray(formObject[key])) {\n            formObject[key].push(value);\n          } else {\n            formObject[key] = [formObject[key], value];\n          }\n        } else {\n          formObject[key] = value;\n        }\n      }\n\n      try {\n        const response = await fetch('https://placeholder-webhook.com', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formObject),\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        alert('Form submitted successfully!');\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        -300
      ],
      "id": "9c6d50d6-5d0f-4d1f-98b1-a1a2a028b086",
      "name": "Code2"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "de491dd3-dbe0-4e6c-8449-70d62e5e2083",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        200
      ],
      "id": "c808eed8-7f61-4a96-aa31-7b713487ab5f",
      "name": "Webhook1",
      "webhookId": "de491dd3-dbe0-4e6c-8449-70d62e5e2083"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required === \"Yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  switch (question.QuestionType) {\n    case 'Text':\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'SingleSelect': {\n      // Split comma-separated options and trim whitespace\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      // For radio groups, typically only one can be selected\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'MultiSelect': {\n      // Split comma-separated options and trim whitespace\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      // If required, put 'required' on the first checkbox to force at least one selection\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'Date':\n      // A simple date picker\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    default:\n      // Fallback: simple text input\n      answerHtml = `\n        <input type=\"text\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* \n      1.5x the original sizes:\n      - Original base: 18px -> now ~27px\n      - Original title: 28px -> now ~42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      /* Slightly smaller than base text to keep fields manageable */\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      /* Make label clickable (it already is with for=..., but let's ensure pointer) */\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input {\n      /* Slightly increase the size of the radio/checkbox to match text better */\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      /* Slightly smaller than base to avoid huge button text */\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    /* Style for the back button so it can be left-aligned when visible */\n    #prevBtn {\n      margin-right: auto;\n    }\n    /* Hide the back button entirely when not needed (so Next stays on right) */\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container, will be set to current URL -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    const totalSteps = ${totalSteps};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Set the QR code to current URL\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(window.location.href);\n\n    // Show the initial step\n    showStep(currentStep);\n\n    // Display the correct step and update UI\n    function showStep(stepIndex) {\n      // Hide all steps\n      steps.forEach(step => (step.style.display = 'none'));\n      // Show the current step\n      steps[stepIndex].style.display = 'block';\n\n      // Back button visibility\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n\n      // If we're on the last step, show \"Submit Request\" instead of \"Next\"\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n\n      // Update progress bar and labels\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    // Go to the next or previous step\n    function changeStep(delta) {\n      currentStep += delta;\n      // Keep in valid range\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    // Validate required fields for the current step\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      // Find all elements in this step with [required]\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          // Check if at least one option in this group is checked\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          // For text, date, textarea, etc., check if value is non-empty\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    // Navigation button event listeners\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      // Validate the current step before proceeding\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n\n      // If on the last step, submit the form\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Simple confetti burst\n    function launchConfetti() {\n      // Single burst\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    // Collect and POST form data to a placeholder webhook\n    async function submitFormData() {\n      const form = document.getElementById('multiStepForm');\n      // Build a FormData object from the entire form\n      const formData = new FormData(form);\n      // Convert them into a plain object so we can JSON-stringify\n      const formObject = {};\n\n      for (let [key, value] of formData.entries()) {\n        // If a key already exists, it means multiple checkboxes (multi-select)\n        // Convert to an array to capture all values\n        if (formObject[key]) {\n          if (Array.isArray(formObject[key])) {\n            formObject[key].push(value);\n          } else {\n            formObject[key] = [formObject[key], value];\n          }\n        } else {\n          formObject[key] = value;\n        }\n      }\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formObject),\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n\n        // Launch confetti only, no success message\n        launchConfetti();\n\n        // Reset the form and show the first step again\n        form.reset();\n        currentStep = 0;\n        showStep(currentStep);\n\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        -440
      ],
      "id": "5cd5116a-aed9-4739-88fb-b31a3614b6d5",
      "name": "Code3"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -20,
        1080
      ],
      "id": "eb19e17a-8d7e-42e3-a00d-820bd97d77ab",
      "name": "Webhook2",
      "webhookId": "4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe"
    },
    {
      "parameters": {
        "path": "99d4ae83-d3f5-4126-9f6b-ea45add343c4",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1160,
        700
      ],
      "id": "6c6a0286-fa2c-4ce2-bffd-6f6ea27eef6b",
      "name": "Webhook3",
      "webhookId": "99d4ae83-d3f5-4126-9f6b-ea45add343c4"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -40,
        700
      ],
      "id": "600e36c3-35b7-4934-9694-1d268c01ffc0",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// 1) Filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// 2) Grab fallback values from the FIRST item (the webhook), if present.\nlet fallbackTitle = \"\";\nlet fallbackOwner = \"\";\nlet fallbackProject = \"\";\nlet fallbackCategory = \"\";\nif (questionsArray.length > 0) {\n  const firstItem = questionsArray[0];\n  fallbackTitle = firstItem.TicketSystem || (firstItem.query && firstItem.query.system) || \"\";\n  fallbackOwner = firstItem.Owner || (firstItem.query && firstItem.query.user) || \"\";\n  fallbackProject = firstItem.Bitrix24Project || (firstItem.query && firstItem.query.Bitrix24Project) || \"\";\n  fallbackCategory = firstItem.Category || (firstItem.query && firstItem.query.Category) || \"\";\n}\n\n// 3) Find the first \"database record\" that has an Id property.\nlet dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\"));\n\n// 4) Set final values for Title, Bitrix24 Project ID, Owner, and Category.\nlet ticketSystemTitle = dbRecord ? (dbRecord.TicketSystem || fallbackTitle) : fallbackTitle;\nlet bitrix24ProjectId = dbRecord ? (dbRecord.Bitrix24Project || fallbackProject) : fallbackProject;\nlet owner = dbRecord ? (dbRecord.Owner || fallbackOwner) : fallbackOwner;\nlet category = dbRecord ? (dbRecord.Category || fallbackCategory) : fallbackCategory;\n\n// 5) Determine TicketSystemId using the following priority:\nlet ticketSystemId = \"\";\nif (dbRecord && dbRecord.TicketSystemId && dbRecord.TicketSystemId !== \"null\") {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const firstItem = questionsArray[0] || {};\n  const webhookTicketId = firstItem.query && firstItem.query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    ticketSystemId = dbRecord ? dbRecord.Id : \"\";\n  }\n}\n\n// Build the HTML string.\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n      cursor: move;\n      transition: border 0.2s ease;\n    }\n    .option-item.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"category\">Category</label>\n        <select id=\"category\" name=\"category\">\n          <option value=\"Request\">Request</option>\n          <option value=\"Checklist\">Checklist</option>\n          <option value=\"Issue\">Issue</option>\n        </select>\n\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // ------------------ DRAG & DROP: QUESTIONS ------------------\n    let draggedElement = null;\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        card.setAttribute('data-question-index', index + 1);\n      });\n    }\n\n    // ------------------ DRAG & DROP: OPTIONS ------------------\n    let draggedOption = null;\n    function handleOptionDragStart(e) {\n      draggedOption = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleOptionDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleOptionDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedOption && target !== draggedOption) {\n        const container = target.parentElement;\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedOption, target);\n        } else {\n          container.insertBefore(draggedOption, target.nextSibling);\n        }\n        updateOptionNames(container);\n      }\n    }\n    function handleOptionDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedOption = null;\n    }\n    function makeOptionDraggable(optionElement) {\n      optionElement.setAttribute('draggable', 'true');\n      optionElement.addEventListener('dragstart', handleOptionDragStart);\n      optionElement.addEventListener('dragover', handleOptionDragOver);\n      optionElement.addEventListener('drop', handleOptionDrop);\n      optionElement.addEventListener('dragend', handleOptionDragEnd);\n    }\n    function updateOptionNames(optionsList) {\n      const questionCard = optionsList.closest('.question-card');\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionItems = optionsList.querySelectorAll('.option-item');\n      optionItems.forEach((option, index) => {\n        const textInput = option.querySelector('input[type=\"text\"][name]');\n        if (textInput) {\n          textInput.name = 'questions[' + questionId + '][options][' + index + ']';\n        }\n        const hiddenInput = option.querySelector('input[type=\"hidden\"]');\n        if (hiddenInput) {\n          hiddenInput.name = 'questions[' + questionId + '][options][' + index + ']';\n        }\n      });\n    }\n\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text': return 'LongText';\n        case 'singleselect': return 'singleselect';\n        case 'multiselect': return 'multiselect';\n        case 'date':\n        case 'dateselector': return 'date';\n        case 'attachment': return 'Attachment';\n        default: return lowerType;\n      }\n    }\n\n    // ------------------ SERVER-SIDE DATA ------------------\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n    const defaultCategory = ${JSON.stringify(category || \"Request\")};\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Pre-fill the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n      document.getElementById('category').value = defaultCategory || \"Request\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          if (questionData.QuestionType) {\n            const questionCard = createQuestionCard(questionData, index);\n            questionsContainer.appendChild(questionCard);\n            questionCount = index + 1;\n          }\n        });\n      }\n      updateOrderIndicators();\n\n      // Add a new question\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n\n      // Handle clicks on question/option buttons\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          if (questionCard.previousElementSibling) {\n            questionsContainer.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          if (questionCard.nextElementSibling) {\n            questionsContainer.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          const optionItem = e.target.closest('.option-item');\n          const optionsList = optionItem.parentElement;\n          optionItem.remove();\n          updateOptionNames(optionsList);\n          return;\n        }\n      });\n\n      // Toggle “Include Other” logic\n      questionsContainer.addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n\n          if (e.target.checked) {\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = \\`\n                <label>Other:</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"(Other)\"\n                  readonly\n                />\n                <input\n                  type=\"hidden\"\n                  name=\"questions[\\${questionCard.getAttribute('data-question-id')}][options][\\${nextIndex}]\"\n                  value=\"{other}\"\n                />\n              \\`;\n              makeOptionDraggable(otherDiv);\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n\n      // Re-index each question’s input names before form submission and push toggle options.\n      ticketForm.addEventListener('submit', function() {\n        updateOrderIndicators();\n        const cards = Array.from(document.querySelectorAll('#questionsContainer .question-card'));\n        cards.forEach((card, i) => {\n          const newIndex = i + 1;\n          card.setAttribute('data-question-id', newIndex);\n\n          // Update question input names from \"questions[x]\" to \"questions[newIndex]\"\n          card.querySelectorAll('input, select, textarea').forEach(input => {\n            input.name = input.name.replace(/questions\\\\[\\\\d+\\\\]/, 'questions[' + newIndex + ']');\n          });\n\n          // Toggle for Task Title\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          let taskTitleInput = card.querySelector('input[name*=\"[taskTitle]\"]');\n          if (taskTitleToggle && taskTitleToggle.checked) {\n            if (!taskTitleInput) {\n              taskTitleInput = document.createElement('input');\n              taskTitleInput.type = 'hidden';\n              taskTitleInput.name = 'questions[' + newIndex + '][taskTitle]';\n              taskTitleInput.value = \"yes\";\n              card.appendChild(taskTitleInput);\n            } else {\n              taskTitleInput.name = 'questions[' + newIndex + '][taskTitle]';\n              taskTitleInput.value = \"yes\";\n            }\n          } else if (taskTitleInput) {\n            taskTitleInput.remove();\n          }\n\n          // Toggle for Tag\n          const tagToggle = card.querySelector('.tagToggle');\n          let tagInput = card.querySelector('input[name*=\"[taskTag]\"]');\n          if (tagToggle && tagToggle.checked) {\n            if (!tagInput) {\n              tagInput = document.createElement('input');\n              tagInput.type = 'hidden';\n              tagInput.name = 'questions[' + newIndex + '][taskTag]';\n              tagInput.value = \"yes\";\n              card.appendChild(tagInput);\n            } else {\n              tagInput.name = 'questions[' + newIndex + '][taskTag]';\n              tagInput.value = \"yes\";\n            }\n          } else if (tagInput) {\n            tagInput.remove();\n          }\n        });\n      });\n    });\n\n    // Create a new question card\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Make question card draggable\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      let html = '<div class=\"order-indicator\"></div>';\n\n      // Question text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += \\`\n          <textarea name=\"questions[\\${questionId}][question]\" \n                    class=\"questionText\" \n                    placeholder=\"Enter your question text...\">\\${questionTextValue}</textarea>\n        \\`;\n      } else {\n        html += \\`\n          <input type=\"text\" \n                 name=\"questions[\\${questionId}][question]\" \n                 class=\"questionText\" \n                 placeholder=\"Enter your question text...\" \n                 value=\"\\${questionTextValue}\" />\n        \\`;\n      }\n\n      // SingleSelect / MultiSelect\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n\n        let initialOptions = [];\n        let hasOther = false;\n\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions\n            .split(\",\")\n            .map(o => o.trim());\n          if (initialOptions.indexOf(\"{other}\") !== -1) {\n            hasOther = true;\n            initialOptions = initialOptions.filter(opt => opt !== \"{other}\");\n          }\n        }\n\n        html += \\`\n          <label>\n            <input type=\"checkbox\" class=\"includeOtherToggle\" \\${hasOther ? 'checked' : ''} />\n            Include \"Other\" Option\n          </label>\n        \\`;\n\n        html += \\`\n          <div class=\"options-container\">\n            <button type=\"button\" class=\"add-option-btn\">Add Option</button>\n            <div class=\"options-list\">\n        \\`;\n\n        initialOptions.forEach(function(opt, idx) {\n          html += \\`\n            <div class=\"option-item\">\n              <input type=\"text\" \n                     placeholder=\"Option text...\" \n                     name=\"questions[\\${questionId}][options][\\${idx}]\" \n                     value=\"\\${opt}\" />\n              <button type=\"button\" class=\"remove-option-btn\">Remove Option</button>\n            </div>\n          \\`;\n        });\n\n        if (hasOther) {\n          const otherIndex = initialOptions.length;\n          html += \\`\n            <div class=\"option-item other-option\">\n              <label>Other:</label>\n              <input\n                type=\"text\"\n                placeholder=\"(Other)\"\n                readonly\n              />\n              <input\n                type=\"hidden\"\n                name=\"questions[\\${questionId}][options][\\${otherIndex}]\"\n                value=\"{other}\"\n              />\n            </div>\n          \\`;\n        }\n\n        html += '</div></div>';\n      }\n\n      // Date\n      if (lowerType === 'date') {\n        html += \\`\n          <label>Date Selector Preview</label>\n          <input type=\"date\" disabled />\n        \\`;\n      }\n\n      // Attachment\n      if (lowerType === 'attachment') {\n        html += \\`\n          <label>Attachment Upload Preview</label>\n          <input type=\"file\" disabled />\n        \\`;\n      }\n\n      // Required?\n      const requiredValue = questionData.Required || \"Yes\";\n      html += \\`\n        <label>Required</label>\n        <select name=\"questions[\\${questionId}][required]\">\n          <option value=\"Yes\" \\${requiredValue === \"Yes\" ? \"selected\" : \"\"}>Yes</option>\n          <option value=\"No\" \\${requiredValue === \"No\" ? \"selected\" : \"\"}>No</option>\n        </select>\n      \\`;\n\n      // Hidden type field\n      const formattedType = getFormattedType(lowerType);\n      html += \\`\n        <input type=\"hidden\" name=\"questions[\\${questionId}][type]\" value=\"\\${formattedType}\">\n      \\`;\n\n      // Check if incoming json has Bitrix24Title or Bitrix24Tags set to \"yes\" and set checkbox accordingly.\n      let taskTitleChecked = \"\";\n      let tagChecked = \"\";\n      if (questionData.Bitrix24Title && questionData.Bitrix24Title.toLowerCase() === \"yes\") {\n        taskTitleChecked = \"checked\";\n      }\n      if (questionData.Bitrix24Tags && questionData.Bitrix24Tags.toLowerCase() === \"yes\") {\n        tagChecked = \"checked\";\n      }\n\n      // Move & remove buttons and toggles for task title and tag.\n      html += \\`\n        <div class=\"toggle-container\">\n          <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" \\${taskTitleChecked} /> Use as Task Title</label>\n          <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" \\${tagChecked} /> Use as Tag</label>\n          <button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>\n          <button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>\n        </div>\n        <button type=\"button\" class=\"remove-question-btn\">Remove Question</button>\n      \\`;\n\n      questionCard.innerHTML = html;\n\n      // Make each option item draggable if selection type\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionsList = questionCard.querySelector('.options-list');\n        if (optionsList) {\n          optionsList.querySelectorAll('.option-item').forEach(function(option) {\n            makeOptionDraggable(option);\n          });\n        }\n      }\n\n      return questionCard;\n    }\n\n    // Add a new “normal” option\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n      makeOptionDraggable(optionDiv);\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n      updateOptionNames(optionsList);\n    }\n  </script>\n</body>\n</html>`;\n\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        700
      ],
      "id": "b9846154-e887-4971-988f-437bf99e7273",
      "name": "Code4"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    /* Base body styling */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n\n    /* Title at the top */\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n\n    /* Fieldsets and labels */\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* Dynamic question blocks */\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card label {\n      margin-top: 0.5em;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      width: auto;\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n\n    /* Buttons */\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleSelect\">SingleSelect</option>\n          <option value=\"multiSelect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    let questionCount = 0;\n\n    // Wait for DOM to load before hooking up event listeners\n    document.addEventListener('DOMContentLoaded', function() {\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n\n      // Handle \"Add\" button to create a new question card\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard(questionType, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for buttons inside questionsContainer\n      questionsContainer.addEventListener('click', function(e) {\n        // Remove entire question\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n\n        // Add option (SingleSelect/MultiSelect)\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n\n        // Remove an individual option\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n\n        // Insert placeholder into the question text\n        if (e.target.classList.contains('insert-placeholder-btn')) {\n          const placeholder = e.target.getAttribute('data-placeholder');\n          const questionCard = e.target.closest('.question-card');\n          const questionTextInput = questionCard.querySelector('.questionText');\n          if (questionTextInput) {\n            questionTextInput.value += placeholder;\n          }\n        }\n      });\n    });\n\n    // Creates a new question card (HTML) for a given question type\n    function createQuestionCard(questionType, questionId) {\n      // Create wrapper div\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build the inner HTML\n      let html = '';\n\n      // Question text\n      html += '<label>Question</label>';\n      html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text here...\" />';\n\n      // If SingleSelect or MultiSelect, allow adding options\n      if (questionType === 'singleSelect' || questionType === 'multiSelect') {\n        html += '<label>Question Options</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\"></div>';\n        html += '</div>';\n      }\n\n      // Required dropdown\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\">Yes</option>';\n      html += '  <option value=\"No\">No</option>';\n      html += '</select>';\n\n      // Hidden input for question type\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + questionType + '\">';\n\n      // Placeholder buttons\n      html += '<div style=\"margin-top: 0.5em;\">';\n      html += '  <button type=\"button\" class=\"insert-placeholder-btn\" data-placeholder=\"{TaskTitle}\">Task Title</button> ';\n      html += '  <button type=\"button\" class=\"insert-placeholder-btn\" data-placeholder=\"{Tag}\">Tag</button>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      // Insert into the question card\n      questionCard.innerHTML = html;\n\n      return questionCard;\n    }\n\n    // Adds a new option input (for single/multi-select)\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n\n      // Create the container for one option\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      // Create the input\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      // Create remove option button\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        600
      ],
      "id": "ae46e699-6ae6-47c6-949c-ff96b64d49ce",
      "name": "Code5"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pwvejbwcowen0as",
        "table": "mn2c37f3xnlbre3",
        "returnAll": true,
        "options": {
          "where": "=(TicketSystem,eq,{{ $json.query.system }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -840,
        960
      ],
      "id": "3dd162e9-bded-45bb-a075-4bcffef70ff0",
      "name": "NocoDB1",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pwvejbwcowen0as",
        "table": "mn2c37f3xnlbre3",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "TicketSystem",
              "fieldValue": "={{ $json.title }}"
            },
            {
              "fieldName": "Question",
              "fieldValue": "={{ $json.question }}"
            },
            {
              "fieldName": "QuestionOptions",
              "fieldValue": "={{ $json.options }}"
            },
            {
              "fieldName": "Required",
              "fieldValue": "={{ $json.required }}"
            },
            {
              "fieldName": "Bitrix24Project",
              "fieldValue": "={{ $json.bitrix24ProjectId }}"
            },
            {
              "fieldName": "Bitrix24Tags",
              "fieldValue": "={{ $json.bitrix24Tag }}"
            },
            {
              "fieldName": "Owner",
              "fieldValue": "={{ $json.owner }}"
            },
            {
              "fieldName": "QuestionType",
              "fieldValue": "={{ $json.type }}"
            },
            {
              "fieldName": "TicketSystemId",
              "fieldValue": "={{ $json.ticketSystemId }}"
            },
            {
              "fieldName": "Bitrix24Title",
              "fieldValue": "={{ $json.bitrix24Title }}"
            },
            {
              "fieldName": "Category",
              "fieldValue": "={{ $json.category }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        1000,
        1080
      ],
      "id": "2ba013e4-c71e-4810-bf4c-0a4806c5b07b",
      "name": "NocoDB2",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Gather all incoming items\nconst items = $input.all();\n\n// We'll accumulate our final output items here\nconst output = [];\n\nfor (const item of items) {\n  const body = item.json.body || {};\n\n  // We'll store question data in a dictionary keyed by the question index\n  const questionsDict = {};\n  // Array to record the order in which questions are first encountered\n  const questionOrder = [];\n\n  // Iterate over each key in the body\n  for (const [key, value] of Object.entries(body)) {\n    // We only care about keys that match questions[<index>][<property>][<optional subIndex>]\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(.*?)\\](?:\\[(\\d+)\\])?$/);\n    if (!match) {\n      continue;\n    }\n\n    const questionIndex = match[1];\n    const property = match[2];\n    const subIndex = match[3];\n\n    // If this is the first time we see this questionIndex, initialize it and record its order\n    if (!questionsDict.hasOwnProperty(questionIndex)) {\n      questionsDict[questionIndex] = {\n        question: \"\",\n        required: \"\",\n        type: \"\",\n        options: [],\n        bitrix24Title: null, // Initialize new field for Bitrix24Title\n        bitrix24Tag: null    // Initialize new field for Bitrix24Tag\n      };\n      questionOrder.push(questionIndex);\n    }\n\n    // If property is \"options\", accumulate the values;\n    // if property is \"taskTitle\" or \"taskTag\", assign to the new fields;\n    // otherwise set the property normally.\n    if (property === \"options\") {\n      questionsDict[questionIndex].options.push(value);\n    } else if (property === \"taskTitle\") {\n      questionsDict[questionIndex].bitrix24Title = value;\n    } else if (property === \"taskTag\") {\n      questionsDict[questionIndex].bitrix24Tag = value;\n    } else {\n      questionsDict[questionIndex][property] = value;\n    }\n  }\n\n  // Build a new item per question in the order they were received\n  for (const idx of questionOrder) {\n    const q = questionsDict[idx];\n    // Join multiple options with commas\n    const optionsString = (q.options || []).join(\", \");\n\n    output.push({\n      json: {\n        title: body.title,\n        category: body.category,           // Added category here similar to title or ticketSystemId\n        ticketSystemId: body.ticketSystemId,\n        bitrix24ProjectId: body.bitrix24ProjectId,\n        owner: body.owner,\n        question: q.question,\n        required: q.required,\n        type: q.type,\n        options: optionsString,\n        bitrix24Title: q.bitrix24Title,     // Bring over Bitrix24Title from taskTitle\n        bitrix24Tag: q.bitrix24Tag          // Bring over Bitrix24Tag from taskTag\n      }\n    });\n  }\n}\n\n// Return one item per question\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        760,
        1080
      ],
      "id": "f749c6b9-d3b8-458e-bd29-d1a0f8ba8e58",
      "name": "Code6"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<a href=\"https://xl.epicpc.com/webhook/a5de8712-c0cd-4925-9510-f78b1dbdcf79?system={{ encodeURIComponent($('Webhook2').item.json.body.title) }}\">New ticket system!</a>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1380,
        1240
      ],
      "id": "7573f7b5-c783-4be1-8b5f-4c524ddc2444",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "7d8f4fce-21ae-43d1-a507-778353247abb",
              "leftValue": "={{ $json.query.system }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -980,
        700
      ],
      "id": "8496d217-8457-49a7-915f-b249c2c18f9a",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// 1) Collect the incoming JSON items into an array.\nconst questionsArray = items.map(item => item.json);\n\n// 2) For the top-level fields, pick them from the first item (or use empty strings if missing).\nconst {\n  TicketSystem = \"\",\n  Bitrix24Project = \"\",\n  Owner = \"\"\n} = questionsArray[0] || {};\n\n// 3) Build the HTML, embedding the above variables in the form fields,\n//    and also embedding the questions array for dynamic population.\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    /* Base body styling */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    /* Title at the top */\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    /* Fieldsets and labels */\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    /* Dynamic question blocks */\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card label {\n      margin-top: 0.5em;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      width: auto;\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    /* Buttons */\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required value=\"${TicketSystem}\">\n        \n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\" value=\"${Bitrix24Project !== null ? Bitrix24Project : \"\"}\">\n        \n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\" value=\"${Owner !== null ? Owner : \"\"}\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleSelect\">SingleSelect</option>\n          <option value=\"multiSelect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Embed the incoming questions\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n\n      // Populate the form with incoming questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          // Only treat this item as a question if it has a QuestionType\n          if (questionData.QuestionType) {\n            const questionCard = createQuestionCard(questionData, index);\n            questionsContainer.appendChild(questionCard);\n            questionCount = index + 1;\n          }\n        });\n      }\n\n      // Handler for adding a new (empty) question\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // For new questions, only the type is known initially.\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question card actions\n      questionsContainer.addEventListener('click', function(e) {\n        // Remove entire question\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        // Add an option (for SingleSelect/MultiSelect)\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        // Remove an individual option\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n        // Insert placeholder into the question text\n        if (e.target.classList.contains('insert-placeholder-btn')) {\n          const placeholder = e.target.getAttribute('data-placeholder');\n          const questionCard = e.target.closest('.question-card');\n          const questionTextInput = questionCard.querySelector('.questionText');\n          if (questionTextInput) {\n            questionTextInput.value += placeholder;\n          }\n        }\n      });\n    });\n\n    // Creates a question card and populates it with any provided data\n    function createQuestionCard(questionData, questionId) {\n      // Normalize the question type to lowercase for consistency.\n      let questionType = questionData && questionData.QuestionType \n                        ? questionData.QuestionType.toLowerCase() \n                        : \"text\";\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      let html = '';\n\n      // Question text (populate if provided)\n      const questionTextValue = questionData && questionData.Question \n                                ? questionData.Question \n                                : \"\";\n      html += '<label>Question</label>';\n      html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text here...\" value=\"' + questionTextValue + '\" />';\n\n      // If the question is a select type, display options (pre-fill if available)\n      if (questionType === 'singleselect' || questionType === 'multiselect') {\n        html += '<label>Question Options</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData && questionData.QuestionOptions) {\n          // Split comma-separated options and trim each one\n          const options = questionData.QuestionOptions.split(',').map(opt => opt.trim());\n          options.forEach((option, index) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + index + ']\" value=\"' + option + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div>';\n        html += '</div>';\n      }\n\n      // Required dropdown – preselect if a value exists\n      const requiredValue = questionData && questionData.Required ? questionData.Required : \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + (questionData && questionData.QuestionType ? questionData.QuestionType : questionType) + '\">';\n\n      // Placeholder buttons\n      html += '<div style=\"margin-top: 0.5em;\">';\n      html += '  <button type=\"button\" class=\"insert-placeholder-btn\" data-placeholder=\"{TaskTitle}\">Task Title</button> ';\n      html += '  <button type=\"button\" class=\"insert-placeholder-btn\" data-placeholder=\"{Tag}\">Tag</button>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Adds a new option input (for SingleSelect/MultiSelect questions)\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        580
      ],
      "id": "bf45fcad-d413-4265-9f2b-5f557e92a576",
      "name": "Code7"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleSelect\">SingleSelect</option>\n          <option value=\"multiSelect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n        if (e.target.classList.contains('insert-placeholder-btn')) {\n          const placeholder = e.target.getAttribute('data-placeholder');\n          const questionCard = e.target.closest('.question-card');\n          const questionTextInput = questionCard.querySelector('.questionText');\n          if (questionTextInput) {\n            questionTextInput.value += placeholder;\n          }\n        }\n      });\n\n      // On form submit, gather any {TaskTitle} and {Tag} occurrences\n      ticketForm.addEventListener('submit', function(e) {\n        const questionCards = document.querySelectorAll('.question-card');\n        let taskTitleValues = [];\n        let taskTagValues = [];\n\n        questionCards.forEach((card) => {\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value || \"\";\n\n          // If question text contains {TaskTitle}, push to taskTitleValues\n          if (textValue.includes('{TaskTitle}')) {\n            taskTitleValues.push(textValue);\n          }\n          // If question text contains {Tag}, push to taskTagValues\n          if (textValue.includes('{Tag}')) {\n            taskTagValues.push(textValue);\n          }\n        });\n\n        // If we have found any {TaskTitle}, create a hidden input\n        if (taskTitleValues.length > 0) {\n          const hiddenTitle = document.createElement('input');\n          hiddenTitle.type = 'hidden';\n          hiddenTitle.name = 'taskTitle';\n          // Join them by commas if multiple\n          hiddenTitle.value = taskTitleValues.join(', ');\n          ticketForm.appendChild(hiddenTitle);\n        }\n\n        // If we have found any {Tag}, create a hidden input\n        if (taskTagValues.length > 0) {\n          const hiddenTag = document.createElement('input');\n          hiddenTag.type = 'hidden';\n          hiddenTag.name = 'taskTag';\n          // Join them by commas if multiple\n          hiddenTag.value = taskTagValues.join(', ');\n          ticketForm.appendChild(hiddenTag);\n        }\n      });\n    });\n\n    // Helper to capitalize first letter\n    function capitalizeType(typeStr) {\n      if (!typeStr) return \"\";\n      return typeStr.charAt(0).toUpperCase() + typeStr.slice(1);\n    }\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      // Convert e.g. \"SingleSelect\" => \"singleselect\" for logic, then capitalize for final post\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // Question text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n\n      // If single/multi-select, show options\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        html += '<label>Question Options</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div></div>';\n      }\n\n      // Required\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type, capitalized\n      const capitalizedType = capitalizeType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + capitalizedType + '\">';\n\n      // Placeholder buttons\n      html += '<div style=\"margin-top: 0.5em;\">';\n      html += '  <button type=\"button\" class=\"insert-placeholder-btn\" data-placeholder=\"{TaskTitle}\">Task Title</button> ';\n      html += '  <button type=\"button\" class=\"insert-placeholder-btn\" data-placeholder=\"{Tag}\">Tag</button>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        540,
        440
      ],
      "id": "47a3d016-89b1-48e6-b7a4-058909889345",
      "name": "Code8"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node\n *\n * Processes incoming data to structure it as:\n * {\n *   TicketSystem,\n *   TaskTitle,\n *   TaskDescription,\n *   Tag,\n *   Requestor\n * }\n *\n * User is extracted from the referer URL query parameter \"user\"\n */\nreturn items.map((item) => {\n  // Helper function to reformat a date string (with time \"00:00:00.000Z\") to MM-DD-YYYY\n  function formatDateIfNeeded(value) {\n    if (typeof value === \"string\") {\n      const dateRegex = /^(\\d{4})-(\\d{2})-(\\d{2})T00:00:00\\.000Z$/;\n      const match = value.match(dateRegex);\n      if (match) {\n        const year = match[1];\n        const month = match[2];\n        const day = match[3];\n        return `${month}-${day}-${year}`;\n      }\n    }\n    return value;\n  }\n  \n  const body = item.json.body || {};\n  const headers = item.json.headers || {};\n\n  // 1) Parse \"user\" from the referer URL using a regex\n  let userFromReferer = \"UnknownUser\";\n  if (headers.referer) {\n    const match = headers.referer.match(/[?&]user=([^&]+)/);\n    if (match && match[1]) {\n      userFromReferer = decodeURIComponent(match[1]);\n    }\n  }\n\n  // 2) Determine TicketSystem from body\n  const ticketSystem = body.ticketSystem || body.system || \"N/A\";\n\n  // 3) Gather all question/answer pairs and any taskTitle values\n  const questionsMap = {};\n  for (const key of Object.keys(body)) {\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(question|answer|taskTitle)\\]$/);\n    if (match) {\n      const index = match[1];\n      const field = match[2];\n      if (!questionsMap[index]) {\n        questionsMap[index] = {};\n      }\n      questionsMap[index][field] = body[key];\n    }\n  }\n\n  let taskDescription = \"\";\n  let taskTitleParts = [];\n  let tagParts = [];\n\n  // Sort question indices numerically to preserve order\n  const sortedIndices = Object.keys(questionsMap).sort((a, b) => parseInt(a) - parseInt(b));\n  for (const idx of sortedIndices) {\n    const q = questionsMap[idx];\n    const questionText = q.question || \"\";\n    const answerText = formatDateIfNeeded(q.answer || \"\");\n    taskDescription += `${questionText}: ${answerText}\\n`;\n\n    // For both TaskTitle and Tag: if taskTitle is \"yes\", add the (formatted) answer; otherwise add the taskTitle if valid.\n    if (q.taskTitle) {\n      if (q.taskTitle.toLowerCase() === \"yes\") {\n        if (answerText && answerText !== \"[empty]\") {\n          taskTitleParts.push(answerText);\n          tagParts.push(answerText);\n        }\n      } else if (q.taskTitle !== \"[empty]\") {\n        taskTitleParts.push(q.taskTitle);\n        tagParts.push(q.taskTitle);\n      }\n    }\n  }\n\n  // 4) Determine final TaskTitle by joining with \" | \" and then appending TicketSystem and user/email\n  let taskTitle = taskTitleParts.length > 0 ? taskTitleParts.join(\" | \") : \"\";\n  taskTitle += (taskTitle ? \" | \" : \"\") + `${ticketSystem} | ${userFromReferer}`;\n\n  // 5) Build the Tag string as comma-separated values with each value in double quotes.\n  let tagItems = [];\n  if (tagParts.length > 0) {\n    tagItems = tagItems.concat(tagParts);\n  }\n  tagItems.push(ticketSystem);\n  tagItems.push(userFromReferer);\n  const tag = tagItems.map(item => `\"${item}\"`).join(\",\");\n\n  // Use the parsed user for Requestor\n  const requestor = userFromReferer;\n\n  // Build the structured output object\n  const output = {\n    TicketSystem: ticketSystem,\n    TaskTitle: taskTitle,\n    TaskDescription: taskDescription.trim(),\n    Tag: tag,\n    Requestor: requestor,\n  };\n\n  // Create the first section of \"description\" by formatting the TaskDescription lines\n  let description = \"\";\n  const lines = output.TaskDescription.split(\"\\n\");\n  for (const line of lines) {\n    const parts = line.split(\":\");\n    if (parts.length > 1) {\n      // Bold the text before the first colon (the question) and then add the answer\n      const question = parts.shift().trim();\n      const answer = parts.join(\":\").trim();\n      description += `[b]${question}[/b]: ${answer}\\n`;\n    } else {\n      // If no colon is found, append the line as is\n      description += line + \"\\n\";\n    }\n  }\n\n  // Insert a blank line between the first section and the second section\n  description += \"\\n\";\n\n  // Exclude keys: \"ticketSystem\", \"system\", \"singlesignontoken\", \"createdon\", \"encounterid\", \"SSOToken\", \"AccountID\"\n  const excludedKeys = [\"ticketSystem\", \"system\", \"singlesignontoken\", \"createdon\", \"encounterid\", \"SSOToken\", \"AccountID\"];\n  \n  // Append the second section: all body parameters that are not prefaced with \"questions\" or \"Bitrix24\" and not in the excluded list\n  for (const key in body) {\n    if (!key.startsWith(\"questions\") && !key.startsWith(\"Bitrix24\") && !excludedKeys.includes(key)) {\n      // Format the value if it's a date string with time 00:00:00.000Z\n      let value = formatDateIfNeeded(body[key]);\n      description += `[b]${key}[/b]: ${value}\\n`;\n    }\n  }\n\n  // Return the structured output plus our new Bitrix24-style description\n  return {\n    json: {\n      ...output,\n      description: description.trim(),\n    },\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        200
      ],
      "id": "7924fefc-6858-4708-a5b6-c9a249d2c3e4",
      "name": "Code9"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pwvejbwcowen0as",
        "table": "mn2c37f3xnlbre3",
        "returnAll": true,
        "options": {
          "where": "=(TicketSystem,eq,{{ $json.body.title }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        360,
        960
      ],
      "id": "2204028c-ff05-4edd-86b9-09a93644eeca",
      "name": "NocoDB3",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "delete",
        "projectId": "pwvejbwcowen0as",
        "table": "mn2c37f3xnlbre3",
        "id": "={{ $json.Id }}"
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        600,
        960
      ],
      "id": "e07165c4-420a-4e9a-9e93-2cb122add2db",
      "name": "NocoDB4",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleSelect\">SingleSelect</option>\n          <option value=\"multiSelect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // On form submit, create per-question hidden inputs for taskTitle and taskTag\n      ticketForm.addEventListener('submit', function(e) {\n        const questionCards = document.querySelectorAll('.question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Helper to capitalize first letter\n    function capitalizeType(typeStr) {\n      if (!typeStr) return \"\";\n      return typeStr.charAt(0).toUpperCase() + typeStr.slice(1);\n    }\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // Question text (pre-fill if available)\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n\n      // For select types, show options\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        html += '<label>Question Options</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div></div>';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (capitalized)\n      const capitalizedType = capitalizeType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + capitalizedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        420
      ],
      "id": "8248955a-6026-46af-a85c-90bc19860acc",
      "name": "Code10"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required === \"Yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  switch (question.QuestionType) {\n    case 'Text':\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'SingleSelect': {\n      // Split comma-separated options and trim whitespace\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      // For radio groups, typically only one can be selected\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'MultiSelect': {\n      // Split comma-separated options and trim whitespace\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      // If required, put 'required' on the first checkbox to force at least one selection\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'Date':\n      // A simple date picker\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    default:\n      // Fallback: simple text input\n      answerHtml = `\n        <input type=\"text\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    const totalSteps = ${totalSteps};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Set the QR code to the current URL\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(window.location.href);\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      const form = document.getElementById('multiStepForm');\n      const formData = new FormData(form);\n      const formObject = {};\n      for (let [key, value] of formData.entries()) {\n        if (formObject[key]) {\n          if (Array.isArray(formObject[key])) {\n            formObject[key].push(value);\n          } else {\n            formObject[key] = [formObject[key], value];\n          }\n        } else {\n          formObject[key] = value;\n        }\n      }\n\n      // Add URL query parameters to the payload\n      const urlParams = new URLSearchParams(window.location.search);\n      const queryParams = {};\n      for (const [key, value] of urlParams.entries()) {\n        queryParams[key] = value;\n      }\n      formObject.queryParams = queryParams;\n\n      // Add ticket system name\n      formObject.ticketSystem = \"${questions[0].TicketSystem}\";\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formObject),\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        form.reset();\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        -580
      ],
      "id": "26bb3113-c677-4b31-99c3-2078e24d8b56",
      "name": "Code11"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleSelect\">SingleSelect</option>\n          <option value=\"multiSelect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'Selection';\n        case 'multiselect':\n          return 'MutilSelection';\n        case 'date':\n          return 'DateSelector';\n        default:\n          return lowerType.charAt(0).toUpperCase() + lowerType.slice(1);\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // On form submit, create per-question hidden inputs for taskTitle and taskTag\n      ticketForm.addEventListener('submit', function(e) {\n        const questionCards = document.querySelectorAll('.question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MutilSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        440
      ],
      "id": "262a97b2-7be6-4bd4-b8b3-1ad42f5b62ab",
      "name": "Code12"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first checkbox to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    const totalSteps = ${totalSteps};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Set the QR code to the current URL\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(window.location.href);\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      const form = document.getElementById('multiStepForm');\n      const formData = new FormData(form);\n      const formObject = {};\n      for (let [key, value] of formData.entries()) {\n        if (formObject[key]) {\n          if (Array.isArray(formObject[key])) {\n            formObject[key].push(value);\n          } else {\n            formObject[key] = [formObject[key], value];\n          }\n        } else {\n          formObject[key] = value;\n        }\n      }\n\n      // Add URL query parameters to the payload\n      const urlParams = new URLSearchParams(window.location.search);\n      const queryParams = {};\n      for (const [key, value] of urlParams.entries()) {\n        queryParams[key] = value;\n      }\n      formObject.queryParams = queryParams;\n\n      // Add ticket system name\n      formObject.ticketSystem = \"${questions[0].TicketSystem}\";\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formObject),\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        form.reset();\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        -620
      ],
      "id": "46b25fd8-5362-4731-8d8b-387f660e5d61",
      "name": "Code13"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'Selection';\n        case 'multiselect':\n          return 'MultiSelection';\n        case 'date':\n          return 'DateSelector';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType.charAt(0).toUpperCase() + lowerType.slice(1);\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // On form submit, create per-question hidden inputs for taskTitle and taskTag\n      ticketForm.addEventListener('submit', function(e) {\n        const questionCards = document.querySelectorAll('.question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        460
      ],
      "id": "f3d7129f-8e43-44f0-9635-02e049b05ed3",
      "name": "Code14"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first checkbox to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    case 'attachment':\n      // Display the question as normal (textarea) plus a button to upload multiple attachments\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n        <br/>\n        <button type=\"button\" onclick=\"document.getElementById('${fieldId}_file').click();\">Upload Attachments</button>\n        <input type=\"file\" id=\"${fieldId}_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange('${fieldId}', this)\">\n        <div id=\"${fieldId}_display\" class=\"attachment-display\"></div>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    const totalSteps = ${totalSteps};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Set the QR code to the current URL\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(window.location.href);\n\n    // Helper function to filter and display unique attachments for a given question field\n    function handleAttachmentChange(fieldId, inputElem) {\n      const files = inputElem.files;\n      const uniqueFiles = {};\n      const fileArray = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (!uniqueFiles[file.name]) {\n          uniqueFiles[file.name] = true;\n          fileArray.push(file);\n        }\n      }\n      window.uniqueAttachments = window.uniqueAttachments || {};\n      window.uniqueAttachments[fieldId] = fileArray;\n      const displayElem = document.getElementById(fieldId + '_display');\n      if (displayElem) {\n        displayElem.textContent = fileArray.map(file => file.name).join(', ');\n      }\n    }\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      const form = document.getElementById('multiStepForm');\n      const formData = new FormData(form);\n\n      // Append unique attachment files (if any) as binary data\n      if (window.uniqueAttachments) {\n        for (const field in window.uniqueAttachments) {\n          window.uniqueAttachments[field].forEach(file => {\n            formData.append(field, file);\n          });\n        }\n      }\n\n      // Add URL query parameters to the payload\n      const urlParams = new URLSearchParams(window.location.search);\n      for (const [key, value] of urlParams.entries()) {\n        formData.append(key, value);\n      }\n      // Add ticket system name\n      formData.append('ticketSystem', \"${questions[0].TicketSystem}\");\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        form.reset();\n        window.uniqueAttachments = {}; // Clear stored attachments\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        820,
        -540
      ],
      "id": "cb1591c5-f673-488b-aef7-cf92f78514c1",
      "name": "Code15"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first checkbox to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    case 'attachment':\n      // Display the question as normal (textarea) plus a button to upload multiple attachments\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n        <br/>\n        <button type=\"button\" onclick=\"document.getElementById('${fieldId}_file').click();\">Upload Attachments</button>\n        <input type=\"file\" id=\"${fieldId}_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange('${fieldId}', this)\">\n        <div id=\"${fieldId}_display\" class=\"attachment-display\"></div>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Inject the questions array into the client-side script.\n    const totalSteps = ${totalSteps};\n    const questions = ${JSON.stringify(questions)};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Set the QR code to the current URL\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(window.location.href);\n\n    // Helper function to filter and display unique attachments for a given question field\n    function handleAttachmentChange(fieldId, inputElem) {\n      const files = inputElem.files;\n      const uniqueFiles = {};\n      const fileArray = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (!uniqueFiles[file.name]) {\n          uniqueFiles[file.name] = true;\n          fileArray.push(file);\n        }\n      }\n      window.uniqueAttachments = window.uniqueAttachments || {};\n      window.uniqueAttachments[fieldId] = fileArray;\n      const displayElem = document.getElementById(fieldId + '_display');\n      if (displayElem) {\n        displayElem.textContent = fileArray.map(file => file.name).join(', ');\n      }\n    }\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      const form = document.getElementById('multiStepForm');\n      const formData = new FormData(form);\n\n      // Append questions data in the requested format\n      questions.forEach((q, i) => {\n        formData.append(\\`questions[\\${i}][question]\\`, q.Question);\n        formData.append(\\`questions[\\${i}][required]\\`, (q.Required && q.Required.toLowerCase() === \"yes\") ? \"Yes\" : \"No\");\n\n        let typeStr = \"\";\n        switch ((q.QuestionType || \"text\").toLowerCase()) {\n          case 'text':\n            typeStr = \"Longtext\";\n            break;\n          case 'attachment':\n            typeStr = \"Attachment\";\n            break;\n          case 'singleselect':\n          case 'multiselect':\n            typeStr = \"Selection\";\n            break;\n          default:\n            typeStr = \"Longtext\";\n        }\n        formData.append(\\`questions[\\${i}][type]\\`, typeStr);\n        formData.append(\\`questions[\\${i}][taskTitle]\\`, \"[empty]\");\n        formData.append(\\`questions[\\${i}][taskTag]\\`, \"[empty]\");\n\n        // If the question is of selection type and has options, add each option\n        if (\n          q.QuestionType &&\n          (q.QuestionType.toLowerCase() === \"singleselect\" || q.QuestionType.toLowerCase() === \"multiselect\") &&\n          q.QuestionOptions\n        ) {\n          const opts = q.QuestionOptions.split(',').map(o => o.trim());\n          opts.forEach((option, index) => {\n            formData.append(\\`questions[\\${i}][options][\\${index}]\\`, option);\n          });\n        }\n      });\n\n      // Append unique attachment files (if any) as binary data\n      if (window.uniqueAttachments) {\n        for (const field in window.uniqueAttachments) {\n          window.uniqueAttachments[field].forEach(file => {\n            formData.append(field, file);\n          });\n        }\n      }\n\n      // Add URL query parameters to the payload\n      const urlParams = new URLSearchParams(window.location.search);\n      for (const [key, value] of urlParams.entries()) {\n        formData.append(key, value);\n      }\n      // Add ticket system name\n      formData.append('ticketSystem', \"${questions[0].TicketSystem}\");\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        form.reset();\n        window.uniqueAttachments = {}; // Clear stored attachments\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        -420
      ],
      "id": "ebda31af-5ce6-4c52-9744-5faf6efd755c",
      "name": "Code16"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first checkbox to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    case 'attachment':\n      // Display the question as normal (textarea) plus a button to upload multiple attachments\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n        <br/>\n        <button type=\"button\" onclick=\"document.getElementById('${fieldId}_file').click();\">Upload Attachments</button>\n        <input type=\"file\" id=\"${fieldId}_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange('${fieldId}', this)\">\n        <div id=\"${fieldId}_display\" class=\"attachment-display\"></div>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Inject the questions array into the client-side script.\n    const totalSteps = ${totalSteps};\n    const questions = ${JSON.stringify(questions)};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Set the QR code to the current URL\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(window.location.href);\n\n    // Helper function to filter and display unique attachments for a given question field\n    function handleAttachmentChange(fieldId, inputElem) {\n      const files = inputElem.files;\n      const uniqueFiles = {};\n      const fileArray = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (!uniqueFiles[file.name]) {\n          uniqueFiles[file.name] = true;\n          fileArray.push(file);\n        }\n      }\n      window.uniqueAttachments = window.uniqueAttachments || {};\n      window.uniqueAttachments[fieldId] = fileArray;\n      const displayElem = document.getElementById(fieldId + '_display');\n      if (displayElem) {\n        displayElem.textContent = fileArray.map(file => file.name).join(', ');\n      }\n    }\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      const form = document.getElementById('multiStepForm');\n      const formData = new FormData(form);\n\n      // Append questions meta-data along with each answer\n      questions.forEach((q, i) => {\n        formData.append(\\`questions[\\${i}][question]\\`, q.Question);\n        formData.append(\\`questions[\\${i}][required]\\`, (q.Required && q.Required.toLowerCase() === \"yes\") ? \"Yes\" : \"No\");\n\n        let typeStr = \"\";\n        switch ((q.QuestionType || \"text\").toLowerCase()) {\n          case 'text':\n            typeStr = \"Longtext\";\n            break;\n          case 'attachment':\n            typeStr = \"Attachment\";\n            break;\n          case 'singleselect':\n          case 'multiselect':\n            typeStr = \"Selection\";\n            break;\n          default:\n            typeStr = \"Longtext\";\n        }\n        formData.append(\\`questions[\\${i}][type]\\`, typeStr);\n        formData.append(\\`questions[\\${i}][taskTitle]\\`, \"[empty]\");\n        formData.append(\\`questions[\\${i}][taskTag]\\`, \"[empty]\");\n\n        // Get the answer from the form element with name \"question_\" + q.Id\n        const elems = document.getElementsByName(\"question_\" + q.Id);\n        let answer = \"\";\n        if (elems.length > 0) {\n          if (elems[0].type === \"radio\") {\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                answer = elems[j].value;\n                break;\n              }\n            }\n          } else if (elems[0].type === \"checkbox\") {\n            const arr = [];\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                arr.push(elems[j].value);\n              }\n            }\n            answer = arr.join(\", \");\n          } else {\n            answer = elems[0].value;\n          }\n        }\n        formData.append(\\`questions[\\${i}][answer]\\`, answer);\n\n        // If the question is of selection type and has options, add each option\n        if (\n          q.QuestionType &&\n          (q.QuestionType.toLowerCase() === \"singleselect\" || q.QuestionType.toLowerCase() === \"multiselect\") &&\n          q.QuestionOptions\n        ) {\n          const opts = q.QuestionOptions.split(',').map(o => o.trim());\n          opts.forEach((option, index) => {\n            formData.append(\\`questions[\\${i}][options][\\${index}]\\`, option);\n          });\n        }\n      });\n\n      // Append unique attachment files (if any) as binary data\n      if (window.uniqueAttachments) {\n        for (const field in window.uniqueAttachments) {\n          window.uniqueAttachments[field].forEach(file => {\n            formData.append(field, file);\n          });\n        }\n      }\n\n      // Add URL query parameters to the payload\n      const urlParams = new URLSearchParams(window.location.search);\n      for (const [key, value] of urlParams.entries()) {\n        formData.append(key, value);\n      }\n      // Add system and ticket system information\n      formData.append('system', \"OPS\");\n      formData.append('ticketSystem', \"${questions[0].TicketSystem}\");\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        form.reset();\n        window.uniqueAttachments = {}; // Clear stored attachments\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        -240
      ],
      "id": "720f7f67-e9ef-4a17-93ea-224e5a877b92",
      "name": "Code17"
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectURL": "=https://xl.epicpc.com/webhook/514a4954-d74e-4183-9694-94d76671c483?system={{ $('Webhook2').item.json.body.title }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1400,
        960
      ],
      "id": "77fe0c13-ff7b-4c2d-b4a1-0029a622f76b",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n          return 'DateSelector';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // On form submit, create per-question hidden inputs for taskTitle and taskTag\n      ticketForm.addEventListener('submit', function(e) {\n        const questionCards = document.querySelectorAll('.question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        640
      ],
      "id": "442476bf-200e-40c4-bd9d-d142188155ca",
      "name": "Code18"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node\n *\n * Example usage:\n *  - Connect an HTTP Request node (listening for a webhook)\n *  - Pass the incoming data to this Code node\n *  - The output of this node will have the structured JSON\n */\n\nreturn items.map((item) => {\n  const body = item.json.body || {};\n  const headers = item.json.headers || {};\n\n  // 1) Get user from the referer\n  //    Example referer: \n  //    \"https://xl.epicpc.com/webhook/abc123?system=Turbo%20Ticketing&user=tstilwell%40epichs.org\"\n  let userFromReferer = \"UnknownUser\";\n  try {\n    const referer = headers.referer || \"\";\n    const urlObj = new URL(referer);\n    userFromReferer = urlObj.searchParams.get(\"user\") || \"UnknownUser\";\n  } catch (error) {\n    // If referer isn't a valid URL or there's no user param, fallback remains \"UnknownUser\"\n  }\n\n  // 2) Determine the ticketSystem\n  const ticketSystem = body.ticketSystem || body.system || \"N/A\";\n\n  // 3) Collect question/answer pairs and detect any non-\"[empty]\" taskTitle\n  const questionsMap = {};\n  for (const key of Object.keys(body)) {\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(question|answer|taskTitle)\\]$/);\n    if (match) {\n      const index = match[1];\n      const field = match[2];\n      if (!questionsMap[index]) {\n        questionsMap[index] = {};\n      }\n      questionsMap[index][field] = body[key];\n    }\n  }\n\n  let taskDescription = \"\";\n  let taskTitleParts = [];\n\n  // Sort by question index so we preserve order\n  const sortedIndices = Object.keys(questionsMap).sort((a, b) => parseInt(a) - parseInt(b));\n\n  for (const idx of sortedIndices) {\n    const q = questionsMap[idx];\n    const questionText = q.question || \"\";\n    const answerText = q.answer || \"\";\n\n    // Build TaskDescription line by line\n    taskDescription += `${questionText}: ${answerText}\\n`;\n\n    // If there's a valid taskTitle, collect it\n    if (q.taskTitle && q.taskTitle !== \"[empty]\") {\n      taskTitleParts.push(q.taskTitle);\n    }\n  }\n\n  // 4) Determine final TaskTitle\n  let taskTitle = taskTitleParts.join(\" - \");\n  if (!taskTitle) {\n    // Fallback if no non-\"[empty]\" titles found\n    taskTitle = `${userFromReferer} | ${ticketSystem}`;\n  }\n\n  // 5) Set Tag to [userFromReferer]\n  const tag = [userFromReferer];\n\n  // 6) Requestor is userFromReferer\n  const requestor = userFromReferer;\n\n  // Return final structured data\n  return {\n    json: {\n      TicketSystem: ticketSystem,\n      TaskTitle: taskTitle,\n      TaskDescription: taskDescription.trim(),\n      Tag: tag,\n      Requestor: requestor,\n    },\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        320
      ],
      "id": "bbaa6213-49c1-4608-95a2-51739b6d7b3b",
      "name": "Code19"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pwvejbwcowen0as",
        "table": "m20mdlv9rgbjski",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "TicketSystem",
              "fieldValue": "={{ $json.TicketSystem }}"
            },
            {
              "fieldName": "TaskTitle",
              "fieldValue": "={{ $json.TaskTitle }}"
            },
            {
              "fieldName": "TaskDescription",
              "fieldValue": "={{ $json.TaskDescription }}"
            },
            {
              "fieldName": "Requestor",
              "fieldValue": "={{ $json.Requestor }}"
            },
            {
              "fieldName": "Status",
              "fieldValue": "Active"
            },
            {
              "fieldName": "TicketSystemId",
              "fieldValue": "={{ $('Webhook1').item.json.body.ticketSystemId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        400,
        320
      ],
      "id": "bc6fdf1c-8826-445c-8665-56f0a33436de",
      "name": "NocoDB5",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // On form submit, create per-question hidden inputs for taskTitle and taskTag\n      ticketForm.addEventListener('submit', function(e) {\n        const questionCards = document.querySelectorAll('.question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        640
      ],
      "id": "c28cf7fb-7d9d-4f81-9288-f82e470f9b5a",
      "name": "Code20"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // On form submit, create per-question hidden inputs for taskTitle and taskTag\n      ticketForm.addEventListener('submit', function(e) {\n        const questionCards = document.querySelectorAll('.question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1540,
        660
      ],
      "id": "8bade114-aff7-4158-91ff-27ef92ff7fbd",
      "name": "Code21"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n    /* Modal overlay styling */\n    #modalOverlay {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.5);\n      z-index: 1000;\n      justify-content: center;\n      align-items: center;\n    }\n    #modalOverlay > div {\n      background: #fff;\n      padding: 20px;\n      border-radius: 8px;\n      text-align: center;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <!-- Modal overlay for success message -->\n  <div id=\"modalOverlay\">\n    <div>\n      <p>\n        Success! Please click ok to refresh the page to make any more edits. Or, just closes this page, thank you!\n      </p>\n      <button id=\"modalOkBtn\">OK</button>\n    </div>\n  </div>\n\n  <script>\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // Handle form submission via AJAX (using fetch)\n      ticketForm.addEventListener('submit', function(e) {\n        e.preventDefault();\n\n        // Create per-question hidden inputs for taskTitle and taskTag\n        const questionCards = document.querySelectorAll('.question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n\n        // Submit the form using fetch\n        const formData = new FormData(ticketForm);\n        fetch(ticketForm.action, {\n          method: ticketForm.method,\n          body: formData\n        })\n        .then(response => {\n          if (response.ok) {\n            showSuccessPopup();\n          } else {\n            alert(\"Submission failed. Please try again.\");\n          }\n        })\n        .catch(error => {\n          console.error(\"Error during submission:\", error);\n          alert(\"Submission error. Please try again.\");\n        });\n      });\n\n      // Attach event to the modal OK button to refresh the page\n      document.getElementById('modalOkBtn').addEventListener('click', function() {\n        location.reload();\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n\n    // Function to display the modal popup on success\n    function showSuccessPopup() {\n      document.getElementById('modalOverlay').style.display = 'flex';\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        480
      ],
      "id": "0bf1dc43-46d9-4ca5-a135-12c21ae08f16",
      "name": "Code22"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first checkbox to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    case 'attachment':\n      // Display the question as normal (textarea) plus a button to upload multiple attachments\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n        <br/>\n        <button type=\"button\" onclick=\"document.getElementById('${fieldId}_file').click();\">Upload Attachments</button>\n        <input type=\"file\" id=\"${fieldId}_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange('${fieldId}', this)\">\n        <div id=\"${fieldId}_display\" class=\"attachment-display\"></div>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Inject the questions array into the client-side script.\n    const totalSteps = ${totalSteps};\n    const questions = ${JSON.stringify(questions)};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Set the QR code to the current URL\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(window.location.href);\n\n    // Helper function to filter and display unique attachments for a given question field\n    function handleAttachmentChange(fieldId, inputElem) {\n      const files = inputElem.files;\n      const uniqueFiles = {};\n      const fileArray = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (!uniqueFiles[file.name]) {\n          uniqueFiles[file.name] = true;\n          fileArray.push(file);\n        }\n      }\n      window.uniqueAttachments = window.uniqueAttachments || {};\n      window.uniqueAttachments[fieldId] = fileArray;\n      const displayElem = document.getElementById(fieldId + '_display');\n      if (displayElem) {\n        displayElem.textContent = fileArray.map(file => file.name).join(', ');\n      }\n    }\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      // Create a new FormData object (omitting the raw form inputs)\n      const formData = new FormData();\n      \n      // Append ticketSystem at the top\n      formData.append('ticketSystem', \"${questions[0].TicketSystem}\");\n      \n      // Append questions meta-data along with each answer\n      questions.forEach((q, i) => {\n        formData.append(\\`questions[\\${i}][question]\\`, q.Question);\n        formData.append(\\`questions[\\${i}][required]\\`, (q.Required && q.Required.toLowerCase() === \"yes\") ? \"Yes\" : \"No\");\n\n        let typeStr = \"\";\n        switch ((q.QuestionType || \"text\").toLowerCase()) {\n          case 'text':\n            typeStr = \"Longtext\";\n            break;\n          case 'attachment':\n            typeStr = \"Attachment\";\n            break;\n          case 'singleselect':\n          case 'multiselect':\n            typeStr = \"Selection\";\n            break;\n          default:\n            typeStr = \"Longtext\";\n        }\n        formData.append(\\`questions[\\${i}][type]\\`, typeStr);\n        formData.append(\\`questions[\\${i}][taskTitle]\\`, \"[empty]\");\n        formData.append(\\`questions[\\${i}][taskTag]\\`, \"[empty]\");\n\n        // Get the answer from the form element with name \"question_\" + q.Id\n        const elems = document.getElementsByName(\"question_\" + q.Id);\n        let answer = \"\";\n        if (elems.length > 0) {\n          if (elems[0].type === \"radio\") {\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                answer = elems[j].value;\n                break;\n              }\n            }\n          } else if (elems[0].type === \"checkbox\") {\n            const arr = [];\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                arr.push(elems[j].value);\n              }\n            }\n            answer = arr.join(\", \");\n          } else {\n            answer = elems[0].value;\n          }\n        }\n        formData.append(\\`questions[\\${i}][answer]\\`, answer);\n\n        // If the question is of selection type and has options, add each option\n        if (\n          q.QuestionType &&\n          (q.QuestionType.toLowerCase() === \"singleselect\" || q.QuestionType.toLowerCase() === \"multiselect\") &&\n          q.QuestionOptions\n        ) {\n          const opts = q.QuestionOptions.split(',').map(o => o.trim());\n          opts.forEach((option, index) => {\n            formData.append(\\`questions[\\${i}][options][\\${index}]\\`, option);\n          });\n        }\n      });\n\n      // Append unique attachment files (if any) as binary data\n      if (window.uniqueAttachments) {\n        for (const field in window.uniqueAttachments) {\n          window.uniqueAttachments[field].forEach(file => {\n            formData.append(field, file);\n          });\n        }\n      }\n\n      // Append URL query parameters to the payload\n      const urlParams = new URLSearchParams(window.location.search);\n      for (const [key, value] of urlParams.entries()) {\n        formData.append(key, value);\n      }\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        document.getElementById('multiStepForm').reset();\n        window.uniqueAttachments = {}; // Clear stored attachments\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1260,
        -240
      ],
      "id": "a05bdaf9-90e3-49d4-96d0-34353255e0a7",
      "name": "Code23"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ehs.unitycarecrm.com/rest/19/oqk9f0x6y0kopjiq/tasks.task.add.json",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"fields\": {\n       \"TITLE\": \"{{ $json.TaskTitle }}\",\n       \"GROUP_ID\": {{ $('Webhook1').item.json.body.Bitrix24Project }},\n       \"RESPONSIBLE_ID\": \"19\",\n       \"DESCRIPTION\": {{ JSON.stringify($json.description) }},\n      \"TAGS\": [{{ $json.Tag }}]\n   }\n}\n",
        "options": {}
      },
      "id": "cd9ed588-7a6f-47ba-99fc-f40bd67bc95a",
      "name": "HTTP 24 Bitrix24 Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        400,
        200
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first checkbox to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    case 'attachment':\n      // Display the question as normal (textarea) plus a button to upload multiple attachments\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n        <br/>\n        <button type=\"button\" onclick=\"document.getElementById('${fieldId}_file').click();\">Upload Attachments</button>\n        <input type=\"file\" id=\"${fieldId}_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange('${fieldId}', this)\">\n        <div id=\"${fieldId}_display\" class=\"attachment-display\"></div>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Inject the questions array into the client-side script.\n    const totalSteps = ${totalSteps};\n    const questions = ${JSON.stringify(questions)};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Set the QR code to the current URL\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(window.location.href);\n\n    // Helper function to filter and display unique attachments for a given question field\n    function handleAttachmentChange(fieldId, inputElem) {\n      const files = inputElem.files;\n      const uniqueFiles = {};\n      const fileArray = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (!uniqueFiles[file.name]) {\n          uniqueFiles[file.name] = true;\n          fileArray.push(file);\n        }\n      }\n      window.uniqueAttachments = window.uniqueAttachments || {};\n      window.uniqueAttachments[fieldId] = fileArray;\n      const displayElem = document.getElementById(fieldId + '_display');\n      if (displayElem) {\n        displayElem.textContent = fileArray.map(file => file.name).join(', ');\n      }\n    }\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      // Create a new FormData object (omitting the raw form inputs)\n      const formData = new FormData();\n      \n      // Append ticketSystem at the top\n      formData.append('ticketSystem', \"${questions[0].TicketSystem}\");\n      // Append Bitrix24Project after TicketSystem\n      formData.append('Bitrix24Project', \"${questions[0].Bitrix24Project}\");\n      \n      // Append questions meta-data along with each answer\n      questions.forEach((q, i) => {\n        formData.append(\\`questions[\\${i}][question]\\`, q.Question);\n        formData.append(\\`questions[\\${i}][required]\\`, (q.Required && q.Required.toLowerCase() === \"yes\") ? \"Yes\" : \"No\");\n\n        let typeStr = \"\";\n        switch ((q.QuestionType || \"text\").toLowerCase()) {\n          case 'text':\n            typeStr = \"Longtext\";\n            break;\n          case 'attachment':\n            typeStr = \"Attachment\";\n            break;\n          case 'singleselect':\n          case 'multiselect':\n            typeStr = \"Selection\";\n            break;\n          default:\n            typeStr = \"Longtext\";\n        }\n        formData.append(\\`questions[\\${i}][type]\\`, typeStr);\n        formData.append(\\`questions[\\${i}][taskTitle]\\`, \"[empty]\");\n        formData.append(\\`questions[\\${i}][taskTag]\\`, \"[empty]\");\n\n        // Get the answer from the form element with name \"question_\" + q.Id\n        const elems = document.getElementsByName(\"question_\" + q.Id);\n        let answer = \"\";\n        if (elems.length > 0) {\n          if (elems[0].type === \"radio\") {\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                answer = elems[j].value;\n                break;\n              }\n            }\n          } else if (elems[0].type === \"checkbox\") {\n            const arr = [];\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                arr.push(elems[j].value);\n              }\n            }\n            answer = arr.join(\", \");\n          } else {\n            answer = elems[0].value;\n          }\n        }\n        formData.append(\\`questions[\\${i}][answer]\\`, answer);\n\n        // If the question is of selection type and has options, add each option\n        if (\n          q.QuestionType &&\n          (q.QuestionType.toLowerCase() === \"singleselect\" || q.QuestionType.toLowerCase() === \"multiselect\") &&\n          q.QuestionOptions\n        ) {\n          const opts = q.QuestionOptions.split(',').map(o => o.trim());\n          opts.forEach((option, index) => {\n            formData.append(\\`questions[\\${i}][options][\\${index}]\\`, option);\n          });\n        }\n      });\n\n      // Append unique attachment files (if any) as binary data\n      if (window.uniqueAttachments) {\n        for (const field in window.uniqueAttachments) {\n          window.uniqueAttachments[field].forEach(file => {\n            formData.append(field, file);\n          });\n        }\n      }\n\n      // Append URL query parameters to the payload\n      const urlParams = new URLSearchParams(window.location.search);\n      for (const [key, value] of urlParams.entries()) {\n        formData.append(key, value);\n      }\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        document.getElementById('multiStepForm').reset();\n        window.uniqueAttachments = {}; // Clear stored attachments\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1460,
        -240
      ],
      "id": "fc95d611-2322-4e90-95b3-c7377a2f6f71",
      "name": "Code24"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f2c76b72-a913-4e03-87d0-295c79c06460",
              "leftValue": "={{ $json.query.user }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -100,
        -200
      ],
      "id": "77ca926b-222d-4805-a838-912b3b992e14",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      background-color: #ffffff;\n      margin: 0;\n      padding: 40px;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 40px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      width: 100%;\n      max-width: 600px;\n    }\n    .label-container {\n      width: 100%;\n      margin-bottom: 8px;\n      text-align: left;\n    }\n    .input-container {\n      width: 100%;\n      margin-bottom: 20px;\n      text-align: left;\n    }\n    label {\n      font-size: 18px;\n    }\n    input[type=\"email\"] {\n      width: 100%;\n      max-width: 400px;\n      padding: 10px;\n      font-size: 16px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      margin-top: 8px;\n    }\n    .button-container {\n      width: 100%;\n      display: flex;\n      justify-content: flex-end;\n    }\n    button[type=\"submit\"] {\n      background-color: #000;\n      color: #fff;\n      padding: 10px 20px;\n      font-size: 16px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    button[type=\"submit\"]:hover {\n      background-color: #333;\n    }\n    .message {\n      text-align: center;\n      font-size: 18px;\n      margin-top: 30px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\" id=\"systemTitle\">Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"emailForm\">\n      <div class=\"label-container\">\n        <label for=\"emailInput\">Please enter your email:</label>\n      </div>\n      <div class=\"input-container\">\n        <input type=\"email\" id=\"emailInput\" name=\"email\" required />\n      </div>\n      <div class=\"button-container\">\n        <button type=\"submit\">Submit</button>\n      </div>\n    </form>\n  </div>\n  <script>\n    // Retrieve query parameters from the current URL.\n    const urlParams = new URLSearchParams(window.location.search);\n    const systemParam = urlParams.get('system') || 'Ticket System';\n    const user = urlParams.get('user');\n    \n    // Append \"Ticket\" to the system name\n    const pageTitle = systemParam + ' Ticket';\n\n    // Set the page title and header to \"{TicketSystem} Ticket\".\n    document.getElementById('systemTitle').textContent = pageTitle;\n    document.title = pageTitle;\n    \n    // If the \"user\" parameter already exists, hide the email form and display a message.\n    if (user) {\n      document.getElementById('emailForm').style.display = 'none';\n      const message = document.createElement('p');\n      message.className = 'message';\n      message.textContent = 'Email already provided.';\n      document.body.appendChild(message);\n    }\n    \n    // When the form is submitted, append the \"user\" parameter and reload the page.\n    document.getElementById('emailForm').addEventListener('submit', function(event) {\n      event.preventDefault();\n      const email = document.getElementById('emailInput').value;\n      urlParams.set('user', email);\n      // Redirect to the same URL with the new query parameter.\n      window.location.search = urlParams.toString();\n    });\n  </script>\n</body>\n</html>`\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        60,
        -300
      ],
      "id": "e699a864-003c-41af-b6be-9a5c7b9b31c7",
      "name": "Code25"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        -300
      ],
      "id": "f9d07c17-6e44-43da-9b1f-0bdfd3f7a88f",
      "name": "Respond to Webhook4"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node\n *\n * Processes incoming data to structure it as:\n * {\n *   TicketSystem,\n *   TaskTitle,\n *   TaskDescription,\n *   Tag,\n *   Requestor\n * }\n *\n * User is extracted from the referer URL query parameter \"user\"\n */\nreturn items.map((item) => {\n  const body = item.json.body || {};\n  const headers = item.json.headers || {};\n\n  // 1) Parse \"user\" from the referer URL using a regex\n  let userFromReferer = \"UnknownUser\";\n  if (headers.referer) {\n    const match = headers.referer.match(/[?&]user=([^&]+)/);\n    if (match && match[1]) {\n      userFromReferer = decodeURIComponent(match[1]);\n    }\n  }\n\n  // 2) Determine TicketSystem from body\n  const ticketSystem = body.ticketSystem || body.system || \"N/A\";\n\n  // 3) Gather all question/answer pairs and any non-\"[empty]\" taskTitle values\n  const questionsMap = {};\n  for (const key of Object.keys(body)) {\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(question|answer|taskTitle)\\]$/);\n    if (match) {\n      const index = match[1];\n      const field = match[2];\n      if (!questionsMap[index]) {\n        questionsMap[index] = {};\n      }\n      questionsMap[index][field] = body[key];\n    }\n  }\n\n  let taskDescription = \"\";\n  let taskTitleParts = [];\n\n  // Sort question indices numerically to preserve order\n  const sortedIndices = Object.keys(questionsMap).sort((a, b) => parseInt(a) - parseInt(b));\n  for (const idx of sortedIndices) {\n    const q = questionsMap[idx];\n    const questionText = q.question || \"\";\n    const answerText = q.answer || \"\";\n    taskDescription += `${questionText}: ${answerText}\\n`;\n\n    // Collect any non-\"[empty]\" taskTitle\n    if (q.taskTitle && q.taskTitle !== \"[empty]\") {\n      taskTitleParts.push(q.taskTitle);\n    }\n  }\n\n  // 4) Determine final TaskTitle\n  //    If no valid taskTitle parts, fallback to \"user | ticketSystem\"\n  let taskTitle = taskTitleParts.join(\" - \");\n  if (!taskTitle) {\n    taskTitle = `${userFromReferer} | ${ticketSystem}`;\n  }\n\n  // 5) Use the parsed user for Tag and Requestor\n  const tag = [userFromReferer];\n  const requestor = userFromReferer;\n\n  return {\n    json: {\n      TicketSystem: ticketSystem,\n      TaskTitle: taskTitle,\n      TaskDescription: taskDescription.trim(),\n      Tag: tag,\n      Requestor: requestor,\n    },\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        420
      ],
      "id": "44d1849a-8093-4e27-b8dd-ff3224999553",
      "name": "Code26"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // On form submit, create per-question hidden inputs for taskTitle and taskTag\n      ticketForm.addEventListener('submit', function(e) {\n        const questionCards = document.querySelectorAll('.question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const optionCount = optionsList.children.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      optionsList.appendChild(optionDiv);\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        560
      ],
      "id": "cdb7be02-1a1a-48af-8498-ea9668140b27",
      "name": "Code27"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n      cursor: move;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n\n    // Drag and drop event handlers for question cards\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n      }\n    }\n\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n    }\n\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n      });\n\n      // Event delegation for question cards\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // On form submit, create per-question hidden inputs for taskTitle and taskTag\n      ticketForm.addEventListener('submit', function(e) {\n        const questionCards = document.querySelectorAll('.question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n      // Make the card draggable and attach drag event listeners\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      // Build inner HTML\n      let html = \"\";\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text and add an \"Other\" option with a text field.\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        // Append the \"Other\" option with a text field.\n        html += '<div class=\"option-item other-option\">';\n        html += '<span>Other: </span>';\n        html += '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][otherOption]\" />';\n        html += '</div>';\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      // Calculate option index (ignoring the fixed \"Other\" option)\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      // Insert the new option before the fixed \"Other\" option.\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        420
      ],
      "id": "899218be-c96b-4b78-8f78-39c8218de072",
      "name": "Code28"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      position: relative;\n      cursor: move;\n      transition: border 0.2s ease;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n\n    // Drag and drop event handlers for question cards\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n\n    // Update order indicators and hidden order inputs for each card based on current DOM order.\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        // Update order indicator text (insert at top if not already present)\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        // Update or create hidden input for order\n        let orderInput = card.querySelector('input.order-hidden');\n        if (!orderInput) {\n          orderInput = document.createElement('input');\n          orderInput.type = 'hidden';\n          orderInput.name = 'questions[' + card.getAttribute('data-question-id') + '][order]';\n          orderInput.className = 'order-hidden';\n          card.appendChild(orderInput);\n        }\n        orderInput.value = index;\n      });\n    }\n\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n      updateOrderIndicators();\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n\n      // Event delegation for question cards and option buttons/toggles\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // Listen for change events on the toggle for including \"Other\" option\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            // If not present, add the \"Other\" option at the end.\n            if (!otherOption) {\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][otherOption]\" />';\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            // Remove the \"Other\" option if it exists.\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n\n      // On form submit, update order indicators to ensure new order is saved and add hidden taskTitle/tag inputs.\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators(); // update order before submission\n        const questionCards = document.querySelectorAll('#questionsContainer .question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n      // Make the card draggable and attach drag event listeners\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      // Start building inner HTML. Add a container for the order indicator.\n      let html = '<div class=\"order-indicator\"></div>';\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text.\n      // Also add a toggle checkbox for including the \"Other\" option.\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" checked /> Include \"Other\" Option</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(',').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        // Append the \"Other\" option by default if the toggle is checked.\n        html += '<div class=\"option-item other-option\">';\n        html += '<span>Other: </span>';\n        html += '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][otherOption]\" />';\n        html += '</div>';\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag (no names, as hidden inputs will be used)\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      // Calculate option index (ignoring the fixed \"Other\" option)\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      // Insert the new option before the fixed \"Other\" option.\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        280
      ],
      "id": "5381e4ca-31f7-4d65-b2cb-d76349f56b5f",
      "name": "Code29"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    /* Updated move button styling */\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    /* Container for toggles and move buttons */\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n\n    // Drag and drop event handlers for question cards\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n\n    // Update order indicators and hidden order inputs for each card based on current DOM order.\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        // Update order indicator text (insert at top if not already present)\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        // Update or create hidden input for order\n        let orderInput = card.querySelector('input.order-hidden');\n        if (!orderInput) {\n          orderInput = document.createElement('input');\n          orderInput.type = 'hidden';\n          orderInput.name = 'questions[' + card.getAttribute('data-question-id') + '][order]';\n          orderInput.className = 'order-hidden';\n          card.appendChild(orderInput);\n        }\n        orderInput.value = index;\n      });\n    }\n\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n      updateOrderIndicators();\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n\n      // Event delegation for question cards and option buttons/toggles\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // Listen for change events on the toggle for including \"Other\" option\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            // If not present, add the \"Other\" option at the end.\n            if (!otherOption) {\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][otherOption]\" />';\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            // Remove the \"Other\" option if it exists.\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n\n      // On form submit, update order indicators to ensure new order is saved and add hidden taskTitle/tag inputs.\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators(); // update order before submission\n        const questionCards = document.querySelectorAll('#questionsContainer .question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n      // Make the card draggable and attach drag event listeners\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      // Start building inner HTML. Add a container for the order indicator.\n      let html = '<div class=\"order-indicator\"></div>';\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text.\n      // Also add a toggle checkbox for including the \"Other\" option.\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" checked /> Include \"Other\" Option</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(\\',\\').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        // Append the \"Other\" option by default if the toggle is checked.\n        html += '<div class=\"option-item other-option\">';\n        html += '<span>Other: </span>';\n        html += '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][otherOption]\" />';\n        html += '</div>';\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag and move buttons inline.\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '  <button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>';\n      html += '  <button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      // Calculate option index (ignoring the fixed \"Other\" option)\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      // Insert the new option before the fixed \"Other\" option.\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        280
      ],
      "id": "a72b2c93-3696-45c2-a9d6-c62777b299ac",
      "name": "Code30"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative; /* Updated to ensure inner positioning */\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    /* Updated move button styling */\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    /* Container for toggles and move buttons */\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n\n    // Drag and drop event handlers for question cards\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n\n    // Update order indicators and hidden order inputs for each card based on current DOM order.\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        // Update order indicator text (insert at top if not already present)\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        // Update or create hidden input for order\n        let orderInput = card.querySelector('input.order-hidden');\n        if (!orderInput) {\n          orderInput = document.createElement('input');\n          orderInput.type = 'hidden';\n          orderInput.name = 'questions[' + card.getAttribute('data-question-id') + '][order]';\n          orderInput.className = 'order-hidden';\n          card.appendChild(orderInput);\n        }\n        orderInput.value = index;\n      });\n    }\n\n    // Helper: maps raw (case-insensitive) types to our standardized types.\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    // Embedded questions from the server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    // Pre-fill top-level fields from the first item\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Set the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n      updateOrderIndicators();\n\n      // Add new question on click\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        // Create an empty question card with the selected type\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n\n      // Event delegation for question cards and option buttons/toggles\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // Listen for change events on the toggle for including \"Other\" option\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            // If not present, add the \"Other\" option at the end.\n            if (!otherOption) {\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][otherOption]\" />';\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            // Remove the \"Other\" option if it exists.\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n\n      // On form submit, update order indicators to ensure new order is saved and add hidden taskTitle/tag inputs.\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators(); // update order before submission\n        const questionCards = document.querySelectorAll('#questionsContainer .question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Get toggle checkboxes\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n\n          // Remove any existing hidden inputs for these keys (if re-submitted)\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) {\n            existingTaskTitle.remove();\n          }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) {\n            existingTaskTag.remove();\n          }\n\n          // Create hidden input for taskTitle specific to this question\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n\n          // Create hidden input for taskTag specific to this question\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n        });\n      });\n    });\n\n    // Create a question card from question data\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n      // Make the card draggable and attach drag event listeners\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      // Start building inner HTML. Add a container for the order indicator.\n      let html = '<div class=\"order-indicator\"></div>';\n\n      // For the question prompt: if type is text, use a textarea for long text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with updated label text.\n      // Also add a toggle checkbox for including the \"Other\" option.\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" checked /> Include \"Other\" Option</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        if (questionData.QuestionOptions) {\n          const options = questionData.QuestionOptions.split(\\',\\').map(o => o.trim());\n          options.forEach((opt, idx) => {\n            html += '<div class=\"option-item\">';\n            html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n            html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n            html += '</div>';\n          });\n        }\n        // Append the \"Other\" option by default if the toggle is checked.\n        html += '<div class=\"option-item other-option\">';\n        html += '<span>Other: </span>';\n        html += '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][otherOption]\" />';\n        html += '</div>';\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date selector as a preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input as a preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      // Hidden input for question type (using our formatted mapping)\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      // Toggle checkboxes for taskTitle and taskTag and move buttons inline.\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '  <button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>';\n      html += '  <button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>';\n      html += '</div>';\n\n      // Remove question button\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    // Add a new option input for single/multi-select questions\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      // Calculate option index (ignoring the fixed \"Other\" option)\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      // Insert the new option before the fixed \"Other\" option.\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -500,
        280
      ],
      "id": "bfbe628f-d311-4d66-a1d4-ffceaef32ba6",
      "name": "Code31"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first radio to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        // If required, put 'required' on the first checkbox to force at least one selection\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        return `\n          <div class=\"option-container\">\n            <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n            <label for=\"${fieldId}_${index}\">${option}</label>\n          </div>\n        `;\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    case 'attachment':\n      // Display the question as normal (textarea) plus a button to upload multiple attachments\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n        <br/>\n        <button type=\"button\" onclick=\"document.getElementById('${fieldId}_file').click();\">Upload Attachments</button>\n        <input type=\"file\" id=\"${fieldId}_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange('${fieldId}', this)\">\n        <div id=\"${fieldId}_display\" class=\"attachment-display\"></div>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Inject the questions array into the client-side script.\n    const totalSteps = ${totalSteps};\n    const questions = ${JSON.stringify(questions)};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Build the QR code URL to include only the system data.\n    // This appends a \"system\" query parameter using the TicketSystem value.\n    const systemParam = \"${questions[0].TicketSystem}\";\n    const systemUrl = window.location.origin + window.location.pathname + \"?system=\" + encodeURIComponent(systemParam);\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(systemUrl);\n\n    // Helper function to filter and display unique attachments for a given question field\n    function handleAttachmentChange(fieldId, inputElem) {\n      const files = inputElem.files;\n      const uniqueFiles = {};\n      const fileArray = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (!uniqueFiles[file.name]) {\n          uniqueFiles[file.name] = true;\n          fileArray.push(file);\n        }\n      }\n      window.uniqueAttachments = window.uniqueAttachments || {};\n      window.uniqueAttachments[fieldId] = fileArray;\n      const displayElem = document.getElementById(fieldId + '_display');\n      if (displayElem) {\n        displayElem.textContent = fileArray.map(file => file.name).join(', ');\n      }\n    }\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      // Create a new FormData object (omitting the raw form inputs)\n      const formData = new FormData();\n      \n      // Append ticketSystem at the top\n      formData.append('ticketSystem', \"${questions[0].TicketSystem}\");\n      // Append Bitrix24Project after TicketSystem\n      formData.append('Bitrix24Project', \"${questions[0].Bitrix24Project}\");\n      \n      // Append questions meta-data along with each answer\n      questions.forEach((q, i) => {\n        formData.append(\\`questions[\\${i}][question]\\`, q.Question);\n        formData.append(\\`questions[\\${i}][required]\\`, (q.Required && q.Required.toLowerCase() === \"yes\") ? \"Yes\" : \"No\");\n\n        let typeStr = \"\";\n        switch ((q.QuestionType || \"text\").toLowerCase()) {\n          case 'text':\n            typeStr = \"Longtext\";\n            break;\n          case 'attachment':\n            typeStr = \"Attachment\";\n            break;\n          case 'singleselect':\n          case 'multiselect':\n            typeStr = \"Selection\";\n            break;\n          default:\n            typeStr = \"Longtext\";\n        }\n        formData.append(\\`questions[\\${i}][type]\\`, typeStr);\n        formData.append(\\`questions[\\${i}][taskTitle]\\`, \"[empty]\");\n        formData.append(\\`questions[\\${i}][taskTag]\\`, \"[empty]\");\n\n        // Get the answer from the form element with name \"question_\" + q.Id\n        const elems = document.getElementsByName(\"question_\" + q.Id);\n        let answer = \"\";\n        if (elems.length > 0) {\n          if (elems[0].type === \"radio\") {\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                answer = elems[j].value;\n                break;\n              }\n            }\n          } else if (elems[0].type === \"checkbox\") {\n            const arr = [];\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                arr.push(elems[j].value);\n              }\n            }\n            answer = arr.join(\", \");\n          } else {\n            answer = elems[0].value;\n          }\n        }\n        formData.append(\\`questions[\\${i}][answer]\\`, answer);\n\n        // If the question is of selection type and has options, add each option\n        if (\n          q.QuestionType &&\n          (q.QuestionType.toLowerCase() === \"singleselect\" || q.QuestionType.toLowerCase() === \"multiselect\") &&\n          q.QuestionOptions\n        ) {\n          const opts = q.QuestionOptions.split(',').map(o => o.trim());\n          opts.forEach((option, index) => {\n            formData.append(\\`questions[\\${i}][options][\\${index}]\\`, option);\n          });\n        }\n      });\n\n      // Append unique attachment files (if any) as binary data\n      if (window.uniqueAttachments) {\n        for (const field in window.uniqueAttachments) {\n          window.uniqueAttachments[field].forEach(file => {\n            formData.append(field, file);\n          });\n        }\n      }\n\n      // Append URL query parameters to the payload\n      const urlParams = new URLSearchParams(window.location.search);\n      for (const [key, value] of urlParams.entries()) {\n        formData.append(key, value);\n      }\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        document.getElementById('multiStepForm').reset();\n        window.uniqueAttachments = {}; // Clear stored attachments\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1480,
        -40
      ],
      "id": "3743a26f-fd56-4c91-8c0e-654bb49ca1d2",
      "name": "Code33"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node\n *\n * Processes incoming data to structure it as:\n * {\n *   TicketSystem,\n *   TaskTitle,\n *   TaskDescription,\n *   Tag,\n *   Requestor\n * }\n *\n * User is extracted from the referer URL query parameter \"user\"\n */\nreturn items.map((item) => {\n  const body = item.json.body || {};\n  const headers = item.json.headers || {};\n\n  // 1) Parse \"user\" from the referer URL using a regex\n  let userFromReferer = \"UnknownUser\";\n  if (headers.referer) {\n    const match = headers.referer.match(/[?&]user=([^&]+)/);\n    if (match && match[1]) {\n      userFromReferer = decodeURIComponent(match[1]);\n    }\n  }\n\n  // 2) Determine TicketSystem from body\n  const ticketSystem = body.ticketSystem || body.system || \"N/A\";\n\n  // 3) Gather all question/answer pairs and any non-\"[empty]\" taskTitle values\n  const questionsMap = {};\n  for (const key of Object.keys(body)) {\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(question|answer|taskTitle)\\]$/);\n    if (match) {\n      const index = match[1];\n      const field = match[2];\n      if (!questionsMap[index]) {\n        questionsMap[index] = {};\n      }\n      questionsMap[index][field] = body[key];\n    }\n  }\n\n  let taskDescription = \"\";\n  let taskTitleParts = [];\n\n  // Sort question indices numerically to preserve order\n  const sortedIndices = Object.keys(questionsMap).sort((a, b) => parseInt(a) - parseInt(b));\n  for (const idx of sortedIndices) {\n    const q = questionsMap[idx];\n    const questionText = q.question || \"\";\n    const answerText = q.answer || \"\";\n    taskDescription += `${questionText}: ${answerText}\\n`;\n\n    // Collect any non-\"[empty]\" taskTitle\n    if (q.taskTitle && q.taskTitle !== \"[empty]\") {\n      taskTitleParts.push(q.taskTitle);\n    }\n  }\n\n  // 4) Determine final TaskTitle\n  //    If no valid taskTitle parts, fallback to \"user | ticketSystem\"\n  let taskTitle = taskTitleParts.join(\" - \");\n  if (!taskTitle) {\n    taskTitle = `${userFromReferer} | ${ticketSystem}`;\n  }\n\n  // 5) Use the parsed user for Tag and Requestor\n  const tag = [userFromReferer];\n  const requestor = userFromReferer;\n\n  // Build the structured output object\n  const output = {\n    TicketSystem: ticketSystem,\n    TaskTitle: taskTitle,\n    TaskDescription: taskDescription.trim(),\n    Tag: tag,\n    Requestor: requestor,\n  };\n\n  // Create \"description\" by taking the TaskDescription lines and bolding the text before the first colon\n  let description = \"\";\n  const lines = output.TaskDescription.split(\"\\n\");\n  for (const line of lines) {\n    const parts = line.split(\":\");\n    if (parts.length > 1) {\n      // First part = question, rest = answer\n      const question = parts.shift().trim();\n      const answer = parts.join(\":\").trim();\n      description += `[b]${question}[/b]: ${answer}\\n`;\n    } else {\n      // If no colon, just append as-is\n      description += line + \"\\n\";\n    }\n  }\n\n  // Return the structured output plus our new Bitrix24-style description\n  return {\n    json: {\n      ...output,\n      description: description.trim(),\n    },\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        520
      ],
      "id": "21e95359-6c3c-421f-a77a-e9a7d1a20e01",
      "name": "Code32"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -600,
        780
      ],
      "id": "51f95dea-1b8f-4e43-8c6f-411d40774913",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        let orderInput = card.querySelector('input.order-hidden');\n        if (!orderInput) {\n          orderInput = document.createElement('input');\n          orderInput.type = 'hidden';\n          orderInput.name = 'questions[' + card.getAttribute('data-question-id') + '][order]';\n          orderInput.className = 'order-hidden';\n          card.appendChild(orderInput);\n        }\n        orderInput.value = index;\n      });\n    }\n\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n      updateOrderIndicators();\n\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // Listen for changes on the \"Include Other\" toggle\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            // Show the other option\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][options][' + nextIndex + ']\" />';\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            // Hide/remove the other option\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n\n      // Final form submit handler\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators();\n        const questionCards = document.querySelectorAll('#questionsContainer .question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Process taskTitle and taskTag\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) { existingTaskTitle.remove(); }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) { existingTaskTag.remove(); }\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n\n          // For singleselect/multiselect, process options\n          const typeHidden = card.querySelector('input[name=\"questions[' + questionId + '][type]\"]');\n          if (typeHidden && (typeHidden.value === 'singleselect' || typeHidden.value === 'multiselect')) {\n            // Title field\n            let existingTitle = card.querySelector('input[name=\"questions[' + questionId + '][title]\"]');\n            if (existingTitle) { existingTitle.remove(); }\n            const titleInput = document.createElement('input');\n            titleInput.type = 'hidden';\n            titleInput.name = 'questions[' + questionId + '][title]';\n            titleInput.value = textValue;\n            card.appendChild(titleInput);\n            \n            // Re-index non-other options\n            const optionsList = card.querySelector('.options-list');\n            let nonOtherCount = 0;\n            if (optionsList) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              nonOtherOptions.forEach((optionItem) => {\n                const input = optionItem.querySelector('input[type=\"text\"]');\n                if (input) {\n                  input.name = 'questions[' + questionId + '][options][' + nonOtherCount + ']';\n                  nonOtherCount++;\n                }\n              });\n              // If the other option is present, we always pass it as \"{other}\" \n              const otherOptionItem = optionsList.querySelector('.option-item.other-option');\n              if (otherOptionItem) {\n                const otherHidden = document.createElement('input');\n                otherHidden.type = 'hidden';\n                otherHidden.name = 'questions[' + questionId + '][options][' + nonOtherCount + ']';\n                otherHidden.value = '{other}';\n                card.appendChild(otherHidden);\n                // Remove the actual other option row\n                otherOptionItem.remove();\n              }\n            }\n          }\n        });\n      });\n    });\n\n    /**\n     * Create a question card from question data\n     * If \"{other}\" is found in the question's QuestionOptions,\n     * we remove it from the normal list and set a flag to check the \"Other\" toggle by default.\n     */\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      let html = '<div class=\"order-indicator\"></div>';\n\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with a toggleable \"Other\" option.\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n\n        // Convert questionData.QuestionOptions into an array, then filter out \"{other}\"\n        let initialOptions = [];\n        let hasOther = false;\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions.split(',').map(o => o.trim());\n          // Check if \"{other}\" is present\n          if (initialOptions.includes(\"{other}\")) {\n            hasOther = true;\n            // Remove \"{other}\" from the normal options\n            initialOptions = initialOptions.filter(opt => opt !== \"{other}\");\n          }\n        }\n\n        // If hasOther is true, we auto-check the \"Include Other\" toggle\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" ' + (hasOther ? 'checked' : '') + ' /> Include \"Other\" Option</label>';\n        \n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n\n        // Render the normal options\n        initialOptions.forEach((opt, idx) => {\n          html += '<div class=\"option-item\">';\n          html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n          html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n          html += '</div>';\n        });\n\n        // Render the special Other option row if hasOther is true (i.e., toggle is checked), else skip\n        const otherIndex = initialOptions.length;\n        if (hasOther) {\n          // \"Other\" row visible\n          html += '<div class=\"option-item other-option\">';\n          html += '<span>Other: </span>';\n          html += '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][options][' + otherIndex + ']\" />';\n          html += '</div>';\n        }\n        // If hasOther is false, the toggle is off => we won't show the other row initially. The user can toggle it on.\n\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date input preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '  <button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>';\n      html += '  <button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>';\n      html += '</div>';\n\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n      // Count current non-other options\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n\n      // Insert the new option before the \"other-option\" row if present\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -580,
        280
      ],
      "id": "12eaaa9f-83df-42b4-bb6c-506c50441ff5",
      "name": "Code34"
    },
    {
      "parameters": {
        "jsCode": "// Gather all incoming items\nconst items = $input.all();\n\n// We'll accumulate our final output items here\nconst output = [];\n\nfor (const item of items) {\n  const body = item.json.body || {};\n\n  // We'll store question data in a dictionary keyed by the question index (e.g. \"0\", \"1\", \"2\", ...)\n  const questionsDict = {};\n\n  // Iterate over each key in the body\n  for (const [key, value] of Object.entries(body)) {\n    // We only care about keys that match questions[<index>][<property>][<optional subIndex>]\n    // Examples:\n    //   questions[0][question]       -> match[1] = \"0\", match[2] = \"question\"\n    //   questions[1][options][2]    -> match[1] = \"1\", match[2] = \"options\", match[3] = \"2\"\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(.*?)\\](?:\\[(\\d+)\\])?$/);\n    if (!match) {\n      continue;\n    }\n\n    const questionIndex = match[1]; // e.g. \"1\"\n    const property = match[2];      // e.g. \"options\" or \"question\" or \"required\", etc.\n    const subIndex = match[3];      // e.g. \"2\" if present, otherwise undefined\n\n    // Ensure there's an object for this question index\n    if (!questionsDict[questionIndex]) {\n      questionsDict[questionIndex] = {\n        question: \"\",\n        required: \"\",\n        type: \"\",\n        options: []\n      };\n    }\n\n    // If property is \"options\", we might have multiple values (array-like)\n    if (property === \"options\") {\n      questionsDict[questionIndex].options.push(value);\n    } else {\n      // Otherwise, set the property directly\n      questionsDict[questionIndex][property] = value;\n    }\n  }\n\n  // Sort question indexes so we return them in the correct order\n  const sortedIndexes = Object.keys(questionsDict).sort((a, b) => parseInt(a) - parseInt(b));\n\n  // Build a new item per question\n  for (const idx of sortedIndexes) {\n    const q = questionsDict[idx];\n\n    // Join multiple options with commas\n    const optionsString = (q.options || []).join(\", \");\n\n    output.push({\n      json: {\n        title: body.title,\n        bitrix24ProjectId: body.bitrix24ProjectId,\n        owner: body.owner,\n        question: q.question,\n        required: q.required,\n        type: q.type,\n        options: optionsString\n      }\n    });\n  }\n}\n\n// Return one item per question\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        840,
        920
      ],
      "id": "406cd157-a8af-4e5e-9659-a6cb77afd404",
      "name": "Code35"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json).\nconst questionsArray = items.map(item => item.json);\n\n// Pull top-level fields from the first item, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || \"\";\n}\n\n// Determine TicketSystemId using the following priority:\n// 1. Use the TicketSystemId from a database record (if available and not \"null\")\n// 2. Else use the TicketSystemId from the webhook query (if available and not \"null\")\n// 3. Else use the Id of the first record with an Id property\nlet ticketSystemId = \"\";\nconst dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\") && item.TicketSystemId && item.TicketSystemId !== \"null\");\nif (dbRecord) {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const webhookTicketId = questionsArray[0].query && questionsArray[0].query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    const fallback = questionsArray.find(item => item.hasOwnProperty(\"Id\") && item.Id);\n    if (fallback) {\n      ticketSystemId = fallback.Id;\n    }\n  }\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project Id</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        let orderInput = card.querySelector('input.order-hidden');\n        if (!orderInput) {\n          orderInput = document.createElement('input');\n          orderInput.type = 'hidden';\n          orderInput.name = 'questions[' + card.getAttribute('data-question-id') + '][order]';\n          orderInput.className = 'order-hidden';\n          card.appendChild(orderInput);\n        }\n        orderInput.value = index;\n      });\n    }\n\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n      updateOrderIndicators();\n\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // Listen for changes on the \"Include Other\" toggle\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            // Show the other option\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][options][' + nextIndex + ']\" />';\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            // Hide/remove the other option\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n\n      // Final form submit handler\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators();\n        const questionCards = document.querySelectorAll('#questionsContainer .question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Process taskTitle and taskTag\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) { existingTaskTitle.remove(); }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) { existingTaskTag.remove(); }\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n\n          // For singleselect/multiselect, process options\n          const typeHidden = card.querySelector('input[name=\"questions[' + questionId + '][type]\"]');\n          if (typeHidden && (typeHidden.value === 'singleselect' || typeHidden.value === 'multiselect')) {\n            // Title field\n            let existingTitle = card.querySelector('input[name=\"questions[' + questionId + '][title]\"]');\n            if (existingTitle) { existingTitle.remove(); }\n            const titleInput = document.createElement('input');\n            titleInput.type = 'hidden';\n            titleInput.name = 'questions[' + questionId + '][title]';\n            titleInput.value = textValue;\n            card.appendChild(titleInput);\n            \n            // Re-index non-other options\n            const optionsList = card.querySelector('.options-list');\n            let nonOtherCount = 0;\n            if (optionsList) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              nonOtherOptions.forEach((optionItem) => {\n                const input = optionItem.querySelector('input[type=\"text\"]');\n                if (input) {\n                  input.name = 'questions[' + questionId + '][options][' + nonOtherCount + ']';\n                  nonOtherCount++;\n                }\n              });\n              // If the other option is present, we always pass it as \"{other}\" \n              const otherOptionItem = optionsList.querySelector('.option-item.other-option');\n              if (otherOptionItem) {\n                const otherHidden = document.createElement('input');\n                otherHidden.type = 'hidden';\n                otherHidden.name = 'questions[' + questionId + '][options][' + nonOtherCount + ']';\n                otherHidden.value = '{other}';\n                card.appendChild(otherHidden);\n                // Remove the actual other option row\n                otherOptionItem.remove();\n              }\n            }\n          }\n        });\n      });\n    });\n\n    /**\n     * Create a question card from question data\n     * If \"{other}\" is found in the question's QuestionOptions,\n     * we remove it from the normal list and set a flag to check the \"Other\" toggle by default.\n     */\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      let html = '<div class=\"order-indicator\"></div>';\n\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with a toggleable \"Other\" option.\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n\n        // Convert questionData.QuestionOptions into an array, then filter out \"{other}\"\n        let initialOptions = [];\n        let hasOther = false;\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions.split(',').map(o => o.trim());\n          // Check if \"{other}\" is present\n          if (initialOptions.includes(\"{other}\")) {\n            hasOther = true;\n            // Remove \"{other}\" from the normal options\n            initialOptions = initialOptions.filter(opt => opt !== \"{other}\");\n          }\n        }\n\n        // If hasOther is true, we auto-check the \"Include Other\" toggle\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" ' + (hasOther ? 'checked' : '') + ' /> Include \"Other\" Option</label>';\n        \n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n\n        // Render the normal options\n        initialOptions.forEach((opt, idx) => {\n          html += '<div class=\"option-item\">';\n          html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n          html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n          html += '</div>';\n        });\n\n        // Render the special Other option row if hasOther is true (i.e., toggle is checked), else skip\n        const otherIndex = initialOptions.length;\n        if (hasOther) {\n          // \"Other\" row visible\n          html += '<div class=\"option-item other-option\">';\n          html += '<span>Other: </span>';\n          html += '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][options][' + otherIndex + ']\" />';\n          html += '</div>';\n        }\n        // If hasOther is false, the toggle is off => we won\\'t show the other row initially. The user can toggle it on.\n\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date input preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '  <button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>';\n      html += '  <button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>';\n      html += '</div>';\n\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n      // Count current non-other options\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n\n      // Insert the new option before the \"other-option\" row if present\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -580,
        140
      ],
      "id": "a28c60a3-b52b-4c3e-ade0-24f2265f45a6",
      "name": "Code36"
    },
    {
      "parameters": {
        "jsCode": "// Take all incoming items (each item has item.json) and filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// Pull top-level fields from the first non-null record, if available.\nlet ticketSystemTitle = \"\";\nlet bitrix24ProjectId = \"\";\nlet owner = \"\";\nif (questionsArray.length > 0) {\n  ticketSystemTitle = questionsArray[0].TicketSystem || (questionsArray[0].query && questionsArray[0].query.system) || \"\";\n  bitrix24ProjectId = questionsArray[0].Bitrix24Project || \"\";\n  owner = questionsArray[0].Owner || (questionsArray[0].query && questionsArray[0].query.user) || \"\";\n}\n\n// Determine TicketSystemId using the following priority:\n// 1. Use the TicketSystemId from a database record (if available and not \"null\")\n// 2. Else use the TicketSystemId from the webhook query (if available and not \"null\")\n// 3. Else use the Id of the first record with an Id property\nlet ticketSystemId = \"\";\nconst dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\") && item.TicketSystemId && item.TicketSystemId !== \"null\");\nif (dbRecord) {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const webhookTicketId = questionsArray[0].query && questionsArray[0].query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    const fallback = questionsArray.find(item => item.hasOwnProperty(\"Id\") && item.Id);\n    if (fallback) {\n      ticketSystemId = fallback.Id;\n    }\n  }\n}\n\n// Build the HTML string\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        let orderInput = card.querySelector('input.order-hidden');\n        if (!orderInput) {\n          orderInput = document.createElement('input');\n          orderInput.type = 'hidden';\n          orderInput.name = 'questions[' + card.getAttribute('data-question-id') + '][order]';\n          orderInput.className = 'order-hidden';\n          card.appendChild(orderInput);\n        }\n        orderInput.value = index;\n      });\n    }\n\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          const questionCard = createQuestionCard(questionData, index);\n          questionsContainer.appendChild(questionCard);\n          questionCount = index + 1;\n        });\n      }\n      updateOrderIndicators();\n\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n\n      // Listen for changes on the \"Include Other\" toggle\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            // Show the other option\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][options][' + nextIndex + ']\" />';\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            // Hide/remove the other option\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n\n      // Final form submit handler\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators();\n        const questionCards = document.querySelectorAll('#questionsContainer .question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n\n          // Process taskTitle and taskTag\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) { existingTaskTitle.remove(); }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) { existingTaskTag.remove(); }\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n\n          // For singleselect/multiselect, process options\n          const typeHidden = card.querySelector('input[name=\"questions[' + questionId + '][type]\"]');\n          if (typeHidden && (typeHidden.value === 'singleselect' || typeHidden.value === 'multiselect')) {\n            // Title field\n            let existingTitle = card.querySelector('input[name=\"questions[' + questionId + '][title]\"]');\n            if (existingTitle) { existingTitle.remove(); }\n            const titleInput = document.createElement('input');\n            titleInput.type = 'hidden';\n            titleInput.name = 'questions[' + questionId + '][title]';\n            titleInput.value = textValue;\n            card.appendChild(titleInput);\n            \n            // Re-index non-other options\n            const optionsList = card.querySelector('.options-list');\n            let nonOtherCount = 0;\n            if (optionsList) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              nonOtherOptions.forEach((optionItem) => {\n                const input = optionItem.querySelector('input[type=\"text\"]');\n                if (input) {\n                  input.name = 'questions[' + questionId + '][options][' + nonOtherCount + ']';\n                  nonOtherCount++;\n                }\n              });\n              // If the other option is present, we always pass it as \"{other}\" \n              const otherOptionItem = optionsList.querySelector('.option-item.other-option');\n              if (otherOptionItem) {\n                const otherHidden = document.createElement('input');\n                otherHidden.type = 'hidden';\n                otherHidden.name = 'questions[' + questionId + '][options][' + nonOtherCount + ']';\n                otherHidden.value = '{other}';\n                card.appendChild(otherHidden);\n                // Remove the actual other option row\n                otherOptionItem.remove();\n              }\n            }\n          }\n        });\n      });\n    });\n\n    /**\n     * Create a question card from question data.\n     * If \"{other}\" is found in the question's QuestionOptions,\n     * we remove it from the normal list and set a flag to check the \"Other\" toggle by default.\n     */\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      let html = '<div class=\"order-indicator\"></div>';\n\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n\n      // For select types, show options with a toggleable \"Other\" option.\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        let optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n\n        // Convert questionData.QuestionOptions into an array, then filter out \"{other}\"\n        let initialOptions = [];\n        let hasOther = false;\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions.split(',').map(o => o.trim());\n          // Check if \"{other}\" is present\n          if (initialOptions.includes(\"{other}\")) {\n            hasOther = true;\n            // Remove \"{other}\" from the normal options\n            initialOptions = initialOptions.filter(opt => opt !== \"{other}\");\n          }\n        }\n\n        // If hasOther is true, auto-check the \"Include Other\" toggle\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" ' + (hasOther ? 'checked' : '') + ' /> Include \"Other\" Option</label>';\n        \n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n\n        // Render the normal options\n        initialOptions.forEach((opt, idx) => {\n          html += '<div class=\"option-item\">';\n          html += '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />';\n          html += '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>';\n          html += '</div>';\n        });\n\n        // Render the special Other option row if hasOther is true\n        const otherIndex = initialOptions.length;\n        if (hasOther) {\n          html += '<div class=\"option-item other-option\">';\n          html += '<span>Other: </span>';\n          html += '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][options][' + otherIndex + ']\" />';\n          html += '</div>';\n        }\n        html += '</div></div>';\n      }\n\n      // For date type, add a disabled date input preview\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n\n      // For attachment type, add a disabled file input preview\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n\n      // Required field\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>';\n      html += '<select name=\"questions[' + questionId + '][required]\">';\n      html += '  <option value=\"Yes\"' + (requiredValue === \"Yes\" ? \" selected\" : \"\") + '>Yes</option>';\n      html += '  <option value=\"No\"' + (requiredValue === \"No\" ? \" selected\" : \"\") + '>No</option>';\n      html += '</select>';\n\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n\n      html += '<div class=\"toggle-container\">';\n      html += '  <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>';\n      html += '  <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>';\n      html += '  <button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>';\n      html += '  <button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>';\n      html += '</div>';\n\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n      // Count current non-other options\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n\n      // Insert the new option before the \"other-option\" row if present\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the final HTML as output\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -700,
        140
      ],
      "id": "c5781bbf-7447-4337-b916-ec2cadde8a6e",
      "name": "Code37"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pwvejbwcowen0as",
        "table": "mn2c37f3xnlbre3",
        "returnAll": true,
        "options": {
          "where": "=(TicketSystemId,eq,{{ $json.query.TicketSystemId }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -840,
        1140
      ],
      "id": "feec6fb4-c81a-42a5-b564-32cac3766538",
      "name": "NocoDB6",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "7d8f4fce-21ae-43d1-a507-778353247abb",
              "leftValue": "={{ $json.query.TicketSystemId }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1120,
        1020
      ],
      "id": "d3f0e378-179a-4d42-966f-1f063ad3fa88",
      "name": "If2"
    },
    {
      "parameters": {
        "jsCode": "// 1) Filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// 2) Grab potential fallback values from the FIRST item (the webhook), if present.\nlet fallbackTitle = \"\";\nlet fallbackOwner = \"\";\nlet fallbackProject = \"\";\nif (questionsArray.length > 0) {\n  const firstItem = questionsArray[0];\n  // Title fallback from 'TicketSystem' or query 'system'\n  fallbackTitle = firstItem.TicketSystem || (firstItem.query && firstItem.query.system) || \"\";\n  // Owner fallback from 'Owner' or query 'user'\n  fallbackOwner = firstItem.Owner || (firstItem.query && firstItem.query.user) || \"\";\n  // If the first item had a Bitrix24Project, use it; otherwise empty\n  fallbackProject = firstItem.Bitrix24Project || \"\";\n}\n\n// 3) Find an actual \"database record\" that has an Id and a valid TicketSystemId.\nlet dbRecord = questionsArray.find(item =>\n  item.hasOwnProperty(\"Id\") &&\n  item.TicketSystemId &&\n  item.TicketSystemId !== \"null\"\n);\n\n// 4) Set final values for Title, Bitrix24Project, and Owner. If dbRecord exists, prefer its fields; otherwise use fallback.\nlet ticketSystemTitle = dbRecord ? (dbRecord.TicketSystem || fallbackTitle) : fallbackTitle;\nlet bitrix24ProjectId = dbRecord ? (dbRecord.Bitrix24Project || fallbackProject) : fallbackProject;\nlet owner = dbRecord ? (dbRecord.Owner || fallbackOwner) : fallbackOwner;\n\n// 5) Determine TicketSystemId with existing priority logic.\nlet ticketSystemId = \"\";\nif (dbRecord) {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const firstItem = questionsArray[0] || {};\n  const webhookTicketId = firstItem.query && firstItem.query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    const fallback = questionsArray.find(item => item.hasOwnProperty(\"Id\") && item.Id);\n    if (fallback) {\n      ticketSystemId = fallback.Id;\n    }\n  }\n}\n\n// 6) Build the HTML string.\nconst html = '<!DOCTYPE html>\\n' +\n'<html lang=\"en\">\\n' +\n'<head>\\n' +\n'  <meta charset=\"UTF-8\">\\n' +\n'  <title>Create a Ticket System</title>\\n' +\n'  <style>\\n' +\n'    body {\\n' +\n'      font-family: \"Trebuchet MS\", Arial, sans-serif;\\n' +\n'      font-size: 18px;\\n' +\n'      background-color: #ffffff;\\n' +\n'      color: #000000;\\n' +\n'      display: flex;\\n' +\n'      flex-direction: column;\\n' +\n'      align-items: center;\\n' +\n'      margin: 0;\\n' +\n'      padding: 20px 0;\\n' +\n'    }\\n' +\n'    .title {\\n' +\n'      font-size: 28px;\\n' +\n'      font-weight: bold;\\n' +\n'      margin-bottom: 20px;\\n' +\n'      padding: 10px 20px;\\n' +\n'      border: 2px solid #d3d3d3;\\n' +\n'      border-radius: 8px;\\n' +\n'      text-align: center;\\n' +\n'      background-color: #ffffff;\\n' +\n'    }\\n' +\n'    .form-container {\\n' +\n'      width: 90%;\\n' +\n'      max-width: 800px;\\n' +\n'      margin: 0 auto;\\n' +\n'      background-color: #ffffff;\\n' +\n'      padding: 20px;\\n' +\n'      border: 1px solid #ccc;\\n' +\n'      border-radius: 8px;\\n' +\n'    }\\n' +\n'    fieldset {\\n' +\n'      border: none;\\n' +\n'      margin: 0 0 20px 0;\\n' +\n'      padding: 0;\\n' +\n'    }\\n' +\n'    label {\\n' +\n'      display: block;\\n' +\n'      margin-bottom: 6px;\\n' +\n'      font-weight: bold;\\n' +\n'    }\\n' +\n'    input[type=\"text\"],\\n' +\n'    input[type=\"date\"],\\n' +\n'    select,\\n' +\n'    textarea,\\n' +\n'    input[type=\"file\"] {\\n' +\n'      width: 100%;\\n' +\n'      box-sizing: border-box;\\n' +\n'      padding: 8px;\\n' +\n'      border: 1px solid #ccc;\\n' +\n'      border-radius: 4px;\\n' +\n'      font-size: 1em;\\n' +\n'      margin-bottom: 12px;\\n' +\n'    }\\n' +\n'    textarea { resize: vertical; }\\n' +\n'    .order-indicator { font-size: 0.9em; color: #555; margin-bottom: 6px; }\\n' +\n'    .question-card {\\n' +\n'      border: 1px solid #ccc;\\n' +\n'      border-radius: 4px;\\n' +\n'      padding: 15px;\\n' +\n'      margin-bottom: 20px;\\n' +\n'      background-color: #fafafa;\\n' +\n'      cursor: move;\\n' +\n'      transition: border 0.2s ease;\\n' +\n'      position: relative;\\n' +\n'    }\\n' +\n'    .question-card.dragging { opacity: 0.5; border: 2px dashed #555; }\\n' +\n'    .question-card .remove-question-btn {\\n' +\n'      position: absolute;\\n' +\n'      top: 10px;\\n' +\n'      right: 10px;\\n' +\n'      background-color: #c00;\\n' +\n'      color: #fff;\\n' +\n'      border: none;\\n' +\n'      border-radius: 4px;\\n' +\n'      padding: 6px 10px;\\n' +\n'      cursor: pointer;\\n' +\n'      font-size: 0.8em;\\n' +\n'    }\\n' +\n'    .question-card .remove-question-btn:hover { background-color: #900; }\\n' +\n'    .move-btn {\\n' +\n'      background-color: white;\\n' +\n'      color: black;\\n' +\n'      border: 1px solid black;\\n' +\n'      padding: 6px 10px;\\n' +\n'      cursor: pointer;\\n' +\n'      font-size: 0.8em;\\n' +\n'    }\\n' +\n'    .move-btn:hover { background-color: #f0f0f0; }\\n' +\n'    .options-container { margin: 10px 0; }\\n' +\n'    .options-list { margin-top: 10px; }\\n' +\n'    .option-item {\\n' +\n'      display: flex;\\n' +\n'      align-items: center;\\n' +\n'      gap: 8px;\\n' +\n'      margin-bottom: 6px;\\n' +\n'    }\\n' +\n'    .option-item input[type=\"text\"] { flex: 1; }\\n' +\n'    .remove-option-btn {\\n' +\n'      background-color: #c00;\\n' +\n'      color: #fff;\\n' +\n'      border: none;\\n' +\n'      border-radius: 4px;\\n' +\n'      padding: 6px 10px;\\n' +\n'      cursor: pointer;\\n' +\n'      font-size: 0.8em;\\n' +\n'    }\\n' +\n'    .remove-option-btn:hover { background-color: #900; }\\n' +\n'    button {\\n' +\n'      background-color: #000000;\\n' +\n'      color: #ffffff;\\n' +\n'      padding: 12px 24px;\\n' +\n'      border: none;\\n' +\n'      border-radius: 4px;\\n' +\n'      cursor: pointer;\\n' +\n'      font-size: 0.9em;\\n' +\n'      transition: background-color 0.3s ease;\\n' +\n'      margin-right: 8px;\\n' +\n'    }\\n' +\n'    button:hover { background-color: #333333; }\\n' +\n'    .toggle-container {\\n' +\n'      display: flex;\\n' +\n'      align-items: center;\\n' +\n'      gap: 10px;\\n' +\n'      margin: 10px 0;\\n' +\n'    }\\n' +\n'    .toggle-container label { font-weight: normal; margin-bottom: 0; }\\n' +\n'  </style>\\n' +\n'</head>\\n' +\n'<body>\\n' +\n'  <div class=\"title\">Create a Ticket System</div>\\n' +\n'  <div class=\"form-container\">\\n' +\n'    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\\n' +\n'      <!-- Basic Info -->\\n' +\n'      <fieldset>\\n' +\n'        <label for=\"title\">Ticket System Title</label>\\n' +\n'        <input type=\"text\" id=\"title\" name=\"title\" required>\\n' +\n'\\n' +\n'        <label for=\"ticketSystemId\">Ticket System ID</label>\\n' +\n'        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\\n' +\n'\\n' +\n'        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\\n' +\n'        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\\n' +\n'\\n' +\n'        <label for=\"owner\">Owner</label>\\n' +\n'        <input type=\"text\" id=\"owner\" name=\"owner\">\\n' +\n'      </fieldset>\\n' +\n'\\n' +\n'      <!-- Container for all dynamically added questions -->\\n' +\n'      <div id=\"questionsContainer\"></div>\\n' +\n'\\n' +\n'      <!-- Add Question Section -->\\n' +\n'      <fieldset>\\n' +\n'        <legend>Add a Question</legend>\\n' +\n'        <select id=\"questionType\">\\n' +\n'          <option value=\"text\">Text</option>\\n' +\n'          <option value=\"singleselect\">SingleSelect</option>\\n' +\n'          <option value=\"multiselect\">MultiSelect</option>\\n' +\n'          <option value=\"date\">Date</option>\\n' +\n'          <option value=\"attachment\">Attachment</option>\\n' +\n'        </select>\\n' +\n'        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\\n' +\n'      </fieldset>\\n' +\n'\\n' +\n'      <button type=\"submit\">Submit</button>\\n' +\n'    </form>\\n' +\n'  </div>\\n' +\n'\\n' +\n'  <script>\\n' +\n'    // Global variable for drag and drop\\n' +\n'    let draggedElement = null;\\n' +\n'\\n' +\n'    function handleDragStart(e) {\\n' +\n'      draggedElement = e.currentTarget;\\n' +\n'      e.dataTransfer.effectAllowed = \\'move\\';\\n' +\n'      e.currentTarget.classList.add(\\'dragging\\');\\n' +\n'    }\\n' +\n'\\n' +\n'    function handleDragOver(e) {\\n' +\n'      e.preventDefault();\\n' +\n'      e.dataTransfer.dropEffect = \\'move\\';\\n' +\n'    }\\n' +\n'\\n' +\n'    function handleDrop(e) {\\n' +\n'      e.preventDefault();\\n' +\n'      const target = e.currentTarget;\\n' +\n'      if (draggedElement && target !== draggedElement) {\\n' +\n'        const container = document.getElementById(\\'questionsContainer\\');\\n' +\n'        const bounding = target.getBoundingClientRect();\\n' +\n'        const offset = e.clientY - bounding.top;\\n' +\n'        if (offset < bounding.height / 2) {\\n' +\n'          container.insertBefore(draggedElement, target);\\n' +\n'        } else {\\n' +\n'          container.insertBefore(draggedElement, target.nextSibling);\\n' +\n'        }\\n' +\n'        updateOrderIndicators();\\n' +\n'      }\\n' +\n'    }\\n' +\n'\\n' +\n'    function handleDragEnd(e) {\\n' +\n'      e.currentTarget.classList.remove(\\'dragging\\');\\n' +\n'      draggedElement = null;\\n' +\n'      updateOrderIndicators();\\n' +\n'    }\\n' +\n'\\n' +\n'    function updateOrderIndicators() {\\n' +\n'      const cards = document.querySelectorAll(\\'#questionsContainer .question-card\\');\\n' +\n'      cards.forEach((card, index) => {\\n' +\n'        let indicator = card.querySelector(\\'.order-indicator\\');\\n' +\n'        if (!indicator) {\\n' +\n'          indicator = document.createElement(\\'div\\');\\n' +\n'          indicator.className = \\'order-indicator\\';\\n' +\n'          card.insertBefore(indicator, card.firstChild);\\n' +\n'        }\\n' +\n'        indicator.textContent = \\'Order: \\' + (index + 1);\\n' +\n'        let orderInput = card.querySelector(\\'input.order-hidden\\');\\n' +\n'        if (!orderInput) {\\n' +\n'          orderInput = document.createElement(\\'input\\');\\n' +\n'          orderInput.type = \\'hidden\\';\\n' +\n'          orderInput.name = \\'questions[\\' + card.getAttribute(\\'data-question-id\\') + \\'][order]\\';\\n' +\n'          orderInput.className = \\'order-hidden\\';\\n' +\n'          card.appendChild(orderInput);\\n' +\n'        }\\n' +\n'        orderInput.value = index;\\n' +\n'      });\\n' +\n'    }\\n' +\n'\\n' +\n'    function getFormattedType(lowerType) {\\n' +\n'      switch(lowerType) {\\n' +\n'        case \\'text\\': return \\'LongText\\';\\n' +\n'        case \\'singleselect\\': return \\'singleselect\\';\\n' +\n'        case \\'multiselect\\': return \\'multiselect\\';\\n' +\n'        case \\'date\\':\\n' +\n'        case \\'dateselector\\': return \\'date\\';\\n' +\n'        case \\'attachment\\': return \\'Attachment\\';\\n' +\n'        default: return lowerType;\\n' +\n'      }\\n' +\n'    }\\n' +\n'\\n' +\n'    // These values are set server-side\\n' +\n'    const initialQuestions = ' + JSON.stringify(questionsArray) + ';\\n' +\n'    const defaultTitle = ' + JSON.stringify(ticketSystemTitle) + ';\\n' +\n'    const defaultTicketSystemId = ' + JSON.stringify(ticketSystemId) + ';\\n' +\n'    const defaultProjectId = ' + JSON.stringify(bitrix24ProjectId) + ';\\n' +\n'    const defaultOwner = ' + JSON.stringify(owner) + ';\\n' +\n'\\n' +\n'    let questionCount = 0;\\n' +\n'\\n' +\n'    document.addEventListener(\\'DOMContentLoaded\\', function() {\\n' +\n'      document.getElementById(\\'title\\').value = defaultTitle || \"\";\\n' +\n'      document.getElementById(\\'ticketSystemId\\').value = defaultTicketSystemId || \"\";\\n' +\n'      document.getElementById(\\'bitrix24ProjectId\\').value = defaultProjectId || \"\";\\n' +\n'      document.getElementById(\\'owner\\').value = defaultOwner || \"\";\\n' +\n'\\n' +\n'      const addQuestionBtn = document.getElementById(\\'addQuestionBtn\\');\\n' +\n'      const questionsContainer = document.getElementById(\\'questionsContainer\\');\\n' +\n'      const ticketForm = document.getElementById(\\'ticketForm\\');\\n' +\n'\\n' +\n'      if (Array.isArray(initialQuestions)) {\\n' +\n'        initialQuestions.forEach((questionData, index) => {\\n' +\n'          if (questionData.QuestionType) { // Only render if it looks like a question\\n' +\n'            const questionCard = createQuestionCard(questionData, index);\\n' +\n'            questionsContainer.appendChild(questionCard);\\n' +\n'            questionCount = index + 1;\\n' +\n'          }\\n' +\n'        });\\n' +\n'      }\\n' +\n'      updateOrderIndicators();\\n' +\n'\\n' +\n'      addQuestionBtn.addEventListener(\\'click\\', function() {\\n' +\n'        const questionType = document.getElementById(\\'questionType\\').value;\\n' +\n'        const questionId = questionCount++;\\n' +\n'        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\\n' +\n'        questionsContainer.appendChild(questionCard);\\n' +\n'        updateOrderIndicators();\\n' +\n'      });\\n' +\n'\\n' +\n'      document.getElementById(\\'questionsContainer\\').addEventListener(\\'click\\', function(e) {\\n' +\n'        if (e.target.classList.contains(\\'move-up-btn\\')) {\\n' +\n'          const questionCard = e.target.closest(\\'.question-card\\');\\n' +\n'          const container = document.getElementById(\\'questionsContainer\\');\\n' +\n'          if (questionCard.previousElementSibling) {\\n' +\n'            container.insertBefore(questionCard, questionCard.previousElementSibling);\\n' +\n'            updateOrderIndicators();\\n' +\n'          }\\n' +\n'          return;\\n' +\n'        }\\n' +\n'        if (e.target.classList.contains(\\'move-down-btn\\')) {\\n' +\n'          const questionCard = e.target.closest(\\'.question-card\\');\\n' +\n'          const container = document.getElementById(\\'questionsContainer\\');\\n' +\n'          if (questionCard.nextElementSibling) {\\n' +\n'            container.insertBefore(questionCard.nextElementSibling, questionCard);\\n' +\n'            updateOrderIndicators();\\n' +\n'          }\\n' +\n'          return;\\n' +\n'        }\\n' +\n'        if (e.target.classList.contains(\\'remove-question-btn\\')) {\\n' +\n'          e.target.closest(\\'.question-card\\').remove();\\n' +\n'          updateOrderIndicators();\\n' +\n'          return;\\n' +\n'        }\\n' +\n'        if (e.target.classList.contains(\\'add-option-btn\\')) {\\n' +\n'          const questionCard = e.target.closest(\\'.question-card\\');\\n' +\n'          addOption(questionCard);\\n' +\n'          return;\\n' +\n'        }\\n' +\n'        if (e.target.classList.contains(\\'remove-option-btn\\')) {\\n' +\n'          e.target.closest(\\'.option-item\\').remove();\\n' +\n'          return;\\n' +\n'        }\\n' +\n'      });\\n' +\n'\\n' +\n'      document.getElementById(\\'questionsContainer\\').addEventListener(\\'change\\', function(e) {\\n' +\n'        if (e.target.classList.contains(\\'includeOtherToggle\\')) {\\n' +\n'          const questionCard = e.target.closest(\\'.question-card\\');\\n' +\n'          const optionsList = questionCard.querySelector(\\'.options-list\\');\\n' +\n'          const otherOption = optionsList.querySelector(\\'.other-option\\');\\n' +\n'          if (e.target.checked) {\\n' +\n'            if (!otherOption) {\\n' +\n'              const nonOtherOptions = optionsList.querySelectorAll(\\'.option-item:not(.other-option)\\');\\n' +\n'              const nextIndex = nonOtherOptions.length;\\n' +\n'              const otherDiv = document.createElement(\\'div\\');\\n' +\n'              otherDiv.className = \\'option-item other-option\\';\\n' +\n'              otherDiv.innerHTML = \\'<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[\\' + questionCard.getAttribute(\\'data-question-id\\') + \\'][options][\\' + nextIndex + \\']\" />\\';\\n' +\n'              optionsList.appendChild(otherDiv);\\n' +\n'            }\\n' +\n'          } else {\\n' +\n'            if (otherOption) { otherOption.remove(); }\\n' +\n'          }\\n' +\n'        }\\n' +\n'      });\\n' +\n'\\n' +\n'      ticketForm.addEventListener(\\'submit\\', function(e) {\\n' +\n'        updateOrderIndicators();\\n' +\n'        const questionCards = document.querySelectorAll(\\'#questionsContainer .question-card\\');\\n' +\n'        questionCards.forEach((card) => {\\n' +\n'          const questionId = card.getAttribute(\\'data-question-id\\');\\n' +\n'          const questionTextInput = card.querySelector(\\'.questionText\\');\\n' +\n'          if (!questionTextInput) return;\\n' +\n'          const textValue = questionTextInput.value.trim();\\n' +\n'\\n' +\n'          const taskTitleToggle = card.querySelector(\\'.taskTitleToggle\\');\\n' +\n'          const tagToggle = card.querySelector(\\'.tagToggle\\');\\n' +\n'          let existingTaskTitle = card.querySelector(\\'input[name=\"questions[\\' + questionId + \\'][taskTitle]\"]\\');\\n' +\n'          if (existingTaskTitle) { existingTaskTitle.remove(); }\\n' +\n'          let existingTaskTag = card.querySelector(\\'input[name=\"questions[\\' + questionId + \\'][taskTag]\"]\\');\\n' +\n'          if (existingTaskTag) { existingTaskTag.remove(); }\\n' +\n'          const hiddenTaskTitle = document.createElement(\\'input\\');\\n' +\n'          hiddenTaskTitle.type = \\'hidden\\';\\n' +\n'          hiddenTaskTitle.name = \\'questions[\\' + questionId + \\'][taskTitle]\\';\\n' +\n'          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\\n' +\n'          card.appendChild(hiddenTaskTitle);\\n' +\n'          const hiddenTaskTag = document.createElement(\\'input\\');\\n' +\n'          hiddenTaskTag.type = \\'hidden\\';\\n' +\n'          hiddenTaskTag.name = \\'questions[\\' + questionId + \\'][taskTag]\\';\\n' +\n'          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\\n' +\n'          card.appendChild(hiddenTaskTag);\\n' +\n'\\n' +\n'          const typeHidden = card.querySelector(\\'input[name=\"questions[\\' + questionId + \\'][type]\"]\\');\\n' +\n'          if (typeHidden && (typeHidden.value === \\'singleselect\\' || typeHidden.value === \\'multiselect\\')) {\\n' +\n'            const optionsList = card.querySelector(\\'.options-list\\');\\n' +\n'            let nonOtherCount = 0;\\n' +\n'            if (optionsList) {\\n' +\n'              const nonOtherOptions = optionsList.querySelectorAll(\\'.option-item:not(.other-option)\\');\\n' +\n'              nonOtherOptions.forEach((optionItem) => {\\n' +\n'                const input = optionItem.querySelector(\\'input[type=\"text\"]\\');\\n' +\n'                if (input) {\\n' +\n'                  input.name = \\'questions[\\' + questionId + \\'][options][\\' + nonOtherCount + \\']\\';\\n' +\n'                  nonOtherCount++;\\n' +\n'                }\\n' +\n'              });\\n' +\n'              const otherOptionItem = optionsList.querySelector(\\'.option-item.other-option\\');\\n' +\n'              if (otherOptionItem) {\\n' +\n'                const otherHidden = document.createElement(\\'input\\');\\n' +\n'                otherHidden.type = \\'hidden\\';\\n' +\n'                otherHidden.name = \\'questions[\\' + questionId + \\'][options][\\' + nonOtherCount + \\']\\';\\n' +\n'                otherHidden.value = \\'{other}\\';\\n' +\n'                card.appendChild(otherHidden);\\n' +\n'                otherOptionItem.remove();\\n' +\n'              }\\n' +\n'            }\\n' +\n'          }\\n' +\n'        });\\n' +\n'      });\\n' +\n'    });\\n' +\n'\\n' +\n'    function createQuestionCard(questionData, questionId) {\\n' +\n'      let rawType = questionData.QuestionType || \"text\";\\n' +\n'      let lowerType = rawType.toLowerCase();\\n' +\n'\\n' +\n'      const questionCard = document.createElement(\\'div\\');\\n' +\n'      questionCard.className = \\'question-card\\';\\n' +\n'      questionCard.setAttribute(\\'data-question-id\\', questionId);\\n' +\n'      questionCard.setAttribute(\\'draggable\\', \\'true\\');\\n' +\n'      questionCard.addEventListener(\\'dragstart\\', handleDragStart);\\n' +\n'      questionCard.addEventListener(\\'dragover\\', handleDragOver);\\n' +\n'      questionCard.addEventListener(\\'drop\\', handleDrop);\\n' +\n'      questionCard.addEventListener(\\'dragend\\', handleDragEnd);\\n' +\n'\\n' +\n'      let html = \\'<div class=\"order-indicator\"></div>\\';\\n' +\n'\\n' +\n'      const questionTextValue = questionData.Question || \"\";\\n' +\n'      html += \\'<label>Question</label>\\';\\n' +\n'      if (lowerType === \\'text\\') {\\n' +\n'        html += \\'<textarea name=\"questions[\\' + questionId + \\'][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">\\' + questionTextValue + \\'</textarea>\\';\\n' +\n'      } else {\\n' +\n'        html += \\'<input type=\"text\" name=\"questions[\\' + questionId + \\'][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"\\' + questionTextValue + \\'\" />\\';\\n' +\n'      }\\n' +\n'\\n' +\n'      if (lowerType === \\'singleselect\\' || lowerType === \\'multiselect\\') {\\n' +\n'        const optionLabel = (lowerType === \\'singleselect\\') ? \\'Selection Options\\' : \\'MultiSelection Options\\';\\n' +\n'        html += \\'<label>\\' + optionLabel + \\'</label>\\';\\n' +\n'\\n' +\n'        let initialOptions = [];\\n' +\n'        let hasOther = false;\\n' +\n'        if (questionData.QuestionOptions) {\\n' +\n'          initialOptions = questionData.QuestionOptions.split(\\',\\').map(o => o.trim());\\n' +\n'          if (initialOptions.includes(\"{other}\")) {\\n' +\n'            hasOther = true;\\n' +\n'            initialOptions = initialOptions.filter(opt => opt !== \"{other}\");\\n' +\n'          }\\n' +\n'        }\\n' +\n'\\n' +\n'        html += \\'<label><input type=\"checkbox\" class=\"includeOtherToggle\" \\' + (hasOther ? \\'checked\\' : \\'\\') + \\' /> Include \"Other\" Option</label>\\';\\n' +\n'        html += \\'<div class=\"options-container\">\\' +\\n' +\n'                \\'<button type=\"button\" class=\"add-option-btn\">Add Option</button>\\' +\\n' +\n'                \\'<div class=\"options-list\">\\' ;\\n' +\n'\\n' +\n'        initialOptions.forEach(function(opt, idx) {\\n' +\n'          html += \\'<div class=\"option-item\">\\' +\\n' +\n'                  \\'<input type=\"text\" placeholder=\"Option text...\" name=\"questions[\\' + questionId + \\'][options][\\' + idx + \\']\" value=\"\\' + opt + \\'\" />\\' +\\n' +\n'                  \\'<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>\\' +\\n' +\n'                  \\'</div>\\';\\n' +\n'        });\\n' +\n'\\n' +\n'        if (hasOther) {\\n' +\n'          var otherIndex = initialOptions.length;\\n' +\n'          html += \\'<div class=\"option-item other-option\">\\' +\\n' +\n'                  \\'<span>Other: </span>\\' +\\n' +\n'                  \\'<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[\\' + questionId + \\'][options][\\' + otherIndex + \\']\" />\\' +\\n' +\n'                  \\'</div>\\';\\n' +\n'        }\\n' +\n'        html += \\'</div></div>\\';\\n' +\n'      }\\n' +\n'\\n' +\n'      if (lowerType === \\'date\\') {\\n' +\n'        html += \\'<label>Date Selector Preview</label>\\' +\\n' +\n'                \\'<input type=\"date\" disabled />\\';\\n' +\n'      }\\n' +\n'\\n' +\n'      if (lowerType === \\'attachment\\') {\\n' +\n'        html += \\'<label>Attachment Upload Preview</label>\\' +\\n' +\n'                \\'<input type=\"file\" disabled />\\';\\n' +\n'      }\\n' +\n'\\n' +\n'      const requiredValue = questionData.Required || \"Yes\";\\n' +\n'      html += \\'<label>Required</label>\\' +\\n' +\n'              \\'<select name=\"questions[\\' + questionId + \\'][required]\">\\' +\\n' +\n'              \\'<option value=\"Yes\" \\' + (requiredValue === \"Yes\" ? \"selected\" : \"\") + \\'>Yes</option>\\' +\\n' +\n'              \\'<option value=\"No\" \\' + (requiredValue === \"No\" ? \"selected\" : \"\") + \\'>No</option>\\' +\\n' +\n'              \\'</select>\\';\\n' +\n'\\n' +\n'      var formattedType = getFormattedType(lowerType);\\n' +\n'      html += \\'<input type=\"hidden\" name=\"questions[\\' + questionId + \\'][type]\" value=\"\\' + formattedType + \\'\" />\\';\\n' +\n'\\n' +\n'      html += \\'<div class=\"toggle-container\">\\' +\\n' +\n'              \\'<label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>\\' +\\n' +\n'              \\'<label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>\\' +\\n' +\n'              \\'<button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>\\' +\\n' +\n'              \\'<button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>\\' +\\n' +\n'              \\'</div>\\';\\n' +\n'\\n' +\n'      html += \\'<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>\\';\\n' +\n'\\n' +\n'      questionCard.innerHTML = html;\\n' +\n'      return questionCard;\\n' +\n'    }\\n' +\n'\\n' +\n'    function addOption(questionCard) {\\n' +\n'      const questionId = questionCard.getAttribute(\\'data-question-id\\');\\n' +\n'      const optionsList = questionCard.querySelector(\\'.options-list\\');\\n' +\n'      if (!optionsList) return;\\n' +\n'      const currentOptions = optionsList.querySelectorAll(\\'.option-item:not(.other-option)\\');\\n' +\n'      const optionCount = currentOptions.length;\\n' +\n'      const optionDiv = document.createElement(\\'div\\');\\n' +\n'      optionDiv.className = \\'option-item\\';\\n' +\n'      const input = document.createElement(\\'input\\');\\n' +\n'      input.type = \\'text\\';\\n' +\n'      input.placeholder = \\'Option text...\\';\\n' +\n'      input.name = \\'questions[\\' + questionId + \\'][options][\\' + optionCount + \\']\\';\\n' +\n'      const removeBtn = document.createElement(\\'button\\');\\n' +\n'      removeBtn.type = \\'button\\';\\n' +\n'      removeBtn.textContent = \\'Remove Option\\';\\n' +\n'      removeBtn.className = \\'remove-option-btn\\';\\n' +\n'      optionDiv.appendChild(input);\\n' +\n'      optionDiv.appendChild(removeBtn);\\n' +\n'      const otherOption = optionsList.querySelector(\\'.other-option\\');\\n' +\n'      if (otherOption) {\\n' +\n'        optionsList.insertBefore(optionDiv, otherOption);\\n' +\n'      } else {\\n' +\n'        optionsList.appendChild(optionDiv);\\n' +\n'      }\\n' +\n'    }\\n' +\n'  </script>\\n' +\n'</body>\\n' +\n'</html>';\n\n// Return the final HTML as output\nreturn [ { json: { html } } ];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -700,
        0
      ],
      "id": "b8a7381a-7480-448f-b4f0-74c20045f0f1",
      "name": "Code38"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a35ea94-0ccc-46a6-a58d-9b1bbcba8103",
              "leftValue": "={{ $json.body.ticketSystemId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        140,
        920
      ],
      "id": "7165cfcf-fe50-476e-a602-277f9e7c17bd",
      "name": "If3"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pwvejbwcowen0as",
        "table": "mn2c37f3xnlbre3",
        "returnAll": true,
        "options": {
          "where": "=(TicketSystemId,eq,{{ $json.body.ticketSystemId }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        360,
        780
      ],
      "id": "4561ed1e-7459-4936-80fd-b96dbf0caed3",
      "name": "NocoDB7",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1) Filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// 2) Grab fallback values from the FIRST item (the webhook), if present.\nlet fallbackTitle = \"\";\nlet fallbackOwner = \"\";\nlet fallbackProject = \"\";\nif (questionsArray.length > 0) {\n  const firstItem = questionsArray[0];\n  fallbackTitle = firstItem.TicketSystem || (firstItem.query && firstItem.query.system) || \"\";\n  fallbackOwner = firstItem.Owner || (firstItem.query && firstItem.query.user) || \"\";\n  fallbackProject = firstItem.Bitrix24Project || (firstItem.query && firstItem.query.Bitrix24Project) || \"\";\n}\n\n// 3) Find the first \"database record\" that has an Id property.\nlet dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\"));\n\n// 4) Set final values for Title, Bitrix24 Project ID, and Owner.\n// Use the DB record if found; otherwise, use the fallback.\nlet ticketSystemTitle = dbRecord ? (dbRecord.TicketSystem || fallbackTitle) : fallbackTitle;\nlet bitrix24ProjectId = dbRecord ? (dbRecord.Bitrix24Project || fallbackProject) : fallbackProject;\nlet owner = dbRecord ? (dbRecord.Owner || fallbackOwner) : fallbackOwner;\n\n// 5) Determine TicketSystemId using the following priority:\n//    a. Use the DB record’s TicketSystemId if it exists and is not \"null\"\n//    b. Else, use the webhook query TicketSystemId if valid\n//    c. Else, fall back to the Id from the DB record.\nlet ticketSystemId = \"\";\nif (dbRecord && dbRecord.TicketSystemId && dbRecord.TicketSystemId !== \"null\") {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const firstItem = questionsArray[0] || {};\n  const webhookTicketId = firstItem.query && firstItem.query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    ticketSystemId = dbRecord ? dbRecord.Id : \"\";\n  }\n}\n\n// 6) Build the HTML string.\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        let orderInput = card.querySelector('input.order-hidden');\n        if (!orderInput) {\n          orderInput = document.createElement('input');\n          orderInput.type = 'hidden';\n          orderInput.name = 'questions[' + card.getAttribute('data-question-id') + '][order]';\n          orderInput.className = 'order-hidden';\n          card.appendChild(orderInput);\n        }\n        orderInput.value = index;\n      });\n    }\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text':\n          return 'LongText';\n        case 'singleselect':\n          return 'singleselect';\n        case 'multiselect':\n          return 'multiselect';\n        case 'date':\n        case 'dateselector':\n          return 'date';\n        case 'attachment':\n          return 'Attachment';\n        default:\n          return lowerType;\n      }\n    }\n    // Values set server-side and injected into the HTML.\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n    let questionCount = 0;\n    document.addEventListener('DOMContentLoaded', function() {\n      // Pre-fill the fields.\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n      // Populate existing questions (only render those with a defined QuestionType).\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          if (questionData.QuestionType) {\n            const questionCard = createQuestionCard(questionData, index);\n            questionsContainer.appendChild(questionCard);\n            questionCount = index + 1;\n          }\n        });\n      }\n      updateOrderIndicators();\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][options][' + nextIndex + ']\" />';\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators();\n        const questionCards = document.querySelectorAll('#questionsContainer .question-card');\n        questionCards.forEach((card) => {\n          const questionId = card.getAttribute('data-question-id');\n          const questionTextInput = card.querySelector('.questionText');\n          if (!questionTextInput) return;\n          const textValue = questionTextInput.value.trim();\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          const tagToggle = card.querySelector('.tagToggle');\n          let existingTaskTitle = card.querySelector('input[name=\"questions[' + questionId + '][taskTitle]\"]');\n          if (existingTaskTitle) { existingTaskTitle.remove(); }\n          let existingTaskTag = card.querySelector('input[name=\"questions[' + questionId + '][taskTag]\"]');\n          if (existingTaskTag) { existingTaskTag.remove(); }\n          const hiddenTaskTitle = document.createElement('input');\n          hiddenTaskTitle.type = 'hidden';\n          hiddenTaskTitle.name = 'questions[' + questionId + '][taskTitle]';\n          hiddenTaskTitle.value = (taskTitleToggle && taskTitleToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTitle);\n          const hiddenTaskTag = document.createElement('input');\n          hiddenTaskTag.type = 'hidden';\n          hiddenTaskTag.name = 'questions[' + questionId + '][taskTag]';\n          hiddenTaskTag.value = (tagToggle && tagToggle.checked) ? textValue : \"\";\n          card.appendChild(hiddenTaskTag);\n          const typeHidden = card.querySelector('input[name=\"questions[' + questionId + '][type]\"]');\n          if (typeHidden && (typeHidden.value === 'singleselect' || typeHidden.value === 'multiselect')) {\n            const optionsList = card.querySelector('.options-list');\n            let nonOtherCount = 0;\n            if (optionsList) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              nonOtherOptions.forEach((optionItem) => {\n                const input = optionItem.querySelector('input[type=\"text\"]');\n                if (input) {\n                  input.name = 'questions[' + questionId + '][options][' + nonOtherCount + ']';\n                  nonOtherCount++;\n                }\n              });\n              const otherOptionItem = optionsList.querySelector('.option-item.other-option');\n              if (otherOptionItem) {\n                const otherHidden = document.createElement('input');\n                otherHidden.type = 'hidden';\n                otherHidden.name = 'questions[' + questionId + '][options][' + nonOtherCount + ']';\n                otherHidden.value = '{other}';\n                card.appendChild(otherHidden);\n                otherOptionItem.remove();\n              }\n            }\n          }\n        });\n      });\n    });\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n      let html = '<div class=\"order-indicator\"></div>';\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        let initialOptions = [];\n        let hasOther = false;\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions.split(\",\").map(function(o){ return o.trim(); });\n          if (initialOptions.indexOf(\"{other}\") !== -1) {\n            hasOther = true;\n            initialOptions = initialOptions.filter(function(opt){ return opt !== \"{other}\"; });\n          }\n        }\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" ' + (hasOther ? 'checked' : '') + ' /> Include \"Other\" Option</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        initialOptions.forEach(function(opt, idx) {\n          html += '<div class=\"option-item\">' +\n                  '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />' +\n                  '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>' +\n                  '</div>';\n        });\n        if (hasOther) {\n          const otherIndex = initialOptions.length;\n          html += '<div class=\"option-item other-option\">' +\n                  '<span>Other: </span>' +\n                  '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][options][' + otherIndex + ']\" />' +\n                  '</div>';\n        }\n        html += '  </div></div>';\n      }\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>' +\n              '<select name=\"questions[' + questionId + '][required]\">' +\n              '<option value=\"Yes\" ' + (requiredValue === \"Yes\" ? \"selected\" : \"\") + '>Yes</option>' +\n              '<option value=\"No\" ' + (requiredValue === \"No\" ? \"selected\" : \"\") + '>No</option>' +\n              '</select>';\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n      html += '<div class=\"toggle-container\">' +\n              '<label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>' +\n              '<label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>' +\n              '<button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>' +\n              '<button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>' +\n              '</div>';\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\nreturn [\n  {\n    json: { html }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -700,
        -160
      ],
      "id": "909cfbb8-04f5-42a3-96d7-1fb1862d42dd",
      "name": "Code39"
    },
    {
      "parameters": {
        "jsCode": "// 1) Filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// 2) Grab fallback values from the FIRST item (the webhook), if present.\nlet fallbackTitle = \"\";\nlet fallbackOwner = \"\";\nlet fallbackProject = \"\";\nif (questionsArray.length > 0) {\n  const firstItem = questionsArray[0];\n  fallbackTitle = firstItem.TicketSystem || (firstItem.query && firstItem.query.system) || \"\";\n  fallbackOwner = firstItem.Owner || (firstItem.query && firstItem.query.user) || \"\";\n  fallbackProject = firstItem.Bitrix24Project || (firstItem.query && firstItem.query.Bitrix24Project) || \"\";\n}\n\n// 3) Find the first \"database record\" that has an Id property.\nlet dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\"));\n\n// 4) Set final values for Title, Bitrix24 Project ID, and Owner.\nlet ticketSystemTitle = dbRecord ? (dbRecord.TicketSystem || fallbackTitle) : fallbackTitle;\nlet bitrix24ProjectId = dbRecord ? (dbRecord.Bitrix24Project || fallbackProject) : fallbackProject;\nlet owner = dbRecord ? (dbRecord.Owner || fallbackOwner) : fallbackOwner;\n\n// 5) Determine TicketSystemId using the following priority:\n//    a. Use the DB record’s TicketSystemId if it exists and is not \"null\"\n//    b. Else, use the webhook query TicketSystemId if valid\n//    c. Else, fall back to the Id from the DB record.\nlet ticketSystemId = \"\";\nif (dbRecord && dbRecord.TicketSystemId && dbRecord.TicketSystemId !== \"null\") {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const firstItem = questionsArray[0] || {};\n  const webhookTicketId = firstItem.query && firstItem.query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    ticketSystemId = dbRecord ? dbRecord.Id : \"\";\n  }\n}\n\n// 6) Build the HTML string.\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n    // Update the order indicator and set a data attribute with the new index.\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        // Save the new index in a data attribute.\n        card.setAttribute('data-question-index', index);\n      });\n    }\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text': return 'LongText';\n        case 'singleselect': return 'singleselect';\n        case 'multiselect': return 'multiselect';\n        case 'date':\n        case 'dateselector': return 'date';\n        case 'attachment': return 'Attachment';\n        default: return lowerType;\n      }\n    }\n    // Values set server-side and injected into the HTML.\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n    let questionCount = 0;\n    document.addEventListener('DOMContentLoaded', function() {\n      // Pre-fill the fields.\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n      // Populate existing questions (only render those with a defined QuestionType).\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          if (questionData.QuestionType) {\n            const questionCard = createQuestionCard(questionData, index);\n            questionsContainer.appendChild(questionCard);\n            questionCount = index + 1;\n          }\n        });\n      }\n      updateOrderIndicators();\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][options][' + nextIndex + ']\" />';\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n      // On form submit, re-index each question's input names based on the current order.\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators();\n        const cards = document.querySelectorAll('#questionsContainer .question-card');\n        cards.forEach(function(card) {\n          const newIndex = card.getAttribute('data-question-index');\n          card.querySelectorAll('input, select, textarea').forEach(function(input) {\n            input.name = input.name.replace(/questions\\[\\d+\\]/, 'questions[' + newIndex + ']');\n          });\n        });\n      });\n    });\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      // Initially assign the unique ID. We'll later re-index using data-question-index.\n      questionCard.setAttribute('data-question-id', questionId);\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n      let html = '<div class=\"order-indicator\"></div>';\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        let initialOptions = [];\n        let hasOther = false;\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions.split(\",\").map(function(o){ return o.trim(); });\n          if (initialOptions.indexOf(\"{other}\") !== -1) {\n            hasOther = true;\n            initialOptions = initialOptions.filter(function(opt){ return opt !== \"{other}\"; });\n          }\n        }\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" ' + (hasOther ? 'checked' : '') + ' /> Include \"Other\" Option</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        initialOptions.forEach(function(opt, idx) {\n          html += '<div class=\"option-item\">' +\n                  '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />' +\n                  '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>' +\n                  '</div>';\n        });\n        if (hasOther) {\n          const otherIndex = initialOptions.length;\n          html += '<div class=\"option-item other-option\">' +\n                  '<span>Other: </span>' +\n                  '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][options][' + otherIndex + ']\" />' +\n                  '</div>';\n        }\n        html += '  </div></div>';\n      }\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>' +\n              '<select name=\"questions[' + questionId + '][required]\">' +\n              '<option value=\"Yes\" ' + (requiredValue === \"Yes\" ? \"selected\" : \"\") + '>Yes</option>' +\n              '<option value=\"No\" ' + (requiredValue === \"No\" ? \"selected\" : \"\") + '>No</option>' +\n              '</select>';\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n      html += '<div class=\"toggle-container\">' +\n              '<label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>' +\n              '<label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>' +\n              '<button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>' +\n              '<button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>' +\n              '</div>';\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\nreturn [\n  {\n    json: { html }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -840,
        -240
      ],
      "id": "a536dbb0-26fa-4caf-9904-b5037f116d44",
      "name": "Code40"
    },
    {
      "parameters": {
        "jsCode": "// Gather all incoming items\nconst items = $input.all();\n\n// We'll accumulate our final output items here\nconst output = [];\n\nfor (const item of items) {\n  const body = item.json.body || {};\n\n  // We'll store question data in a dictionary keyed by the question index (e.g. \"0\", \"1\", \"2\", ...)\n  const questionsDict = {};\n\n  // Iterate over each key in the body\n  for (const [key, value] of Object.entries(body)) {\n    // We only care about keys that match questions[<index>][<property>][<optional subIndex>]\n    // Examples:\n    //   questions[0][question]       -> match[1] = \"0\", match[2] = \"question\"\n    //   questions[1][options][2]    -> match[1] = \"1\", match[2] = \"options\", match[3] = \"2\"\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(.*?)\\](?:\\[(\\d+)\\])?$/);\n    if (!match) {\n      continue;\n    }\n\n    const questionIndex = match[1]; // e.g. \"1\"\n    const property = match[2];      // e.g. \"options\" or \"question\" or \"required\", etc.\n    const subIndex = match[3];      // e.g. \"2\" if present, otherwise undefined\n\n    // Ensure there's an object for this question index\n    if (!questionsDict[questionIndex]) {\n      questionsDict[questionIndex] = {\n        question: \"\",\n        required: \"\",\n        type: \"\",\n        options: []\n      };\n    }\n\n    // If property is \"options\", we might have multiple values (array-like)\n    if (property === \"options\") {\n      questionsDict[questionIndex].options.push(value);\n    } else {\n      // Otherwise, set the property directly\n      questionsDict[questionIndex][property] = value;\n    }\n  }\n\n  // Sort question indexes so we return them in the correct order\n  const sortedIndexes = Object.keys(questionsDict).sort((a, b) => parseInt(a) - parseInt(b));\n\n  // Build a new item per question\n  for (const idx of sortedIndexes) {\n    const q = questionsDict[idx];\n\n    // Join multiple options with commas\n    const optionsString = (q.options || []).join(\", \");\n\n    output.push({\n      json: {\n        title: body.title,\n        ticketSystemId: body.ticketSystemId, // Added ticketSystemId here\n        bitrix24ProjectId: body.bitrix24ProjectId,\n        owner: body.owner,\n        question: q.question,\n        required: q.required,\n        type: q.type,\n        options: optionsString\n      }\n    });\n  }\n}\n\n// Return one item per question\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        920
      ],
      "id": "e8d77b7e-7f04-48a2-8307-b2cdaa89804d",
      "name": "Code41"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        if (option.toLowerCase() === '{other}') {\n          return `\n            <div class=\"option-container\">\n              <input type=\"radio\" id=\"${fieldId}_otherRadio\" name=\"${fieldId}\" value=\"other\" ${reqAttr}>\n              <label for=\"${fieldId}_otherRadio\">Other:</label>\n              <input\n                type=\"text\"\n                id=\"${fieldId}_other\"\n                name=\"${fieldId}_other\"\n                placeholder=\"Please specify\"\n                oninput=\"document.getElementById('${fieldId}_otherRadio').checked = true\"\n              />\n            </div>\n          `;\n        } else {\n          return `\n            <div class=\"option-container\">\n              <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n              <label for=\"${fieldId}_${index}\">${option}</label>\n            </div>\n          `;\n        }\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        if (option.toLowerCase() === '{other}') {\n          return `\n            <div class=\"option-container\">\n              <input type=\"checkbox\" id=\"${fieldId}_otherCheck\" name=\"${fieldId}\" value=\"other\" ${reqAttr}>\n              <label for=\"${fieldId}_otherCheck\">Other:</label>\n              <input\n                type=\"text\"\n                id=\"${fieldId}_other\"\n                name=\"${fieldId}_other\"\n                placeholder=\"Please specify\"\n                oninput=\"document.getElementById('${fieldId}_otherCheck').checked = true\"\n              />\n            </div>\n          `;\n        } else {\n          return `\n            <div class=\"option-container\">\n              <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n              <label for=\"${fieldId}_${index}\">${option}</label>\n            </div>\n          `;\n        }\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    case 'attachment':\n      // Display the question as normal (textarea) plus a button to upload multiple attachments\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n        <br/>\n        <button type=\"button\" onclick=\"document.getElementById('${fieldId}_file').click();\">Upload Attachments</button>\n        <input type=\"file\" id=\"${fieldId}_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange('${fieldId}', this)\">\n        <div id=\"${fieldId}_display\" class=\"attachment-display\"></div>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input[type=\"radio\"],\n    .option-container input[type=\"checkbox\"] {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Inject the questions array into the client-side script.\n    const totalSteps = ${totalSteps};\n    const questions = ${JSON.stringify(questions)};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Build the QR code URL to include only the system data.\n    // This appends a \"system\" query parameter using the TicketSystem value.\n    const systemParam = \"${questions[0].TicketSystem}\";\n    const systemUrl = window.location.origin + window.location.pathname + \"?system=\" + encodeURIComponent(systemParam);\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(systemUrl);\n\n    // Helper function to filter and display unique attachments for a given question field\n    function handleAttachmentChange(fieldId, inputElem) {\n      const files = inputElem.files;\n      const uniqueFiles = {};\n      const fileArray = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (!uniqueFiles[file.name]) {\n          uniqueFiles[file.name] = true;\n          fileArray.push(file);\n        }\n      }\n      window.uniqueAttachments = window.uniqueAttachments || {};\n      window.uniqueAttachments[fieldId] = fileArray;\n      const displayElem = document.getElementById(fieldId + '_display');\n      if (displayElem) {\n        displayElem.textContent = fileArray.map(file => file.name).join(', ');\n      }\n    }\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      // Create a new FormData object (omitting the raw form inputs)\n      const formData = new FormData();\n      \n      // Append ticketSystem at the top\n      formData.append('ticketSystem', \"${questions[0].TicketSystem}\");\n      // Append Bitrix24Project after TicketSystem\n      formData.append('Bitrix24Project', \"${questions[0].Bitrix24Project}\");\n      \n      // Append questions meta-data along with each answer\n      questions.forEach((q, i) => {\n        formData.append(\\`questions[\\${i}][question]\\`, q.Question);\n        formData.append(\\`questions[\\${i}][required]\\`, (q.Required && q.Required.toLowerCase() === \"yes\") ? \"Yes\" : \"No\");\n\n        let typeStr = \"\";\n        switch ((q.QuestionType || \"text\").toLowerCase()) {\n          case 'text':\n            typeStr = \"Longtext\";\n            break;\n          case 'attachment':\n            typeStr = \"Attachment\";\n            break;\n          case 'singleselect':\n          case 'multiselect':\n            typeStr = \"Selection\";\n            break;\n          default:\n            typeStr = \"Longtext\";\n        }\n        formData.append(\\`questions[\\${i}][type]\\`, typeStr);\n        formData.append(\\`questions[\\${i}][taskTitle]\\`, \"[empty]\");\n        formData.append(\\`questions[\\${i}][taskTag]\\`, \"[empty]\");\n\n        // Get the answer from the form element with name \"question_\" + q.Id\n        const elems = document.getElementsByName(\"question_\" + q.Id);\n        let answer = \"\";\n        if (elems.length > 0) {\n          if (elems[0].type === \"radio\") {\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                answer = elems[j].value;\n                if (answer === \"other\") {\n                  const otherInput = document.getElementById(\"question_\" + q.Id + \"_other\");\n                  answer = \"other:\" + otherInput.value;\n                }\n                break;\n              }\n            }\n          } else if (elems[0].type === \"checkbox\") {\n            const arr = [];\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                if (elems[j].value === \"other\") {\n                  const otherInput = document.getElementById(\"question_\" + q.Id + \"_other\");\n                  arr.push(\"other:\" + otherInput.value);\n                } else {\n                  arr.push(elems[j].value);\n                }\n              }\n            }\n            answer = arr.join(\", \");\n          } else {\n            answer = elems[0].value;\n          }\n        }\n        formData.append(\\`questions[\\${i}][answer]\\`, answer);\n\n        // If the question is of selection type and has options, add each option\n        if (\n          q.QuestionType &&\n          (q.QuestionType.toLowerCase() === \"singleselect\" || q.QuestionType.toLowerCase() === \"multiselect\") &&\n          q.QuestionOptions\n        ) {\n          const opts = q.QuestionOptions.split(',').map(o => o.trim());\n          opts.forEach((option, index) => {\n            formData.append(\\`questions[\\${i}][options][\\${index}]\\`, option);\n          });\n        }\n      });\n\n      // Append unique attachment files (if any) as binary data\n      if (window.uniqueAttachments) {\n        for (const field in window.uniqueAttachments) {\n          window.uniqueAttachments[field].forEach(file => {\n            formData.append(field, file);\n          });\n        }\n      }\n\n      // Append URL query parameters to the payload (but do not display them in the UI)\n      const urlParams = new URLSearchParams(window.location.search);\n      for (const [key, value] of urlParams.entries()) {\n        formData.append(key, value);\n      }\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        document.getElementById('multiStepForm').reset();\n        window.uniqueAttachments = {}; // Clear stored attachments\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        -40
      ],
      "id": "21b9b1ad-bf03-4d8f-a36e-80eb767e6546",
      "name": "Code42"
    },
    {
      "parameters": {
        "jsCode": "// 1) Filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// 2) Grab fallback values from the FIRST item (the webhook), if present.\nlet fallbackTitle = \"\";\nlet fallbackOwner = \"\";\nlet fallbackProject = \"\";\nif (questionsArray.length > 0) {\n  const firstItem = questionsArray[0];\n  fallbackTitle = firstItem.TicketSystem || (firstItem.query && firstItem.query.system) || \"\";\n  fallbackOwner = firstItem.Owner || (questionsArray[0].query && questionsArray[0].query.user) || \"\";\n  fallbackProject = firstItem.Bitrix24Project || (firstItem.query && firstItem.query.Bitrix24Project) || \"\";\n}\n\n// 3) Find the first \"database record\" that has an Id property.\nlet dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\"));\n\n// 4) Set final values for Title, Bitrix24 Project ID, and Owner.\nlet ticketSystemTitle = dbRecord ? (dbRecord.TicketSystem || fallbackTitle) : fallbackTitle;\nlet bitrix24ProjectId = dbRecord ? (dbRecord.Bitrix24Project || fallbackProject) : fallbackProject;\nlet owner = dbRecord ? (dbRecord.Owner || fallbackOwner) : fallbackOwner;\n\n// 5) Determine TicketSystemId using the following priority:\nlet ticketSystemId = \"\";\nif (dbRecord && dbRecord.TicketSystemId && dbRecord.TicketSystemId !== \"null\") {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const firstItem = questionsArray[0] || {};\n  const webhookTicketId = firstItem.query && firstItem.query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    ticketSystemId = dbRecord ? dbRecord.Id : \"\";\n  }\n}\n\n// 6) Build the HTML string.\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n    }\n    .option-item input[type=\"text\"] {\n      flex: 1;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n  <script>\n    // Global variable for drag and drop\n    let draggedElement = null;\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n    // Update order indicator and assign new data-question-index based on current DOM order.\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        card.setAttribute('data-question-index', index + 1);\n      });\n    }\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text': return 'LongText';\n        case 'singleselect': return 'singleselect';\n        case 'multiselect': return 'multiselect';\n        case 'date':\n        case 'dateselector': return 'date';\n        case 'attachment': return 'Attachment';\n        default: return lowerType;\n      }\n    }\n    // Values set server-side and injected into the HTML.\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n    let questionCount = 0;\n    document.addEventListener('DOMContentLoaded', function() {\n      // Pre-fill the fields.\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n      // Populate existing questions (only render those with a defined QuestionType).\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          if (questionData.QuestionType) {\n            const questionCard = createQuestionCard(questionData, index);\n            questionsContainer.appendChild(questionCard);\n            questionCount = index + 1;\n          }\n        });\n      }\n      updateOrderIndicators();\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          e.target.closest('.option-item').remove();\n          return;\n        }\n      });\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][options][' + nextIndex + ']\" />';\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n      // On form submit, re-index each question's input names based on current DOM order.\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators();\n        // Get the current order of question cards.\n        const cards = Array.from(document.querySelectorAll('#questionsContainer .question-card'));\n        cards.forEach((card, i) => {\n          // Use a one-based index.\n          const newIndex = i + 1;\n          // Update the data-question-id attribute.\n          card.setAttribute('data-question-id', newIndex);\n          // Update each input/select/textarea name using a global regex.\n          card.querySelectorAll('input, select, textarea').forEach(input => {\n            input.name = input.name.replace(/questions\\[\\d+\\]/g, 'questions[' + newIndex + ']');\n          });\n        });\n      });\n    });\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      // Initially assign a unique ID; this will be updated on submit.\n      questionCard.setAttribute('data-question-id', questionId);\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n      let html = '<div class=\"order-indicator\"></div>';\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        let initialOptions = [];\n        let hasOther = false;\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions.split(\",\").map(function(o){ return o.trim(); });\n          if (initialOptions.indexOf(\"{other}\") !== -1) {\n            hasOther = true;\n            initialOptions = initialOptions.filter(function(opt){ return opt !== \"{other}\"; });\n          }\n        }\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" ' + (hasOther ? 'checked' : '') + ' /> Include \"Other\" Option</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        initialOptions.forEach(function(opt, idx) {\n          html += '<div class=\"option-item\">' +\n                  '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />' +\n                  '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>' +\n                  '</div>';\n        });\n        if (hasOther) {\n          const otherIndex = initialOptions.length;\n          html += '<div class=\"option-item other-option\">' +\n                  '<span>Other: </span>' +\n                  '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][options][' + otherIndex + ']\" />' +\n                  '</div>';\n        }\n        html += '  </div></div>';\n      }\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>' +\n              '<select name=\"questions[' + questionId + '][required]\">' +\n              '<option value=\"Yes\" ' + (requiredValue === \"Yes\" ? \"selected\" : \"\") + '>Yes</option>' +\n              '<option value=\"No\" ' + (requiredValue === \"No\" ? \"selected\" : \"\") + '>No</option>' +\n              '</select>';\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n      html += '<div class=\"toggle-container\">' +\n              '<label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>' +\n              '<label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>' +\n              '<button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>' +\n              '<button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>' +\n              '</div>';\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n      questionCard.innerHTML = html;\n      return questionCard;\n    }\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\nreturn [\n  {\n    json: { html }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -980,
        -300
      ],
      "id": "52c186ef-b2ce-459e-836f-2980369d8f9a",
      "name": "Code43"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        if (option.toLowerCase() === '{other}') {\n          return `\n            <div class=\"option-container\">\n              <input type=\"radio\" id=\"${fieldId}_otherRadio\" name=\"${fieldId}\" value=\"other\" ${reqAttr}>\n              <label for=\"${fieldId}_otherRadio\">Other:</label>\n              <input\n                type=\"text\"\n                id=\"${fieldId}_other\"\n                name=\"${fieldId}_other\"\n                placeholder=\"Please specify\"\n                oninput=\"document.getElementById('${fieldId}_otherRadio').checked = true\"\n              />\n            </div>\n          `;\n        } else {\n          return `\n            <div class=\"option-container\">\n              <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n              <label for=\"${fieldId}_${index}\">${option}</label>\n            </div>\n          `;\n        }\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        if (option.toLowerCase() === '{other}') {\n          return `\n            <div class=\"option-container\">\n              <input type=\"checkbox\" id=\"${fieldId}_otherCheck\" name=\"${fieldId}\" value=\"other\" ${reqAttr}>\n              <label for=\"${fieldId}_otherCheck\">Other:</label>\n              <input\n                type=\"text\"\n                id=\"${fieldId}_other\"\n                name=\"${fieldId}_other\"\n                placeholder=\"Please specify\"\n                oninput=\"document.getElementById('${fieldId}_otherCheck').checked = true\"\n              />\n            </div>\n          `;\n        } else {\n          return `\n            <div class=\"option-container\">\n              <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n              <label for=\"${fieldId}_${index}\">${option}</label>\n            </div>\n          `;\n        }\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    case 'attachment':\n      // Display the question as normal (textarea) plus a button to upload multiple attachments\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n        <br/>\n        <button type=\"button\" onclick=\"document.getElementById('${fieldId}_file').click();\">Upload Attachments</button>\n        <input type=\"file\" id=\"${fieldId}_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange('${fieldId}', this)\">\n        <div id=\"${fieldId}_display\" class=\"attachment-display\"></div>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input[type=\"radio\"],\n    .option-container input[type=\"checkbox\"] {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Inject the questions array into the client-side script.\n    const totalSteps = ${totalSteps};\n    const questions = ${JSON.stringify(questions)};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Build the QR code URL to include only the system data.\n    // This appends a \"system\" query parameter using the TicketSystem value.\n    const systemParam = \"${questions[0].TicketSystem}\";\n    const systemUrl = window.location.origin + window.location.pathname + \"?system=\" + encodeURIComponent(systemParam);\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(systemUrl);\n\n    // Helper function to filter and display unique attachments for a given question field\n    function handleAttachmentChange(fieldId, inputElem) {\n      const files = inputElem.files;\n      const uniqueFiles = {};\n      const fileArray = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (!uniqueFiles[file.name]) {\n          uniqueFiles[file.name] = true;\n          fileArray.push(file);\n        }\n      }\n      window.uniqueAttachments = window.uniqueAttachments || {};\n      window.uniqueAttachments[fieldId] = fileArray;\n      const displayElem = document.getElementById(fieldId + '_display');\n      if (displayElem) {\n        displayElem.textContent = fileArray.map(file => file.name).join(', ');\n      }\n    }\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      // Create a new FormData object (omitting the raw form inputs)\n      const formData = new FormData();\n      \n      // Append ticketSystem at the top\n      formData.append('ticketSystem', \"${questions[0].TicketSystem}\");\n      // Append TicketSystemId just like TicketSystem\n      formData.append('ticketSystemId', \"${questions[0].TicketSystemId}\");\n      // Append Bitrix24Project after TicketSystem\n      formData.append('Bitrix24Project', \"${questions[0].Bitrix24Project}\");\n      \n      // Append questions meta-data along with each answer\n      questions.forEach((q, i) => {\n        formData.append(\\`questions[\\${i}][question]\\`, q.Question);\n        formData.append(\\`questions[\\${i}][required]\\`, (q.Required && q.Required.toLowerCase() === \"yes\") ? \"Yes\" : \"No\");\n\n        let typeStr = \"\";\n        switch ((q.QuestionType || \"text\").toLowerCase()) {\n          case 'text':\n            typeStr = \"Longtext\";\n            break;\n          case 'attachment':\n            typeStr = \"Attachment\";\n            break;\n          case 'singleselect':\n          case 'multiselect':\n            typeStr = \"Selection\";\n            break;\n          default:\n            typeStr = \"Longtext\";\n        }\n        formData.append(\\`questions[\\${i}][type]\\`, typeStr);\n        formData.append(\\`questions[\\${i}][taskTitle]\\`, \"[empty]\");\n        formData.append(\\`questions[\\${i}][taskTag]\\`, \"[empty]\");\n\n        // Get the answer from the form element with name \"question_\" + q.Id\n        const elems = document.getElementsByName(\"question_\" + q.Id);\n        let answer = \"\";\n        if (elems.length > 0) {\n          if (elems[0].type === \"radio\") {\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                answer = elems[j].value;\n                if (answer === \"other\") {\n                  const otherInput = document.getElementById(\"question_\" + q.Id + \"_other\");\n                  answer = \"other:\" + otherInput.value;\n                }\n                break;\n              }\n            }\n          } else if (elems[0].type === \"checkbox\") {\n            const arr = [];\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                if (elems[j].value === \"other\") {\n                  const otherInput = document.getElementById(\"question_\" + q.Id + \"_other\");\n                  arr.push(\"other:\" + otherInput.value);\n                } else {\n                  arr.push(elems[j].value);\n                }\n              }\n            }\n            answer = arr.join(\", \");\n          } else {\n            answer = elems[0].value;\n          }\n        }\n        formData.append(\\`questions[\\${i}][answer]\\`, answer);\n\n        // If the question is of selection type and has options, add each option\n        if (\n          q.QuestionType &&\n          (q.QuestionType.toLowerCase() === \"singleselect\" || q.QuestionType.toLowerCase() === \"multiselect\") &&\n          q.QuestionOptions\n        ) {\n          const opts = q.QuestionOptions.split(',').map(o => o.trim());\n          opts.forEach((option, index) => {\n            formData.append(\\`questions[\\${i}][options][\\${index}]\\`, option);\n          });\n        }\n      });\n\n      // Append unique attachment files (if any) as binary data\n      if (window.uniqueAttachments) {\n        for (const field in window.uniqueAttachments) {\n          window.uniqueAttachments[field].forEach(file => {\n            formData.append(field, file);\n          });\n        }\n      }\n\n      // Append URL query parameters to the payload (but do not display them in the UI)\n      const urlParams = new URLSearchParams(window.location.search);\n      for (const [key, value] of urlParams.entries()) {\n        formData.append(key, value);\n      }\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        document.getElementById('multiStepForm').reset();\n        window.uniqueAttachments = {}; // Clear stored attachments\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        740,
        -20
      ],
      "id": "213405c7-c3d0-4832-80ae-2d69e13ed7aa",
      "name": "Code44"
    },
    {
      "parameters": {
        "jsCode": "// 1) Filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// 2) Grab fallback values from the FIRST item (the webhook), if present.\nlet fallbackTitle = \"\";\nlet fallbackOwner = \"\";\nlet fallbackProject = \"\";\nif (questionsArray.length > 0) {\n  const firstItem = questionsArray[0];\n  fallbackTitle = firstItem.TicketSystem || (firstItem.query && firstItem.query.system) || \"\";\n  fallbackOwner = firstItem.Owner || (questionsArray[0].query && questionsArray[0].query.user) || \"\";\n  fallbackProject = firstItem.Bitrix24Project || (firstItem.query && firstItem.query.Bitrix24Project) || \"\";\n}\n\n// 3) Find the first \"database record\" that has an Id property.\nlet dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\"));\n\n// 4) Set final values for Title, Bitrix24 Project ID, and Owner.\nlet ticketSystemTitle = dbRecord ? (dbRecord.TicketSystem || fallbackTitle) : fallbackTitle;\nlet bitrix24ProjectId = dbRecord ? (dbRecord.Bitrix24Project || fallbackProject) : fallbackProject;\nlet owner = dbRecord ? (dbRecord.Owner || fallbackOwner) : fallbackOwner;\n\n// 5) Determine TicketSystemId using the following priority:\nlet ticketSystemId = \"\";\nif (dbRecord && dbRecord.TicketSystemId && dbRecord.TicketSystemId !== \"null\") {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const firstItem = questionsArray[0] || {};\n  const webhookTicketId = firstItem.query && firstItem.query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    ticketSystemId = dbRecord ? dbRecord.Id : \"\";\n  }\n}\n\n// 6) Build the HTML string.\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n      cursor: move;\n      transition: border 0.2s ease;\n    }\n    .option-item.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n  <script>\n    // Global variable for drag and drop of questions\n    let draggedElement = null;\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n    // Update order indicator and assign new data-question-index based on current DOM order.\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        card.setAttribute('data-question-index', index + 1);\n      });\n    }\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text': return 'LongText';\n        case 'singleselect': return 'singleselect';\n        case 'multiselect': return 'multiselect';\n        case 'date':\n        case 'dateselector': return 'date';\n        case 'attachment': return 'Attachment';\n        default: return lowerType;\n      }\n    }\n    // Global variable for dragging options\n    let draggedOption = null;\n    function handleOptionDragStart(e) {\n      draggedOption = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleOptionDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleOptionDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedOption && target !== draggedOption) {\n        const container = target.parentElement;\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedOption, target);\n        } else {\n          container.insertBefore(draggedOption, target.nextSibling);\n        }\n        updateOptionNames(container);\n      }\n    }\n    function handleOptionDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedOption = null;\n    }\n    function makeOptionDraggable(optionElement) {\n      optionElement.setAttribute('draggable', 'true');\n      optionElement.addEventListener('dragstart', handleOptionDragStart);\n      optionElement.addEventListener('dragover', handleOptionDragOver);\n      optionElement.addEventListener('drop', handleOptionDrop);\n      optionElement.addEventListener('dragend', handleOptionDragEnd);\n    }\n    function updateOptionNames(optionsList) {\n      const questionCard = optionsList.closest('.question-card');\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionItems = optionsList.querySelectorAll('.option-item');\n      optionItems.forEach((option, index) => {\n        const input = option.querySelector('input[type=\"text\"]');\n        if (input) {\n          input.name = 'questions[' + questionId + '][options][' + index + ']';\n        }\n      });\n    }\n    // Values set server-side and injected into the HTML.\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n    let questionCount = 0;\n    document.addEventListener('DOMContentLoaded', function() {\n      // Pre-fill the fields.\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n      // Populate existing questions (only render those with a defined QuestionType).\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          if (questionData.QuestionType) {\n            const questionCard = createQuestionCard(questionData, index);\n            questionsContainer.appendChild(questionCard);\n            questionCount = index + 1;\n          }\n        });\n      }\n      updateOrderIndicators();\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          const optionItem = e.target.closest('.option-item');\n          const optionsList = optionItem.parentElement;\n          optionItem.remove();\n          updateOptionNames(optionsList);\n          return;\n        }\n      });\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = '<span>Other: </span><input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionCard.getAttribute('data-question-id') + '][options][' + nextIndex + ']\" />';\n              // Make the other option draggable as well.\n              makeOptionDraggable(otherDiv);\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n      // On form submit, re-index each question's input names based on current DOM order.\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators();\n        // Get the current order of question cards.\n        const cards = Array.from(document.querySelectorAll('#questionsContainer .question-card'));\n        cards.forEach((card, i) => {\n          // Use a one-based index.\n          const newIndex = i + 1;\n          // Update the data-question-id attribute.\n          card.setAttribute('data-question-id', newIndex);\n          // Update each input/select/textarea name using a global regex.\n          card.querySelectorAll('input, select, textarea').forEach(input => {\n            input.name = input.name.replace(/questions\\\\[\\\\d+\\\\]/g, 'questions[' + newIndex + ']');\n          });\n        });\n      });\n    });\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      // Initially assign a unique ID; this will be updated on submit.\n      questionCard.setAttribute('data-question-id', questionId);\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n      let html = '<div class=\"order-indicator\"></div>';\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += '<textarea name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\">' + questionTextValue + '</textarea>';\n      } else {\n        html += '<input type=\"text\" name=\"questions[' + questionId + '][question]\" class=\"questionText\" placeholder=\"Enter your question text...\" value=\"' + questionTextValue + '\" />';\n      }\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        let initialOptions = [];\n        let hasOther = false;\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions.split(\",\").map(function(o){ return o.trim(); });\n          if (initialOptions.indexOf(\"{other}\") !== -1) {\n            hasOther = true;\n            initialOptions = initialOptions.filter(function(opt){ return opt !== \"{other}\"; });\n          }\n        }\n        html += '<label><input type=\"checkbox\" class=\"includeOtherToggle\" ' + (hasOther ? 'checked' : '') + ' /> Include \"Other\" Option</label>';\n        html += '<div class=\"options-container\">';\n        html += '  <button type=\"button\" class=\"add-option-btn\">Add Option</button>';\n        html += '  <div class=\"options-list\">';\n        initialOptions.forEach(function(opt, idx) {\n          html += '<div class=\"option-item\">' +\n                  '<input type=\"text\" placeholder=\"Option text...\" name=\"questions[' + questionId + '][options][' + idx + ']\" value=\"' + opt + '\" />' +\n                  '<button type=\"button\" class=\"remove-option-btn\">Remove Option</button>' +\n                  '</div>';\n        });\n        if (hasOther) {\n          const otherIndex = initialOptions.length;\n          html += '<div class=\"option-item other-option\">' +\n                  '<span>Other: </span>' +\n                  '<input type=\"text\" placeholder=\"Enter other option...\" name=\"questions[' + questionId + '][options][' + otherIndex + ']\" />' +\n                  '</div>';\n        }\n        html += '  </div></div>';\n      }\n      if (lowerType === 'date') {\n        html += '<label>Date Selector Preview</label>';\n        html += '<input type=\"date\" disabled />';\n      }\n      if (lowerType === 'attachment') {\n        html += '<label>Attachment Upload Preview</label>';\n        html += '<input type=\"file\" disabled />';\n      }\n      const requiredValue = questionData.Required || \"Yes\";\n      html += '<label>Required</label>' +\n              '<select name=\"questions[' + questionId + '][required]\">' +\n              '<option value=\"Yes\" ' + (requiredValue === \"Yes\" ? \"selected\" : \"\") + '>Yes</option>' +\n              '<option value=\"No\" ' + (requiredValue === \"No\" ? \"selected\" : \"\") + '>No</option>' +\n              '</select>';\n      const formattedType = getFormattedType(lowerType);\n      html += '<input type=\"hidden\" name=\"questions[' + questionId + '][type]\" value=\"' + formattedType + '\">';\n      html += '<div class=\"toggle-container\">' +\n              '<label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>' +\n              '<label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>' +\n              '<button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>' +\n              '<button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>' +\n              '</div>';\n      html += '<button type=\"button\" class=\"remove-question-btn\">Remove Question</button>';\n      questionCard.innerHTML = html;\n      \n      // Make each option item draggable if this is a selection type.\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionsList = questionCard.querySelector('.options-list');\n        if (optionsList) {\n          optionsList.querySelectorAll('.option-item').forEach(function(option) {\n            makeOptionDraggable(option);\n          });\n        }\n      }\n      \n      return questionCard;\n    }\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n      // Make this option draggable.\n      makeOptionDraggable(optionDiv);\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n      updateOptionNames(optionsList);\n    }\n  </script>\n</body>\n</html>`;\n\nreturn [\n  {\n    json: { html }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1160,
        -340
      ],
      "id": "dd7b47ff-1866-416b-a0a4-b1347ba1662e",
      "name": "Code45"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// 1) Filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// 2) Grab fallback values from the FIRST item (the webhook), if present.\nlet fallbackTitle = \"\";\nlet fallbackOwner = \"\";\nlet fallbackProject = \"\";\nif (questionsArray.length > 0) {\n  const firstItem = questionsArray[0];\n  fallbackTitle = firstItem.TicketSystem || (firstItem.query && firstItem.query.system) || \"\";\n  fallbackOwner = firstItem.Owner || (firstItem.query && firstItem.query.user) || \"\";\n  fallbackProject = firstItem.Bitrix24Project || (firstItem.query && firstItem.query.Bitrix24Project) || \"\";\n}\n\n// 3) Find the first \"database record\" that has an Id property.\nlet dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\"));\n\n// 4) Set final values for Title, Bitrix24 Project ID, and Owner.\nlet ticketSystemTitle = dbRecord ? (dbRecord.TicketSystem || fallbackTitle) : fallbackTitle;\nlet bitrix24ProjectId = dbRecord ? (dbRecord.Bitrix24Project || fallbackProject) : fallbackProject;\nlet owner = dbRecord ? (dbRecord.Owner || fallbackOwner) : fallbackOwner;\n\n// 5) Determine TicketSystemId using the following priority:\nlet ticketSystemId = \"\";\nif (dbRecord && dbRecord.TicketSystemId && dbRecord.TicketSystemId !== \"null\") {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const firstItem = questionsArray[0] || {};\n  const webhookTicketId = firstItem.query && firstItem.query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    ticketSystemId = dbRecord ? dbRecord.Id : \"\";\n  }\n}\n\n// Build the HTML string.\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n      cursor: move;\n      transition: border 0.2s ease;\n    }\n    .option-item.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n  <script>\n    // DRAG & DROP: Questions\n    let draggedElement = null;\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        card.setAttribute('data-question-index', index + 1);\n      });\n    }\n    // DRAG & DROP: Options\n    let draggedOption = null;\n    function handleOptionDragStart(e) {\n      draggedOption = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleOptionDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleOptionDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedOption && target !== draggedOption) {\n        const container = target.parentElement;\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedOption, target);\n        } else {\n          container.insertBefore(draggedOption, target.nextSibling);\n        }\n        updateOptionNames(container);\n      }\n    }\n    function handleOptionDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedOption = null;\n    }\n    function makeOptionDraggable(optionElement) {\n      optionElement.setAttribute('draggable', 'true');\n      optionElement.addEventListener('dragstart', handleOptionDragStart);\n      optionElement.addEventListener('dragover', handleOptionDragOver);\n      optionElement.addEventListener('drop', handleOptionDrop);\n      optionElement.addEventListener('dragend', handleOptionDragEnd);\n    }\n    function updateOptionNames(optionsList) {\n      const questionCard = optionsList.closest('.question-card');\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionItems = optionsList.querySelectorAll('.option-item');\n      optionItems.forEach((option, index) => {\n        const input = option.querySelector('input[type=\"text\"]');\n        if (input) {\n          input.name = 'questions[' + questionId + '][options][' + index + ']';\n        }\n      });\n    }\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text': return 'LongText';\n        case 'singleselect': return 'singleselect';\n        case 'multiselect': return 'multiselect';\n        case 'date':\n        case 'dateselector': return 'date';\n        case 'attachment': return 'Attachment';\n        default: return lowerType;\n      }\n    }\n    // Load initial data from server\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n    let questionCount = 0;\n    document.addEventListener('DOMContentLoaded', function() {\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          if (questionData.QuestionType) {\n            const questionCard = createQuestionCard(questionData, index);\n            questionsContainer.appendChild(questionCard);\n            questionCount = index + 1;\n          }\n        });\n      }\n      updateOrderIndicators();\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n      document.getElementById('questionsContainer').addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.previousElementSibling) {\n            container.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          const container = document.getElementById('questionsContainer');\n          if (questionCard.nextElementSibling) {\n            container.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          const optionItem = e.target.closest('.option-item');\n          const optionsList = optionItem.parentElement;\n          optionItem.remove();\n          updateOptionNames(optionsList);\n          return;\n        }\n      });\n      document.getElementById('questionsContainer').addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n          if (e.target.checked) {\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = \\`\n                <label>Other:</label>\n                <input \n                  type=\"text\" \n                  readonly \n                  name=\"questions[\\${questionCard.getAttribute('data-question-id')}][options][\\${nextIndex}]\" \n                  value=\"{other}\" \n                />\n              \\`;\n              makeOptionDraggable(otherDiv);\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n      ticketForm.addEventListener('submit', function(e) {\n        updateOrderIndicators();\n        const cards = Array.from(document.querySelectorAll('#questionsContainer .question-card'));\n        cards.forEach((card, i) => {\n          const newIndex = i + 1;\n          card.setAttribute('data-question-id', newIndex);\n          card.querySelectorAll('input, select, textarea').forEach(input => {\n            input.name = input.name.replace(/questions\\\\[\\\\d+\\\\]/, 'questions[' + newIndex + ']');\n          });\n        });\n      });\n    });\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n      let html = '<div class=\"order-indicator\"></div>';\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += \\`\n          <textarea name=\"questions[\\${questionId}][question]\" \n                    class=\"questionText\" \n                    placeholder=\"Enter your question text...\">\\${questionTextValue}</textarea>\n        \\`;\n      } else {\n        html += \\`\n          <input type=\"text\" \n                 name=\"questions[\\${questionId}][question]\" \n                 class=\"questionText\" \n                 placeholder=\"Enter your question text...\" \n                 value=\"\\${questionTextValue}\" />\n        \\`;\n      }\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n        let initialOptions = [];\n        let hasOther = false;\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions.split(\",\").map(o => o.trim());\n          if (initialOptions.indexOf(\"{other}\") !== -1) {\n            hasOther = true;\n            initialOptions = initialOptions.filter(opt => opt !== \"{other}\");\n          }\n        }\n        html += \\`\n          <label>\n            <input type=\"checkbox\" class=\"includeOtherToggle\" \\${hasOther ? 'checked' : ''} />\n            Include \"Other\" Option\n          </label>\n        \\`;\n        html += \\`\n          <div class=\"options-container\">\n            <button type=\"button\" class=\"add-option-btn\">Add Option</button>\n            <div class=\"options-list\">\n        \\`;\n        initialOptions.forEach(function(opt, idx) {\n          html += \\`\n            <div class=\"option-item\">\n              <input type=\"text\" \n                     placeholder=\"Option text...\" \n                     name=\"questions[\\${questionId}][options][\\${idx}]\" \n                     value=\"\\${opt}\" />\n              <button type=\"button\" class=\"remove-option-btn\">Remove Option</button>\n            </div>\n          \\`;\n        });\n        if (hasOther) {\n          const otherIndex = initialOptions.length;\n          html += \\`\n            <div class=\"option-item other-option\">\n              <label>Other:</label>\n              <input type=\"text\" \n                     readonly \n                     name=\"questions[\\${questionId}][options][\\${otherIndex}]\" \n                     value=\"{other}\" />\n            </div>\n          \\`;\n        }\n        html += '</div></div>';\n      }\n      if (lowerType === 'date') {\n        html += \\`\n          <label>Date Selector Preview</label>\n          <input type=\"date\" disabled />\n        \\`;\n      }\n      if (lowerType === 'attachment') {\n        html += \\`\n          <label>Attachment Upload Preview</label>\n          <input type=\"file\" disabled />\n        \\`;\n      }\n      const requiredValue = questionData.Required || \"Yes\";\n      html += \\`\n        <label>Required</label>\n        <select name=\"questions[\\${questionId}][required]\">\n          <option value=\"Yes\" \\${requiredValue === \"Yes\" ? \"selected\" : \"\"}>Yes</option>\n          <option value=\"No\" \\${requiredValue === \"No\" ? \"selected\" : \"\"}>No</option>\n        </select>\n      \\`;\n      const formattedType = getFormattedType(lowerType);\n      html += \\`\n        <input type=\"hidden\" name=\"questions[\\${questionId}][type]\" value=\"\\${formattedType}\">\n      \\`;\n      html += \\`\n        <div class=\"toggle-container\">\n          <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>\n          <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>\n          <button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>\n          <button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>\n        </div>\n        <button type=\"button\" class=\"remove-question-btn\">Remove Question</button>\n      \\`;\n      questionCard.innerHTML = html;\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionsList = questionCard.querySelector('.options-list');\n        if (optionsList) {\n          optionsList.querySelectorAll('.option-item').forEach(function(option) {\n            makeOptionDraggable(option);\n          });\n        }\n      }\n      return questionCard;\n    }\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n      makeOptionDraggable(optionDiv);\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n      updateOptionNames(optionsList);\n    }\n  </script>\n</body>\n</html>`;\n\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1300,
        -220
      ],
      "id": "822c3bac-92ba-4cc1-90a8-62dc75a6069c",
      "name": "Code46"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// 1) Filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// 2) Grab fallback values from the FIRST item (the webhook), if present.\nlet fallbackTitle = \"\";\nlet fallbackOwner = \"\";\nlet fallbackProject = \"\";\nif (questionsArray.length > 0) {\n  const firstItem = questionsArray[0];\n  fallbackTitle = firstItem.TicketSystem || (firstItem.query && firstItem.query.system) || \"\";\n  fallbackOwner = firstItem.Owner || (firstItem.query && firstItem.query.user) || \"\";\n  fallbackProject = firstItem.Bitrix24Project || (firstItem.query && firstItem.query.Bitrix24Project) || \"\";\n}\n\n// 3) Find the first \"database record\" that has an Id property.\nlet dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\"));\n\n// 4) Set final values for Title, Bitrix24 Project ID, and Owner.\nlet ticketSystemTitle = dbRecord ? (dbRecord.TicketSystem || fallbackTitle) : fallbackTitle;\nlet bitrix24ProjectId = dbRecord ? (dbRecord.Bitrix24Project || fallbackProject) : fallbackProject;\nlet owner = dbRecord ? (dbRecord.Owner || fallbackOwner) : fallbackOwner;\n\n// 5) Determine TicketSystemId using the following priority:\nlet ticketSystemId = \"\";\nif (dbRecord && dbRecord.TicketSystemId && dbRecord.TicketSystemId !== \"null\") {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const firstItem = questionsArray[0] || {};\n  const webhookTicketId = firstItem.query && firstItem.query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    ticketSystemId = dbRecord ? dbRecord.Id : \"\";\n  }\n}\n\n// Build the HTML string.\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n      cursor: move;\n      transition: border 0.2s ease;\n    }\n    .option-item.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // ------------------ DRAG & DROP: QUESTIONS ------------------\n    let draggedElement = null;\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        card.setAttribute('data-question-index', index + 1);\n      });\n    }\n\n    // ------------------ DRAG & DROP: OPTIONS ------------------\n    let draggedOption = null;\n    function handleOptionDragStart(e) {\n      draggedOption = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleOptionDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleOptionDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedOption && target !== draggedOption) {\n        const container = target.parentElement;\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedOption, target);\n        } else {\n          container.insertBefore(draggedOption, target.nextSibling);\n        }\n        updateOptionNames(container);\n      }\n    }\n    function handleOptionDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedOption = null;\n    }\n    function makeOptionDraggable(optionElement) {\n      optionElement.setAttribute('draggable', 'true');\n      optionElement.addEventListener('dragstart', handleOptionDragStart);\n      optionElement.addEventListener('dragover', handleOptionDragOver);\n      optionElement.addEventListener('drop', handleOptionDrop);\n      optionElement.addEventListener('dragend', handleOptionDragEnd);\n    }\n    function updateOptionNames(optionsList) {\n      const questionCard = optionsList.closest('.question-card');\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionItems = optionsList.querySelectorAll('.option-item');\n      optionItems.forEach((option, index) => {\n        // The *visible* text input might not hold the real name\n        // We only rename the input that has a 'name' attribute\n        const textInput = option.querySelector('input[type=\"text\"][name]');\n        if (textInput) {\n          textInput.name = 'questions[' + questionId + '][options][' + index + ']';\n        }\n        // Also handle hidden input if present\n        const hiddenInput = option.querySelector('input[type=\"hidden\"]');\n        if (hiddenInput) {\n          hiddenInput.name = 'questions[' + questionId + '][options][' + index + ']';\n        }\n      });\n    }\n\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text': return 'LongText';\n        case 'singleselect': return 'singleselect';\n        case 'multiselect': return 'multiselect';\n        case 'date':\n        case 'dateselector': return 'date';\n        case 'attachment': return 'Attachment';\n        default: return lowerType;\n      }\n    }\n\n    // ------------------ SERVER-SIDE DATA ------------------\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Pre-fill the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          if (questionData.QuestionType) {\n            const questionCard = createQuestionCard(questionData, index);\n            questionsContainer.appendChild(questionCard);\n            questionCount = index + 1;\n          }\n        });\n      }\n      updateOrderIndicators();\n\n      // Add a new question\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n\n      // Handle clicks on question/option buttons\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          if (questionCard.previousElementSibling) {\n            questionsContainer.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          if (questionCard.nextElementSibling) {\n            questionsContainer.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          const optionItem = e.target.closest('.option-item');\n          const optionsList = optionItem.parentElement;\n          optionItem.remove();\n          updateOptionNames(optionsList);\n          return;\n        }\n      });\n\n      // Toggle “Include Other” logic\n      questionsContainer.addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n\n          if (e.target.checked) {\n            if (!otherOption) {\n              // Insert a read-only \"Other\" item\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n\n              // We keep a hidden input with value=\"{other}\"\n              // so the final submission still contains \"{other}\" \n              // even though the user doesn't see it\n              otherDiv.innerHTML = \\`\n                <label>Other:</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"(Other)\"\n                  readonly\n                />\n                <input\n                  type=\"hidden\"\n                  name=\"questions[\\${questionCard.getAttribute('data-question-id')}][options][\\${nextIndex}]\"\n                  value=\"{other}\"\n                />\n              \\`;\n\n              makeOptionDraggable(otherDiv);\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            // Remove the \"Other\" item\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n\n      // Re-index each question’s input names before form submission\n      ticketForm.addEventListener('submit', function() {\n        updateOrderIndicators();\n        const cards = Array.from(document.querySelectorAll('#questionsContainer .question-card'));\n        cards.forEach((card, i) => {\n          const newIndex = i + 1;\n          card.setAttribute('data-question-id', newIndex);\n\n          // Update question input names from \"questions[x]\" to \"questions[newIndex]\"\n          card.querySelectorAll('input, select, textarea').forEach(input => {\n            // Replace only the first [digit], e.g. [0] → [1], etc.\n            input.name = input.name.replace(/questions\\\\[\\\\d+\\\\]/, 'questions[' + newIndex + ']');\n          });\n        });\n      });\n    });\n\n    // Create a new question card\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Make question card draggable\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      let html = '<div class=\"order-indicator\"></div>';\n\n      // Question text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += \\`\n          <textarea name=\"questions[\\${questionId}][question]\" \n                    class=\"questionText\" \n                    placeholder=\"Enter your question text...\">\\${questionTextValue}</textarea>\n        \\`;\n      } else {\n        html += \\`\n          <input type=\"text\" \n                 name=\"questions[\\${questionId}][question]\" \n                 class=\"questionText\" \n                 placeholder=\"Enter your question text...\" \n                 value=\"\\${questionTextValue}\" />\n        \\`;\n      }\n\n      // SingleSelect / MultiSelect\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n\n        let initialOptions = [];\n        let hasOther = false;\n\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions\n            .split(\",\")\n            .map(o => o.trim());\n          // Check if {other} is present\n          if (initialOptions.indexOf(\"{other}\") !== -1) {\n            hasOther = true;\n            // Remove {other} from the normal listing so we can handle it separately\n            initialOptions = initialOptions.filter(opt => opt !== \"{other}\");\n          }\n        }\n\n        // “Include 'Other' Option” checkbox\n        html += \\`\n          <label>\n            <input type=\"checkbox\" class=\"includeOtherToggle\" \\${hasOther ? 'checked' : ''} />\n            Include \"Other\" Option\n          </label>\n        \\`;\n\n        // Options container\n        html += \\`\n          <div class=\"options-container\">\n            <button type=\"button\" class=\"add-option-btn\">Add Option</button>\n            <div class=\"options-list\">\n        \\`;\n\n        // Normal options\n        initialOptions.forEach(function(opt, idx) {\n          html += \\`\n            <div class=\"option-item\">\n              <input type=\"text\" \n                     placeholder=\"Option text...\" \n                     name=\"questions[\\${questionId}][options][\\${idx}]\" \n                     value=\"\\${opt}\" />\n              <button type=\"button\" class=\"remove-option-btn\">Remove Option</button>\n            </div>\n          \\`;\n        });\n\n        // If {other} was in the array, add a read-only “Other” item\n        if (hasOther) {\n          const otherIndex = initialOptions.length;\n          html += \\`\n            <div class=\"option-item other-option\">\n              <label>Other:</label>\n              <input\n                type=\"text\"\n                placeholder=\"(Other)\"\n                readonly\n              />\n              <input\n                type=\"hidden\"\n                name=\"questions[\\${questionId}][options][\\${otherIndex}]\"\n                value=\"{other}\"\n              />\n            </div>\n          \\`;\n        }\n\n        html += '</div></div>';\n      }\n\n      // Date\n      if (lowerType === 'date') {\n        html += \\`\n          <label>Date Selector Preview</label>\n          <input type=\"date\" disabled />\n        \\`;\n      }\n\n      // Attachment\n      if (lowerType === 'attachment') {\n        html += \\`\n          <label>Attachment Upload Preview</label>\n          <input type=\"file\" disabled />\n        \\`;\n      }\n\n      // Required?\n      const requiredValue = questionData.Required || \"Yes\";\n      html += \\`\n        <label>Required</label>\n        <select name=\"questions[\\${questionId}][required]\">\n          <option value=\"Yes\" \\${requiredValue === \"Yes\" ? \"selected\" : \"\"}>Yes</option>\n          <option value=\"No\" \\${requiredValue === \"No\" ? \"selected\" : \"\"}>No</option>\n        </select>\n      \\`;\n\n      // Hidden type field\n      const formattedType = getFormattedType(lowerType);\n      html += \\`\n        <input type=\"hidden\" name=\"questions[\\${questionId}][type]\" value=\"\\${formattedType}\">\n      \\`;\n\n      // Move & remove buttons\n      html += \\`\n        <div class=\"toggle-container\">\n          <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" /> Use as Task Title</label>\n          <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" /> Use as Tag</label>\n          <button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>\n          <button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>\n        </div>\n        <button type=\"button\" class=\"remove-question-btn\">Remove Question</button>\n      \\`;\n\n      questionCard.innerHTML = html;\n\n      // Make each option item draggable if selection type\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionsList = questionCard.querySelector('.options-list');\n        if (optionsList) {\n          optionsList.querySelectorAll('.option-item').forEach(function(option) {\n            makeOptionDraggable(option);\n          });\n        }\n      }\n\n      return questionCard;\n    }\n\n    // Add a new “normal” option\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      // Count only non-\"other\" items\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n      makeOptionDraggable(optionDiv);\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n\n      // If an “other-option” exists, insert before it\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n      updateOptionNames(optionsList);\n    }\n  </script>\n</body>\n</html>`;\n\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1440,
        -140
      ],
      "id": "6def1374-13f7-4e7b-a7a5-6de036301441",
      "name": "Code47"
    },
    {
      "parameters": {
        "jsCode": "// Gather all incoming items\nconst items = $input.all();\n\n// We'll accumulate our final output items here\nconst output = [];\n\nfor (const item of items) {\n  const body = item.json.body || {};\n\n  // We'll store question data in a dictionary keyed by the question index\n  const questionsDict = {};\n  // Array to record the order in which questions are first encountered\n  const questionOrder = [];\n\n  // Iterate over each key in the body\n  for (const [key, value] of Object.entries(body)) {\n    // We only care about keys that match questions[<index>][<property>][<optional subIndex>]\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(.*?)\\](?:\\[(\\d+)\\])?$/);\n    if (!match) {\n      continue;\n    }\n\n    const questionIndex = match[1];\n    const property = match[2];\n    const subIndex = match[3];\n\n    // If this is the first time we see this questionIndex, initialize it and record its order\n    if (!questionsDict.hasOwnProperty(questionIndex)) {\n      questionsDict[questionIndex] = {\n        question: \"\",\n        required: \"\",\n        type: \"\",\n        options: []\n      };\n      questionOrder.push(questionIndex);\n    }\n\n    // If property is \"options\", accumulate the values; otherwise set the property\n    if (property === \"options\") {\n      questionsDict[questionIndex].options.push(value);\n    } else {\n      questionsDict[questionIndex][property] = value;\n    }\n  }\n\n  // Build a new item per question in the order they were received\n  for (const idx of questionOrder) {\n    const q = questionsDict[idx];\n    // Join multiple options with commas\n    const optionsString = (q.options || []).join(\", \");\n\n    output.push({\n      json: {\n        title: body.title,\n        ticketSystemId: body.ticketSystemId, // Added ticketSystemId here\n        bitrix24ProjectId: body.bitrix24ProjectId,\n        owner: body.owner,\n        question: q.question,\n        required: q.required,\n        type: q.type,\n        options: optionsString\n      }\n    });\n  }\n}\n\n// Return one item per question\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        920
      ],
      "id": "2c780bb8-cf4c-475c-ad1c-3d7c8a34046d",
      "name": "Code48"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// Get the incoming JSON records (each record represents a question)\nconst questions = items.map(item => item.json);\n\n// Sort questions by QuestionOrder\nquestions.sort((a, b) => a.QuestionOrder - b.QuestionOrder);\n\n// Helper function to generate the HTML for a single question step\nfunction generateStep(question, stepIndex) {\n  const fieldId = `question_${question.Id}`;\n  // Determine if the field is required (if question.Required equals \"Yes\")\n  const isRequired = (question.Required && question.Required.toLowerCase() === \"yes\") ? 'required' : '';\n  const requiredMarker = isRequired ? '<span class=\"required-asterisk\">*</span>' : '';\n\n  // Build the question header (number + text + optional required marker)\n  const questionHeader = `\n    <div class=\"question-header\">\n      <span class=\"question-number\">${stepIndex + 1}.</span>\n      <span class=\"question-text\"><strong>${question.Question} ${requiredMarker}</strong></span>\n    </div>\n  `;\n\n  // Optionally show help text if it exists\n  const helpTextHtml = question.HelpText\n    ? `<div class=\"question-helptext\">${question.HelpText}</div>`\n    : '';\n\n  let answerHtml = '';\n\n  // Use case-insensitive question types\n  const qType = question.QuestionType ? question.QuestionType.toLowerCase() : 'text';\n\n  switch (qType) {\n    case 'text':\n      // Always use a textarea for long text\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n      break;\n\n    case 'singleselect': {\n      // Split comma-separated options and trim whitespace; generate radio buttons\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        // Normalize option text to handle variations like \"Other:\", \"other\", \"{other}\", etc.\n        const normalizedOption = option.replace(/[{}:]/g, '').trim().toLowerCase();\n        if (normalizedOption === 'other') {\n          return `\n            <div class=\"option-container\">\n              <input type=\"radio\" id=\"${fieldId}_otherRadio\" name=\"${fieldId}\" value=\"other\" ${reqAttr}>\n              <label for=\"${fieldId}_otherRadio\">Other:</label>\n              <input\n                type=\"text\"\n                id=\"${fieldId}_other\"\n                name=\"${fieldId}_other\"\n                placeholder=\"Please specify\"\n                oninput=\"document.getElementById('${fieldId}_otherRadio').checked = true\"\n              />\n            </div>\n          `;\n        } else {\n          return `\n            <div class=\"option-container\">\n              <input type=\"radio\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n              <label for=\"${fieldId}_${index}\">${option}</label>\n            </div>\n          `;\n        }\n      }).join('');\n      break;\n    }\n\n    case 'multiselect': {\n      // Split comma-separated options and trim whitespace; generate checkboxes\n      const options = question.QuestionOptions\n        ? question.QuestionOptions.split(',').map(opt => opt.trim())\n        : [];\n      answerHtml = options.map((option, index) => {\n        const reqAttr = (isRequired && index === 0) ? isRequired : '';\n        // Normalize option text as above\n        const normalizedOption = option.replace(/[{}:]/g, '').trim().toLowerCase();\n        if (normalizedOption === 'other') {\n          return `\n            <div class=\"option-container\">\n              <input type=\"checkbox\" id=\"${fieldId}_otherCheck\" name=\"${fieldId}\" value=\"other\" ${reqAttr}>\n              <label for=\"${fieldId}_otherCheck\">Other:</label>\n              <input\n                type=\"text\"\n                id=\"${fieldId}_other\"\n                name=\"${fieldId}_other\"\n                placeholder=\"Please specify\"\n                oninput=\"document.getElementById('${fieldId}_otherCheck').checked = true\"\n              />\n            </div>\n          `;\n        } else {\n          return `\n            <div class=\"option-container\">\n              <input type=\"checkbox\" id=\"${fieldId}_${index}\" name=\"${fieldId}\" value=\"${option}\" ${reqAttr}>\n              <label for=\"${fieldId}_${index}\">${option}</label>\n            </div>\n          `;\n        }\n      }).join('');\n      break;\n    }\n\n    case 'date':\n      // Create a date picker input\n      answerHtml = `\n        <input type=\"date\" id=\"${fieldId}\" name=\"${fieldId}\" ${isRequired}>\n      `;\n      break;\n\n    case 'attachment':\n      // Display the question as normal (textarea) plus a button to upload multiple attachments\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n        <br/>\n        <button type=\"button\" onclick=\"document.getElementById('${fieldId}_file').click();\">Upload Attachments</button>\n        <input type=\"file\" id=\"${fieldId}_file\" multiple style=\"display: none;\" onchange=\"handleAttachmentChange('${fieldId}', this)\">\n        <div id=\"${fieldId}_display\" class=\"attachment-display\"></div>\n      `;\n      break;\n\n    default:\n      // Fallback: if an unknown type is provided, default to a long text textarea\n      answerHtml = `\n        <textarea id=\"${fieldId}\" name=\"${fieldId}\" rows=\"4\" ${isRequired}></textarea>\n      `;\n  }\n\n  // Wrap each question in a \"question-step\" container, hidden by default.\n  // We'll show step 0 by default and hide others in JS.\n  const displayStyle = (stepIndex === 0) ? 'block' : 'none';\n\n  return `\n    <div class=\"question-step\" style=\"display: ${displayStyle};\">\n      <div class=\"question-container\">\n        ${questionHeader}\n        ${helpTextHtml}\n        <div class=\"question-answer\">\n          ${answerHtml}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Build all question steps\nconst totalSteps = questions.length;\nlet stepsHtml = '';\nquestions.forEach((question, index) => {\n  stepsHtml += generateStep(question, index);\n});\n\n// Build the complete HTML page\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>${questions[0].TicketSystem} Ticket</title>\n  <!-- Confetti library (via CDN) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js\"></script>\n\n  <style>\n    /* 1.5x sizes:\n       - Base text: 18px → 27px\n       - Title: 28px → 42px\n    */\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 27px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding-top: 20px;\n    }\n\n    /* Title at top */\n    .title {\n      font-size: 42px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n    }\n\n    /* Main container for the form */\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 0 20px 20px;\n    }\n\n    /* The QR code under the title */\n    .qr-code {\n      margin-bottom: 20px;\n    }\n\n    /* Hide QR code on mobile (<= 768px) */\n    @media (max-width: 768px) {\n      .qr-code {\n        display: none;\n      }\n    }\n\n    /* Progress Bar area */\n    .progress-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    .progress-label {\n      font-weight: bold;\n    }\n    .progress-bar {\n      background-color: #ccc;\n      flex-grow: 1;\n      height: 10px;\n      margin: 0 10px;\n      border-radius: 5px;\n      overflow: hidden;\n    }\n    .progress {\n      background-color: #000;\n      height: 100%;\n      width: 0;\n      transition: width 0.3s ease;\n    }\n\n    /* Each question step (hidden except current) */\n    .question-step {\n      margin-bottom: 30px;\n    }\n\n    /* LimeSurvey-like question container */\n    .question-container {\n      border-bottom: 1px solid #eaeaea;\n      padding-bottom: 20px;\n      margin-bottom: 20px;\n    }\n    .question-header {\n      margin-bottom: 8px;\n    }\n    .question-number {\n      margin-right: 5px;\n    }\n    .question-text strong {\n      font-size: 1.1em;\n    }\n    .required-asterisk {\n      color: red;\n      margin-left: 5px;\n    }\n    .question-helptext {\n      font-size: 0.8em;\n      color: #666;\n      font-style: italic;\n      margin-bottom: 10px;\n    }\n\n    /* Answers */\n    .question-answer {\n      margin-top: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 0.8em;\n    }\n    textarea {\n      resize: vertical;\n    }\n\n    /* SingleSelect / MultiSelect option styling */\n    .option-container {\n      margin: 5px 0;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n    }\n    .option-container input[type=\"radio\"],\n    .option-container input[type=\"checkbox\"] {\n      transform: scale(1.2);\n      margin-right: 10px;\n      cursor: pointer;\n    }\n    .option-container label {\n      font-size: 0.9em;\n      margin: 0;\n      cursor: pointer;\n    }\n\n    /* Navigation buttons */\n    .navigation-buttons {\n      display: flex;\n      margin-top: 30px;\n      justify-content: flex-end;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.7em;\n      transition: background-color 0.3s ease;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    #prevBtn {\n      margin-right: auto;\n    }\n    #prevBtn.hidden {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">${questions[0].TicketSystem} Ticket</div>\n  <!-- QR code container -->\n  <img id=\"qrCode\" class=\"qr-code\" alt=\"QR code\" />\n\n  <div class=\"form-container\">\n    <!-- Progress Bar -->\n    <div class=\"progress-container\">\n      <span id=\"currentStepLabel\" class=\"progress-label\">1</span>\n      <div class=\"progress-bar\">\n        <div class=\"progress\" id=\"progress\"></div>\n      </div>\n      <span id=\"totalStepsLabel\" class=\"progress-label\">${totalSteps}</span>\n    </div>\n\n    <form id=\"multiStepForm\">\n      ${stepsHtml}\n\n      <!-- Navigation Buttons -->\n      <div class=\"navigation-buttons\">\n        <button type=\"button\" id=\"prevBtn\" class=\"hidden\">Back</button>\n        <button type=\"button\" id=\"nextBtn\">Next</button>\n      </div>\n    </form>\n  </div>\n\n  <script>\n    // Inject the questions array into the client-side script.\n    const totalSteps = ${totalSteps};\n    const questions = ${JSON.stringify(questions)};\n    let currentStep = 0;\n\n    const steps = document.querySelectorAll('.question-step');\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const currentStepLabel = document.getElementById('currentStepLabel');\n    const totalStepsLabel = document.getElementById('totalStepsLabel');\n    const progressBar = document.getElementById('progress');\n\n    // Build the QR code URL to include only the system data.\n    // This appends a \"system\" query parameter using the TicketSystem value.\n    const systemParam = \"${questions[0].TicketSystem}\";\n    const systemUrl = window.location.origin + window.location.pathname + \"?system=\" + encodeURIComponent(systemParam);\n    const qrImg = document.getElementById('qrCode');\n    qrImg.src = 'https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=' + encodeURIComponent(systemUrl);\n\n    // Helper function to filter and display unique attachments for a given question field\n    function handleAttachmentChange(fieldId, inputElem) {\n      const files = inputElem.files;\n      const uniqueFiles = {};\n      const fileArray = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (!uniqueFiles[file.name]) {\n          uniqueFiles[file.name] = true;\n          fileArray.push(file);\n        }\n      }\n      window.uniqueAttachments = window.uniqueAttachments || {};\n      window.uniqueAttachments[fieldId] = fileArray;\n      const displayElem = document.getElementById(fieldId + '_display');\n      if (displayElem) {\n        displayElem.textContent = fileArray.map(file => file.name).join(', ');\n      }\n    }\n\n    // Show the initial step\n    showStep(currentStep);\n\n    function showStep(stepIndex) {\n      steps.forEach(step => (step.style.display = 'none'));\n      steps[stepIndex].style.display = 'block';\n      if (stepIndex === 0) {\n        prevBtn.classList.add('hidden');\n      } else {\n        prevBtn.classList.remove('hidden');\n      }\n      nextBtn.textContent = stepIndex === totalSteps - 1 ? 'Submit Request' : 'Next';\n      currentStepLabel.textContent = stepIndex + 1;\n      progressBar.style.width = ((stepIndex + 1) / totalSteps) * 100 + '%';\n    }\n\n    function changeStep(delta) {\n      currentStep += delta;\n      if (currentStep < 0) currentStep = 0;\n      if (currentStep >= totalSteps) currentStep = totalSteps - 1;\n      showStep(currentStep);\n    }\n\n    function validateStep(stepIndex) {\n      const stepEl = steps[stepIndex];\n      const requiredEls = stepEl.querySelectorAll('[required]');\n      for (let i = 0; i < requiredEls.length; i++) {\n        const el = requiredEls[i];\n        if (el.type === 'radio' || el.type === 'checkbox') {\n          const name = el.name;\n          const groupEls = stepEl.querySelectorAll(\\`[name=\"\\${name}\"]\\`);\n          let isChecked = false;\n          for (let j = 0; j < groupEls.length; j++) {\n            if (groupEls[j].checked) {\n              isChecked = true;\n              break;\n            }\n          }\n          if (!isChecked) {\n            return false;\n          }\n        } else {\n          if (!el.value.trim()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    prevBtn.addEventListener('click', () => {\n      changeStep(-1);\n    });\n\n    nextBtn.addEventListener('click', () => {\n      if (!validateStep(currentStep)) {\n        alert('Please fill out all required fields.');\n        return;\n      }\n      if (currentStep === totalSteps - 1) {\n        submitFormData();\n      } else {\n        changeStep(1);\n      }\n    });\n\n    // Launch confetti without showing a success message\n    function launchConfetti() {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n\n    async function submitFormData() {\n      // Create a new FormData object (omitting the raw form inputs)\n      const formData = new FormData();\n      \n      // Append ticketSystem at the top\n      formData.append('ticketSystem', \"${questions[0].TicketSystem}\");\n      // Append TicketSystemId just like TicketSystem\n      formData.append('ticketSystemId', \"${questions[0].TicketSystemId}\");\n      // Append Bitrix24Project after TicketSystem\n      formData.append('Bitrix24Project', \"${questions[0].Bitrix24Project}\");\n      \n      // Append questions meta-data along with each answer\n      questions.forEach((q, i) => {\n        formData.append(\\`questions[\\${i}][question]\\`, q.Question);\n        formData.append(\\`questions[\\${i}][required]\\`, (q.Required && q.Required.toLowerCase() === \"yes\") ? \"Yes\" : \"No\");\n\n        let typeStr = \"\";\n        switch ((q.QuestionType || \"text\").toLowerCase()) {\n          case 'text':\n            typeStr = \"Longtext\";\n            break;\n          case 'attachment':\n            typeStr = \"Attachment\";\n            break;\n          case 'singleselect':\n          case 'multiselect':\n            typeStr = \"Selection\";\n            break;\n          default:\n            typeStr = \"Longtext\";\n        }\n        formData.append(\\`questions[\\${i}][type]\\`, typeStr);\n        formData.append(\\`questions[\\${i}][taskTitle]\\`, \"[empty]\");\n        formData.append(\\`questions[\\${i}][taskTag]\\`, \"[empty]\");\n\n        // Get the answer from the form element with name \"question_\" + q.Id\n        const elems = document.getElementsByName(\"question_\" + q.Id);\n        let answer = \"\";\n        if (elems.length > 0) {\n          if (elems[0].type === \"radio\") {\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                answer = elems[j].value;\n                if (answer === \"other\") {\n                  const otherInput = document.getElementById(\"question_\" + q.Id + \"_other\");\n                  answer = \"other:\" + otherInput.value;\n                }\n                break;\n              }\n            }\n          } else if (elems[0].type === \"checkbox\") {\n            const arr = [];\n            for (let j = 0; j < elems.length; j++) {\n              if (elems[j].checked) {\n                if (elems[j].value === \"other\") {\n                  const otherInput = document.getElementById(\"question_\" + q.Id + \"_other\");\n                  arr.push(\"other:\" + otherInput.value);\n                } else {\n                  arr.push(elems[j].value);\n                }\n              }\n            }\n            answer = arr.join(\", \");\n          } else {\n            answer = elems[0].value;\n          }\n        }\n        formData.append(\\`questions[\\${i}][answer]\\`, answer);\n\n        // If the question is of selection type and has options, add each option\n        if (\n          q.QuestionType &&\n          (q.QuestionType.toLowerCase() === \"singleselect\" || q.QuestionType.toLowerCase() === \"multiselect\") &&\n          q.QuestionOptions\n        ) {\n          const opts = q.QuestionOptions.split(',').map(o => o.trim());\n          opts.forEach((option, index) => {\n            formData.append(\\`questions[\\${i}][options][\\${index}]\\`, option);\n          });\n        }\n      });\n\n      // Append unique attachment files (if any) as binary data\n      if (window.uniqueAttachments) {\n        for (const field in window.uniqueAttachments) {\n          window.uniqueAttachments[field].forEach(file => {\n            formData.append(field, file);\n          });\n        }\n      }\n\n      // Append URL query parameters to the payload (but do not display them in the UI)\n      const urlParams = new URLSearchParams(window.location.search);\n      for (const [key, value] of urlParams.entries()) {\n        formData.append(key, value);\n      }\n\n      try {\n        const response = await fetch('https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083', {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) {\n          throw new Error('Failed to post data to webhook');\n        }\n        launchConfetti();\n        document.getElementById('multiStepForm').reset();\n        window.uniqueAttachments = {}; // Clear stored attachments\n        currentStep = 0;\n        showStep(currentStep);\n      } catch (error) {\n        alert('Error submitting form: ' + error.message);\n      }\n    }\n  </script>\n</body>\n</html>`;\n\n// Return the generated HTML as the output JSON\nreturn [\n  {\n    json: {\n      html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        -60
      ],
      "id": "d2870d52-4b0e-4711-9f73-65ed5e39af65",
      "name": "Code49"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node\n *\n * Processes incoming data to structure it as:\n * {\n *   TicketSystem,\n *   TaskTitle,\n *   TaskDescription,\n *   Tag,\n *   Requestor\n * }\n *\n * User is extracted from the referer URL query parameter \"user\"\n */\nreturn items.map((item) => {\n  // Helper function to reformat a date string (with time \"00:00:00.000Z\") to MM-DD-YYYY\n  function formatDateIfNeeded(value) {\n    if (typeof value === \"string\") {\n      const dateRegex = /^(\\d{4})-(\\d{2})-(\\d{2})T00:00:00\\.000Z$/;\n      const match = value.match(dateRegex);\n      if (match) {\n        const year = match[1];\n        const month = match[2];\n        const day = match[3];\n        return `${month}-${day}-${year}`;\n      }\n    }\n    return value;\n  }\n  \n  const body = item.json.body || {};\n  const headers = item.json.headers || {};\n\n  // 1) Parse \"user\" from the referer URL using a regex\n  let userFromReferer = \"UnknownUser\";\n  if (headers.referer) {\n    const match = headers.referer.match(/[?&]user=([^&]+)/);\n    if (match && match[1]) {\n      userFromReferer = decodeURIComponent(match[1]);\n    }\n  }\n\n  // 2) Determine TicketSystem from body\n  const ticketSystem = body.ticketSystem || body.system || \"N/A\";\n\n  // 3) Gather all question/answer pairs and any non-\"[empty]\" taskTitle values\n  const questionsMap = {};\n  for (const key of Object.keys(body)) {\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(question|answer|taskTitle)\\]$/);\n    if (match) {\n      const index = match[1];\n      const field = match[2];\n      if (!questionsMap[index]) {\n        questionsMap[index] = {};\n      }\n      questionsMap[index][field] = body[key];\n    }\n  }\n\n  let taskDescription = \"\";\n  let taskTitleParts = [];\n\n  // Sort question indices numerically to preserve order\n  const sortedIndices = Object.keys(questionsMap).sort((a, b) => parseInt(a) - parseInt(b));\n  for (const idx of sortedIndices) {\n    const q = questionsMap[idx];\n    const questionText = q.question || \"\";\n    // Format the answer text if it's a date string\n    const answerText = formatDateIfNeeded(q.answer || \"\");\n    taskDescription += `${questionText}: ${answerText}\\n`;\n\n    // Collect any non-\"[empty]\" taskTitle\n    if (q.taskTitle && q.taskTitle !== \"[empty]\") {\n      taskTitleParts.push(q.taskTitle);\n    }\n  }\n\n  // 4) Determine final TaskTitle\n  //    If no valid taskTitle parts, fallback to \"user | ticketSystem\"\n  let taskTitle = taskTitleParts.join(\" - \");\n  if (!taskTitle) {\n    taskTitle = `${userFromReferer} | ${ticketSystem}`;\n  }\n\n  // 5) Use the parsed user for Tag and Requestor\n  const tag = [userFromReferer];\n  const requestor = userFromReferer;\n\n  // Build the structured output object\n  const output = {\n    TicketSystem: ticketSystem,\n    TaskTitle: taskTitle,\n    TaskDescription: taskDescription.trim(),\n    Tag: tag,\n    Requestor: requestor,\n  };\n\n  // Create the first section of \"description\" by formatting the TaskDescription lines\n  let description = \"\";\n  const lines = output.TaskDescription.split(\"\\n\");\n  for (const line of lines) {\n    const parts = line.split(\":\");\n    if (parts.length > 1) {\n      // Bold the text before the first colon (the question) and then add the answer\n      const question = parts.shift().trim();\n      const answer = parts.join(\":\").trim();\n      description += `[b]${question}[/b]: ${answer}\\n`;\n    } else {\n      // If no colon is found, append the line as is\n      description += line + \"\\n\";\n    }\n  }\n\n  // Insert a blank line between the first section and the second section\n  description += \"\\n\";\n\n  // Exclude keys: \"ticketSystem\", \"system\", \"singlesignontoken\", \"createdon\", \"encounterid\", \"SSOToken\", \"AccountID\"\n  const excludedKeys = [\"ticketSystem\", \"system\", \"singlesignontoken\", \"createdon\", \"encounterid\", \"SSOToken\", \"AccountID\"];\n  \n  // Append the second section: all body parameters that are not prefaced with \"questions\" or \"Bitrix24\" and not in the excluded list\n  for (const key in body) {\n    if (!key.startsWith(\"questions\") && !key.startsWith(\"Bitrix24\") && !excludedKeys.includes(key)) {\n      // Format the value if it's a date string with time 00:00:00.000Z\n      let value = formatDateIfNeeded(body[key]);\n      description += `[b]${key}[/b]: ${value}\\n`;\n    }\n  }\n\n  // Return the structured output plus our new Bitrix24-style description\n  return {\n    json: {\n      ...output,\n      description: description.trim(),\n    },\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        600
      ],
      "id": "28c9ce75-afa4-4995-a67a-1fab3ef1f92f",
      "name": "Code50"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node\n *\n * Processes incoming data to structure it as:\n * {\n *   TicketSystem,\n *   TaskTitle,\n *   TaskDescription,\n *   Tag,\n *   Requestor\n * }\n *\n * User is extracted from the referer URL query parameter \"user\"\n */\nreturn items.map((item) => {\n  // Helper function to reformat a date string (with time \"00:00:00.000Z\") to MM-DD-YYYY\n  function formatDateIfNeeded(value) {\n    if (typeof value === \"string\") {\n      const dateRegex = /^(\\d{4})-(\\d{2})-(\\d{2})T00:00:00\\.000Z$/;\n      const match = value.match(dateRegex);\n      if (match) {\n        const year = match[1];\n        const month = match[2];\n        const day = match[3];\n        return `${month}-${day}-${year}`;\n      }\n    }\n    return value;\n  }\n  \n  const body = item.json.body || {};\n  const headers = item.json.headers || {};\n\n  // 1) Parse \"user\" from the referer URL using a regex\n  let userFromReferer = \"UnknownUser\";\n  if (headers.referer) {\n    const match = headers.referer.match(/[?&]user=([^&]+)/);\n    if (match && match[1]) {\n      userFromReferer = decodeURIComponent(match[1]);\n    }\n  }\n\n  // 2) Determine TicketSystem from body\n  const ticketSystem = body.ticketSystem || body.system || \"N/A\";\n\n  // 3) Gather all question/answer pairs and any taskTitle values\n  const questionsMap = {};\n  for (const key of Object.keys(body)) {\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(question|answer|taskTitle)\\]$/);\n    if (match) {\n      const index = match[1];\n      const field = match[2];\n      if (!questionsMap[index]) {\n        questionsMap[index] = {};\n      }\n      questionsMap[index][field] = body[key];\n    }\n  }\n\n  let taskDescription = \"\";\n  let taskTitleParts = [];\n\n  // Sort question indices numerically to preserve order\n  const sortedIndices = Object.keys(questionsMap).sort((a, b) => parseInt(a) - parseInt(b));\n  for (const idx of sortedIndices) {\n    const q = questionsMap[idx];\n    const questionText = q.question || \"\";\n    // Format the answer text if it's a date string\n    const answerText = formatDateIfNeeded(q.answer || \"\");\n    taskDescription += `${questionText}: ${answerText}\\n`;\n\n    // If taskTitle is \"yes\", add the answer text to taskTitleParts (if non-empty)\n    // Otherwise, if taskTitle is provided and not \"[empty]\", add its value.\n    if (q.taskTitle) {\n      if (q.taskTitle.toLowerCase() === \"yes\") {\n        if (answerText && answerText !== \"[empty]\") {\n          taskTitleParts.push(answerText);\n        }\n      } else if (q.taskTitle !== \"[empty]\") {\n        taskTitleParts.push(q.taskTitle);\n      }\n    }\n  }\n\n  // 4) Determine final TaskTitle\n  // If there are taskTitle parts, join them with \" | \"\n  let taskTitle = taskTitleParts.length > 0 ? taskTitleParts.join(\" | \") : \"\";\n  // Append the TicketSystem and userFromReferer at the end, regardless of whether taskTitle is empty\n  taskTitle += (taskTitle ? \" | \" : \"\") + `${ticketSystem} | ${userFromReferer}`;\n\n  // 5) Use the parsed user for Tag and Requestor\n  const tag = [userFromReferer];\n  const requestor = userFromReferer;\n\n  // Build the structured output object\n  const output = {\n    TicketSystem: ticketSystem,\n    TaskTitle: taskTitle,\n    TaskDescription: taskDescription.trim(),\n    Tag: tag,\n    Requestor: requestor,\n  };\n\n  // Create the first section of \"description\" by formatting the TaskDescription lines\n  let description = \"\";\n  const lines = output.TaskDescription.split(\"\\n\");\n  for (const line of lines) {\n    const parts = line.split(\":\");\n    if (parts.length > 1) {\n      // Bold the text before the first colon (the question) and then add the answer\n      const question = parts.shift().trim();\n      const answer = parts.join(\":\").trim();\n      description += `[b]${question}[/b]: ${answer}\\n`;\n    } else {\n      // If no colon is found, append the line as is\n      description += line + \"\\n\";\n    }\n  }\n\n  // Insert a blank line between the first section and the second section\n  description += \"\\n\";\n\n  // Exclude keys: \"ticketSystem\", \"system\", \"singlesignontoken\", \"createdon\", \"encounterid\", \"SSOToken\", \"AccountID\"\n  const excludedKeys = [\"ticketSystem\", \"system\", \"singlesignontoken\", \"createdon\", \"encounterid\", \"SSOToken\", \"AccountID\"];\n  \n  // Append the second section: all body parameters that are not prefaced with \"questions\" or \"Bitrix24\" and not in the excluded list\n  for (const key in body) {\n    if (!key.startsWith(\"questions\") && !key.startsWith(\"Bitrix24\") && !excludedKeys.includes(key)) {\n      // Format the value if it's a date string with time 00:00:00.000Z\n      let value = formatDateIfNeeded(body[key]);\n      description += `[b]${key}[/b]: ${value}\\n`;\n    }\n  }\n\n  // Return the structured output plus our new Bitrix24-style description\n  return {\n    json: {\n      ...output,\n      description: description.trim(),\n    },\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        280,
        600
      ],
      "id": "04f91e7b-8b08-4054-80d4-9ebf54cfa1fb",
      "name": "Code51"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node\n\n// 1) Filter out any empty/null records.\nconst questionsArray = items.map(item => item.json).filter(q => q && Object.keys(q).length > 0);\n\n// 2) Grab fallback values from the FIRST item (the webhook), if present.\nlet fallbackTitle = \"\";\nlet fallbackOwner = \"\";\nlet fallbackProject = \"\";\nif (questionsArray.length > 0) {\n  const firstItem = questionsArray[0];\n  fallbackTitle = firstItem.TicketSystem || (firstItem.query && firstItem.query.system) || \"\";\n  fallbackOwner = firstItem.Owner || (firstItem.query && firstItem.query.user) || \"\";\n  fallbackProject = firstItem.Bitrix24Project || (firstItem.query && firstItem.query.Bitrix24Project) || \"\";\n}\n\n// 3) Find the first \"database record\" that has an Id property.\nlet dbRecord = questionsArray.find(item => item.hasOwnProperty(\"Id\"));\n\n// 4) Set final values for Title, Bitrix24 Project ID, and Owner.\nlet ticketSystemTitle = dbRecord ? (dbRecord.TicketSystem || fallbackTitle) : fallbackTitle;\nlet bitrix24ProjectId = dbRecord ? (dbRecord.Bitrix24Project || fallbackProject) : fallbackProject;\nlet owner = dbRecord ? (dbRecord.Owner || fallbackOwner) : fallbackOwner;\n\n// 5) Determine TicketSystemId using the following priority:\nlet ticketSystemId = \"\";\nif (dbRecord && dbRecord.TicketSystemId && dbRecord.TicketSystemId !== \"null\") {\n  ticketSystemId = dbRecord.TicketSystemId;\n} else {\n  const firstItem = questionsArray[0] || {};\n  const webhookTicketId = firstItem.query && firstItem.query.TicketSystemId;\n  if (webhookTicketId && webhookTicketId !== \"null\") {\n    ticketSystemId = webhookTicketId;\n  } else {\n    ticketSystemId = dbRecord ? dbRecord.Id : \"\";\n  }\n}\n\n// Build the HTML string.\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Create a Ticket System</title>\n  <style>\n    body {\n      font-family: \"Trebuchet MS\", Arial, sans-serif;\n      font-size: 18px;\n      background-color: #ffffff;\n      color: #000000;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      margin: 0;\n      padding: 20px 0;\n    }\n    .title {\n      font-size: 28px;\n      font-weight: bold;\n      margin-bottom: 20px;\n      padding: 10px 20px;\n      border: 2px solid #d3d3d3;\n      border-radius: 8px;\n      text-align: center;\n      background-color: #ffffff;\n    }\n    .form-container {\n      width: 90%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: #ffffff;\n      padding: 20px;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n    }\n    fieldset {\n      border: none;\n      margin: 0 0 20px 0;\n      padding: 0;\n    }\n    label {\n      display: block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    input[type=\"text\"],\n    input[type=\"date\"],\n    select,\n    textarea,\n    input[type=\"file\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n      margin-bottom: 12px;\n    }\n    textarea {\n      resize: vertical;\n    }\n    .order-indicator {\n      font-size: 0.9em;\n      color: #555;\n      margin-bottom: 6px;\n    }\n    .question-card {\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 15px;\n      margin-bottom: 20px;\n      background-color: #fafafa;\n      cursor: move;\n      transition: border 0.2s ease;\n      position: relative;\n    }\n    .question-card.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .question-card .remove-question-btn {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .question-card .remove-question-btn:hover {\n      background-color: #900;\n    }\n    .move-btn {\n      background-color: white;\n      color: black;\n      border: 1px solid black;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .move-btn:hover {\n      background-color: #f0f0f0;\n    }\n    .options-container {\n      margin: 10px 0;\n    }\n    .options-list {\n      margin-top: 10px;\n    }\n    .option-item {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 6px;\n      cursor: move;\n      transition: border 0.2s ease;\n    }\n    .option-item.dragging {\n      opacity: 0.5;\n      border: 2px dashed #555;\n    }\n    .remove-option-btn {\n      background-color: #c00;\n      color: #fff;\n      border: none;\n      border-radius: 4px;\n      padding: 6px 10px;\n      cursor: pointer;\n      font-size: 0.8em;\n    }\n    .remove-option-btn:hover {\n      background-color: #900;\n    }\n    button {\n      background-color: #000000;\n      color: #ffffff;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      transition: background-color 0.3s ease;\n      margin-right: 8px;\n    }\n    button:hover {\n      background-color: #333333;\n    }\n    .toggle-container {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin: 10px 0;\n    }\n    .toggle-container label {\n      font-weight: normal;\n      margin-bottom: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"title\">Create a Ticket System</div>\n  <div class=\"form-container\">\n    <form id=\"ticketForm\" action=\"https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe\" method=\"POST\">\n      <!-- Basic Info -->\n      <fieldset>\n        <label for=\"title\">Ticket System Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required>\n\n        <label for=\"ticketSystemId\">Ticket System ID</label>\n        <input type=\"text\" id=\"ticketSystemId\" name=\"ticketSystemId\" readonly value=\"\" style=\"background-color: #e9ecef;\">\n\n        <label for=\"bitrix24ProjectId\">Bitrix24 Project ID</label>\n        <input type=\"text\" id=\"bitrix24ProjectId\" name=\"bitrix24ProjectId\">\n\n        <label for=\"owner\">Owner</label>\n        <input type=\"text\" id=\"owner\" name=\"owner\">\n      </fieldset>\n\n      <!-- Container for all dynamically added questions -->\n      <div id=\"questionsContainer\"></div>\n\n      <!-- Add Question Section -->\n      <fieldset>\n        <legend>Add a Question</legend>\n        <select id=\"questionType\">\n          <option value=\"text\">Text</option>\n          <option value=\"singleselect\">SingleSelect</option>\n          <option value=\"multiselect\">MultiSelect</option>\n          <option value=\"date\">Date</option>\n          <option value=\"attachment\">Attachment</option>\n        </select>\n        <button type=\"button\" id=\"addQuestionBtn\">Add</button>\n      </fieldset>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n  <script>\n    // ------------------ DRAG & DROP: QUESTIONS ------------------\n    let draggedElement = null;\n    function handleDragStart(e) {\n      draggedElement = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedElement && target !== draggedElement) {\n        const container = document.getElementById('questionsContainer');\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedElement, target);\n        } else {\n          container.insertBefore(draggedElement, target.nextSibling);\n        }\n        updateOrderIndicators();\n      }\n    }\n    function handleDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedElement = null;\n      updateOrderIndicators();\n    }\n    function updateOrderIndicators() {\n      const cards = document.querySelectorAll('#questionsContainer .question-card');\n      cards.forEach((card, index) => {\n        let indicator = card.querySelector('.order-indicator');\n        if (!indicator) {\n          indicator = document.createElement('div');\n          indicator.className = 'order-indicator';\n          card.insertBefore(indicator, card.firstChild);\n        }\n        indicator.textContent = 'Order: ' + (index + 1);\n        card.setAttribute('data-question-index', index + 1);\n      });\n    }\n\n    // ------------------ DRAG & DROP: OPTIONS ------------------\n    let draggedOption = null;\n    function handleOptionDragStart(e) {\n      draggedOption = e.currentTarget;\n      e.dataTransfer.effectAllowed = 'move';\n      e.currentTarget.classList.add('dragging');\n    }\n    function handleOptionDragOver(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n    }\n    function handleOptionDrop(e) {\n      e.preventDefault();\n      const target = e.currentTarget;\n      if (draggedOption && target !== draggedOption) {\n        const container = target.parentElement;\n        const bounding = target.getBoundingClientRect();\n        const offset = e.clientY - bounding.top;\n        if (offset < bounding.height / 2) {\n          container.insertBefore(draggedOption, target);\n        } else {\n          container.insertBefore(draggedOption, target.nextSibling);\n        }\n        updateOptionNames(container);\n      }\n    }\n    function handleOptionDragEnd(e) {\n      e.currentTarget.classList.remove('dragging');\n      draggedOption = null;\n    }\n    function makeOptionDraggable(optionElement) {\n      optionElement.setAttribute('draggable', 'true');\n      optionElement.addEventListener('dragstart', handleOptionDragStart);\n      optionElement.addEventListener('dragover', handleOptionDragOver);\n      optionElement.addEventListener('drop', handleOptionDrop);\n      optionElement.addEventListener('dragend', handleOptionDragEnd);\n    }\n    function updateOptionNames(optionsList) {\n      const questionCard = optionsList.closest('.question-card');\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionItems = optionsList.querySelectorAll('.option-item');\n      optionItems.forEach((option, index) => {\n        const textInput = option.querySelector('input[type=\"text\"][name]');\n        if (textInput) {\n          textInput.name = 'questions[' + questionId + '][options][' + index + ']';\n        }\n        const hiddenInput = option.querySelector('input[type=\"hidden\"]');\n        if (hiddenInput) {\n          hiddenInput.name = 'questions[' + questionId + '][options][' + index + ']';\n        }\n      });\n    }\n\n    function getFormattedType(lowerType) {\n      switch(lowerType) {\n        case 'text': return 'LongText';\n        case 'singleselect': return 'singleselect';\n        case 'multiselect': return 'multiselect';\n        case 'date':\n        case 'dateselector': return 'date';\n        case 'attachment': return 'Attachment';\n        default: return lowerType;\n      }\n    }\n\n    // ------------------ SERVER-SIDE DATA ------------------\n    const initialQuestions = ${JSON.stringify(questionsArray)};\n    const defaultTitle = ${JSON.stringify(ticketSystemTitle)};\n    const defaultTicketSystemId = ${JSON.stringify(ticketSystemId)};\n    const defaultProjectId = ${JSON.stringify(bitrix24ProjectId)};\n    const defaultOwner = ${JSON.stringify(owner)};\n    let questionCount = 0;\n\n    document.addEventListener('DOMContentLoaded', function() {\n      // Pre-fill the top-level fields\n      document.getElementById('title').value = defaultTitle || \"\";\n      document.getElementById('ticketSystemId').value = defaultTicketSystemId || \"\";\n      document.getElementById('bitrix24ProjectId').value = defaultProjectId || \"\";\n      document.getElementById('owner').value = defaultOwner || \"\";\n\n      const addQuestionBtn = document.getElementById('addQuestionBtn');\n      const questionsContainer = document.getElementById('questionsContainer');\n      const ticketForm = document.getElementById('ticketForm');\n\n      // Populate existing questions\n      if (Array.isArray(initialQuestions)) {\n        initialQuestions.forEach((questionData, index) => {\n          if (questionData.QuestionType) {\n            const questionCard = createQuestionCard(questionData, index);\n            questionsContainer.appendChild(questionCard);\n            questionCount = index + 1;\n          }\n        });\n      }\n      updateOrderIndicators();\n\n      // Add a new question\n      addQuestionBtn.addEventListener('click', function() {\n        const questionType = document.getElementById('questionType').value;\n        const questionId = questionCount++;\n        const questionCard = createQuestionCard({ QuestionType: questionType }, questionId);\n        questionsContainer.appendChild(questionCard);\n        updateOrderIndicators();\n      });\n\n      // Handle clicks on question/option buttons\n      questionsContainer.addEventListener('click', function(e) {\n        if (e.target.classList.contains('move-up-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          if (questionCard.previousElementSibling) {\n            questionsContainer.insertBefore(questionCard, questionCard.previousElementSibling);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('move-down-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          if (questionCard.nextElementSibling) {\n            questionsContainer.insertBefore(questionCard.nextElementSibling, questionCard);\n            updateOrderIndicators();\n          }\n          return;\n        }\n        if (e.target.classList.contains('remove-question-btn')) {\n          e.target.closest('.question-card').remove();\n          updateOrderIndicators();\n          return;\n        }\n        if (e.target.classList.contains('add-option-btn')) {\n          const questionCard = e.target.closest('.question-card');\n          addOption(questionCard);\n          return;\n        }\n        if (e.target.classList.contains('remove-option-btn')) {\n          const optionItem = e.target.closest('.option-item');\n          const optionsList = optionItem.parentElement;\n          optionItem.remove();\n          updateOptionNames(optionsList);\n          return;\n        }\n      });\n\n      // Toggle “Include Other” logic\n      questionsContainer.addEventListener('change', function(e) {\n        if (e.target.classList.contains('includeOtherToggle')) {\n          const questionCard = e.target.closest('.question-card');\n          const optionsList = questionCard.querySelector('.options-list');\n          const otherOption = optionsList.querySelector('.other-option');\n\n          if (e.target.checked) {\n            if (!otherOption) {\n              const nonOtherOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n              const nextIndex = nonOtherOptions.length;\n              const otherDiv = document.createElement('div');\n              otherDiv.className = 'option-item other-option';\n              otherDiv.innerHTML = \\`\n                <label>Other:</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"(Other)\"\n                  readonly\n                />\n                <input\n                  type=\"hidden\"\n                  name=\"questions[\\${questionCard.getAttribute('data-question-id')}][options][\\${nextIndex}]\"\n                  value=\"{other}\"\n                />\n              \\`;\n              makeOptionDraggable(otherDiv);\n              optionsList.appendChild(otherDiv);\n            }\n          } else {\n            if (otherOption) {\n              otherOption.remove();\n            }\n          }\n        }\n      });\n\n      // Re-index each question’s input names before form submission and push toggle options.\n      ticketForm.addEventListener('submit', function() {\n        updateOrderIndicators();\n        const cards = Array.from(document.querySelectorAll('#questionsContainer .question-card'));\n        cards.forEach((card, i) => {\n          const newIndex = i + 1;\n          card.setAttribute('data-question-id', newIndex);\n\n          // Update question input names from \"questions[x]\" to \"questions[newIndex]\"\n          card.querySelectorAll('input, select, textarea').forEach(input => {\n            input.name = input.name.replace(/questions\\\\[\\\\d+\\\\]/, 'questions[' + newIndex + ']');\n          });\n\n          // Toggle for Task Title\n          const taskTitleToggle = card.querySelector('.taskTitleToggle');\n          let taskTitleInput = card.querySelector('input[name*=\"[taskTitle]\"]');\n          if (taskTitleToggle && taskTitleToggle.checked) {\n            if (!taskTitleInput) {\n              taskTitleInput = document.createElement('input');\n              taskTitleInput.type = 'hidden';\n              taskTitleInput.name = 'questions[' + newIndex + '][taskTitle]';\n              taskTitleInput.value = \"yes\";\n              card.appendChild(taskTitleInput);\n            } else {\n              taskTitleInput.name = 'questions[' + newIndex + '][taskTitle]';\n              taskTitleInput.value = \"yes\";\n            }\n          } else if (taskTitleInput) {\n            taskTitleInput.remove();\n          }\n\n          // Toggle for Tag\n          const tagToggle = card.querySelector('.tagToggle');\n          let tagInput = card.querySelector('input[name*=\"[taskTag]\"]');\n          if (tagToggle && tagToggle.checked) {\n            if (!tagInput) {\n              tagInput = document.createElement('input');\n              tagInput.type = 'hidden';\n              tagInput.name = 'questions[' + newIndex + '][taskTag]';\n              tagInput.value = \"yes\";\n              card.appendChild(tagInput);\n            } else {\n              tagInput.name = 'questions[' + newIndex + '][taskTag]';\n              tagInput.value = \"yes\";\n            }\n          } else if (tagInput) {\n            tagInput.remove();\n          }\n        });\n      });\n    });\n\n    // Create a new question card\n    function createQuestionCard(questionData, questionId) {\n      let rawType = questionData.QuestionType || \"text\";\n      let lowerType = rawType.toLowerCase();\n\n      const questionCard = document.createElement('div');\n      questionCard.className = 'question-card';\n      questionCard.setAttribute('data-question-id', questionId);\n\n      // Make question card draggable\n      questionCard.setAttribute('draggable', 'true');\n      questionCard.addEventListener('dragstart', handleDragStart);\n      questionCard.addEventListener('dragover', handleDragOver);\n      questionCard.addEventListener('drop', handleDrop);\n      questionCard.addEventListener('dragend', handleDragEnd);\n\n      let html = '<div class=\"order-indicator\"></div>';\n\n      // Question text\n      const questionTextValue = questionData.Question || \"\";\n      html += '<label>Question</label>';\n      if (lowerType === 'text') {\n        html += \\`\n          <textarea name=\"questions[\\${questionId}][question]\" \n                    class=\"questionText\" \n                    placeholder=\"Enter your question text...\">\\${questionTextValue}</textarea>\n        \\`;\n      } else {\n        html += \\`\n          <input type=\"text\" \n                 name=\"questions[\\${questionId}][question]\" \n                 class=\"questionText\" \n                 placeholder=\"Enter your question text...\" \n                 value=\"\\${questionTextValue}\" />\n        \\`;\n      }\n\n      // SingleSelect / MultiSelect\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionLabel = (lowerType === 'singleselect') ? 'Selection Options' : 'MultiSelection Options';\n        html += '<label>' + optionLabel + '</label>';\n\n        let initialOptions = [];\n        let hasOther = false;\n\n        if (questionData.QuestionOptions) {\n          initialOptions = questionData.QuestionOptions\n            .split(\",\")\n            .map(o => o.trim());\n          if (initialOptions.indexOf(\"{other}\") !== -1) {\n            hasOther = true;\n            initialOptions = initialOptions.filter(opt => opt !== \"{other}\");\n          }\n        }\n\n        html += \\`\n          <label>\n            <input type=\"checkbox\" class=\"includeOtherToggle\" \\${hasOther ? 'checked' : ''} />\n            Include \"Other\" Option\n          </label>\n        \\`;\n\n        html += \\`\n          <div class=\"options-container\">\n            <button type=\"button\" class=\"add-option-btn\">Add Option</button>\n            <div class=\"options-list\">\n        \\`;\n\n        initialOptions.forEach(function(opt, idx) {\n          html += \\`\n            <div class=\"option-item\">\n              <input type=\"text\" \n                     placeholder=\"Option text...\" \n                     name=\"questions[\\${questionId}][options][\\${idx}]\" \n                     value=\"\\${opt}\" />\n              <button type=\"button\" class=\"remove-option-btn\">Remove Option</button>\n            </div>\n          \\`;\n        });\n\n        if (hasOther) {\n          const otherIndex = initialOptions.length;\n          html += \\`\n            <div class=\"option-item other-option\">\n              <label>Other:</label>\n              <input\n                type=\"text\"\n                placeholder=\"(Other)\"\n                readonly\n              />\n              <input\n                type=\"hidden\"\n                name=\"questions[\\${questionId}][options][\\${otherIndex}]\"\n                value=\"{other}\"\n              />\n            </div>\n          \\`;\n        }\n\n        html += '</div></div>';\n      }\n\n      // Date\n      if (lowerType === 'date') {\n        html += \\`\n          <label>Date Selector Preview</label>\n          <input type=\"date\" disabled />\n        \\`;\n      }\n\n      // Attachment\n      if (lowerType === 'attachment') {\n        html += \\`\n          <label>Attachment Upload Preview</label>\n          <input type=\"file\" disabled />\n        \\`;\n      }\n\n      // Required?\n      const requiredValue = questionData.Required || \"Yes\";\n      html += \\`\n        <label>Required</label>\n        <select name=\"questions[\\${questionId}][required]\">\n          <option value=\"Yes\" \\${requiredValue === \"Yes\" ? \"selected\" : \"\"}>Yes</option>\n          <option value=\"No\" \\${requiredValue === \"No\" ? \"selected\" : \"\"}>No</option>\n        </select>\n      \\`;\n\n      // Hidden type field\n      const formattedType = getFormattedType(lowerType);\n      html += \\`\n        <input type=\"hidden\" name=\"questions[\\${questionId}][type]\" value=\"\\${formattedType}\">\n      \\`;\n\n      // Check if incoming json has Bitrix24Title or Bitrix24Tags set to \"yes\" and set checkbox accordingly.\n      let taskTitleChecked = \"\";\n      let tagChecked = \"\";\n      if (questionData.Bitrix24Title && questionData.Bitrix24Title.toLowerCase() === \"yes\") {\n        taskTitleChecked = \"checked\";\n      }\n      if (questionData.Bitrix24Tags && questionData.Bitrix24Tags.toLowerCase() === \"yes\") {\n        tagChecked = \"checked\";\n      }\n\n      // Move & remove buttons and toggles for task title and tag.\n      html += \\`\n        <div class=\"toggle-container\">\n          <label><input type=\"checkbox\" class=\"taskTitleToggle\" value=\"1\" \\${taskTitleChecked} /> Use as Task Title</label>\n          <label><input type=\"checkbox\" class=\"tagToggle\" value=\"1\" \\${tagChecked} /> Use as Tag</label>\n          <button type=\"button\" class=\"move-up-btn move-btn\">Move ↑</button>\n          <button type=\"button\" class=\"move-down-btn move-btn\">Move ↓</button>\n        </div>\n        <button type=\"button\" class=\"remove-question-btn\">Remove Question</button>\n      \\`;\n\n      questionCard.innerHTML = html;\n\n      // Make each option item draggable if selection type\n      if (lowerType === 'singleselect' || lowerType === 'multiselect') {\n        const optionsList = questionCard.querySelector('.options-list');\n        if (optionsList) {\n          optionsList.querySelectorAll('.option-item').forEach(function(option) {\n            makeOptionDraggable(option);\n          });\n        }\n      }\n\n      return questionCard;\n    }\n\n    // Add a new “normal” option\n    function addOption(questionCard) {\n      const questionId = questionCard.getAttribute('data-question-id');\n      const optionsList = questionCard.querySelector('.options-list');\n      if (!optionsList) return;\n\n      const currentOptions = optionsList.querySelectorAll('.option-item:not(.other-option)');\n      const optionCount = currentOptions.length;\n\n      const optionDiv = document.createElement('div');\n      optionDiv.className = 'option-item';\n      makeOptionDraggable(optionDiv);\n\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = 'Option text...';\n      input.name = 'questions[' + questionId + '][options][' + optionCount + ']';\n\n      const removeBtn = document.createElement('button');\n      removeBtn.type = 'button';\n      removeBtn.textContent = 'Remove Option';\n      removeBtn.className = 'remove-option-btn';\n\n      optionDiv.appendChild(input);\n      optionDiv.appendChild(removeBtn);\n\n      const otherOption = optionsList.querySelector('.other-option');\n      if (otherOption) {\n        optionsList.insertBefore(optionDiv, otherOption);\n      } else {\n        optionsList.appendChild(optionDiv);\n      }\n      updateOptionNames(optionsList);\n    }\n  </script>\n</body>\n</html>`;\n\nreturn [\n  {\n    json: {\n      html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1540,
        -80
      ],
      "id": "2e93431a-861f-4502-b97a-fa6d239f6a84",
      "name": "Code52"
    },
    {
      "parameters": {
        "jsCode": "// Gather all incoming items\nconst items = $input.all();\n\n// We'll accumulate our final output items here\nconst output = [];\n\nfor (const item of items) {\n  const body = item.json.body || {};\n\n  // We'll store question data in a dictionary keyed by the question index\n  const questionsDict = {};\n  // Array to record the order in which questions are first encountered\n  const questionOrder = [];\n\n  // Iterate over each key in the body\n  for (const [key, value] of Object.entries(body)) {\n    // We only care about keys that match questions[<index>][<property>][<optional subIndex>]\n    const match = key.match(/^questions\\[(\\d+)\\]\\[(.*?)\\](?:\\[(\\d+)\\])?$/);\n    if (!match) {\n      continue;\n    }\n\n    const questionIndex = match[1];\n    const property = match[2];\n    const subIndex = match[3];\n\n    // If this is the first time we see this questionIndex, initialize it and record its order\n    if (!questionsDict.hasOwnProperty(questionIndex)) {\n      questionsDict[questionIndex] = {\n        question: \"\",\n        required: \"\",\n        type: \"\",\n        options: [],\n        bitrix24Title: null, // Initialize new field for Bitrix24Title\n        bitrix24Tag: null    // Initialize new field for Bitrix24Tag\n      };\n      questionOrder.push(questionIndex);\n    }\n\n    // If property is \"options\", accumulate the values;\n    // if property is \"taskTitle\" or \"taskTag\", assign to the new fields;\n    // otherwise set the property normally.\n    if (property === \"options\") {\n      questionsDict[questionIndex].options.push(value);\n    } else if (property === \"taskTitle\") {\n      questionsDict[questionIndex].bitrix24Title = value;\n    } else if (property === \"taskTag\") {\n      questionsDict[questionIndex].bitrix24Tag = value;\n    } else {\n      questionsDict[questionIndex][property] = value;\n    }\n  }\n\n  // Build a new item per question in the order they were received\n  for (const idx of questionOrder) {\n    const q = questionsDict[idx];\n    // Join multiple options with commas\n    const optionsString = (q.options || []).join(\", \");\n\n    output.push({\n      json: {\n        title: body.title,\n        ticketSystemId: body.ticketSystemId, // Added ticketSystemId here\n        bitrix24ProjectId: body.bitrix24ProjectId,\n        owner: body.owner,\n        question: q.question,\n        required: q.required,\n        type: q.type,\n        options: optionsString,\n        bitrix24Title: q.bitrix24Title, // Bring over Bitrix24Title from taskTitle\n        bitrix24Tag: q.bitrix24Tag      // Bring over Bitrix24Tag from taskTag\n      }\n    });\n  }\n}\n\n// Return one item per question\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        920
      ],
      "id": "aac253cd-bf41-41b7-b24b-4563ce7ea4b2",
      "name": "Code53"
    }
  ],
  "pinData": {
    "Webhook1": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "10.0.24.58",
            "x-forwarded-for": "10.0.24.58",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "1926",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0",
            "sec-ch-ua": "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Microsoft Edge\";v=\"134\"",
            "content-type": "multipart/form-data; boundary=----WebKitFormBoundaryvARZxOvaAIWBtib4",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "https://xl.epicpc.com",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://xl.epicpc.com/webhook/a5de8712-c0cd-4925-9510-f78b1dbdcf79?user=tstilwell%40epichs.org&system=Turbo",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2Bi2wlGyWUrU8csBnMpC2ky94UMvv6i1l8%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX1%2BlOAQjwoHJTIaa%2BnRWw%2FuYu7Q4OoFm%2BVc%3D; cw_conversation=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiJkOGU0ZmExYy0yMTk2LTQ3ODAtYjFhMi0zNGI5NzYyYWZhMjciLCJpbmJveF9pZCI6MX0.0lRACgYRzS4v3ie0Q3KCpE2J2om9Qu4ndLgNQa8saXU; theme=light; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImY5YWFiYmJkLTZiNjktNGIwMC1iMGUzLWQ5MTQzYTYzYWUzNCIsImhhc2giOiJZaXdOcHpaYzdGIiwiYnJvd3NlcklkIjoiYW9ldjhjM1NoOG5jMDNLc1A4R2dYK1dkUElNWFVaTWE0ejl6WjNZVndjZz0iLCJpYXQiOjE3NDM0MTMzMzcsImV4cCI6MTc0NDAxODEzN30.9jm-AdSD3tUumJ0H-peY6QyXyPupwBqxSlvb_jyaVCA; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2FU1eLENVQ5gGVztJ75xpd9FjVUTfsPOU5ubO0Le9ZENClgV15adD8QKU0R6Mv8CNonPnjRRf4H7g%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19PVIZIXJwexLurqq5TJ69e3f%2FTAqp5Bz2B9zzaLoXPEYxjMFONe%2Bgm8KDfJ5GaLjBx%2FSKrpeSNmWnI%2BN%2BJJwcx%2Ba4eMyVqLS2%2FKi6VSl5G5Y2rHbj5IIrEJNrLvUo7X2ImDn%2BG%2FD7CWTiG6p67Ip7Fsob0%2BWhkINA%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX1%2B0ivUvQQUipzc6L7VQNktlEHT6ET3umHhSL41MVGumupE0%2Bn2tajCO7wlPK4CEU68ax%2FTL8cxsKExe6v%2FFltcVQ%2Bh2xHtf5mysCKzycC9m43GRQYH3xdQctsGjVWrVaenppMLx%2BdJCtA%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22fbbaa0fe7164b93e2c831f7816129952355ab8de07812c802f276efe6e8da0f3%23f9aabbbd-6b69-4b00-b0e3-d9143a63ae34%22%2C%22%24sesid%22%3A%5B1743767472885%2C%220196009a-77a5-75eb-be37-17edf0b4efe7%22%2C1743766845349%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fxl.epicpc.com%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2Bm15p4vAe6voGQ204dfqFeJSJbJgP%2B3yh0lhtfVZmjn%2FhDWJ%2BhLf6LClS%2FzMXN4FivN8yovHn4NiLEfhkIDOlPYg%2B0Sty5Qi6NvthwsdfhYcoeOgUNWIpRsJCaKIcCE%2FoiWiH%2Bhi5iuA%3D%3D"
          },
          "params": {},
          "query": {},
          "body": {
            "ticketSystem": "Turbo",
            "ticketSystemId": "392",
            "Bitrix24Project": "126",
            "questions[0][question]": "test",
            "questions[0][required]": "Yes",
            "questions[0][type]": "Longtext",
            "questions[0][taskTitle]": "[empty]",
            "questions[0][taskTag]": "[empty]",
            "questions[0][answer]": "test",
            "questions[1][question]": "t2",
            "questions[1][required]": "Yes",
            "questions[1][type]": "Longtext",
            "questions[1][taskTitle]": "[empty]",
            "questions[1][taskTag]": "[empty]",
            "questions[1][answer]": "test",
            "user": "tstilwell@epichs.org",
            "system": "Turbo"
          },
          "webhookUrl": "https://xl.epicpc.com/webhook/de491dd3-dbe0-4e6c-8449-70d62e5e2083",
          "executionMode": "production"
        }
      }
    ],
    "Webhook2": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "10.0.24.58",
            "x-forwarded-for": "10.0.24.58",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "1701",
            "cache-control": "max-age=0",
            "sec-ch-ua": "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Microsoft Edge\";v=\"134\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "origin": "https://xl.epicpc.com",
            "content-type": "application/x-www-form-urlencoded",
            "upgrade-insecure-requests": "1",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "navigate",
            "sec-fetch-user": "?1",
            "sec-fetch-dest": "document",
            "referer": "https://xl.epicpc.com/webhook/99d4ae83-d3f5-4126-9f6b-ea45add343c4?system=Turbo%20Ticketing&user=tstilwell%40epichs.org&TicketSystemId=712",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2Bi2wlGyWUrU8csBnMpC2ky94UMvv6i1l8%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX1%2BlOAQjwoHJTIaa%2BnRWw%2FuYu7Q4OoFm%2BVc%3D; cw_conversation=eyJhbGciOiJIUzI1NiJ9.eyJzb3VyY2VfaWQiOiJkOGU0ZmExYy0yMTk2LTQ3ODAtYjFhMi0zNGI5NzYyYWZhMjciLCJpbmJveF9pZCI6MX0.0lRACgYRzS4v3ie0Q3KCpE2J2om9Qu4ndLgNQa8saXU; theme=light; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImY5YWFiYmJkLTZiNjktNGIwMC1iMGUzLWQ5MTQzYTYzYWUzNCIsImhhc2giOiJZaXdOcHpaYzdGIiwiYnJvd3NlcklkIjoiYW9ldjhjM1NoOG5jMDNLc1A4R2dYK1dkUElNWFVaTWE0ejl6WjNZVndjZz0iLCJpYXQiOjE3NDM0MTMzMzcsImV4cCI6MTc0NDAxODEzN30.9jm-AdSD3tUumJ0H-peY6QyXyPupwBqxSlvb_jyaVCA; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX18wFInKNiECEKSjJMN17GpF6wy7x7Rfgoqqo20pEKYPG72sWb83%2BI%2BnJB3Tt6y%2BSZzEjcbtItlBKw%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX1%2Bsav7XubQio2gz%2FsC6Q8XJrTaBKC5E0L7Hp3Poe9sJjImC%2F0XWf7o3LmN8A7tFny%2FQWd5v%2BdZYLToOHs36LZb49g1FaCqwmizCxygPEQ0UZMTyF3IqB6qa6d6H7DqHEGpl40f5jv3d8vJXzBDL8LTsaNTSJvF1vhQ%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX19TXbRTmSGOrfjvyJHxyUlT4MylEEPeD52qodPaT5vRKpdKAUnhRMpkxk9XKe%2FqoY3Y9PrT%2FSPuLqw1IXqBPDI1JBB%2Fn5Inn1rSgfXx9Y%2BU9Fdh%2BujRl7spsprBjH1hwYcNTEqteV%2BXPw%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22fbbaa0fe7164b93e2c831f7816129952355ab8de07812c802f276efe6e8da0f3%23f9aabbbd-6b69-4b00-b0e3-d9143a63ae34%22%2C%22%24sesid%22%3A%5B1743715715868%2C%220195fd42-ca51-73fe-b506-0c7ed35a87a5%22%2C1743710767697%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fxl.epicpc.com%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2B1eZcZVP0OgXM%2FC4nCTmOtYtXg0HtF0AYtOCCCdna7Z4hPwqQP1K6H1sxXLqZfah7GBxmtr4Bgk4e5CSvcO%2BMHw6mAhm79SZgeLrC7PFWXjDKGeWI5R%2Fequ7OMUWv2uhoPiEOqYk2HfA%3D%3D"
          },
          "params": {},
          "query": {},
          "body": {
            "title": "Turbo Ticketing",
            "ticketSystemId": "712",
            "bitrix24ProjectId": "126",
            "owner": "tstilwell@epichs.org",
            "questions[1][question]": "What location is this request for?",
            "questions[1][options][0]": "HQ",
            "questions[1][options][1]": "10 Mile Southfield",
            "questions[1][options][2]": "Ferndale",
            "questions[1][options][3]": "Livernois",
            "questions[1][required]": "Yes",
            "questions[1][type]": "singleselect",
            "questions[1][order]": "0",
            "questions[1][taskTitle]": "",
            "questions[1][taskTag]": "",
            "questions[1][options][4]": "{other}",
            "questions[2][question]": "Role affected",
            "questions[2][options][0]": "Center Staff",
            "questions[2][options][1]": "HQ",
            "questions[2][options][2]": "Offsite/Remote",
            "questions[2][required]": "Yes",
            "questions[2][type]": "multiselect",
            "questions[2][order]": "1",
            "questions[2][taskTitle]": "",
            "questions[2][taskTag]": "",
            "questions[2][options][3]": "{other}",
            "questions[3][question]": "Issue Category",
            "questions[3][options][0]": "Point of Care device not working (ECG/X-Ray/Other)",
            "questions[3][options][1]": "Computer issue",
            "questions[3][options][2]": "Printer/Printing issue",
            "questions[3][options][3]": "Account issues (UNITY/Teams/AD/Other)",
            "questions[3][required]": "Yes",
            "questions[3][type]": "multiselect",
            "questions[3][order]": "2",
            "questions[3][taskTitle]": "",
            "questions[3][taskTag]": "",
            "questions[4][question]": "Additional Information",
            "questions[4][required]": "No",
            "questions[4][type]": "Attachment",
            "questions[4][order]": "3",
            "questions[4][taskTitle]": "",
            "questions[4][taskTag]": ""
          },
          "webhookUrl": "https://xl.epicpc.com/webhook/4ae8f1cd-3cfb-48b8-be05-967fbbd9a1fe",
          "executionMode": "production"
        }
      }
    ],
    "Code6": [
      {
        "json": {
          "title": "Test",
          "ticketSystemId": "396",
          "bitrix24ProjectId": "126",
          "owner": "tstilwell@epichs.org",
          "question": "Test",
          "required": "Yes",
          "type": "longtext",
          "options": "",
          "bitrix24Title": "yes",
          "bitrix24Tag": "yes"
        }
      }
    ],
    "Webhook3": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "10.0.24.24",
            "x-forwarded-for": "10.0.24.24",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "upgrade-insecure-requests": "1",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) UNITY/1.5.7 Chrome/128.0.6613.36 Electron/32.0.1 Safari/537.36",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "navigate",
            "sec-fetch-user": "?1",
            "sec-fetch-dest": "document",
            "referer": "https://xl.epicpc.com/webhook/514a4954-d74e-4183-9694-94d76671c483?user=tstilwell%40epichs.org&host=Duo&app_version=1.5.7&role=Nuwell&organization=unity&tab=all-tickets-weassist",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US",
            "cookie": "XSRF-TOKEN=eyJpdiI6ImNpTGgzTnFUOFVlaVBET2F2dlwvSXJBPT0iLCJ2YWx1ZSI6IkdndVlwR0RZQmtaQStMdEN3cGFSSDlqSFNMZmRLT3dcL29GRkVwdktFMFVkemJncVllN09mZ3ZMQ2VTcFJseFpOIiwibWFjIjoiYzAxOWYzNDY3NzI0ZmI5MzE2Nzk3OTVmOTZkNTQ5NzQ5ZDk3Mjk3ODIxZjMzM2NhNjE0MTI1YjU4NTRkNjUwOSJ9; epic_session=eyJpdiI6IkNhdjR1UDdxckxXcmRobTlHK2taWVE9PSIsInZhbHVlIjoiME1KUllhbFYyVHF2UU1VSlwvSmRvWmtmODZIajIwZVBTNEdVT1JNVnVMa0dTdHhUNG1GTGF6RTJRNzNvVnhoZTIiLCJtYWMiOiI4NmE4ZjY5MDAzNGVhNmJkZWU4YjNlNjU2YjViM2I1NjlkNDY0N2I5YTk3MGE2OTUyMTcxNWYzYmZiMWU0MjFjIn0%3D",
            "if-none-match": "W/\"3ffc-CcnMueNVgu9/92LUBreWhcUIuew\""
          },
          "params": {},
          "query": {
            "system": "Turbo Ticketing",
            "user": "tstilwell@epichs.org"
          },
          "body": {},
          "webhookUrl": "https://xl.epicpc.com/webhook/99d4ae83-d3f5-4126-9f6b-ea45add343c4",
          "executionMode": "production"
        }
      }
    ],
    "Code9": [
      {
        "json": {
          "TicketSystem": "Test",
          "TaskTitle": "Cool | Test | tstilwell@epichs.org",
          "TaskDescription": "Test: Cool",
          "Tag": "\"Cool\",\"Test\",\"tstilwell@epichs.org\"",
          "Requestor": "tstilwell@epichs.org",
          "description": "[b]Test[/b]: Cool\n\n[b]ticketSystemId[/b]: 396\n[b]user[/b]: tstilwell@epichs.org"
        }
      }
    ],
    "HTTP 24 Bitrix24 Check": [
      {
        "json": {
          "result": {
            "task": {
              "id": "283495",
              "parentId": null,
              "title": "tstilwell@epichs.org | Turbo Ticketing",
              "description": "What location?: FER\nWhich roles?: Provider\nFuture date: \nAdd csv: sfadfa",
              "mark": null,
              "priority": "1",
              "multitask": "N",
              "notViewed": "N",
              "replicate": "N",
              "stageId": "1007",
              "createdBy": "19",
              "createdDate": "2025-03-26T14:56:22-04:00",
              "responsibleId": "19",
              "changedBy": "19",
              "changedDate": "2025-03-26T14:56:22-04:00",
              "statusChangedBy": null,
              "closedBy": null,
              "closedDate": null,
              "activityDate": "2025-03-26T14:56:22-04:00",
              "dateStart": null,
              "deadline": null,
              "startDatePlan": null,
              "endDatePlan": null,
              "guid": "{2bcc9323-1c9c-49f5-bf36-421bc0fce78a}",
              "xmlId": null,
              "commentsCount": null,
              "serviceCommentsCount": null,
              "allowChangeDeadline": "N",
              "allowTimeTracking": "N",
              "taskControl": "N",
              "addInReport": "N",
              "forkedByTemplateId": null,
              "timeEstimate": "0",
              "timeSpentInLogs": null,
              "matchWorkTime": "N",
              "forumTopicId": null,
              "forumId": null,
              "siteId": "ie",
              "subordinate": "N",
              "exchangeModified": null,
              "exchangeId": null,
              "outlookVersion": "1",
              "viewedDate": null,
              "sorting": null,
              "durationFact": null,
              "isMuted": "N",
              "isPinned": "N",
              "isPinnedInGroup": "N",
              "flowId": null,
              "descriptionInBbcode": "Y",
              "status": "2",
              "statusChangedDate": "2025-03-26T14:56:22-04:00",
              "durationPlan": null,
              "durationType": "days",
              "favorite": "N",
              "groupId": "126",
              "auditors": [],
              "accomplices": [],
              "checklist": [],
              "group": {
                "id": "126",
                "name": "_Workflow Automations",
                "opened": false,
                "membersCount": 3,
                "image": "/bitrix/images/socialnetwork/workgroup/folder.png",
                "additionalData": []
              },
              "creator": {
                "id": "19",
                "name": "IT Help Desk",
                "link": "/company/personal/user/19/",
                "icon": "/bitrix/images/tasks/default_avatar.png",
                "workPosition": null
              },
              "responsible": {
                "id": "19",
                "name": "IT Help Desk",
                "link": "/company/personal/user/19/",
                "icon": "/bitrix/images/tasks/default_avatar.png",
                "workPosition": null
              },
              "accomplicesData": [],
              "auditorsData": [],
              "newCommentsCount": 0,
              "action": {
                "accept": false,
                "decline": false,
                "complete": true,
                "approve": false,
                "disapprove": false,
                "start": true,
                "pause": false,
                "delegate": true,
                "remove": true,
                "edit": true,
                "defer": true,
                "renew": false,
                "create": true,
                "changeDeadline": true,
                "checklistAddItems": true,
                "addFavorite": true,
                "deleteFavorite": false,
                "rate": true,
                "edit.originator": false,
                "checklist.reorder": true,
                "elapsedtime.add": true,
                "dayplan.timer.toggle": false,
                "edit.plan": true,
                "checklist.add": true,
                "favorite.add": true,
                "favorite.delete": false
              },
              "checkListTree": {
                "nodeId": 0,
                "fields": {
                  "id": null,
                  "copiedId": null,
                  "entityId": null,
                  "userId": 19,
                  "createdBy": null,
                  "parentId": null,
                  "title": "",
                  "sortIndex": null,
                  "displaySortIndex": "",
                  "isComplete": false,
                  "isImportant": false,
                  "completedCount": 0,
                  "members": [],
                  "attachments": []
                },
                "action": [],
                "descendants": []
              },
              "checkListCanAdd": true
            }
          },
          "time": {
            "start": 1743015382.570514,
            "finish": 1743015383.168443,
            "duration": 0.5979290008544922,
            "processing": 0.5377731323242188,
            "date_start": "2025-03-26T14:56:22-04:00",
            "date_finish": "2025-03-26T14:56:23-04:00"
          }
        }
      }
    ],
    "Code26": [
      {
        "json": {
          "TicketSystem": "Turbo Ticketing",
          "TaskTitle": "tstilwell@epichs.org | Turbo Ticketing",
          "TaskDescription": "What is your feature request?: tse\nWhat location?: HQ\nWhich roles?: CM\nFuture Date: 2025-03-26",
          "Tag": [
            "tstilwell@epichs.org"
          ],
          "Requestor": "tstilwell@epichs.org"
        }
      }
    ],
    "Code32": [
      {
        "json": {
          "TicketSystem": "Turbo Ticketing",
          "TaskTitle": "tstilwell@epichs.org | Turbo Ticketing",
          "TaskDescription": "What location?: HQ\nWhich roles?: Provider\nFuture date: \nAdd csv: Test",
          "Tag": [
            "tstilwell@epichs.org"
          ],
          "Requestor": "tstilwell@epichs.org",
          "description": "[b]TicketSystem[/b]: Turbo Ticketing\n[b]TaskTitle[/b]: tstilwell@epichs.org | Turbo Ticketing\n[b]TaskDescription[/b]: What location?: HQ\nWhich roles?: Provider\nFuture date: \nAdd csv: Test\n[b]Tag[/b]: tstilwell@epichs.org\n[b]Requestor[/b]: tstilwell@epichs.org\n"
        }
      }
    ],
    "Code35": [
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "What is your feature request?",
          "required": "Yes",
          "type": "Text",
          "options": ""
        }
      },
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "What location?",
          "required": "Yes",
          "type": "SingleSelect",
          "options": "HQ, SFD, FER"
        }
      },
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "Which roles?",
          "required": "Yes",
          "type": "MultiSelect",
          "options": "CM, CC, Provider"
        }
      },
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "What date is this for?",
          "required": "Yes",
          "type": "Date",
          "options": ""
        }
      }
    ],
    "Code41": [
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "What is your feature request?",
          "required": "Yes",
          "type": "Text",
          "options": ""
        }
      },
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "What location?",
          "required": "Yes",
          "type": "SingleSelect",
          "options": "HQ, SFD, FER"
        }
      },
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "Which roles?",
          "required": "Yes",
          "type": "MultiSelect",
          "options": "CM, CC, Provider"
        }
      },
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "What date is this for?",
          "required": "Yes",
          "type": "Date",
          "options": ""
        }
      }
    ],
    "Code48": [
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "What is your feature request?",
          "required": "Yes",
          "type": "Text",
          "options": ""
        }
      },
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "What location?",
          "required": "Yes",
          "type": "SingleSelect",
          "options": "HQ, SFD, FER"
        }
      },
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "Which roles?",
          "required": "Yes",
          "type": "MultiSelect",
          "options": "CM, CC, Provider"
        }
      },
      {
        "json": {
          "title": "Turbo Ticketing",
          "bitrix24ProjectId": "1",
          "owner": "tstilwell@epichs.org",
          "question": "What date is this for?",
          "required": "Yes",
          "type": "Date",
          "options": ""
        }
      }
    ],
    "Code50": [
      {
        "json": {
          "TicketSystem": "Turbo Ticketing",
          "TaskTitle": "tstilwell@epichs.org | Turbo Ticketing",
          "TaskDescription": "What location?: HQ\nWhich roles?: Provider\nFuture date: \nAdd csv: Test",
          "Tag": [
            "tstilwell@epichs.org"
          ],
          "Requestor": "tstilwell@epichs.org",
          "description": "[b]TicketSystem[/b]: Turbo Ticketing\n[b]TaskTitle[/b]: tstilwell@epichs.org | Turbo Ticketing\n[b]TaskDescription[/b]: What location?: HQ\nWhich roles?: Provider\nFuture date: \nAdd csv: Test\n[b]Tag[/b]: tstilwell@epichs.org\n[b]Requestor[/b]: tstilwell@epichs.org\n"
        }
      }
    ],
    "Code51": [
      {
        "json": {
          "TicketSystem": "Turbo Ticketing",
          "TaskTitle": "tstilwell@epichs.org | Turbo Ticketing",
          "TaskDescription": "What location?: HQ\nWhich roles?: Provider\nFuture date: \nAdd csv: Test",
          "Tag": [
            "tstilwell@epichs.org"
          ],
          "Requestor": "tstilwell@epichs.org",
          "description": "[b]TicketSystem[/b]: Turbo Ticketing\n[b]TaskTitle[/b]: tstilwell@epichs.org | Turbo Ticketing\n[b]TaskDescription[/b]: What location?: HQ\nWhich roles?: Provider\nFuture date: \nAdd csv: Test\n[b]Tag[/b]: tstilwell@epichs.org\n[b]Requestor[/b]: tstilwell@epichs.org\n"
        }
      }
    ],
    "Code53": [
      {
        "json": {
          "title": "Test",
          "ticketSystemId": "396",
          "bitrix24ProjectId": "126",
          "owner": "tstilwell@epichs.org",
          "question": "Test",
          "required": "Yes",
          "type": "longtext",
          "options": "",
          "bitrix24Title": "yes",
          "bitrix24Tag": "yes"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 4,
  "updatedAt": "2025-04-15T21:54:25.554Z",
  "versionId": "a9276454-848e-411b-a506-986e929329df"
}