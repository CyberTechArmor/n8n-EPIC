{
  "active": true,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        []
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-04T13:58:02.105Z",
  "id": "5IMEfn6iO8nvGYRA",
  "isArchived": false,
  "meta": null,
  "name": "Quick Scheduler Interface - DEV",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "799e9ee2-6bf3-48ed-b3d5-fd0dce51085f",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e9fe0d04-6cc0-43d5-a311-6fe127e78144",
              "name": "orders",
              "value": "[   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"EXERCISE STRESS TEST (93015) -SL\",     \"LABCAT_CPTCODE\": \"93015\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": 251,     \"Appointment_Type_Description\": \"EXERCISE STRESS TEST\",     \"Patient_ID\": 85927,     \"Patient_Number\": \"034591\",     \"Appt_ID\": 25302064,     \"Appt_DateTime\": \"2024-12-23T16:00:00.000Z\",     \"Appt_Resource_ID\": 1090,     \"Appt_Resource_Descr\": \"Exercise Stress Test or Stress ABI\",     \"Appt_Status\": \"S\",     \"BookedAppt\": \"BookedAppt\",     \"Appt_Sched_Location_Descr\": \"DIAG EP Southfield\",     \"Appt_Type_Abbr\": \"ST-GXT  \",     \"Appointment_Category_ID\": 171   },   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"US OF ABDOMEN (76700) (GENERAL) -SL\",     \"LABCAT_CPTCODE\": \"76700\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": 240,     \"Appointment_Type_Description\": \"US ABDOMEN COMPLETE\",     \"Patient_ID\": 85927,     \"Patient_Number\": \"034591\",     \"Appt_ID\": 25365943,     \"Appt_DateTime\": \"2024-12-03T13:50:00.000Z\",     \"Appt_Resource_ID\": 1249,     \"Appt_Resource_Descr\": \"US - Tamara\",     \"Appt_Status\": \"B\",     \"BookedAppt\": \"BookedAppt\",     \"Appt_Sched_Location_Descr\": \"DIAG EP Southfield\",     \"Appt_Type_Abbr\": \"USABD   \",     \"Appointment_Category_ID\": 139   },   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"SCREENING COMPUTED TOMOGRAPHY OF THORAX FOR MALIGNANT NEOPLASM (71271) -SL\",     \"LABCAT_CPTCODE\": \"71271\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": 240,     \"Appointment_Type_Description\": \"SCREENING COMPUTED TOMOGRAPHY OF THORAX FOR MALIGNANT NEOPLASM\",     \"Patient_ID\": 85927,     \"Patient_Number\": \"034591\",     \"Appt_ID\": 25365943,     \"Appt_DateTime\": \"2024-12-03T13:50:00.000Z\",     \"Appt_Resource_ID\": 1249,     \"Appt_Resource_Descr\": \"US - Tamara\",     \"Appt_Status\": \"B\",     \"BookedAppt\": \"BookedAppt\",     \"Appt_Sched_Location_Descr\": \"DIAG EP Southfield\",     \"Appt_Type_Abbr\": \"USABD   \",     \"Appointment_Category_ID\": 139   },   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"2 D ECHO (93306) (ECHO) -SL\",     \"LABCAT_CPTCODE\": \"93307\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": 80,     \"Appointment_Type_Description\": \"2D ECHOCARDIOGRAM\",     \"Patient_ID\": null,     \"Patient_Number\": null,     \"Appt_ID\": null,     \"Appt_DateTime\": null,     \"Appt_Resource_ID\": null,     \"Appt_Resource_Descr\": null,     \"Appt_Status\": null,     \"BookedAppt\": null,     \"Appt_Sched_Location_Descr\": null,     \"Appt_Type_Abbr\": null,     \"Appointment_Category_ID\": null   },   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"24-48 HR HOLTER MONITOR (93227)\",     \"LABCAT_CPTCODE\": \"93227\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": 261,     \"Appointment_Type_Description\": \"24-48 HR HOLTER MONITOR\",     \"Patient_ID\": null,     \"Patient_Number\": null,     \"Appt_ID\": null,     \"Appt_DateTime\": null,     \"Appt_Resource_ID\": null,     \"Appt_Resource_Descr\": null,     \"Appt_Status\": null,     \"BookedAppt\": null,     \"Appt_Sched_Location_Descr\": null,     \"Appt_Type_Abbr\": null,     \"Appointment_Category_ID\": null   },   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"CT ABDOMEN AND PELVIS WITHOUT CONTRAST (74176) -SL\",     \"LABCAT_CPTCODE\": \"74176\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": null,     \"Appointment_Type_Description\": null,     \"Patient_ID\": null,     \"Patient_Number\": null,     \"Appt_ID\": null,     \"Appt_DateTime\": null,     \"Appt_Resource_ID\": null,     \"Appt_Resource_Descr\": null,     \"Appt_Status\": null,     \"BookedAppt\": null,     \"Appt_Sched_Location_Descr\": null,     \"Appt_Type_Abbr\": null,     \"Appointment_Category_ID\": null   },   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"US OF PELVIS (76856) (GENERAL) -SL\",     \"LABCAT_CPTCODE\": \"76856\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": 257,     \"Appointment_Type_Description\": \"US PELVIS (WITHOUT TRANSVAGINAL PROBE)\",     \"Patient_ID\": null,     \"Patient_Number\": null,     \"Appt_ID\": null,     \"Appt_DateTime\": null,     \"Appt_Resource_ID\": null,     \"Appt_Resource_Descr\": null,     \"Appt_Status\": null,     \"BookedAppt\": null,     \"Appt_Sched_Location_Descr\": null,     \"Appt_Type_Abbr\": null,     \"Appointment_Category_ID\": null   },   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"AIRWAY INHALATION TREATMENT (94640)\",     \"LABCAT_CPTCODE\": \"94640\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": null,     \"Appointment_Type_Description\": null,     \"Patient_ID\": null,     \"Patient_Number\": null,     \"Appt_ID\": null,     \"Appt_DateTime\": null,     \"Appt_Resource_ID\": null,     \"Appt_Resource_Descr\": null,     \"Appt_Status\": null,     \"BookedAppt\": null,     \"Appt_Sched_Location_Descr\": null,     \"Appt_Type_Abbr\": null,     \"Appointment_Category_ID\": null   },   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"PRE AND POST SPIROMETRY (94060)\",     \"LABCAT_CPTCODE\": \"94060\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": null,     \"Appointment_Type_Description\": null,     \"Patient_ID\": null,     \"Patient_Number\": null,     \"Appt_ID\": null,     \"Appt_DateTime\": null,     \"Appt_Resource_ID\": null,     \"Appt_Resource_Descr\": null,     \"Appt_Status\": null,     \"BookedAppt\": null,     \"Appt_Sched_Location_Descr\": null,     \"Appt_Type_Abbr\": null,     \"Appointment_Category_ID\": null   },   {     \"IMREDEM_CODE\": 80076,     \"SCHED_TIMEIN\": \"2024-12-02T16:14:00.000Z\",     \"DEM_EXTERNALID\": \"197520\",     \"LABORDER_NAME\": \"ALBUTEROL NON-COMP CON (J7611)\",     \"LABCAT_CPTCODE\": \"J7611\",     \"LOCATION_NAME\": \"EPIC DETROIT 7 MILE\",     \"CAREGIVER_NAME\": \"HNATIO, BRYAN PA\",     \"Appointment_Type_ID\": null,     \"Appointment_Type_Description\": null,     \"Patient_ID\": null,     \"Patient_Number\": null,     \"Appt_ID\": null,     \"Appt_DateTime\": null,     \"Appt_Resource_ID\": null,     \"Appt_Resource_Descr\": null,     \"Appt_Status\": null,     \"BookedAppt\": null,     \"Appt_Sched_Location_Descr\": null,     \"Appt_Type_Abbr\": null,     \"Appointment_Category_ID\": null   },   {     \"IMREDEM_CODE\": null,     \"SCHED_TIMEIN\": null,     \"DEM_EXTERNALID\": null,     \"LABORDER_NAME\": null,     \"LABCAT_CPTCODE\": null,     \"LOCATION_NAME\": null,     \"CAREGIVER_NAME\": null,     \"Appointment_Type_ID\": 234,     \"Appointment_Type_Description\": null,     \"Patient_ID\": 85927,     \"Patient_Number\": \"034591\",     \"Appt_ID\": 25365945,     \"Appt_DateTime\": \"2024-12-03T14:20:00.000Z\",     \"Appt_Resource_ID\": 133,     \"Appt_Resource_Descr\": \"Webster, Shannon PAC\",     \"Appt_Status\": \"B\",     \"BookedAppt\": \"BookedAppt\",     \"Appt_Sched_Location_Descr\": \"EPIC Southfield 10 Mile\",     \"Appt_Type_Abbr\": \"ACT OV  \",     \"Appointment_Category_ID\": 226   },   {     \"IMREDEM_CODE\": null,     \"SCHED_TIMEIN\": null,     \"DEM_EXTERNALID\": null,     \"LABORDER_NAME\": null,     \"LABCAT_CPTCODE\": null,     \"LOCATION_NAME\": null,     \"CAREGIVER_NAME\": null,     \"Appointment_Type_ID\": 234,     \"Appointment_Type_Description\": null,     \"Patient_ID\": 85927,     \"Patient_Number\": \"034591\",     \"Appt_ID\": 25303985,     \"Appt_DateTime\": \"2025-01-06T13:40:00.000Z\",     \"Appt_Resource_ID\": 1018,     \"Appt_Resource_Descr\": \"Gadoua, Christopher\",     \"Appt_Status\": \"S\",     \"BookedAppt\": \"BookedAppt\",     \"Appt_Sched_Location_Descr\": \"EPIC Southfield 10 Mile\",     \"Appt_Type_Abbr\": \"ACT OV  \",     \"Appointment_Category_ID\": 226   },   {     \"IMREDEM_CODE\": null,     \"SCHED_TIMEIN\": null,     \"DEM_EXTERNALID\": null,     \"LABORDER_NAME\": null,     \"LABCAT_CPTCODE\": null,     \"LOCATION_NAME\": null,     \"CAREGIVER_NAME\": null,     \"Appointment_Type_ID\": 423,     \"Appointment_Type_Description\": null,     \"Patient_ID\": 85927,     \"Patient_Number\": \"034591\",     \"Appt_ID\": 25303983,     \"Appt_DateTime\": \"2024-12-23T15:40:00.000Z\",     \"Appt_Resource_ID\": 1013,     \"Appt_Resource_Descr\": \"US - Safa\",     \"Appt_Status\": \"S\",     \"BookedAppt\": \"BookedAppt\",     \"Appt_Sched_Location_Descr\": \"DIAG EP Southfield\",     \"Appt_Type_Abbr\": \"BSPECHO \",     \"Appointment_Category_ID\": 139   } ]",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        220,
        0
      ],
      "id": "e7fdbc30-8473-4b7e-b7ce-470e55a8c0f6",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// Collect all incoming data from n8n\nconst incomingData = $input.all().map(item => item.json);\n\n// Extract webhook meta data (which contains query parameters with correct patient info)\nconst metaData = incomingData.find(item => item.query && item.query.fullName);\n\n// Define default parameters from meta data if available, otherwise fallback values\nconst defaultPatientName = metaData ? metaData.query.fullName : \"TEDDY TEST\";\nconst defaultPatientId = metaData ? metaData.query.patientId : \"85927\";\nconst defaultReference = metaData ? metaData.query.reference : \"IMREDEMEC_CODE\";\nconst defaultCareType = metaData ? metaData.query.caretype : \"DCARE\";\n\nconst currentQueryParams = {\n  fullName: defaultPatientName,\n  patientId: defaultPatientId,\n  reference: defaultReference\n};\n\n// Instead of computing startDate/endDate, we now pass a dateRange parameter.\nconst query = metaData ? metaData.query : {};\nconst dateRangeParam = query.dateRange || '1-2days';\n\n// Helper function to determine the proper caretype based on Appointment_Type_Id\nfunction getCareType(appointmentTypeId) {\n  const id = Number(appointmentTypeId);\n  if ([439, 410, 411, 260].includes(id)) {\n    return \"SCARE\";\n  } else if ([46, 220, 304, 352, 394, 211, 234, 410, 411, 184].includes(id)) {\n    return \"PCARE\";\n  } else if ([275, 45, 80, 251, 61, 261, 48, 429, 258, 245, 253, 276, 219, 248, 213, 241, 257, 175, 256, 154, 239, 240, 222, 236, 131, 150, 199, 215, 223, 393, 421, 422, 431, 423, 417, 392, 247].includes(id)) {\n    return \"DCARE\";\n  } else if ([237, 55, 328, 273, 262, 244].includes(id)) {\n    return \"ICARE\";\n  }\n  return defaultCareType;\n}\n\n// Helper function to manually build URLs with added query parameters\nfunction buildUrl(base, newParams) {\n  const urlParts = base.split('?');\n  const baseUrl = urlParts[0];\n  const existingQuery = urlParts[1] || '';\n  const queryObj = {};\n\n  existingQuery.split('&').forEach(param => {\n    const [key, value] = param.split('=');\n    if (key) {\n      queryObj[key] = decodeURIComponent(value || '');\n    }\n  });\n\n  Object.keys(newParams).forEach(key => {\n    queryObj[key] = newParams[key];\n  });\n\n  const queryString = Object.keys(queryObj)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(queryObj[key])}`)\n    .join('&');\n\n  return `${baseUrl}?${queryString}`;\n}\n\n// Define the base URL for scheduling/rescheduling\nconst baseUrl = \"https://xl.epicpc.com/webhook/b4264e0e-085f-49c0-9471-1009eafa4ce01\";\n\n// Function to compute the effective dateRange based on the order's follow-up text.\nfunction computeEffectiveDateRange(order) {\n  let effectiveDateRange = dateRangeParam;\n  if (order.FOLLOWUPTIMENEEDED) {\n    const match = order.FOLLOWUPTIMENEEDED.match(/(\\d+)\\s*(day|days|week|weeks|month|months|year|years)/i);\n    if (match) {\n      const num = parseInt(match[1], 10);\n      const unit = match[2].toLowerCase();\n      if (unit.startsWith(\"day\")) {\n        effectiveDateRange = \"1-2days\";\n      } else if (unit.startsWith(\"week\")) {\n        effectiveDateRange = (num === 2) ? \"2weeks\" : \"1week\";\n      } else if (unit.startsWith(\"month\")) {\n        effectiveDateRange = (num === 2) ? \"2months\" : \"1month\";\n      } else if (unit.startsWith(\"year\")) {\n        effectiveDateRange = \"1year\";\n      }\n    }\n  }\n  return effectiveDateRange;\n}\n\n// Remove duplicate appointments based on Appt_ID.\nconst seenApptIds = new Set();\n\n// Group data into scheduled appointments and unscheduled orders\nconst scheduledAppointments = [];\nlet unscheduledOrders = [];\n\nincomingData.forEach(item => {\n  if (!item) return;\n  if (item.query) return;\n  \n  if (item.Appt_ID) {\n    if (seenApptIds.has(item.Appt_ID)) return;\n    seenApptIds.add(item.Appt_ID);\n  }\n  \n  if (typeof item.Appt_Status !== \"undefined\") {\n    if (item.Appt_Status === \"S\" || item.Appt_Status === \"B\") {\n      scheduledAppointments.push(item);\n    } else {\n      unscheduledOrders.push(item);\n    }\n  } else if ('APPOINTMENT_TYPE_ID' in item) {\n    unscheduledOrders.push(item);\n  }\n});\n\n// Filter out unscheduled orders that already have a future appointment.\nconst now = new Date();\nunscheduledOrders = unscheduledOrders.filter(order => {\n  const orderPatientId = order.DEM_EXTERNALID || order.Patient_ID;\n  const orderTypeId = String(order.APPOINTMENT_TYPE_ID);\n  const hasFutureAppt = scheduledAppointments.some(appt => {\n    const apptPatientId = appt.DEM_EXTERNALID || appt.Patient_ID;\n    const apptTypeId = String(appt.Appointment_Type_ID || appt.APPOINTMENT_TYPE_ID);\n    const apptDate = new Date(appt.Appt_DateTime.replace('Z', ''));\n    return apptPatientId == orderPatientId &&\n           apptTypeId === orderTypeId &&\n           apptDate > now;\n  });\n  return !hasFutureAppt;\n});\n\n// Generate HTML for unscheduled orders\nlet unscheduledHtml = `\n<h2 class=\"section-title\">Unscheduled Orders</h2>\n<div class=\"scrollable-table\">\n  <table>\n    <thead>\n      <tr>\n        <th>Procedure Ordered</th>\n        <th>Action</th>\n      </tr>\n    </thead>\n    <tbody>\n`;\n\nunscheduledOrders.forEach(order => {\n  // Using the webhook patientId if available, otherwise falling back\n  const patientId = currentQueryParams.patientId || (order.DEM_EXTERNALID || order.Patient_ID);\n  if (\n    !order ||\n    patientId == null || patientId === \"N/A\" ||\n    order.APPOINTMENT_TYPE_DESCRIPTION == null || order.APPOINTMENT_TYPE_DESCRIPTION === \"N/A\" ||\n    order.APPOINTMENT_TYPE_ID == null || order.APPOINTMENT_TYPE_ID === \"N/A\"\n  ) {\n    return;\n  }\n  \n  const patientName = order.Patient_Name \n    || (order.DEM_FIRSTNAME && order.DEM_LASTNAME ? order.DEM_FIRSTNAME + \" \" + order.DEM_LASTNAME : defaultPatientName);\n\n  const computedCareType = getCareType(order.APPOINTMENT_TYPE_ID);\n  const effectiveDateRange = computeEffectiveDateRange(order);\n\n  const scheduleUrl = buildUrl(baseUrl, {\n    ...currentQueryParams,\n    fullName: patientName,\n    patientId: patientId,\n    caretype: computedCareType,\n    visit_type_id: order.APPOINTMENT_TYPE_ID,\n    procedure_order: \"schedule\",\n    dateRange: effectiveDateRange\n  });\n\n  unscheduledHtml += `\n      <tr>\n        <td>${order.APPOINTMENT_TYPE_DESCRIPTION}</td>\n        <td>\n          <button class=\"btn schedule-btn\" onclick=\"handleScheduleClick(this, '${scheduleUrl}')\">Schedule</button>\n        </td>\n      </tr>\n  `;\n});\n\nunscheduledHtml += `\n    </tbody>\n  </table>\n</div>\n<!-- Global Full Width, Red, Bold Checkout Button under Unscheduled Orders -->\n<div style=\"margin-top: 10px;\">\n  <button class=\"btn checkout-btn\" onclick=\"handleCheckoutClick(this)\">Checkout</button>\n</div>\n`;\n\n// Generate HTML for scheduled appointments\nlet scheduledHtml = `\n<h2 class=\"section-title\">Scheduled Appointments</h2>\n<div class=\"scrollable-table\">\n  <table>\n    <thead>\n      <tr>\n        <th>Appointment</th>\n        <th>Location</th>\n        <th>Date</th>\n        <th>Time</th>\n        <th>Caregiver</th>\n        <th>Action</th>\n      </tr>\n    </thead>\n    <tbody>\n`;\n\nscheduledAppointments.forEach(appt => {\n  // Determine the patientId: if a patientId was passed in the webhook, use that; otherwise, use DEM_EXTERNALID/Patient_ID from the appointment.\n  const patientIdFromAppt = appt.DEM_EXTERNALID || appt.Patient_ID;\n  const effectivePatientId = currentQueryParams.patientId || patientIdFromAppt;\n  \n  if (\n    !appt ||\n    effectivePatientId == null || effectivePatientId === \"N/A\" ||\n    appt.Appt_DateTime == null || appt.Appt_DateTime === \"N/A\" ||\n    (appt.Appointment_Type_ID === null && appt.APPOINTMENT_TYPE_ID === null) ||\n    appt.Appt_Resource_Descr == null || appt.Appt_Resource_Descr === \"N/A\" ||\n    appt.Appt_Sched_Location_Descr == null || appt.Appt_Sched_Location_Descr === \"N/A\"\n  ) {\n    return;\n  }\n  \n  const patientName = appt.Patient_Name \n    || (appt.DEM_FIRSTNAME && appt.DEM_LASTNAME ? appt.DEM_FIRSTNAME + \" \" + appt.DEM_LASTNAME : defaultPatientName);\n\n  const appointmentTypeId = appt.Appointment_Type_ID || appt.APPOINTMENT_TYPE_ID;\n  const computedCareType = getCareType(appointmentTypeId);\n  const procedureOrderParam = computedCareType === \"DCARE\" ? \"schedule\" : \"reschedule\";\n  const effectiveDateRange = computeEffectiveDateRange(appt);\n\n  // Updated: Using the webhook patientId if available; otherwise DEM_EXTERNALID.\n  const rescheduleUrl = buildUrl(baseUrl, {\n    ...currentQueryParams,\n    fullName: patientName,\n    patientId: effectivePatientId,\n    caretype: computedCareType,\n    reschule: appointmentTypeId,\n    procedure_order: procedureOrderParam,\n    visit_type_id: appointmentTypeId,\n    dateRange: effectiveDateRange,\n    Appt_ID: appt.Appt_ID\n  });\n  \n  const localDate = new Date(appt.Appt_DateTime.replace('Z', ''));\n  const formattedDate = localDate.toLocaleDateString();\n  const formattedTime = localDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n\n  scheduledHtml += `\n      <tr>\n        <td>${appt.Appt_Resource_Descr}</td>\n        <td>${appt.Appt_Sched_Location_Descr}</td>\n        <td>${formattedDate}</td>\n        <td>${formattedTime}</td>\n        <td>${appt.Appt_Resource_Descr}</td>\n        <td>\n          <button class=\"btn reschedule-btn\" onclick=\"handleRescheduleClick(this, '${rescheduleUrl}')\">Reschedule</button>\n        </td>\n      </tr>\n  `;\n});\n\nscheduledHtml += `\n    </tbody>\n  </table>\n</div>\n`;\n\n// Combine both tables into the final HTML\nconst html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Appointment Information</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      overflow: hidden;\n      font-family: Arial, sans-serif;\n    }\n    body {\n      background-image: url('https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png');\n      background-size: cover;\n      background-position: center;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .container {\n      max-width: 900px;\n      width: 100%;\n      background-color: #fff;\n      padding: 16px;\n      border-radius: 8px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n      overflow-y: auto;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 16px;\n    }\n    .section-title {\n      margin-top: 30px;\n      text-align: left;\n      font-size: 20px;\n      color: #374151;\n      border-bottom: 2px solid #e5e7eb;\n      padding-bottom: 5px;\n    }\n    .scrollable-table {\n      max-height: calc(5 * 50px + 50px);\n      overflow-y: auto;\n      margin-bottom: 20px;\n      border: 1px solid #e5e7eb;\n      border-radius: 4px;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n    th, td {\n      padding: 12px;\n      text-align: left;\n    }\n    th {\n      background-color: #f9fafb;\n      font-weight: bold;\n    }\n    td {\n      color: #4b5563;\n      border-top: 1px solid #e5e7eb;\n    }\n    .btn {\n      padding: 10px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .schedule-btn {\n      background-color: #3b82f6;\n      color: white;\n    }\n    .schedule-btn:hover {\n      background-color: #2563eb;\n    }\n    .reschedule-btn {\n      background-color: #ef4444;\n      color: white;\n    }\n    .reschedule-btn:hover {\n      background-color: #dc2626;\n    }\n    .checkout-btn {\n      background-color: red;\n      color: white;\n      font-weight: bold;\n      width: 100%;\n      display: block;\n    }\n    .checkout-btn:hover {\n      background-color: darkred;\n    }\n    .loader {\n      border: 2px solid #f3f3f3;\n      border-top: 2px solid #3498db;\n      border-radius: 50%;\n      width: 12px;\n      height: 12px;\n      animation: spin 1s linear infinite;\n      display: inline-block;\n      margin-right: 5px;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Appointment and Scheduling Information</h1>\n    ${unscheduledHtml}\n    ${scheduledHtml}\n  </div>\n  <script>\n    // Expose the current query parameters for client-side use\n    const currentQueryParams = ${JSON.stringify(currentQueryParams)};\n    \n    window.addEventListener(\"pageshow\", function(event) {\n      if (event.persisted) {\n        window.location.reload();\n      }\n    });\n    function handleScheduleClick(button, url) {\n      button.disabled = true;\n      button.innerHTML = '<span class=\"loader\"></span> Scheduling...';\n      window.location.href = url;\n    }\n    function handleRescheduleClick(button, url) {\n      button.disabled = true;\n      button.innerHTML = '<span class=\"loader\"></span> Rescheduling...';\n      window.location.href = url;\n    }\n    function handleCheckoutClick(button) {\n      button.disabled = true;\n      button.innerHTML = '<span class=\"loader\"></span> Redirecting...';\n      // Redirect to the specified URL while appending all current URL parameters\n      window.location.href = \"https://xl.epicpc.com/webhook/4ab15d3f-8a32-43cd-9223-9aa4cbddf07b\" + window.location.search;\n    }\n  </script>\n</body>\n</html>\n`;\n\n// Return the generated HTML for rendering in n8n\nreturn [{ json: { htmlContent: html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        -240
      ],
      "id": "8f59082e-9106-4fcb-b682-acf239a3c722",
      "name": "Code55"
    },
    {
      "parameters": {
        "jsCode": "// Collect all incoming data from n8n\nconst incomingData = $input.all().map(item => item.json);\n\n// Extract webhook meta data (which contains query parameters with correct patient info)\nconst metaData = incomingData.find(item => item.query && item.query.fullName);\n\n// Define default parameters from meta data if available, otherwise fallback values\nconst defaultPatientName = metaData ? metaData.query.fullName : \"TEDDY TEST\";\nconst defaultPatientId = metaData ? metaData.query.patientId : \"85927\";\nconst defaultReference = metaData ? metaData.query.reference : \"IMREDEMEC_CODE\";\nconst defaultCareType = metaData ? metaData.query.caretype : \"DCARE\";\n\nconst currentQueryParams = {\n  fullName: defaultPatientName,\n  patientId: defaultPatientId,\n  reference: defaultReference\n};\n\n// Decode the patient name for display (replace \"+\" with spaces)\nconst headerName = defaultPatientName.replaceAll(\"+\", \" \");\nconst headerMRN = defaultPatientId;\n\n// Instead of computing startDate/endDate, we now pass a dateRange parameter.\nconst query = metaData ? metaData.query : {};\nconst dateRangeParam = query.dateRange || '1-2days';\n\n// Helper function to determine the proper caretype based on Appointment_Type_Id\nfunction getCareType(appointmentTypeId) {\n  const id = Number(appointmentTypeId);\n  if ([439, 410, 411, 260].includes(id)) {\n    return \"SCARE\";\n  } else if ([46, 220, 304, 352, 394, 211, 234, 410, 411, 184].includes(id)) {\n    return \"PCARE\";\n  } else if ([275, 45, 80, 251, 61, 261, 48, 429, 258, 245, 253, 276, 219, 248, 213, 241, 257, 175, 256, 154, 239, 240, 222, 236, 131, 150, 199, 215, 223, 393, 421, 422, 431, 423, 417, 392, 247].includes(id)) {\n    return \"DCARE\";\n  } else if ([237, 55, 328, 273, 262, 244].includes(id)) {\n    return \"ICARE\";\n  }\n  return defaultCareType;\n}\n\n// Helper function to manually build URLs with added query parameters\nfunction buildUrl(base, newParams) {\n  const urlParts = base.split('?');\n  const baseUrl = urlParts[0];\n  const existingQuery = urlParts[1] || '';\n  const queryObj = {};\n\n  existingQuery.split('&').forEach(param => {\n    const [key, value] = param.split('=');\n    if (key) {\n      queryObj[key] = decodeURIComponent(value || '');\n    }\n  });\n\n  Object.keys(newParams).forEach(key => {\n    queryObj[key] = newParams[key];\n  });\n\n  const queryString = Object.keys(queryObj)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(queryObj[key])}`)\n    .join('&');\n\n  return `${baseUrl}?${queryString}`;\n}\n\n// Define the base URL for scheduling/rescheduling\nconst baseUrl = \"https://xl.epicpc.com/webhook/b4264e0e-085f-49c0-9471-1009eafa4ce01\";\n\n// Function to compute the effective dateRange based on the order's follow-up text.\nfunction computeEffectiveDateRange(order) {\n  let effectiveDateRange = dateRangeParam;\n  if (order.FOLLOWUPTIMENEEDED) {\n    const match = order.FOLLOWUPTIMENEEDED.match(/(\\d+)\\s*(day|days|week|weeks|month|months|year|years)/i);\n    if (match) {\n      const num = parseInt(match[1], 10);\n      const unit = match[2].toLowerCase();\n      if (unit.startsWith(\"day\")) {\n        effectiveDateRange = \"1-2days\";\n      } else if (unit.startsWith(\"week\")) {\n        effectiveDateRange = (num === 2) ? \"2weeks\" : \"1week\";\n      } else if (unit.startsWith(\"month\")) {\n        effectiveDateRange = (num === 2) ? \"2months\" : \"1month\";\n      } else if (unit.startsWith(\"year\")) {\n        effectiveDateRange = \"1year\";\n      }\n    }\n  }\n  return effectiveDateRange;\n}\n\n// Remove duplicate appointments based on Appt_ID.\nconst seenApptIds = new Set();\n\n// Group data into scheduled appointments and unscheduled orders\nconst scheduledAppointments = [];\nlet unscheduledOrders = [];\n\nincomingData.forEach(item => {\n  if (!item) return;\n  if (item.query) return;\n  \n  if (item.Appt_ID) {\n    if (seenApptIds.has(item.Appt_ID)) return;\n    seenApptIds.add(item.Appt_ID);\n  }\n  \n  if (typeof item.Appt_Status !== \"undefined\") {\n    if (item.Appt_Status === \"S\" || item.Appt_Status === \"B\") {\n      scheduledAppointments.push(item);\n    } else {\n      unscheduledOrders.push(item);\n    }\n  } else if ('APPOINTMENT_TYPE_ID' in item) {\n    unscheduledOrders.push(item);\n  }\n});\n\n// Filter out unscheduled orders that already have a future appointment.\nconst now = new Date();\nunscheduledOrders = unscheduledOrders.filter(order => {\n  const orderPatientId = order.DEM_EXTERNALID || order.Patient_ID;\n  const orderTypeId = String(order.APPOINTMENT_TYPE_ID);\n  const hasFutureAppt = scheduledAppointments.some(appt => {\n    const apptPatientId = appt.DEM_EXTERNALID || appt.Patient_ID;\n    const apptTypeId = String(appt.Appointment_Type_ID || appt.APPOINTMENT_TYPE_ID);\n    const apptDate = new Date(appt.Appt_DateTime.replace('Z', ''));\n    return apptPatientId == orderPatientId &&\n           apptTypeId === orderTypeId &&\n           apptDate > now;\n  });\n  return !hasFutureAppt;\n});\n\n// Generate HTML for unscheduled orders\nlet unscheduledHtml = `\n<h2 class=\"section-title\">Unscheduled Orders</h2>\n<div class=\"scrollable-table\">\n  <table>\n    <thead>\n      <tr>\n        <th>Procedure Ordered</th>\n        <th>Action</th>\n      </tr>\n    </thead>\n    <tbody>\n`;\n\nunscheduledOrders.forEach(order => {\n  // Using the webhook patientId if available, otherwise falling back\n  const patientId = currentQueryParams.patientId || (order.DEM_EXTERNALID || order.Patient_ID);\n  if (\n    !order ||\n    patientId == null || patientId === \"N/A\" ||\n    order.APPOINTMENT_TYPE_DESCRIPTION == null || order.APPOINTMENT_TYPE_DESCRIPTION === \"N/A\" ||\n    order.APPOINTMENT_TYPE_ID == null || order.APPOINTMENT_TYPE_ID === \"N/A\"\n  ) {\n    return;\n  }\n  \n  const patientName = order.Patient_Name \n    || (order.DEM_FIRSTNAME && order.DEM_LASTNAME ? order.DEM_FIRSTNAME + \" \" + order.DEM_LASTNAME : headerName);\n\n  const computedCareType = getCareType(order.APPOINTMENT_TYPE_ID);\n  const effectiveDateRange = computeEffectiveDateRange(order);\n\n  const scheduleUrl = buildUrl(baseUrl, {\n    ...currentQueryParams,\n    fullName: patientName,\n    patientId: patientId,\n    caretype: computedCareType,\n    visit_type_id: order.APPOINTMENT_TYPE_ID,\n    procedure_order: \"schedule\",\n    dateRange: effectiveDateRange\n  });\n\n  unscheduledHtml += `\n      <tr>\n        <td>${order.APPOINTMENT_TYPE_DESCRIPTION}</td>\n        <td>\n          <button class=\"btn schedule-btn\" onclick=\"handleScheduleClick(this, '${scheduleUrl}')\">Schedule</button>\n        </td>\n      </tr>\n  `;\n});\n\nunscheduledHtml += `\n    </tbody>\n  </table>\n</div>\n<!-- Global Full Width, Red, Bold Checkout Button under Unscheduled Orders -->\n<div style=\"margin-top: 10px;\">\n  <button class=\"btn checkout-btn\" onclick=\"handleCheckoutClick(this)\">Checkout</button>\n</div>\n`;\n\n// Generate HTML for scheduled appointments\nlet scheduledHtml = `\n<h2 class=\"section-title\">Scheduled Appointments</h2>\n<div class=\"scrollable-table\">\n  <table>\n    <thead>\n      <tr>\n        <th>Appointment</th>\n        <th>Location</th>\n        <th>Date</th>\n        <th>Time</th>\n        <th>Caregiver</th>\n        <th>Action</th>\n      </tr>\n    </thead>\n    <tbody>\n`;\n\nscheduledAppointments.forEach(appt => {\n  // Determine the patientId: if a patientId was passed in the webhook, use that; otherwise, use DEM_EXTERNALID/Patient_ID from the appointment.\n  const patientIdFromAppt = appt.DEM_EXTERNALID || appt.Patient_ID;\n  const effectivePatientId = currentQueryParams.patientId || patientIdFromAppt;\n  \n  if (\n    !appt ||\n    effectivePatientId == null || effectivePatientId === \"N/A\" ||\n    appt.Appt_DateTime == null || appt.Appt_DateTime === \"N/A\" ||\n    (appt.Appointment_Type_ID === null && appt.APPOINTMENT_TYPE_ID === null) ||\n    appt.Appt_Resource_Descr == null || appt.Appt_Resource_Descr === \"N/A\" ||\n    appt.Appt_Sched_Location_Descr == null || appt.Appt_Sched_Location_Descr === \"N/A\"\n  ) {\n    return;\n  }\n  \n  const patientName = appt.Patient_Name \n    || (appt.DEM_FIRSTNAME && appt.DEM_LASTNAME ? appt.DEM_FIRSTNAME + \" \" + appt.DEM_LASTNAME : headerName);\n\n  const appointmentTypeId = appt.Appointment_Type_ID || appt.APPOINTMENT_TYPE_ID;\n  const computedCareType = getCareType(appointmentTypeId);\n  const procedureOrderParam = computedCareType === \"DCARE\" ? \"schedule\" : \"reschedule\";\n  const effectiveDateRange = computeEffectiveDateRange(appt);\n\n  // Updated: Using the webhook patientId if available; otherwise DEM_EXTERNALID.\n  const rescheduleUrl = buildUrl(baseUrl, {\n    ...currentQueryParams,\n    fullName: patientName,\n    patientId: effectivePatientId,\n    caretype: computedCareType,\n    reschule: appointmentTypeId,\n    procedure_order: procedureOrderParam,\n    visit_type_id: appointmentTypeId,\n    dateRange: effectiveDateRange,\n    Appt_ID: appt.Appt_ID\n  });\n  \n  const localDate = new Date(appt.Appt_DateTime.replace('Z', ''));\n  const formattedDate = localDate.toLocaleDateString();\n  const formattedTime = localDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n\n  scheduledHtml += `\n      <tr>\n        <td>${appt.Appt_Resource_Descr}</td>\n        <td>${appt.Appt_Sched_Location_Descr}</td>\n        <td>${formattedDate}</td>\n        <td>${formattedTime}</td>\n        <td>${appt.Appt_Resource_Descr}</td>\n        <td>\n          <button class=\"btn reschedule-btn\" onclick=\"handleRescheduleClick(this, '${rescheduleUrl}')\">Reschedule</button>\n        </td>\n      </tr>\n  `;\n});\n\nscheduledHtml += `\n    </tbody>\n  </table>\n</div>\n`;\n\n// Combine both tables into the final HTML\nconst html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Appointment Information</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      overflow: auto;\n      font-family: Arial, sans-serif;\n    }\n    body {\n      background-image: url('https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png');\n      background-size: cover;\n      background-position: center;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .container {\n      max-width: 900px;\n      width: 100%;\n      background-color: #fff;\n      padding: 16px;\n      border-radius: 8px;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n      max-height: calc(100vh - 40px);\n      overflow-y: auto;\n    }\n    .patient-info {\n      margin-bottom: 16px;\n    }\n    .patient-info p {\n      margin: 4px 0;\n      font-size: 18px;\n      font-weight: bold;\n      color: #374151;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 16px;\n    }\n    .section-title {\n      margin-top: 30px;\n      text-align: left;\n      font-size: 20px;\n      color: #374151;\n      border-bottom: 2px solid #e5e7eb;\n      padding-bottom: 5px;\n    }\n    .scrollable-table {\n      max-height: calc(5 * 50px + 50px);\n      overflow-y: auto;\n      margin-bottom: 20px;\n      border: 1px solid #e5e7eb;\n      border-radius: 4px;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n    th, td {\n      padding: 12px;\n      text-align: left;\n    }\n    th {\n      background-color: #f9fafb;\n      font-weight: bold;\n    }\n    td {\n      color: #4b5563;\n      border-top: 1px solid #e5e7eb;\n    }\n    .btn {\n      padding: 10px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .schedule-btn {\n      background-color: #3b82f6;\n      color: white;\n    }\n    .schedule-btn:hover {\n      background-color: #2563eb;\n    }\n    .reschedule-btn {\n      background-color: #ef4444;\n      color: white;\n    }\n    .reschedule-btn:hover {\n      background-color: #dc2626;\n    }\n    .checkout-btn {\n      background-color: red;\n      color: white;\n      font-weight: bold;\n      width: 100%;\n      display: block;\n    }\n    .checkout-btn:hover {\n      background-color: darkred;\n    }\n    .loader {\n      border: 2px solid #f3f3f3;\n      border-top: 2px solid #3498db;\n      border-radius: 50%;\n      width: 12px;\n      height: 12px;\n      animation: spin 1s linear infinite;\n      display: inline-block;\n      margin-right: 5px;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"patient-info\">\n      <p>Name: ${headerName}</p>\n      <p>MRN: ${headerMRN}</p>\n    </div>\n    <h1>Appointment and Scheduling Information</h1>\n    ${unscheduledHtml}\n    ${scheduledHtml}\n  </div>\n  <script>\n    // Expose the current query parameters for client-side use\n    const currentQueryParams = ${JSON.stringify(currentQueryParams)};\n    \n    window.addEventListener(\"pageshow\", function(event) {\n      if (event.persisted) {\n        window.location.reload();\n      }\n    });\n    function handleScheduleClick(button, url) {\n      button.disabled = true;\n      button.innerHTML = '<span class=\"loader\"></span> Scheduling...';\n      window.location.href = url;\n    }\n    function handleRescheduleClick(button, url) {\n      button.disabled = true;\n      button.innerHTML = '<span class=\"loader\"></span> Rescheduling...';\n      window.location.href = url;\n    }\n    function handleCheckoutClick(button) {\n      button.disabled = true;\n      button.innerHTML = '<span class=\"loader\"></span> Redirecting...';\n      // Redirect to the specified URL while appending all current URL parameters\n      window.location.href = \"https://xl.epicpc.com/webhook/4ab15d3f-8a32-43cd-9223-9aa4cbddf07b\" + window.location.search;\n    }\n  </script>\n</body>\n</html>\n`;\n\n// Return the generated HTML for rendering in n8n\nreturn [{ json: { htmlContent: html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        0
      ],
      "id": "70580cb6-16ee-4030-b360-f8d9a7a695ef",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e9fe0d04-6cc0-43d5-a311-6fe127e78144",
              "name": "html",
              "value": "[   {     \"htmlContent\": \"\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n  <title>Appointment Information</title>\\n  <style>\\n    html, body {\\n      margin: 0;\\n      padding: 0;\\n      height: 100%;\\n      overflow: auto;\\n      font-family: Arial, sans-serif;\\n    }\\n    body {\\n      background-image: url('https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png');\\n      background-size: cover;\\n      background-position: center;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n    }\\n    .container {\\n      max-width: 900px;\\n      width: 100%;\\n      background-color: #fff;\\n      padding: 16px;\\n      border-radius: 8px;\\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\\n      max-height: calc(100vh - 40px);\\n      overflow-y: auto;\\n    }\\n    .patient-info {\\n      margin-bottom: 16px;\\n    }\\n    .patient-info p {\\n      margin: 4px 0;\\n      font-size: 18px;\\n      font-weight: bold;\\n      color: #374151;\\n    }\\n    h1 {\\n      text-align: center;\\n      margin-bottom: 16px;\\n    }\\n    .section-title {\\n      margin-top: 30px;\\n      text-align: left;\\n      font-size: 20px;\\n      color: #374151;\\n      border-bottom: 2px solid #e5e7eb;\\n      padding-bottom: 5px;\\n    }\\n    .scrollable-table {\\n      max-height: calc(5 * 50px + 50px);\\n      overflow-y: auto;\\n      margin-bottom: 20px;\\n      border: 1px solid #e5e7eb;\\n      border-radius: 4px;\\n    }\\n    table {\\n      width: 100%;\\n      border-collapse: collapse;\\n    }\\n    th, td {\\n      padding: 12px;\\n      text-align: left;\\n    }\\n    th {\\n      background-color: #f9fafb;\\n      font-weight: bold;\\n    }\\n    td {\\n      color: #4b5563;\\n      border-top: 1px solid #e5e7eb;\\n    }\\n    .btn {\\n      padding: 10px;\\n      border: none;\\n      border-radius: 4px;\\n      cursor: pointer;\\n    }\\n    .schedule-btn {\\n      background-color: #3b82f6;\\n      color: white;\\n    }\\n    .schedule-btn:hover {\\n      background-color: #2563eb;\\n    }\\n    .reschedule-btn {\\n      background-color: #ef4444;\\n      color: white;\\n    }\\n    .reschedule-btn:hover {\\n      background-color: #dc2626;\\n    }\\n    .checkout-btn {\\n      background-color: red;\\n      color: white;\\n      font-weight: bold;\\n      width: 100%;\\n      display: block;\\n    }\\n    .checkout-btn:hover {\\n      background-color: darkred;\\n    }\\n    .loader {\\n      border: 2px solid #f3f3f3;\\n      border-top: 2px solid #3498db;\\n      border-radius: 50%;\\n      width: 12px;\\n      height: 12px;\\n      animation: spin 1s linear infinite;\\n      display: inline-block;\\n      margin-right: 5px;\\n    }\\n    @keyframes spin {\\n      0% { transform: rotate(0deg); }\\n      100% { transform: rotate(360deg); }\\n    }\\n  </style>\\n</head>\\n<body>\\n  <div class=\\\"container\\\">\\n    <div class=\\\"patient-info\\\">\\n      <p>Name: TEDDY TEST</p>\\n      <p>MRN: 85927</p>\\n    </div>\\n    <h1>Appointment and Scheduling Information</h1>\\n    \\n<h2 class=\\\"section-title\\\">Unscheduled Orders</h2>\\n<div class=\\\"scrollable-table\\\">\\n  <table>\\n    <thead>\\n      <tr>\\n        <th>Procedure Ordered</th>\\n        <th>Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n\\n    </tbody>\\n  </table>\\n</div>\\n<!-- Global Full Width, Red, Bold Checkout Button under Unscheduled Orders -->\\n<div style=\\\"margin-top: 10px;\\\">\\n  <button class=\\\"btn checkout-btn\\\" onclick=\\\"handleCheckoutClick(this)\\\">Checkout</button>\\n</div>\\n\\n    \\n<h2 class=\\\"section-title\\\">Scheduled Appointments</h2>\\n<div class=\\\"scrollable-table\\\">\\n  <table>\\n    <thead>\\n      <tr>\\n        <th>Appointment</th>\\n        <th>Location</th>\\n        <th>Date</th>\\n        <th>Time</th>\\n        <th>Caregiver</th>\\n        <th>Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n\\n    </tbody>\\n  </table>\\n</div>\\n\\n  </div>\\n  <script>\\n    // Expose the current query parameters for client-side use\\n    const currentQueryParams = {\\\"fullName\\\":\\\"TEDDY TEST\\\",\\\"patientId\\\":\\\"85927\\\",\\\"reference\\\":\\\"IMREDEMEC_CODE\\\"};\\n    \\n    window.addEventListener(\\\"pageshow\\\", function(event) {\\n      if (event.persisted) {\\n        window.location.reload();\\n      }\\n    });\\n    function handleScheduleClick(button, url) {\\n      button.disabled = true;\\n      button.innerHTML = '<span class=\\\"loader\\\"></span> Scheduling...';\\n      window.location.href = url;\\n    }\\n    function handleRescheduleClick(button, url) {\\n      button.disabled = true;\\n      button.innerHTML = '<span class=\\\"loader\\\"></span> Rescheduling...';\\n      window.location.href = url;\\n    }\\n    function handleCheckoutClick(button) {\\n      button.disabled = true;\\n      button.innerHTML = '<span class=\\\"loader\\\"></span> Redirecting...';\\n      // Redirect to the specified URL while appending all current URL parameters\\n      window.location.href = \\\"https://xl.epicpc.com/webhook/4ab15d3f-8a32-43cd-9223-9aa4cbddf07b\\\" + window.location.search;\\n    }\\n  </script>\\n</body>\\n</html>\\n\"   } ]",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        400,
        200
      ],
      "id": "3bdc0893-51d4-4424-80b8-0750a2c00925",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "path": "a4de5580-6f18-4b98-9377-c148b8516839",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        120,
        440
      ],
      "id": "4454b967-79f0-43c3-ad50-4e5c4e3c518e",
      "name": "Webhook",
      "webhookId": "a4de5580-6f18-4b98-9377-c148b8516839"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n  <title>Appointment Information</title>\\n  <style>\\n    html, body {\\n      margin: 0;\\n      padding: 0;\\n      height: 100%;\\n      overflow: auto;\\n      font-family: Arial, sans-serif;\\n    }\\n    body {\\n      background-image: url('https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png');\\n      background-size: cover;\\n      background-position: center;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n    }\\n    .container {\\n      max-width: 900px;\\n      width: 100%;\\n      background-color: #fff;\\n      padding: 16px;\\n      border-radius: 8px;\\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\\n      max-height: calc(100vh - 40px);\\n      overflow-y: auto;\\n    }\\n    .patient-info {\\n      margin-bottom: 16px;\\n    }\\n    .patient-info p {\\n      margin: 4px 0;\\n      font-size: 18px;\\n      font-weight: bold;\\n      color: #374151;\\n    }\\n    h1 {\\n      text-align: center;\\n      margin-bottom: 16px;\\n    }\\n    .section-title {\\n      margin-top: 30px;\\n      text-align: left;\\n      font-size: 20px;\\n      color: #374151;\\n      border-bottom: 2px solid #e5e7eb;\\n      padding-bottom: 5px;\\n    }\\n    .scrollable-table {\\n      max-height: calc(5 * 50px + 50px);\\n      overflow-y: auto;\\n      margin-bottom: 20px;\\n      border: 1px solid #e5e7eb;\\n      border-radius: 4px;\\n    }\\n    table {\\n      width: 100%;\\n      border-collapse: collapse;\\n    }\\n    th, td {\\n      padding: 12px;\\n      text-align: left;\\n    }\\n    th {\\n      background-color: #f9fafb;\\n      font-weight: bold;\\n    }\\n    td {\\n      color: #4b5563;\\n      border-top: 1px solid #e5e7eb;\\n    }\\n    .btn {\\n      padding: 10px;\\n      border: none;\\n      border-radius: 4px;\\n      cursor: pointer;\\n    }\\n    .schedule-btn {\\n      background-color: #3b82f6;\\n      color: white;\\n    }\\n    .schedule-btn:hover {\\n      background-color: #2563eb;\\n    }\\n    .reschedule-btn {\\n      background-color: #ef4444;\\n      color: white;\\n    }\\n    .reschedule-btn:hover {\\n      background-color: #dc2626;\\n    }\\n    .checkout-btn {\\n      background-color: red;\\n      color: white;\\n      font-weight: bold;\\n      width: 100%;\\n      display: block;\\n    }\\n    .checkout-btn:hover {\\n      background-color: darkred;\\n    }\\n    .loader {\\n      border: 2px solid #f3f3f3;\\n      border-top: 2px solid #3498db;\\n      border-radius: 50%;\\n      width: 12px;\\n      height: 12px;\\n      animation: spin 1s linear infinite;\\n      display: inline-block;\\n      margin-right: 5px;\\n    }\\n    @keyframes spin {\\n      0% { transform: rotate(0deg); }\\n      100% { transform: rotate(360deg); }\\n    }\\n  </style>\\n</head>\\n<body>\\n  <div class=\\\"container\\\">\\n    <div class=\\\"patient-info\\\">\\n      <p>Name: TEDDY TEST</p>\\n      <p>MRN: 85927</p>\\n    </div>\\n    <h1>Appointment and Scheduling Information</h1>\\n    \\n<h2 class=\\\"section-title\\\">Unscheduled Orders</h2>\\n<div class=\\\"scrollable-table\\\">\\n  <table>\\n    <thead>\\n      <tr>\\n        <th>Procedure Ordered</th>\\n        <th>Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n\\n    </tbody>\\n  </table>\\n</div>\\n<!-- Global Full Width, Red, Bold Checkout Button under Unscheduled Orders -->\\n<div style=\\\"margin-top: 10px;\\\">\\n  <button class=\\\"btn checkout-btn\\\" onclick=\\\"handleCheckoutClick(this)\\\">Checkout</button>\\n</div>\\n\\n    \\n<h2 class=\\\"section-title\\\">Scheduled Appointments</h2>\\n<div class=\\\"scrollable-table\\\">\\n  <table>\\n    <thead>\\n      <tr>\\n        <th>Appointment</th>\\n        <th>Location</th>\\n        <th>Date</th>\\n        <th>Time</th>\\n        <th>Caregiver</th>\\n        <th>Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n\\n    </tbody>\\n  </table>\\n</div>\\n\\n  </div>\\n  <script>\\n    // Expose the current query parameters for client-side use\\n    const currentQueryParams = {\\\"fullName\\\":\\\"TEDDY TEST\\\",\\\"patientId\\\":\\\"85927\\\",\\\"reference\\\":\\\"IMREDEMEC_CODE\\\"};\\n    \\n    window.addEventListener(\\\"pageshow\\\", function(event) {\\n      if (event.persisted) {\\n        window.location.reload();\\n      }\\n    });\\n    function handleScheduleClick(button, url) {\\n      button.disabled = true;\\n      button.innerHTML = '<span class=\\\"loader\\\"></span> Scheduling...';\\n      window.location.href = url;\\n    }\\n    function handleRescheduleClick(button, url) {\\n      button.disabled = true;\\n      button.innerHTML = '<span class=\\\"loader\\\"></span> Rescheduling...';\\n      window.location.href = url;\\n    }\\n    function handleCheckoutClick(button) {\\n      button.disabled = true;\\n      button.innerHTML = '<span class=\\\"loader\\\"></span> Redirecting...';\\n      // Redirect to the specified URL while appending all current URL parameters\\n      window.location.href = \\\"https://xl.epicpc.com/webhook/4ab15d3f-8a32-43cd-9223-9aa4cbddf07b\\\" + window.location.search;\\n    }\\n  </script>\\n</body>\\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        340,
        440
      ],
      "id": "3536f72e-b9c3-4dba-925f-426f7a6d2649",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-06-04T14:18:27.106Z",
  "versionId": "94f67274-0196-4131-92f2-f560c3246e8b"
}