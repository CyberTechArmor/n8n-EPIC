{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Yellow Badge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-01T13:26:42.212Z",
  "id": "ifs4x1mCAeD2vTCg",
  "isArchived": false,
  "meta": null,
  "name": "PWA Testing",
  "nodes": [
    {
      "parameters": {
        "path": "test1",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -80,
        80
      ],
      "id": "ae3137e6-6567-48ee-9da7-6e5c27a9a4b9",
      "name": "Webhook",
      "webhookId": "f0372e3c-b510-44da-b882-8c94543051b1"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n  scroll-padding-bottom: 160px; /* added padding for scrolling */\n  scroll-behavior: smooth;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n  cursor: pointer; /* Make clickable */\n  position: relative;\n}\n\n/* Badge style for patient card that shows number of unique submitted devices */\n.patient-submission-badge {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  background: #dc3545;\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n  flex: 1 0 140px;\n}\n#cancel-capture-btn:hover {\n  background: #005fcc;\n}\n\n/* New container for capture modal buttons including Cancel and Not Completed side by side */\n#capture-buttons-row {\n  display: flex;\n  justify-content: center;\n  gap: 12px;\n  width: 100%;\n  max-width: 480px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n}\n\n/* Not Completed button in capture modal - styled as red cancel style */\n#not-completed-capture-btn {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  flex: 1 0 140px;\n}\n#not-completed-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Not Completed Modal Styles */\n\n#not-completed-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n\n#not-completed-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n#not-completed-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#not-completed-modal-header h2 {\n  font-size: 1.4rem;\n  color: #b00020;\n  font-weight: 700;\n  margin: 0;\n}\n\n#not-completed-modal-close-btn {\n  background: #b00020;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 24px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#not-completed-modal-close-btn:hover {\n  background: #7a000f;\n}\n\n#not-completed-options {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 12px;\n}\n\n#not-completed-options button[data-reason] {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n}\n#not-completed-options button[data-reason]:hover {\n  background: #7a000f;\n}\n\n#not-completed-back-btn {\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n  margin-top: 8px;\n}\n#not-completed-back-btn:hover {\n  background: #005fcc;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n  position: relative; /* for badge positioning */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n/* Red X badge for Not Completed device card */\n.device-not-completed {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #b00020;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(176,0,32,0.6);\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n\n/* Added focus style to badges for accessibility */\n.device-not-completed:focus,\n.device-checked:focus {\n  outline: 2px solid #ffb3b3;\n  outline-offset: 2px;\n}\n\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  scroll-margin-bottom: 160px; /* ensure sufficient margin for scrolling */\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n  z-index: 10000; /* lower than photo-submit-loader-overlay to show loader above */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n  touch-action: manipulation;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n  touch-action: manipulation;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px #80aaff;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay with spinner and timer for photo submit */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n  user-select:none;\n}\n\n/* Saved Submissions Panel */\n/* add scrollbar and fixed height with overflow for scroll */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n  overflow-y: auto; /* always show scroll if content overflow */\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n/* Modal for Fast Track Score */\n#fast-track-score-modal {\n  position: fixed;\n  inset: 0;\n  display: none;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#fast-track-score-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n}\n\n#fast-track-score-close {\n  position: absolute;\n  top: 8px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 20px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  transition: background 0.3s;\n  user-select:none;\n}\n#fast-track-score-close:hover {\n  background: #d72950;\n}\n\n/* New styles for disabled button with loading state */\nbutton[disabled] {\n  opacity: 0.6 !important;\n  cursor: not-allowed !important;\n  pointer-events: none !important;\n  user-select:none !important;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border and click action -->\n<h1 id=\"fast-track-header\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" aria-label=\"Show today's score of unique pictures submitted\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <button id=\"patient-name-btn\" class=\"patient-btn card\" type=\"button\" aria-label=\"Select patient\" style=\"position:relative; padding-right: 40px;\">\n      <span id=\"selected-patient-name-span\">None selected</span>\n      <span id=\"patient-submission-badge\" class=\"patient-submission-badge\" aria-label=\"Number of submitted images for patient\" style=\"display:none;\">0</span>\n    </button>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <div id=\"capture-buttons-row\">\n    <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Back</button>\n    <button id=\"not-completed-capture-btn\" aria-label=\"Mark device as Not Completed\" type=\"button\">Not Completed</button>\n  </div>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Not Completed Options Modal -->\n<div id=\"not-completed-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Not Completed Reason Selection\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"not-completed-modal-content\" tabindex=\"0\">\n    <div id=\"not-completed-modal-header\">\n      <h2>Select Reason for Not Completed</h2>\n      <button id=\"not-completed-modal-close-btn\" aria-label=\"Close Not Completed Reason modal\" title=\"Close\">Ã—</button>\n    </div>\n    <div id=\"not-completed-options\">\n      <button data-reason=\"NC_Patient_Declined\" type=\"button\">Patient Declined</button>\n      <button data-reason=\"NC_Patient_Left\" type=\"button\">Patient Left</button>\n      <button data-reason=\"NC_Supplies_Out\" type=\"button\">Supplies Out</button>\n      <button data-reason=\"NC_Equipment_Failure\" type=\"button\">Equipment Failure</button>\n      <button id=\"not-completed-back-btn\" type=\"button\">Back</button>\n    </div>\n  </div>\n</div>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Modal for Fast Track Today's Score -->\n<div id=\"fast-track-score-modal\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Today's Score\" tabindex=\"-1\">\n  <div id=\"fast-track-score-content\">\n    <button id=\"fast-track-score-close\" aria-label=\"Close Today's Score\">Ã—</button>\n    <div id=\"fast-track-score-text\">Loading...</div>\n  </div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- IndexedDB Photo Storage Module --- */\n\n  const DB_NAME = 'PhotoCaptureDB';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'photos';\n\n  let dbPromise = null;\n\n  function openDB() {\n    if (dbPromise) return dbPromise;\n    dbPromise = new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = () => {\n        reject(request.error || new Error('Failed to open IndexedDB'));\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n          store.createIndex('timestamp', 'timestamp');\n          store.createIndex('mrn', 'mrn');\n        }\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n    });\n    return dbPromise;\n  }\n\n  async function addPhotoRecord({ id, mrn, device, blob, timestamp }) {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const record = { id, mrn, device, blob, timestamp };\n      const putReq = store.put(record);\n      putReq.onsuccess = () => resolve(true);\n      putReq.onerror = () => reject(putReq.error || new Error('Failed to add photo record'));\n    });\n  }\n\n  async function getAllPhotoRecords() {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const allRecords = [];\n      const request = store.openCursor(null, 'prev'); // descending order of keys (id)\n      request.onsuccess = (e) => {\n        const cursor = e.target.result;\n        if (cursor) {\n          allRecords.push(cursor.value);\n          cursor.continue();\n        } else {\n          // We have all records sorted by key descending\n          // Sort by timestamp descending explicitly, if needed\n          allRecords.sort((a, b) => b.timestamp - a.timestamp);\n          resolve(allRecords);\n        }\n      };\n      request.onerror = () => reject(request.error || new Error('Failed to fetch photo records'));\n    });\n  }\n\n  async function getPhotoRecordById(id) {\n    if (!id) return null;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const req = store.get(id);\n      req.onsuccess = () => resolve(req.result || null);\n      req.onerror = () => reject(req.error || new Error('Failed to fetch photo record by id'));\n    });\n  }\n\n  async function deletePhotoRecord(id) {\n    if (!id) return;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const delReq = store.delete(id);\n      delReq.onsuccess = () => resolve(true);\n      delReq.onerror = () => reject(delReq.error || new Error('Failed to delete photo record'));\n    });\n  }\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientNameSpan = document.getElementById('selected-patient-name-span');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const patientSubmissionBadge = document.getElementById('patient-submission-badge');\n  const patientNameBtn = document.getElementById('patient-name-btn');\n\n  const fastTrackHeader = document.getElementById('fast-track-header');\n  const fastTrackScoreModal = document.getElementById('fast-track-score-modal');\n  const fastTrackScoreCloseBtn = document.getElementById('fast-track-score-close');\n  const fastTrackScoreText = document.getElementById('fast-track-score-text');\n\n  // For submission status and not completed status cache\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses',\n  };\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  /* --- Not Completed Status Cache --- */\n  const notCompletedModalOverlay = document.getElementById('not-completed-modal-overlay');\n  const notCompletedModalContent = document.getElementById('not-completed-modal-content');\n  const notCompletedModalCloseBtn = document.getElementById('not-completed-modal-close-btn');\n  const notCompletedOptionsContainer = document.getElementById('not-completed-options');\n  const notCompletedBackBtn = document.getElementById('not-completed-back-btn');\n\n  let notCompletedStatusCache = {};\n  let submissionStatusCache = {};\n\n  /* --- Helper Functions for Loader --- */\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  /* --- Fetch appointments and process locations/patients --- */\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoader();\n    }\n    try {\n      let payload = {};\n      if (locationValue !== null && locationValue !== undefined && activeModal === 'patient') {\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if (!appointments.length) {\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if (activeModal === 'location') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if (activeModal === 'patient') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoader();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if (cached) {\n        const cachedLocations = JSON.parse(cached);\n        if (Array.isArray(cachedLocations) && cachedLocations.length) {\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if (cached) {\n        const cachedPatients = JSON.parse(cached);\n        if (Array.isArray(cachedPatients) && cachedPatients.length) {\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if (appt.Appt_Sched_Location_Descr) {\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr,\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a, b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if (!selectedLocation) {\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if (appt.MRN) {\n        if (!patientMap.has(appt.MRN)) {\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if (p.Appt_DateTime) {\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if (storedPatientJSON) {\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch { }\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if (selectedLocation && selectedPatient) {\n      selectedPatientNameSpan.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n      updatePatientSubmissionBadge(selectedPatient.MRN);\n    } else if (selectedLocation && !selectedPatient) {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    } else {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    }\n\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  function updateTimestampLastUpdate() {\n    if (selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    lastListUpdateSpan.textContent = '';\n\n    if (type === 'location') {\n      modalTitle.textContent = 'Select Location';\n      updateListBtn.style.display = 'inline-block';\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if (type === 'location') {\n      const hasCache = loadLocationsFromCache();\n\n      if (hasCache) {\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if (hasPatientsCache) {\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if (activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if (activeModal === 'location') {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if (activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch { }\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch (e) {\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate() {\n    if (activeModal === 'patient') {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if (type === 'location') {\n      items.sort((a, b) => a.label.localeCompare(b.label));\n    } else if (type === 'patient') {\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if (items.length === 0) {\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if (type === 'location') {\n        btn.textContent = item.label;\n        if (item.value === selectedLocation) {\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n\n        // Add submission badge count including both successful and Not Completed counts\n        const uniqueCount = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(item.MRN);\n        if (uniqueCount > 0) {\n          const badge = document.createElement('span');\n          badge.className = 'patient-submission-badge';\n          badge.textContent = uniqueCount;\n          btn.style.position = 'relative';\n          btn.appendChild(badge);\n        }\n\n        if (selectedPatient && item.MRN === selectedPatient.MRN) {\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', async () => {\n        if (type === 'location') {\n          if (item.value !== selectedLocation) {\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            await awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if (!selectedPatient || selectedPatient.MRN !== item.MRN) {\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  async function awaitPatientListUpdateForNewLocation() {\n    try {\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if (!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && modalOverlay.style.display === 'flex') {\n      closeModal();\n    }\n\n    if (e.key === 'Escape') {\n      if (modalDetailOverlay.style.display === 'flex') {\n        modalDetailOverlay.style.display = 'none';\n      }\n      if (photoModalOverlay.style.display === 'flex') {\n        photoModalOverlay.style.display = 'none';\n      }\n      if (photoSubmitLoaderOverlay.style.display === 'flex') {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n      if (fastTrackScoreModal.style.display === 'flex') {\n        closeFastTrackScoreModal();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if (!selectedLocation) {\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n  const notCompletedCaptureBtn = document.getElementById('not-completed-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  /* --- Not Completed Status Cache Load/Save --- */\n  function loadNotCompletedStatusCache() {\n    try {\n      const cached = localStorage.getItem('notCompletedStatuses');\n      if (cached) {\n        notCompletedStatusCache = JSON.parse(cached) || {};\n      } else {\n        notCompletedStatusCache = {};\n      }\n    } catch (e) {\n      notCompletedStatusCache = {};\n    }\n  }\n  function saveNotCompletedStatusCache() {\n    try {\n      localStorage.setItem('notCompletedStatuses', JSON.stringify(notCompletedStatusCache));\n    } catch (e) { }\n  }\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if (cached) {\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch (e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch (e) {}\n  }\n\n  function clearChildren(el) {\n    while (el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  }\n\n  async function initializePatientDevices(mrn) {\n    if (!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ mrn })\n      });\n      if (!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if (!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if (currentDevices.length === 0) {\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch (e) {\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n\n    devices.sort((a, b) => {\n      if (!a.POCEquipment) return 1;\n      if (!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Show \"Not Completed\" X badge if marked so\n      if (notCompletedStatusCache[currentMRN] && notCompletedStatusCache[currentMRN][device.POCEquipment]) {\n        const xBadge = document.createElement('div');\n        xBadge.className = 'device-not-completed';\n        xBadge.title = 'Marked as Not Completed';\n        xBadge.textContent = 'âœ•';\n        card.appendChild(xBadge);\n      }\n\n      // Show \"checked\" badge if successfully submitted\n      if (submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]) {\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled when opening camera\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          const appElement = document.getElementById('app');\n          if (appElement) {\n            appElement.scrollTo({ top: appElement.scrollHeight - appElement.clientHeight + 20, behavior: 'smooth' });\n          }\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({ behavior: 'smooth', block: 'end' });\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if (cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if (videoTrack && videoTrack.getCapabilities) {\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if (capabilities.imageStabilization !== undefined) {\n          constraintsApply.imageStabilization = true;\n        }\n        if (capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')) {\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if (Object.keys(constraintsApply).length) {\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch (e) { }\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch (e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n\n    const appElement = document.getElementById('app');\n    if (appElement) {\n      appElement.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  });\n\n  // Fix capture button keyboard accessibility and drawing in requestAnimationFrame for reliability:\n  captureBtn.addEventListener('click', takePhoto);\n  captureBtn.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      takePhoto();\n    }\n  });\n\n  function takePhoto() {\n    if (!cameraStream) return;\n\n    requestAnimationFrame(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled on photo display\n      }, 'image/jpeg', 0.95);\n    });\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  // Util function for setting submit button loading state (disabled and text)\n  function setButtonLoadingState(button, isLoading) {\n    if (isLoading) {\n      button.disabled = true;\n      button.textContent = 'Submitting...'; // Change button label during loading\n      button.style.opacity = '0.6';        // Make it appear visually disabled\n      button.style.cursor = 'not-allowed';\n    } else {\n      button.disabled = false;\n      button.textContent = 'Submit';       // Restore original label\n      button.style.opacity = '';\n      button.style.cursor = 'pointer';\n    }\n  }\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions for photo submission loader and timer\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if (submissionCountdown < 0) {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        if(onTimeout && typeof onTimeout === 'function'){\n          onTimeout();\n        }\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  function stopSubmitTimeout() {\n    if (submissionTimeoutId !== null) {\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    if (!navigator.onLine) {\n      await markSubmissionFailedDueOffline();\n      return;\n    }\n\n    // Show overlay loader & disable submit button when Submit pressed\n    setButtonLoadingState(photoOkBtn, true);\n    uploadStatus.textContent = '';\n    showPhotoSubmitLoader();\n\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n      setButtonLoadingState(photoOkBtn, false);\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      photoModalOverlay.style.display = 'none';\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n    };\n\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      // Save photo blob directly in IndexedDB instead of base64 localStorage\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      const timestamp = Date.now();\n\n      const submissionRecord = {\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: 'Pending',\n        timestamp\n      };\n\n      // Save photo blob record in IndexedDB\n      await addPhotoRecord({ id, mrn: currentMRN, device: submissionRecord.device, blob: photoBlob, timestamp });\n\n      // Also save the submission status record in localStorage (without photoDataUrl)\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(id, 'Success');\n\n      if (!submissionStatusCache[currentMRN]) {\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if (photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n\n      setButtonLoadingState(photoOkBtn, false);\n\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n\n        if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n      }, 1000);\n    } catch (e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if (e.name === 'AbortError') {\n        setButtonLoadingState(photoOkBtn, false);\n        return;\n      }\n      if (!navigator.onLine) {\n        await markSubmissionFailedDueOffline();\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n      }\n      setButtonLoadingState(photoOkBtn, false);\n    }\n  }\n\n  async function markSubmissionFailedDueOffline() {\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n\n    const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    const timestamp = Date.now();\n\n    // Save photo blob record in IndexedDB\n    await addPhotoRecord({ id, mrn: currentMRN, device: JSON.stringify(selectedDevice), blob: photoBlob, timestamp });\n\n    const submissionRecord = {\n      id,\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      status: 'Failed',\n      timestamp\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n\n    setButtonLoadingState(photoOkBtn, false);\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  async function updateSubmissionStatusTimed(newStatus) {\n    const submissions = loadSavedSubmissions();\n    let found = false;\n    for (let i = submissions.length - 1; i >= 0; i--) {\n      const s = submissions[i];\n      if (s.status === 'Pending' && s.mrn === currentMRN) {\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if (!found && newStatus === 'Failed') {\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if (!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch (e) {\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed' || s.status === 'Pending');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if (newStatus === 'Failed') {\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if (dateFilterInput.value) {\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if (filtered.length === 0) {\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if (sub.status === 'Failed' || sub.status === 'Pending') {\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if (deviceObj.Description) {\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch { }\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if (typeof submission.photoDataUrl === 'string' && submission.photoDataUrl) {\n      // Legacy base64 is still shown for old records\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    } else {\n      // For new records, fetch blob from IndexedDB and show\n      getPhotoRecordById(submission.id).then(record => {\n        if (record && record.blob) {\n          const img = document.createElement('img');\n          const url = URL.createObjectURL(record.blob);\n          img.src = url;\n          img.alt = 'Captured photo of device';\n          img.style.maxWidth = '100%';\n          img.style.borderRadius = '14px';\n          img.style.marginTop = '12px';\n\n          modalDetailContent.appendChild(img);\n\n          // Revoke Object URL when modal closes\n          const onClose = () => {\n            URL.revokeObjectURL(url);\n            modalDetailOverlay.removeEventListener('click', onClose);\n            modalDetailCloseBtn.removeEventListener('click', onClose);\n          };\n          modalDetailOverlay.addEventListener('click', onClose);\n          modalDetailCloseBtn.addEventListener('click', onClose);\n        }\n      }).catch(() => { /* silently ignore */ });\n    }\n\n    if (submission.status === 'Failed' || submission.status === 'Pending') {\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if (!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch (e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if (submission.status !== 'Failed' && submission.status !== 'Pending') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n\n      const record = await getPhotoRecordById(submission.id);\n      if (!record || !record.blob) throw new Error('No photo data to upload');\n\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', record.blob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      await removeSubmissionRecord(submission.id);\n      await deletePhotoRecord(submission.id);\n\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions.splice(idx, 1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return \\`\\${pad(dt.getMonth() + 1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return \\`\\${pad(dt.getMonth() + 1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if (visible) {\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if (sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if (hasFailedToday) {\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  // New function: count both successful and Not Completed devices for patient\n  function getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn) {\n    if (!mrn) return 0;\n    let countMap = {};\n    if (submissionStatusCache[mrn]) {\n      Object.keys(submissionStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    if (notCompletedStatusCache[mrn]) {\n      Object.keys(notCompletedStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    return Object.keys(countMap).length;\n  }\n\n  function updatePatientSubmissionBadge(mrn) {\n    const count = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn);\n    if (count > 0) {\n      patientSubmissionBadge.style.display = 'inline-block';\n      patientSubmissionBadge.textContent = count;\n      patientSubmissionBadge.setAttribute('aria-label', \\`\\${count} unique devices submitted (including Not Completed) for this patient\\`);\n    } else {\n      patientSubmissionBadge.style.display = 'none';\n      patientSubmissionBadge.textContent = '';\n    }\n  }\n\n  async function fetchAndDisplayTodaysScore() {\n    fastTrackScoreText.textContent = 'Loading...';\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/49f9681f-32b1-4ac6-ad88-f0d35cc86176', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n      if (!res.ok) throw new Error('Network response was not OK: ' + res.status);\n      const data = await res.text();\n      fastTrackScoreText.innerHTML = data;\n    } catch (e) {\n      fastTrackScoreText.textContent = 'Failed to load score: ' + e.message;\n    }\n  }\n\n  function openFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'flex';\n    fastTrackScoreModal.focus();\n    fetchAndDisplayTodaysScore();\n  }\n\n  function closeFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'none';\n  }\n\n  fastTrackHeader.addEventListener('click', () => {\n    openFastTrackScoreModal();\n  });\n  fastTrackHeader.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      openFastTrackScoreModal();\n    }\n  });\n  fastTrackScoreCloseBtn.addEventListener('click', () => {\n    closeFastTrackScoreModal();\n  });\n\n  notCompletedCaptureBtn.addEventListener('click', () => {\n    if (!selectedDevice) {\n      alert('Please select a device first by clicking on its card.');\n      return;\n    }\n    openNotCompletedModal();\n  });\n\n  function openNotCompletedModal() {\n    // Important: Show devices section underneath as user requested (do NOT hide it)\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false; // Show devices\n\n    notCompletedModalOverlay.style.display = 'flex';\n    notCompletedModalContent.focus();\n  }\n\n  function closeNotCompletedModal() {\n    notCompletedModalOverlay.style.display = 'none';\n    // Back button from Not Completed modal goes back to devices list,\n    // NOT to camera feed as requested\n    devicesSection.hidden = false;\n    cameraSection.classList.add('hidden');\n    devicesSection.focus();\n  }\n\n  notCompletedModalCloseBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedBackBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedOptionsContainer.querySelectorAll('button[data-reason]').forEach(btn => {\n    btn.addEventListener('click', async () => {\n      const reason = btn.getAttribute('data-reason');\n      if (!selectedDevice || !currentMRN) {\n        alert('No device or patient selected.');\n        closeNotCompletedModal();\n        return;\n      }\n      await submitNotCompletedReason(reason, btn.textContent);\n      closeNotCompletedModal();\n    });\n  });\n\n  async function submitNotCompletedReason(reasonCode, reasonText) {\n    try {\n      showLoader();\n      const payload = {\n        mrn: currentMRN,\n        device: selectedDevice,\n        notCompletedReason: reasonCode\n      };\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55';\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      loadNotCompletedStatusCache();\n      if (!notCompletedStatusCache[currentMRN]) {\n        notCompletedStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        notCompletedStatusCache[currentMRN][deviceName] = reasonCode;\n        saveNotCompletedStatusCache();\n      }\n\n      loadSubmissionStatusCache();\n      // We do NOT delete success submission for this device when marking Not Completed,\n      // to comply with requirement to count Not Completed also as counts towards patient badge.\n      // So do not delete from submissionStatusCache here\n\n      renderDeviceCards(currentDevices);\n\n      alert('Not Completed reason \"' + reasonText + '\" submitted successfully.');\n\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      if (e.name === 'AbortError' || e.message.includes('NetworkError') || !navigator.onLine) {\n        alert('No response from server, saved as Failed Sends.');\n        const submissionRecord = {\n          id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n          mrn: currentMRN,\n          device: JSON.stringify(selectedDevice),\n          status: 'Failed',\n          notCompletedReason: reasonCode,\n          timestamp: Date.now()\n        };\n        addSubmissionRecord(submissionRecord);\n        renderSavedSubmissions();\n        updateShowSubmissionsButton();\n        closeNotCompletedModal();\n      } else {\n        alert('Submit failed: ' + e.message);\n      }\n    } finally {\n      hideLoader();\n    }\n  }\n\n  /* --- Initialization & Misc --- */\n\n  initialLoad();\n\n  async function initialLoad() {\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if (hasCachedLocations) {\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if (selectedLocation) {\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if (hasCachedPatients) {\n          patients = patients || [];\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch (e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if (selectedPatient && selectedPatient.MRN) {\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        180,
        20
      ],
      "id": "baedb56d-72c0-440d-9ba1-4e6b5ef786ba",
      "name": "Code"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        400,
        20
      ],
      "id": "7626181e-f624-4a32-92a9-d984c6b77959",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #003366;\n  margin-bottom: 12px;\n  text-align: center;\n}\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n#selected-info {\n  background: #e7f0fa;\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 10px #aad4ff88;\n  color: #004bb5;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  font-weight: 600;\n  margin-bottom: 24px;\n}\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n  flex-wrap: wrap;\n}\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #003366;\n  user-select:none;\n}\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Common button styles */\n.btn-primary, .btn-danger, .btn-info {\n  padding: 10px 0;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n  transition: background 0.3s, transform 0.15s;\n  user-select:none;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  height: 40px;\n}\n\n/* Specific button colors */\n.btn-danger {\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n.btn-info {\n  background: linear-gradient(135deg, #17a2b8, #117a8b);\n  color: white;\n  box-shadow: 0 4px 10px rgba(23,162,184, 0.5);\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #117a8b, #0e5f66);\n  transform: translateY(-2px);\n}\n.btn-primary {\n  background: linear-gradient(135deg, #007bff, #0056b3);\n  color: white;\n  box-shadow: 0 4px 10px rgba(0,123,255, 0.5);\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #0056b3, #003d80);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 16px;\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 100px;\n  height: 100px;\n  object-fit: contain;\n  margin-bottom: 12px;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-name {\n  font-weight: 700;\n  font-size: 1.15rem;\n  margin-bottom: 6px;\n  color: #004bb5;\n}\n.device-desc {\n  font-size: 0.9rem;\n  color: #555;\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  /* Changed max-width to 100% for full feed width on smaller devices */\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  /* Apply CSS stabilization via 'will-change' and 'transform-style' */\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px; /* slightly smaller */\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n}\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  /* Wrapper to enable overflow and fix header */\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<h1>Patient Device Capture</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select</h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',  // caching locations list\n    cachedPatients: 'cachedPatients',    // caching patients list\n    submissionStatuses: 'submissionStatuses' // Cache for device submission success status by deviceId and patient MRN\n  };\n\n  // Device submission status cache:\n  // format: { [patientMRN]: { [deviceId]: true/false } }\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  // New helper to show loader overlay in modal (change location/patient)\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  // Fetch appointments from webhook\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n\n      // Cache locations on fetching locations (only when activeModal === 'location')\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n      }\n\n      // Cache patients on fetching patients (only when activeModal === 'patient')\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  // Load locations from cached storage instead of webhook\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  // Load patients from cached storage instead of webhook\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  // Process appointment data to make unique sorted locations list\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Sort patients by descending appointment date/time\n    patients.sort((a, b) => {\n      const dateA = new Date(a.Appt_DateTime).getTime() || 0;\n      const dateB = new Date(b.Appt_DateTime).getTime() || 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalTitle.textContent = type === 'location' ? 'Select Location' : 'Select Patient';\n    modalSearch.value = '';\n\n    // Show or hide Update List button based on modal type\n    if(type === 'location'){\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      updateListBtn.style.display = 'inline-block'; // show Update List for patients too\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      // For location modal: use cached locations if present\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        // If no cache, fetch from webhook\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      // patient modal - use cached patients if available, else fetch and cache\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  // \"Update List\" button: fetch fresh list and update cache\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        // Clear cached patients before fetching fresh for patient modal\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n    }\n  });\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n  }\n\n  function renderModalButtons(items, type) {\n    // Sort items alphabetically by label for location or by patient appointment time desc for patient\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = new Date(a.Appt_DateTime).getTime() || 0;\n        const dateB = new Date(b.Appt_DateTime).getTime() || 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTime) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n            processPatients();\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            hidePatientInfoAndDevices();\n          }\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n        }\n        closeModal();\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  // Keyboard: Close modal on Escape\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  // Cache for successful device submissions by patient and device name\n  let submissionStatusCache = {};\n\n  // Load cache from localStorage\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  // Save cache to localStorage\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    // Sort devices by POCEquipment alphabetically\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n      const nameEl = document.createElement('div');\n      nameEl.className = 'device-name';\n      nameEl.textContent = device.POCEquipment;\n      card.appendChild(nameEl);\n      const descEl = document.createElement('div');\n      descEl.className = 'device-desc';\n      descEl.textContent = device.Description || '';\n      card.appendChild(descEl);\n\n      // Add checkmark if device was successfully submitted for this patient\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera();\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      // Update submissionStatusCache for this patient and device\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      // Save only Failed submissions\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5; // for retry button column removed, so safe to give 5\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    // Hide retry button when no submission selected\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    // Show Retry button only if submission status is Failed\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  // Retry upload for a failed submission\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      // On success remove record\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  // Helpers\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  // Format date/time\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  // Show submissions panel controls\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  // Date picker range update to allow any date selection\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  // Load saved submissions from localStorage\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      // Save only Failed submissions\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  // Initialize on load\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n  // Update Show Submissions button with star if there are any failed submissions today\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        200
      ],
      "id": "21a3dd55-cc76-4a58-984a-10173993239b",
      "name": "Code6"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n  /* Reset and base */\n  * {\n    box-sizing: border-box;\n    margin: 0; padding: 0;\n  }\n  html, body {\n    height: 100%;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n      Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    background: #f7f9fc;\n    color: #1a1a1a;\n  }\n  #app {\n    max-width: 480px;\n    margin: auto;\n    padding: 16px;\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n  }\n  header {\n    margin-bottom: 16px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n  /* Title: Fast Track with bold and black rounded border */\n  h1 {\n    font-weight: 700;\n    letter-spacing: 0.08em;\n    font-size: 1.5rem;\n    color: #000000;\n    margin-bottom: 12px;\n    text-align: center;\n    border: 3px solid black;\n    border-radius: 14px;\n    padding: 10px 15px;\n    background: white;\n    user-select: none;\n  }\n\n  /* Location/Patient/MRN Info Card with greater contrast */\n  #selected-info {\n    background: #002b59cc; /* Dark Blue semi-transparent */\n    padding: 16px 20px;\n    border-radius: 14px;\n    box-shadow: inset 0 0 15px #001a3bcc;\n    color: #e6f0ff;\n    user-select:none;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    font-weight: 700;\n    font-size: 1.05rem;\n    margin-bottom: 24px;\n  }\n  #selected-info > div {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 12px;\n    flex-wrap: wrap;\n  }\n  #selected-info strong.label {\n    font-weight: 700;\n    font-size: 1rem;\n    color: #aaccee;\n    user-select:none;\n    min-width: 70px;\n  }\n  #selected-info .value {\n    font-size: 1.2rem;\n    user-select:none;\n    min-width: 140px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    color: #d0e6ff;\n  }\n\n  /* Buttons row container */\n  #btns-row {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 12px;\n    margin-top: 8px;\n    margin-bottom: 24px;\n  }\n\n  /* Basic button styling */\n  .btn-primary, .btn-danger, .btn-info {\n    padding: 10px 0;\n    font-size: 1rem;\n    border-radius: 12px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n    transition: background 0.3s, transform 0.15s;\n    user-select:none;\n    border: none;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    height: 42px;\n  }\n\n  /* Failed Sends button - RED */\n  .btn-danger {\n    background: linear-gradient(135deg, #dc3545, #a71d2a);\n    color: white;\n    box-shadow: 0 4px 14px rgba(220,53,69, 0.7);\n  }\n  .btn-danger:hover {\n    background: linear-gradient(135deg, #a71d2a, #7a131d);\n    transform: translateY(-2px);\n  }\n\n  /* Locations button - YELLOW with black text for contrast */\n  .btn-primary {\n    background: linear-gradient(135deg, #f9d342, #ccac00);\n    color: #222;\n    box-shadow: 0 4px 14px rgba(249,211,66, 0.8);\n  }\n  .btn-primary:hover {\n    background: linear-gradient(135deg, #ccac00, #a48400);\n    transform: translateY(-2px);\n  }\n\n  /* Patients button - GREEN */\n  .btn-info {\n    background: linear-gradient(135deg, #28a745, #1e7e34);\n    color: white;\n    box-shadow: 0 4px 14px rgba(40,167,69, 0.7);\n  }\n  .btn-info:hover {\n    background: linear-gradient(135deg, #1e7e34, #155d27);\n    transform: translateY(-2px);\n  }\n\n  /* Star indicator for failed submissions today */\n  .btn-danger.star::after {\n    content: \"â˜…\";\n    color: yellow;\n    font-size: 1.4rem;\n    position: absolute;\n    top: -6px;\n    right: -6px;\n    user-select: none;\n    pointer-events: none;\n    text-shadow: 0 0 3px black;\n  }\n\n  /* Modal Overlay */\n  #modal-overlay {\n    position: fixed;\n    inset: 0;\n    background: rgba(0,0,0,0.5);\n    backdrop-filter: blur(3px);\n    display: none;\n    align-items: center;\n    justify-content: center;\n    z-index: 9999;\n    padding: 12px;\n    box-sizing: border-box;\n  }\n  /* Modal Content with full height to show more cards */\n  #modal-content {\n    background: white;\n    border-radius: 14px;\n    max-width: 460px;\n    width: 100%;\n    max-height: calc(100vh - 64px);\n    display: flex;\n    flex-direction: column;\n    padding: 20px 24px;\n    box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n    outline: none;\n    position: relative;\n    z-index: 10;\n    overflow: hidden;\n  }\n  #modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 16px;\n  }\n  #modal-header h2 {\n    font-size: 1.4rem;\n    color: #003366;\n    font-weight: 700;\n  }\n  #modal-close-btn {\n    background: #ff385c;\n    border: none;\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    color: white;\n    font-size: 26px;\n    line-height: 40px;\n    text-align: center;\n    cursor: pointer;\n    box-shadow: 0 2px 10px rgba(255,56,92,0.7);\n    transition: background 0.3s;\n    user-select:none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: 700;\n    font-family: Arial, sans-serif;\n    padding-bottom: 2px;\n  }\n  #modal-close-btn:hover {\n    background: #d72950;\n  }\n\n  input[type=search] {\n    padding: 12px 14px;\n    font-size: 1rem;\n    border-radius: 12px;\n    border: 1.5px solid #ccc;\n    transition: border-color 0.3s;\n    width: 100%;\n    box-sizing: border-box;\n    margin-bottom: 14px;\n  }\n  #modal-search {\n    flex-shrink: 0;\n  }\n  input[type=search]:focus {\n    border-color: #0077ff;\n    outline: none;\n  }\n\n  /* Modal List Buttons Container */\n  .buttons-container {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 12px;\n    flex-grow: 1;\n    overflow-y: auto;\n    padding-right: 6px;\n    user-select:none;\n    -webkit-overflow-scrolling: touch;\n  }\n  button.location-btn, button.patient-btn {\n    text-align: left;\n    padding: 12px 16px;\n    font-weight: 600;\n    font-size: 1rem;\n    border-radius: 12px;\n    box-shadow: 0 4px 10px rgba(0, 119, 255, 0.35);\n    white-space: normal;\n    word-wrap: break-word;\n    user-select:none;\n    border: 2px solid transparent;\n    transition: background 0.25s ease, color 0.25s ease;\n    width: 100%;\n    display: block;\n    cursor: pointer;\n  }\n  button.location-btn.selected, button.patient-btn.selected {\n    background: rgba(144, 238, 144, 0.3);\n    color: #004bb5;\n    border-color: #90ee90;\n  }\n  button.location-btn:hover:not(.selected), button.patient-btn:hover:not(.selected) {\n    background: #005fcc;\n    transform: translateY(-2px);\n    box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n    color: white;\n  }\n  button.patient-btn.card {\n    display: flex;\n    flex-direction: column;\n    text-align: left;\n    padding: 14px 18px;\n    line-height: 1.3;\n    width: 100%;\n  }\n  button.patient-btn.card strong {\n    font-size: 1.15rem;\n    margin-bottom: 8px;\n    color: #004bb5;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  button.patient-btn.card small {\n    font-size: 0.875rem;\n    color: #444;\n    font-weight: 600;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  /* Update List button on modals */\n  #update-list-btn {\n    margin-bottom: 14px;\n    background: linear-gradient(135deg, #28a745, #1e7e34);\n    color: white;\n    border: none;\n    border-radius: 12px;\n    padding: 12px 18px;\n    cursor: pointer;\n    font-size: 1rem;\n    box-shadow: 0 4px 12px rgba(40,167,69, 0.6);\n    user-select:none;\n    transition: background 0.3s;\n    justify-self: start;\n    width: fit-content;\n  }\n  #update-list-btn:hover:not(:disabled){\n    background: linear-gradient(135deg, #1e7e34, #155d27);\n  }\n  #update-list-btn:disabled {\n    background: #999999cc;\n    cursor: not-allowed;\n    box-shadow: none;\n  }\n\n  /* Loader overlay */\n  #loader-overlay {\n    position: fixed;\n    inset: 0;\n    background: rgba(255,255,255,0.85);\n    backdrop-filter: blur(2px);\n    display: none;\n    align-items: center;\n    justify-content: center;\n    z-index: 120000;\n  }\n  .spinner {\n    border: 5px solid #ccc;\n    border-top: 5px solid #004bb5;\n    border-radius: 50%;\n    width: 48px;\n    height: 48px;\n    animation: spin 1s linear infinite;\n    user-select:none;\n  }\n  @keyframes spin {\n    to { transform: rotate(360deg); }\n  }\n\n  /* Main content styles */\n  label {\n    font-weight: 600;\n    display: block;\n    margin-bottom: 8px;\n    color: #004bb5;\n  }\n\n  /* Device cards container */\n  .cards-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 14px;\n    margin-top: 8px;\n    margin-bottom: 24px;\n  }\n  @media (max-width:700px) {\n    .cards-container {\n      grid-template-columns: repeat(2, 1fr);\n    }\n  }\n  @media (max-width:400px) {\n    .cards-container {\n      grid-template-columns: 1fr;\n    }\n  }\n\n  /* Device cards */\n  .card {\n    background: white;\n    border-radius: 14px;\n    box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n    padding: 12px;\n    cursor: pointer;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    user-select: none;\n    border: 2px solid transparent;\n    position: relative;\n    height: 160px;\n    box-sizing: border-box;\n  }\n  .card:hover, .card:focus {\n    box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n    border-color: #0077ff;\n    outline: none;\n    transform: scale(1.05);\n  }\n  .card img {\n    width: 100px;\n    height: 100px;\n    object-fit: contain;\n    margin-bottom: 8px;\n    filter: grayscale(25%);\n    transition: filter 0.3s;\n    border-radius: 12px;\n  }\n  .card:hover img, .card:focus img {\n    filter: none;\n  }\n  .device-name {\n    font-weight: 700;\n    font-size: 1.15rem;\n    margin-bottom: 4px;\n    color: #004bb5;\n  }\n  .device-desc {\n    font-size: 0.9rem;\n    color: #555;\n  }\n  .device-checked {\n    position: absolute;\n    top: 8px;\n    right: 8px;\n    width: 24px;\n    height: 24px;\n    background-color: rgba(40, 167, 69, 0.85);\n    color: white;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 16px;\n    font-weight: 700;\n    user-select: none;\n  }\n\n  /* Camera Section */\n  #camera-section {\n    margin-top: auto;\n    margin-bottom: 24px;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 12px;\n  }\n  #camera-wrapper {\n    position: relative;\n    width: 100%;\n    max-width: 480px;\n    border-radius: 16px;\n    overflow: hidden;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n    background: black;\n  }\n  #video {\n    width: 100%;\n    height: auto;\n    max-height: 720px;\n    object-fit: contain;\n    display: block;\n    will-change: transform;\n    transform-style: preserve-3d;\n  }\n  #capture-btn {\n    position: absolute;\n    bottom: 12px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 56px;\n    height: 56px;\n    border-radius: 50%;\n    border: 4px solid white;\n    background: rgba(0, 119, 255, 0.85);\n    box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n    font-size: 0;\n    cursor: pointer;\n    transition: background 0.3s, box-shadow 0.3s;\n    user-select: none;\n    z-index: 10;\n  }\n  #capture-btn:hover:not(:disabled) {\n    background: rgba(0, 119, 255, 1);\n    box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n  }\n  #capture-btn:focus {\n    outline: 2px solid #004bb5;\n    outline-offset: 2px;\n  }\n\n  /* Cancel Capture Button - Red styled */\n  #cancel-capture-btn {\n    margin-top: 12px;\n    align-self: center;\n    width: 140px;\n    background: #ff4c4c;\n    border: none;\n    border-radius: 12px;\n    color: white;\n    font-weight: 700;\n    cursor: pointer;\n    padding: 12px 0;\n    box-shadow: 0 2px 8px rgba(255,76,76,0.8);\n    transition: background 0.3s;\n    user-select:none;\n  }\n  #cancel-capture-btn:hover:not(:disabled) {\n    background: #c43333;\n  }\n\n  /* Hidden/canvas/img */\n  #canvas {\n    display: none;\n  }\n  #captured-photo {\n    display: none;\n  }\n  .hidden {\n    display: none !important;\n  }\n\n  /* Modal for details */\n  #modal-detail-overlay, #modal-overlay {\n    position: fixed;\n    inset: 0;\n    background: rgba(0,0,0,0.5);\n    backdrop-filter: blur(4px);\n    display: none;\n    align-items: center;\n    justify-content: center;\n    z-index: 110000;\n  }\n  #modal-detail-content {\n    max-height: 80vh;\n    overflow-y: auto;\n    font-size: 1rem;\n    color: #1a1a1a;\n    line-height: 1.4;\n    background: white;\n    border-radius: 14px;\n    padding: 20px 30px;\n    box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n    width: 90vw;\n    max-width: 480px;\n    box-sizing: border-box;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    z-index: 10;\n  }\n  #modal-detail-close-btn {\n    position: fixed;\n    top: 12px;\n    right: 12px;\n    background: #ff385c;\n    border: none;\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    color: white;\n    font-size: 28px;\n    line-height: 40px;\n    text-align: center;\n    cursor: pointer;\n    box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n    z-index: 110001;\n    transition: background 0.3s;\n    user-select:none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: 700;\n    font-family: Arial, sans-serif;\n    padding-bottom: 2px;\n  }\n  #modal-detail-close-btn:hover {\n    background: #d72950;\n  }\n\n  #modal-retry-btn {\n    align-self: flex-start;\n    background: #b00020;\n    color: white;\n    border: none;\n    border-radius: 8px;\n    padding: 10px 18px;\n    font-size: 1rem;\n    cursor: pointer;\n    box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n    transition: background 0.3s;\n    user-select:none;\n    margin-top: 20px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n  #modal-retry-btn:hover:not(:disabled) {\n    background: #7a000f;\n  }\n  #modal-retry-btn:disabled {\n    background: #999999cc;\n    cursor: not-allowed;\n    box-shadow: none;\n  }\n\n  /* Saved Submissions Panel */\n  #saved-submissions-panel {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: #fff8e1;\n    border: 2px solid #fcbf49;\n    padding: 20px;\n    box-sizing: border-box;\n    display: none;\n    flex-direction: column;\n    user-select:none;\n    z-index: 100000;\n  }\n  #saved-submissions-panel h2 {\n    margin-bottom: 12px;\n    font-weight: 700;\n    color: #cf8f00;\n    font-size: 1.8rem;\n    text-align: center;\n  }\n  #pagination-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 16px 0;\n    gap: 12px;\n    flex-wrap: wrap;\n  }\n  #pagination-controls label {\n    font-weight: 700;\n    font-size: 1.1rem;\n    color: #996700;\n  }\n  #pagination-controls input[type=date], #pagination-controls input[type=search] {\n    padding: 10px 14px;\n    font-size: 1.1rem;\n    border-radius: 8px;\n    border: 1.5px solid #fcbf49;\n    width: 180px;\n    max-width: 45vw;\n    box-sizing: border-box;\n  }\n  #saved-submissions-table-wrapper {\n    width: 100%;\n    overflow-x: auto;\n    flex-grow: 1;\n  }\n  #saved-submissions-table {\n    border-collapse: collapse;\n    width: 100%;\n    min-width: 400px;\n  }\n  #saved-submissions-table thead th {\n    background-color: #fde6a3;\n    border: 1px solid #f0c96e;\n    padding: 10px 14px;\n    font-size: 1rem;\n    font-weight: 700;\n    text-align: center;\n    white-space: nowrap;\n    position: sticky;\n    top: 0;\n    z-index: 2;\n    min-width: 90px;\n  }\n  #saved-submissions-table tbody tr {\n    cursor: pointer;\n    transition: background-color 0.2s;\n  }\n  #saved-submissions-table tbody tr:hover {\n    background-color: #fffae6;\n  }\n  #saved-submissions-table tbody td {\n    border: 1px solid #f0c96e;\n    padding: 10px 14px;\n    font-size: 1rem;\n    text-align: center;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    min-width: 90px;\n  }\n  .status-pending {\n    color: #d18e00;\n    font-weight: 700;\n  }\n  .status-success {\n    color: #2b7a0b;\n    font-weight: 700;\n  }\n  .status-failed {\n    color: #b00020;\n    font-weight: 700;\n  }\n  .thumbnail-img {\n    max-width: 80px;\n    max-height: 60px;\n    border-radius: 8px;\n    object-fit: contain;\n  }\n\n  /* Submission result modal */\n  #submit-result-modal-overlay {\n    position: fixed;\n    inset: 0;\n    background: rgba(0,0,0,0.6);\n    backdrop-filter: blur(5px);\n    display: none;\n    align-items: center;\n    justify-content: center;\n    z-index: 130000;\n    padding: 16px;\n    box-sizing: border-box;\n  }\n  #submit-result-modal {\n    background: white;\n    border-radius: 16px;\n    max-width: 400px;\n    width: 100%;\n    padding: 28px 36px;\n    box-shadow: 0 12px 32px rgba(0,0,0,0.35);\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    align-items: center;\n    text-align: center;\n  }\n  #submit-result-modal h2 {\n    margin: 0;\n    font-size: 1.8rem;\n    font-weight: 700;\n    color: #004bb5;\n  }\n  #submit-result-modal p {\n    font-size: 1.15rem;\n    color: #333;\n    margin: 0;\n    white-space: pre-wrap;\n  }\n  #submit-result-ok-btn {\n    padding: 12px 26px;\n    font-size: 1.15rem;\n    background: #0077ff;\n    color: white;\n    border: none;\n    border-radius: 14px;\n    cursor: pointer;\n    box-shadow: 0 3px 10px rgba(0,119,255,0.8);\n    transition: background 0.3s;\n    user-select:none;\n    min-width: 100px;\n  }\n  #submit-result-ok-btn:hover {\n    background: #005fcc;\n  }\n</style>\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n  <h1>Fast Track</h1>\n\n  <section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n    <div>\n      <strong class=\"label\">Location:</strong>\n      <span class=\"value\" id=\"selected-location\">None selected</span>\n    </div>\n    <div>\n      <strong class=\"label\">Patient:</strong>\n      <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n    </div>\n    <div>\n      <strong class=\"label\">MRN:</strong>\n      <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n    </div>\n  </section>\n\n  <div id=\"btns-row\">\n    <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n    <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n    <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n  </div>\n\n  <section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n    <h2>Available Devices</h2>\n    <div class=\"cards-container\" id=\"devices-container\" role=\"list\"></div>\n  </section>\n</header>\n\n<main style=\"flex-grow:1;\">\n  <section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n    <h2>Capture Device Photo</h2>\n    <div id=\"camera-wrapper\">\n      <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n      <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n    </div>\n    <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n    <canvas id=\"canvas\" class=\"hidden\"></canvas>\n    <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n    <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n  </section>\n\n  <!-- Saved Submissions Panel -->\n  <section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n    <h2>Saved Submissions</h2>\n    <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n    <div id=\"pagination-controls\">\n      <label for=\"date-filter-input\">Select Date:</label>\n      <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n      <label for=\"search-input\">Search:</label>\n      <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n    </div>\n    <div id=\"saved-submissions-table-wrapper\">\n      <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n        <thead>\n          <tr>\n            <th>MRN</th>\n            <th>POC</th>\n            <th>Date</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody id=\"saved-submissions-body\" tabindex=\"0\"></tbody>\n      </table>\n    </div>\n    <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n  </section>\n</main> \n</div>\n\n<!-- Modals -->\n\n<!-- Location/Patient Modal -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select</h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\"></div>\n  </div>\n</div>\n\n<!-- Submission Details Modal -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\"></div>\n</div>\n\n<!-- Photo Capture Modal -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Submission Result Modal -->\n<div id=\"submit-result-modal-overlay\" role=\"alertdialog\" aria-modal=\"true\" aria-labelledby=\"submit-result-title\" tabindex=\"-1\">\n  <div id=\"submit-result-modal\" tabindex=\"0\">\n    <h2 id=\"submit-result-title\">Upload Status</h2>\n    <p id=\"submit-result-message\"></p>\n    <button id=\"submit-result-ok-btn\" aria-label=\"Close upload result dialog\">Ok</button>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* Elements */\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const submitResultModalOverlay = document.getElementById('submit-result-modal-overlay');\n  const submitResultModal = document.getElementById('submit-result-modal');\n  const submitResultMessage = document.getElementById('submit-result-message');\n  const submitResultOkBtn = document.getElementById('submit-result-ok-btn');\n\n  /* State */\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionStatusCache = {};\n  let currentOpenSubmission = null;\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  /* Loader functions */\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  /* Utility */\n  function clearChildren(el) { while(el.firstChild) el.removeChild(el.firstChild); }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  /* Local Storage cache load/save */\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      submissionStatusCache = cached ? JSON.parse(cached) : {};\n    } catch { submissionStatusCache = {}; }\n  }\n  function saveSubmissionStatusCache() {\n    try { localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache)); } catch {}\n  }\n\n  /* Initial Data Loading */\n  async function fetchAppointments(locationValue) {\n    if(activeModal === 'location' || activeModal === 'patient') showLoader();\n    try {\n      let payload = {};\n      if(locationValue && activeModal === 'patient') payload.location = locationValue;\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n      const res = await fetch(webhookUrl, {method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(payload)});\n      if(!res.ok) throw new Error('HTTP error ' + res.status);\n      const data = await res.json();\n      appointments = Array.isArray(data) ? data : [data];\n      if(!appointments.length) alert('No appointment data received.');\n      processLocations();\n      processPatients();\n      updateSelectedDisplay();\n      if(activeModal === 'location'){\n        try { localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations)); } catch {}\n      }\n      if(activeModal === 'patient'){\n        try { localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients)); } catch {}\n      }\n    } catch(e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if(activeModal === 'location' || activeModal === 'patient') hideLoader();\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        locations = JSON.parse(cached);\n        return Array.isArray(locations) && locations.length;\n      }\n    } catch {}\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        patients = JSON.parse(cached);\n        return Array.isArray(patients) && patients.length;\n      }\n    } catch {}\n    return false;\n  }\n\n  function processLocations() {\n    const uniqueLoc = new Map();\n    appointments.forEach(a => { if(a.Appt_Sched_Location_Descr) uniqueLoc.set(a.Appt_Sched_Location_Descr, {label: a.Appt_Sched_Location_Descr, value: a.Appt_Sched_Location_Descr}); });\n    locations = Array.from(uniqueLoc.values()).sort((a,b) => a.label.localeCompare(b.label));\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if(storedLoc && locations.find(l => l.value === storedLoc)) selectedLocation = storedLoc;\n    else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filtered = appointments.filter(a => a.Appt_Sched_Location_Descr === selectedLocation);\n    const map = new Map();\n    filtered.forEach(a => { if(a.MRN && !map.has(a.MRN)) map.set(a.MRN, a); });\n    patients = Array.from(map.values()).sort((a,b) => new Date(b.Appt_DateTime) - new Date(a.Appt_DateTime));\n    const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPat){\n      try {\n        const p = JSON.parse(storedPat);\n        if(p && p.MRN && patients.find(x => x.MRN === p.MRN)){\n          selectedPatient = p;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n    if(selectedLocation && selectedPatient){\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  /* Modal functions */\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalTitle.textContent = type === 'location' ? 'Select Location' : 'Select Patient';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'inline-block';\n    if(type === 'location'){\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n    }\n    modalList.textContent = '';\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, type);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, type);\n      }\n    } else {\n      const hasCache = loadPatientsFromCache();\n      if(hasCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, type);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, type);\n      }\n    }\n  }\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n  }\n  updateListBtn.addEventListener('click', async () => {\n    if(!activeModal) return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n      } else {\n        try { localStorage.removeItem(STORAGE_KEYS.cachedPatients); } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n      }\n      renderModalButtons(modalAllItems, activeModal);\n    } catch(e) { alert('Failed to update list: ' + e.message); }\n    finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n    }\n  });\n  function renderModalButtons(items, type) {\n    if(type === 'location')\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    else if(type === 'patient')\n      items.sort((a,b) => new Date(b.Appt_DateTime) - new Date(a.Appt_DateTime));\n    modalList.textContent = '';\n    if(items.length === 0){\n      const p = document.createElement('p');\n      p.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      p.style.color = '#b00020';\n      modalList.appendChild(p);\n      return;\n    }\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation) btn.classList.add('selected');\n      } else {\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTime) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN) btn.classList.add('selected');\n      }\n      btn.addEventListener('click', () => {\n        if(type === 'location') {\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n            processPatients();\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            devicesSection.hidden = true;\n            cameraSection.classList.add('hidden');\n          }\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n        }\n        closeModal();\n      });\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n      modalList.appendChild(btn);\n    });\n  }\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch { return 'Unknown'; }\n  }\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(x => x.label.toLowerCase().includes(val));\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const full = (p.Patient_First_Name + ' '+ p.Patient_Last_Name).toLowerCase();\n        return full.includes(val) || p.MRN.toLowerCase().includes(val);\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  modalSearch.addEventListener('input', filterModalList);\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation) { alert('Please select a location first.'); return; }\n    openModal('patient');\n  });\n\n  /* Devices & Camera */\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n    devices.sort((a,b) => (a.POCEquipment || '').localeCompare(b.POCEquipment || ''));\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment ? device.POCEquipment + ' image' : 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n      const name = document.createElement('div');\n      name.className = 'device-name';\n      name.textContent = device.POCEquipment || '';\n      card.appendChild(name);\n      const desc = document.createElement('div');\n      desc.className = 'device-desc';\n      desc.textContent = device.Description || '';\n      card.appendChild(desc);\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const check = document.createElement('div');\n        check.className = 'device-checked';\n        check.title = 'Device Successfully Submitted';\n        check.textContent = 'âœ“';\n        card.appendChild(check);\n      }\n\n      card.addEventListener('click', () => openCameraForDevice(device));\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice(device);\n        }\n      });\n\n      devicesContainer.appendChild(card);\n    });\n  }\n  async function openCameraForDevice(device) {\n    selectedDevice = device;\n    devicesSection.hidden = true;\n    cameraSection.classList.remove('hidden');\n    cameraSection.focus();\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    photoModalOverlay.style.display = 'none';\n    await startCamera();\n  }\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const caps = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(caps.imageStabilization !== undefined) constraintsApply.imageStabilization = true;\n        if(caps.stabilizationMode && caps.stabilizationMode.includes('standard')) constraintsApply.stabilizationMode = 'standard';\n        if(Object.keys(constraintsApply).length) {\n          try { await videoTrack.applyConstraints(constraintsApply); } catch{}\n        }\n      }\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', () => {\n    if(!cameraStream) return;\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  });\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    photoModalOverlay.style.display = 'none';\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {method:'POST', body: formData});\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n      if(!submissionStatusCache[currentMRN]) submissionStatusCache[currentMRN] = {};\n      const devName = selectedDevice.POCEquipment || '';\n      if(devName) {\n        submissionStatusCache[currentMRN][devName] = true;\n        saveSubmissionStatusCache();\n      }\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n      uploadStatus.textContent = 'Upload successful!';\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      await loadDevices(currentMRN);\n\n      showSubmitResultModal(true, \"Upload successful!\");\n\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n      showSubmitResultModal(false, 'Upload failed: ' + e.message);\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch { return []; }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch {}\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({ id, mrn: currentMRN, device: JSON.stringify(selectedDevice), photoDataUrl: null, status: newStatus, timestamp: Date.now() });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n    if(dateFilterInput.value){\n      const selectedDate = new Date(dateFilterInput.value + 'T00:00:00');\n      if(!isNaN(selectedDate.getTime())){\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(s => {\n          const d = new Date(s.timestamp);\n          return d >= selectedDate && d < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(s => {\n        try {\n          const deviceObj = JSON.parse(s.device);\n          return s.mrn.toLowerCase().includes(searchTerm) || (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n        } catch { return false; }\n      });\n    }\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      try {\n        const dev = JSON.parse(sub.device);\n        tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${dev.POCEquipment || ''}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      } catch { }\n      const tdMrn = document.createElement('td'); tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try { tdDevice.textContent = JSON.parse(sub.device).POCEquipment || ''; } catch { tdDevice.textContent = ''; }\n      const tdDate = document.createElement('td'); tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status==='Pending' ? 'status-pending' : (sub.status==='Success' ? 'status-success' : 'status-failed'));\n      tr.appendChild(tdMrn); tr.appendChild(tdDevice); tr.appendChild(tdDate); tr.appendChild(tdStatus);\n      tr.addEventListener('click', () => showSubmissionDetails(sub));\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault(); showSubmissionDetails(sub);\n        }\n      });\n      savedSubmissionsBody.appendChild(tr);\n    });\n    modalRetryBtn.style.display = 'none';\n  }\n  function showSubmissionDetails(sub) {\n    currentOpenSubmission = sub;\n    clearChildren(modalDetailContent);\n    try {\n      const d = JSON.parse(sub.device);\n      const title = document.createElement('h3');\n      title.textContent = d.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(d.Description){\n        const desc = document.createElement('p');\n        desc.textContent = d.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n    const pMRN = document.createElement('p'); pMRN.textContent = 'MRN: ' + sub.mrn;\n    const pDate = document.createElement('p'); pDate.textContent = 'Date: ' + formatDateTime(sub.timestamp);\n    const pStatus = document.createElement('p');\n    pStatus.textContent = 'Status: ' + sub.status;\n    pStatus.className = sub.status==='Pending' ? 'status-pending' : (sub.status==='Success' ? 'status-success' : 'status-failed');\n    modalDetailContent.appendChild(pMRN);\n    modalDetailContent.appendChild(pDate);\n    modalDetailContent.appendChild(pStatus);\n    if(sub.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = sub.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n    modalRetryBtn.style.display = sub.status === 'Failed' ? 'flex' : 'none';\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n  async function retrySubmission(sub) {\n    if(sub.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let blob = dataURLtoBlob(sub.photoDataUrl);\n      if(!blob) throw new Error('No photo data to upload');\n      let fm = new FormData();\n      fm.append('mrn', sub.mrn);\n      fm.append('device', sub.device);\n      fm.append('photo', blob, 'device.jpg');\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {method:'POST', body: fm});\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n      removeSubmissionRecord(sub.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n  function removeSubmissionRecord(id) {\n    const subs = loadSavedSubmissions();\n    const idx = subs.findIndex(s => s.id === id);\n    if(idx !== -1){\n      subs.splice(idx,1);\n      saveSubmissions(subs);\n    }\n  }\n  function formatDateTime(ts) {\n    const dt = new Date(ts);\n    const p= n => String(n).padStart(2,'0');\n    return \\`\\${p(dt.getMonth()+1)}/\\${p(dt.getDate())}/\\${dt.getFullYear()} \\${p(dt.getHours())}:\\${p(dt.getMinutes())}\\`;\n  }\n  function formatDate(ts){\n    const dt = new Date(ts);\n    const p= n => String(n).padStart(2,'0');\n    return \\`\\${p(dt.getMonth()+1)}/\\${p(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  /* Submission result modal */\n  function showSubmitResultModal(success, message) {\n    submitResultMessage.textContent = message;\n    submitResultModalOverlay.style.display = 'flex';\n    submitResultModal.focus();\n  }\n  submitResultOkBtn.addEventListener('click', () => {\n    submitResultModalOverlay.style.display = 'none';\n    submitResultOkBtn.blur();\n  });\n\n  /* Show Submissions button update */\n  function updateShowSubmissionsButton() {\n    const subs = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailed = subs.some(s => s.status==='Failed' && new Date(s.timestamp).toISOString().startsWith(todayStr));\n    if(hasFailed) showSubmissionsBtn.classList.add('star');\n    else showSubmissionsBtn.classList.remove('star');\n  }\n\n  /* dataURL to Blob */\n  function dataURLtoBlob(dataurl) {\n    if(!dataurl) return null;\n    const arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n    for(let i=0;i<n;i++) u8arr[i] = bstr.charCodeAt(i);\n    return new Blob([u8arr], {type: mime});\n  }\n\n  /* UI Event Listeners */\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible) {\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed','false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed','true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n  document.getElementById('saved-submissions-close').addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed','false');\n  });\n  dateFilterInput.addEventListener('change', renderSavedSubmissions);\n  searchInput.addEventListener('input', renderSavedSubmissions);\n\n  /* Date picker no limit */\n  function updateDatePickerRange(){\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  /* Keyboard accessibility: close modals on Escape */\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape'){\n      if(modalOverlay.style.display === 'flex') closeModal();\n      if(modalDetailOverlay.style.display === 'flex') modalDetailOverlay.style.display = 'none';\n      if(photoModalOverlay.style.display === 'flex') photoModalOverlay.style.display = 'none';\n      if(submitResultModalOverlay.style.display === 'flex') submitResultModalOverlay.style.display = 'none';\n    }\n  });\n\n  /* Initialization */\n  async function initialLoad() {\n    showLoader();\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n      const hasCacheLoc = loadLocationsFromCache();\n      if(!hasCacheLoc) {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n      }\n      if(storedLoc && locations.find(l => l.value === storedLoc)) selectedLocation = storedLoc;\n      else {\n        selectedLocation = null;\n        selectedPatient = null;\n        localStorage.removeItem(STORAGE_KEYS.location);\n        localStorage.removeItem(STORAGE_KEYS.patient);\n      }\n      if(selectedLocation){\n        const hasCachePat = loadPatientsFromCache();\n        if(!hasCachePat) {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n        }\n        if(storedPat){\n          try {\n            const p = JSON.parse(storedPat);\n            if(p && p.MRN && patients.find(x => x.MRN===p.MRN)) selectedPatient = p;\n            else {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } catch{\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n          }\n        } else selectedPatient = null;\n      } else selectedPatient = null;\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n      if(selectedPatient && selectedPatient.MRN) initializePatientDevices(selectedPatient.MRN);\n      else resetDevicesAndCamera();\n      updateShowSubmissionsButton();\n    }\n  }\n\n  initialLoad();\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1260,
        200
      ],
      "id": "d831c36f-30f8-4125-94e3-3c2c84d0c35a",
      "name": "Code7"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n  flex-wrap: wrap;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Buttons updated colors */\n/* Failed Sends red (unchanged) */\n.btn-danger {\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n}\n/* Locations button: yellow */\n.btn-primary {\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n/* Patients button: green */\n.btn-info {\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n/* Location and Patient buttons styled the same */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 14px 16px;\n  font-weight: 700;\n  font-size: 1.1rem;\n  border-radius: 14px;\n  box-shadow: 0 3px 12px rgba(0, 0, 0, 0.18);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 3px solid #444444cc;\n  color: #111111dd;\n  background: #fbfbfb;\n  transition: background 0.25s ease, color 0.25s ease, border-color 0.25s ease, box-shadow 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n  cursor: pointer;\n}\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: #90ee90dd; /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90;\n  box-shadow: 0 6px 18px rgba(144, 238, 144, 0.6);\n}\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #004bb5;\n  color: white;\n  border-color: #003366;\n  box-shadow: 0 8px 24px rgba(0, 75, 181, 0.7);\n  transform: translateY(-3px);\n}\n\n/* Remove additional patient inner card styling, unify appearance */\nbutton.patient-btn.card {\n  display: block;\n  padding: 14px 16px;\n  line-height: 1.4;\n  width: 100%; /* full width */\n  border: none;\n  background: transparent;\n  cursor: pointer;\n  user-select:none;\n}\nbutton.patient-btn.card strong {\n  font-size: 1.2rem;\n  margin-bottom: 6px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n  font-weight: 700;\n}\nbutton.patient-btn.card small {\n  font-size: 1rem;\n  color: #222222cc;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Slightly reduce device card height and remove title/subtitle leaving only image */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* reduced height to fit only image comfortably */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-name, .device-desc {\n  display: none; /* hide these titles */\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  /* Changed max-width to 100% for full feed width on smaller devices */\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  /* Apply CSS stabilization via 'will-change' and 'transform-style' */\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px; /* slightly smaller */\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n/* Timestamp for patient modal */\n#modal-title {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n#last-list-update {\n  font-weight: 400;\n  font-size: 0.9rem;\n  color: #444;\n  margin-left: 12px;\n  white-space: nowrap;\n  user-select:none;\n}\n\n/* Modal for showing submission details */\n#modal-detail-overlay {\n  /* No change needed */\n}\n#modal-detail-content {\n  /* No change */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  /* Wrapper to enable overflow and fix header */\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1>Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    patients.sort((a, b) => {\n      const dateA = new Date(a.Appt_DateTime).getTime() || 0;\n      const dateB = new Date(b.Appt_DateTime).getTime() || 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  // Update List button fetch logic\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = new Date(a.Appt_DateTime).getTime() || 0;\n        const dateB = new Date(b.Appt_DateTime).getTime() || 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else {\n        btn.innerHTML =\n          '<strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong><br/>' +\n          '<small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small><br/>' +\n          '<small>MRN: ' + item.MRN + '</small><br/>' +\n          '<small>Appt: ' + formatApptDateTime(item.Appt_DateTime) + '</small>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n            processPatients();\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            hidePatientInfoAndDevices();\n          }\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n        }\n        closeModal();\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Removed name and desc as per instructions\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera();\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  // Initialize on load\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1380,
        200
      ],
      "id": "62dc5479-9f6a-40e1-b3a3-af80668e0a17",
      "name": "Code8"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n  flex-wrap: wrap;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 12px 16px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease, border-color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n  cursor: pointer;\n  color: #004bb5;\n  background: #e7f0fa;\n}\n\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.7); /* more visible lightgreen transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border */\n  box-shadow: 0 6px 12px rgba(144, 238, 144, 0.7);\n}\n\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: block;\n  padding: 12px 16px;\n  line-height: 1.4;\n  width: 100%; /* full width */\n  border: none;\n  background: transparent;\n  cursor: pointer;\n  user-select:none;\n  color: inherit; /* Inherit from button */\n  font-weight: normal;\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 6px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n  font-weight: 700;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Slightly reduce device card height and remove title/subtitle leaving only image */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* reduced height to fit only image comfortably */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-name, .device-desc {\n  display: none; /* hide these titles */\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  /* Changed max-width to 100% for full feed width on smaller devices */\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  /* Apply CSS stabilization via 'will-change' and 'transform-style' */\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px; /* slightly smaller */\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n/* Timestamp for patient modal */\n#modal-title {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n#last-list-update {\n  font-weight: 400;\n  font-size: 0.9rem;\n  color: #444;\n  margin-left: 12px;\n  white-space: nowrap;\n  user-select:none;\n}\n\n/* Modal for showing submission details */\n#modal-detail-overlay {\n  /* No change needed */\n}\n#modal-detail-content {\n  /* No change */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  /* Wrapper to enable overflow and fix header */\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1>Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    patients.sort((a, b) => {\n      const dateA = new Date(a.Appt_DateTime).getTime() || 0;\n      const dateB = new Date(b.Appt_DateTime).getTime() || 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = new Date(a.Appt_DateTime).getTime() || 0;\n        const dateB = new Date(b.Appt_DateTime).getTime() || 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else {\n        btn.innerHTML =\n          '<strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong><br/>' +\n          '<small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small><br/>' +\n          '<small>MRN: ' + item.MRN + '</small><br/>' +\n          '<small>Appt: ' + formatApptDateTime(item.Appt_DateTime) + '</small>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n            processPatients();\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            hidePatientInfoAndDevices();\n          }\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n        }\n        closeModal();\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Removed name and desc as per instructions\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera();\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        200
      ],
      "id": "38745305-2508-4f38-a2a6-8734cc23d8d9",
      "name": "Code9"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n  flex-wrap: wrap;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Update patient device card height and text content as in working code */\n/* Include device name and description as visible */\n\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 16px;\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 100px;\n  height: 100px;\n  object-fit: contain;\n  margin-bottom: 12px;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-name {\n  font-weight: 700;\n  font-size: 1.15rem;\n  margin-bottom: 6px;\n  color: #004bb5;\n}\n.device-desc {\n  font-size: 0.9rem;\n  color: #555;\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  /* Changed max-width to 100% for full feed width on smaller devices */\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  /* Apply CSS stabilization via 'will-change' and 'transform-style' */\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px; /* slightly smaller */\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n/* Timestamp for patient modal */\n#modal-title {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n#last-list-update {\n  font-weight: 400;\n  font-size: 0.9rem;\n  color: #444;\n  margin-left: 12px;\n  white-space: nowrap;\n  user-select:none;\n}\n\n/* Modal for showing submission details */\n#modal-detail-overlay {\n  /* No change needed */\n}\n#modal-detail-content {\n  /* No change */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  /* Wrapper to enable overflow and fix header */\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1>Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    patients.sort((a, b) => {\n      const dateA = new Date(a.Appt_DateTime).getTime() || 0;\n      const dateB = new Date(b.Appt_DateTime).getTime() || 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = new Date(a.Appt_DateTime).getTime() || 0;\n        const dateB = new Date(b.Appt_DateTime).getTime() || 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else {\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTime) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n            processPatients();\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            // Optionally hide devices and camera UI (not explicitly defined)\n          }\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n        }\n        closeModal();\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n      // add device name\n      const nameEl = document.createElement('div');\n      nameEl.className = 'device-name';\n      nameEl.textContent = device.POCEquipment;\n      card.appendChild(nameEl);\n      // add device description\n      const descEl = document.createElement('div');\n      descEl.className = 'device-desc';\n      descEl.textContent = device.Description || '';\n      card.appendChild(descEl);\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera();\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        360
      ],
      "id": "12b091e6-160e-429c-a156-d0d625f3f885",
      "name": "Code10"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n  flex-wrap: wrap;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1>Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if(p.Appt_DateTime){\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n            processPatients();\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n\n            // Automatically update patient cards for this location\n            // If patients are in cache, display modal directly with cached patients\n            // Else call fetch to get patients\n            const hasCache = loadPatientsFromCache();\n            if(!hasCache){\n              activeModal = 'patient';\n              fetchAppointments(selectedLocation).then(() => {\n                activeModal = null;\n              });\n            }\n          }\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n        }\n        closeModal();\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Removed device name and description from device card (only images)\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera();\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if(sub.status === 'Failed'){\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        500
      ],
      "id": "31c7b757-94fb-4160-8e03-10eecfb9fa21",
      "name": "Code11"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n  flex-wrap: wrap;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1>Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if(p.Appt_DateTime){\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n            processPatients();\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n\n            // Automatically update patient cards for this location\n            // If patients are in cache, display modal directly with cached patients\n            // Else call fetch to get patients\n            const hasCache = loadPatientsFromCache();\n            if(!hasCache){\n              activeModal = 'patient';\n              fetchAppointments(selectedLocation).then(() => {\n                activeModal = null;\n              });\n            }\n          }\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n        }\n        closeModal();\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Removed device name and description from device card (only images)\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera();\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if(sub.status === 'Failed'){\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        640
      ],
      "id": "692b718f-a283-4846-bcb0-37dd9edadf3d",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Last Update timestamp for patient modal */\n#last-update-timestamp {\n  font-size: 0.85rem;\n  font-style: italic;\n  color: #aad8ff;\n  margin-top: 4px;\n  user-select:none;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  overflow-y: auto; /* Added to allow scrolling */\n  max-height: 80vh; /* Constrain max height */\n  scroll-behavior: smooth; /* Smooth scrolling */\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1>Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" aria-live=\"polite\" aria-atomic=\"true\" role=\"status\" style=\"display:none;\">\n    Last Update: --\n  </div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if(p.Appt_DateTime){\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    changePatientBtn.disabled = !selectedLocation;\n\n    // Update the patient modal last update timestamp display\n    if(selectedLocation && selectedPatient) {\n      updatePatientModalLastUpdate();\n    } else {\n      lastUpdateTimestampElem.style.display = 'none';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function updatePatientModalLastUpdate(){\n    // Show last update timestamp as \"Last Update: HH:MM\"\n    const now = new Date();\n    const hh = now.getHours().toString().padStart(2,'0');\n    const mm = now.getMinutes().toString().padStart(2,'0');\n    lastUpdateTimestampElem.textContent = \\`Last Update: \\${hh}:\\${mm}\\`;\n    lastUpdateTimestampElem.style.display = 'block';\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            // Update location\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n\n            // Reset patient selection on location change\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            // Initialize patients for new location and update displays/devices\n            // Fetch appointments with new location, update patients list, then update UI with first patient if any\n            // Also update local cache for patients\n            (async () => {\n              activeModal = 'patient'; // temporarily for fetch\n              await fetchAppointments(selectedLocation);\n              activeModal = null;\n\n              processPatients();\n\n              // If patients available, select first patient automatically, else clear patient selection UI\n              if(patients.length > 0){\n                selectedPatient = patients[0];\n                localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n\n              updateSelectedDisplay();\n\n              // Load devices for selected patient or reset if none\n              if(selectedPatient && selectedPatient.MRN){\n                await initializePatientDevices(selectedPatient.MRN);\n              } else {\n                resetDevicesAndCamera();\n              }\n\n              closeModal();\n            })();\n\n            // Close modal here early to allow async update\n            return;\n          }\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Removed device name and description from device card (only images)\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          // After camera is started, scroll to bottom of camera section to show fully the video and capture button.\n          // Use a slight delay to ensure DOM updated\n          setTimeout(() => {\n            cameraSection.scrollTop = cameraSection.scrollHeight;\n          }, 100);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if(sub.status === 'Failed'){\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        800
      ],
      "id": "0849c309-f6d1-4c01-a346-7182a08e07fc",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1>Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if(p.Appt_DateTime){\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    // Update \"Last Update: HH:MM\" in patient modal (and also outside)\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  // Timestamp update for patient modal and also #last-update-timestamp (outside modal)\n  function updateTimestampLastUpdate() {\n    if(selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            // When location changed, fetch new appointments automatically, update patients list and UI\n            // Also initialize patient devices for new patient if selected (cleared here)\n            awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  /**\n   * When location is changed, fetch appointments,\n   * update patients accordingly,\n   * set selectedPatient null,\n   * and refresh display & devices\n   */\n  async function awaitPatientListUpdateForNewLocation(){\n    try{\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      // We reset selectedPatient to null because location changed, clear patient stored selection\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      // Update modalAllItems for possible use (not directly showing modal here)\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Removed device name and description from device card (only images)\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          // scroll cameraSection to bottom to show entire camera view and capture button\n          cameraSection.scrollIntoView({behavior: 'smooth', block: 'end'});\n          // Also scroll cameraWrapper if needed\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({behavior: 'smooth', block: 'end'});\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if(sub.status === 'Failed'){\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        820,
        220
      ],
      "id": "c18fabc8-5162-4697-8a8f-bacc0b91f365",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<!-- Intro.js CSS -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/intro.js/minified/introjs.min.css\" />\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1 data-intro=\"Welcome to Fast Track - this is your main header.\" data-step=\"1\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\" data-intro=\"This area shows your currently selected Location, Patient, and MRN.\" data-step=\"2\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\" data-intro=\"Use these buttons to manage Failed Sends, Locations, and Patients.\" data-step=\"3\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden data-intro=\"Here you can select a device associated with the patient.\" data-step=\"4\">\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" data-intro=\"This section is for capturing a photo of the device via camera.\" data-step=\"5\">\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\" data-intro=\"This panel shows saved image submissions with their status.\" data-step=\"6\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Intro.js script -->\n<script src=\"https://cdn.jsdelivr.net/npm/intro.js/minified/intro.min.js\"></script>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if(p.Appt_DateTime){\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    // Update \"Last Update: HH:MM\" in patient modal (and also outside)\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  // Timestamp update for patient modal and also #last-update-timestamp (outside modal)\n  function updateTimestampLastUpdate() {\n    if(selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            // When location changed, fetch new appointments automatically, update patients list and UI\n            // Also initialize patient devices for new patient if selected (cleared here)\n            awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  /**\n   * When location is changed, fetch appointments,\n   * update patients accordingly,\n   * set selectedPatient null,\n   * and refresh display & devices\n   */\n  async function awaitPatientListUpdateForNewLocation(){\n    try{\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      // We reset selectedPatient to null because location changed, clear patient stored selection\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      // Update modalAllItems for possible use (not directly showing modal here)\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Removed device name and description from device card (only images)\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          // scroll cameraSection to bottom to show entire camera view and capture button\n          cameraSection.scrollIntoView({behavior: 'smooth', block: 'end'});\n          // Also scroll cameraWrapper if needed\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({behavior: 'smooth', block: 'end'});\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n    setLoading(photoOkBtn, true, '');\n    showLoader();\n    uploadStatus.textContent = 'Uploading...';\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      uploadStatus.textContent = 'Upload failed: ' + e.message;\n      updateSubmissionStatus(submissionRecord.id, 'Failed');\n    } finally {\n      hideLoader();\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if(sub.status === 'Failed'){\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  function runIntro() {\n    introJs().setOptions({\n      steps: [\n        {element: 'h1', intro: 'Welcome to Fast Track - this is your main header.', position: 'bottom'},\n        {element: '#selected-info', intro: 'This area shows your currently selected Location, Patient, and MRN.', position: 'bottom'},\n        {element: '#btns-row', intro: 'Use these buttons to manage Failed Sends, Locations, and Patients.', position: 'bottom'},\n        {element: '#devices-section', intro: 'Here you can select a device associated with the patient.', position: 'top'},\n        {element: '#camera-section', intro: 'This section is for capturing a photo of the device via camera.', position: 'top'},\n        {element: '#saved-submissions-panel', intro: 'This panel shows saved image submissions with their status.', position: 'top'},\n      ],\n      showProgress: true,\n      exitOnOverlayClick: false,\n      exitOnEsc: true,\n      hidePrev: true,\n      hideNext: false\n    }).start();\n  }\n\n  initialLoad();\n\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n      runIntro(); // Run the intro.js tour on initial load\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        820,
        360
      ],
      "id": "3fdf9b47-0336-4333-a4f7-65506d85554a",
      "name": "Code4"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay with spinner and timer for photo submit */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.3rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1>Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if(p.Appt_DateTime){\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    // Update \"Last Update: HH:MM\" in patient modal (and also outside)\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  // Timestamp update for patient modal and also #last-update-timestamp (outside modal)\n  function updateTimestampLastUpdate() {\n    if(selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            // When location changed, fetch new appointments automatically, update patients list and UI\n            // Also initialize patient devices for new patient if selected (cleared here)\n            awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  /**\n   * When location is changed, fetch appointments,\n   * update patients accordingly,\n   * set selectedPatient null,\n   * and refresh display & devices\n   */\n  async function awaitPatientListUpdateForNewLocation(){\n    try{\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      // We reset selectedPatient to null because location changed, clear patient stored selection\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      // Update modalAllItems for possible use (not directly showing modal here)\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n      if(photoSubmitLoaderOverlay.style.display === 'flex'){\n        // Allow canceling submit loader with escape if necessary\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10; // seconds countdown timer for photo submit deadline\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Removed device name and description from device card (only images)\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          // scroll cameraSection to bottom to show entire camera view and capture button\n          cameraSection.scrollIntoView({behavior: 'smooth', block: 'end'});\n          // Also scroll cameraWrapper if needed\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({behavior: 'smooth', block: 'end'});\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions to show/hide photo submit loader with countdown\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  // Start 10 second countdown timer for photo submit\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    // Clear previous if any\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if(submissionCountdown < 0){\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        onTimeout();\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  // Cancel timer and hide loader\n  function stopSubmitTimeout() {\n    if(submissionTimeoutId !== null){\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    // Check offline status immediately before starting submission\n    if(!navigator.onLine){\n      // Offline, mark as failed immediately\n      await markSubmissionFailedDueOffline();\n      return;\n    }\n\n    setLoading(photoOkBtn, true, '');\n    uploadStatus.textContent = '';\n    // Show and start 10 seconds countdown spinner/overlay\n    showPhotoSubmitLoader();\n\n    // Define the function to handle failure due to timeout\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n      setLoading(photoOkBtn, false, 'Submit');\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      photoModalOverlay.style.display = 'none';\n    };\n\n    // Also set the 10 seconds countdown timer with onTimeout\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      // Use a controller to abort fetch if timeout hits (fallback)\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if(e.name === 'AbortError'){\n        // Timeout triggered abort\n        // Already handled in onTimeout(), just exit\n        return;\n      }\n      // If fetch failed due to offline or other, save as failed immediately\n      if(!navigator.onLine){\n        await markSubmissionFailedDueOffline();\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n      }\n    } finally {\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  async function markSubmissionFailedDueOffline(){\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n    const base64DataUrl = await blobToDataURL(photoBlob);\n    const submissionRecord = {\n      id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      photoDataUrl: base64DataUrl,\n      status: 'Failed',\n      timestamp: Date.now()\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n  }\n\n  // Helper for updating submission status by id, for timed fail\n  async function updateSubmissionStatusTimed(newStatus){\n    const submissions = loadSavedSubmissions();\n    // Because addSubmissionRecord was called with Pending status before upload\n    // Find the most recent Submission to update status to Failed\n    let found = false;\n    for(let i = submissions.length -1; i >=0; i--){\n      const s = submissions[i];\n      if(s.status === 'Pending' && s.mrn === currentMRN){\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if(!found && newStatus === 'Failed'){\n      // No pending record found, create new\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      submissions.push({\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if(sub.status === 'Failed'){\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  modalCloseBtn.addEventListener('click', closeModal);\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalSearch.addEventListener('input', filterModalList);\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()} \\${pad(dt.getHours())}:\\${pad(dt.getMinutes())}\\`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2,'0');\n    return \\`\\${pad(dt.getMonth()+1)}/\\${pad(dt.getDate())}/\\${dt.getFullYear()}\\`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if(visible){\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        820,
        520
      ],
      "id": "9210b0e7-226b-4b07-8409-2cbaafdf0a10",
      "name": "Code5"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n  cursor: pointer;\n  position: relative;\n}\nh1:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n\n/* Badge on patient cards for submission count */\n.patient-badge {\n  position: absolute;\n  top: 6px;\n  right: 14px;\n  background-color: #0077ff;\n  color: white;\n  font-size: 0.85rem;\n  font-weight: 700;\n  border-radius: 12px;\n  padding: 2px 8px;\n  user-select:none;\n  pointer-events: none;\n  min-width: 20px;\n  text-align: center;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n  position: relative;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n}\n#cancel-capture-btn {\n  margin-top: 12px;\n  align-self: center;\n  width: 140px;\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n}\n#cancel-capture-btn:hover {\n  background: #7a000f;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay specifically for photo submit timer and spinner */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.3rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n}\n\n/* Saved Submissions Panel */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date], #pagination-controls input[type=search] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n\n/* Modal for today's score */\n#todays-score-modal {\n  display: none;\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  align-items: center;\n  justify-content: center;\n  z-index: 140000;\n}\n#todays-score-content {\n  background: white;\n  border-radius: 16px;\n  padding: 20px 32px;\n  max-width: 320px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1.2rem;\n  text-align: center;\n  color: #004bb5;\n  font-weight: 700;\n  user-select:none;\n}\n#todays-score-close-btn {\n  margin-top: 16px;\n  background: #0077ff;\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n}\n#todays-score-close-btn:hover {\n  background: #005fcc;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border -->\n<h1 id=\"fast-track-header\" tabindex=\"0\" aria-haspopup=\"dialog\" aria-controls=\"todays-score-modal\" aria-label=\"Fast Track, Click or press enter to show today's score\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <span class=\"value\" id=\"selected-patient-name\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Cancel</button>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n    <label for=\"search-input\">Search:</label>\n    <input type=\"search\" id=\"search-input\" placeholder=\"Filter by MRN or Device Name\" aria-label=\"Search submissions\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <input type=\"search\" id=\"modal-search\" aria-label=\"Filter list\" autocomplete=\"off\" placeholder=\"Type to filter...\" />\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Modal for Today's Score -->\n<div id=\"todays-score-modal\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"todays-score-header\" tabindex=\"-1\">\n  <div id=\"todays-score-content\">\n    <div id=\"todays-score-header\">Today's Score</div>\n    <div id=\"todays-score-text\" style=\"margin-top: 12px; font-size: 1.5rem; font-weight: 700; color: #004bb5;\"></div>\n    <button id=\"todays-score-close-btn\" aria-label=\"Close today's score modal\">Close</button>\n  </div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientName = document.getElementById('selected-patient-name');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalSearch = document.getElementById('modal-search');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const fastTrackHeader = document.getElementById('fast-track-header');\n  const todaysScoreModal = document.getElementById('todays-score-modal');\n  const todaysScoreText = document.getElementById('todays-score-text');\n  const todaysScoreCloseBtn = document.getElementById('todays-score-close-btn');\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses'\n  };\n\n  // Show/hide loader helpers\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n  function showLoaderInModal() {\n    showLoader();\n  }\n  function hideLoaderInModal() {\n    hideLoader();\n  }\n\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoaderInModal();\n    }\n    try {\n      let payload = {};\n      if(locationValue !== null && locationValue !== undefined && activeModal === 'patient'){\n        payload.location = locationValue;\n      }\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if(!appointments.length){\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if(activeModal === 'location'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if(activeModal === 'patient'){\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoaderInModal();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if(cached){\n        const cachedLocations = JSON.parse(cached);\n        if(Array.isArray(cachedLocations) && cachedLocations.length){\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if(cached){\n        const cachedPatients = JSON.parse(cached);\n        if(Array.isArray(cachedPatients) && cachedPatients.length){\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch(e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if(appt.Appt_Sched_Location_Descr){\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a,b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if(!selectedLocation){\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if(appt.MRN){\n        if(!patientMap.has(appt.MRN)){\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if(p.Appt_DateTime){\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if(storedPatientJSON){\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch {}\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if(selectedLocation && selectedPatient) {\n      selectedPatientName.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n    } else if(selectedLocation && !selectedPatient) {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    } else {\n      selectedPatientName.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n    }\n\n    // Update \"Last Update: HH:MM\" in patient modal (and also outside)\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  // Timestamp update for patient modal and also #last-update-timestamp (outside modal)\n  function updateTimestampLastUpdate() {\n    if(selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    modalSearch.value = '';\n    lastListUpdateSpan.textContent = '';\n\n    if(type === 'location'){\n      modalTitle.textContent = 'Select Location';\n      lastListUpdateSpan.textContent = '';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = true;\n      modalSearch.blur();\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      modalSearch.disabled = false;\n      setTimeout(() => modalSearch.focus(), 100);\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if(type === 'location'){\n      const hasCache = loadLocationsFromCache();\n\n      if(hasCache){\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if(hasPatientsCache){\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if(activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if(activeModal === 'location'){\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if(activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch {}\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch(e){\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate(){\n    if(activeModal === 'patient'){\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2,'0');\n      const mm = now.getMinutes().toString().padStart(2,'0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    modalSearch.value = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  /** \n   * Builds a map from MRN to set of unique device names \n   * from saved submissions (filter by today's date)\n   */\n  function buildPatientDeviceSubmissionMap() {\n    const submissions = loadSavedSubmissions();\n    let patientDeviceMap = new Map();\n    const todayStr = new Date().toISOString().split('T')[0];\n    for (const s of submissions){\n      const subDateStr = new Date(s.timestamp).toISOString().split('T')[0];\n      if (subDateStr !== todayStr) continue; // only today's\n      if (s.status !== 'Success') continue;\n      const mrn = s.mrn;\n      let deviceName = '';\n      try {\n        const deviceObj = JSON.parse(s.device);\n        deviceName = deviceObj.POCEquipment || '';\n      } catch {}\n      if (!deviceName) continue;\n      if (!patientDeviceMap.has(mrn)) {\n        patientDeviceMap.set(mrn, new Set());\n      }\n      patientDeviceMap.get(mrn).add(deviceName);\n    }\n    return patientDeviceMap;\n  }\n\n  function renderModalButtons(items, type) {\n    if(type === 'location'){\n      items.sort((a,b) => a.label.localeCompare(b.label));\n    } else if(type === 'patient'){\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n\n    if(items.length === 0){\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    // For patient modal, build device submission map for badges\n    let patientDeviceMap = null;\n    if(type === 'patient'){\n      patientDeviceMap = buildPatientDeviceSubmissionMap();\n    }    \n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if(type === 'location'){\n        btn.textContent = item.label;\n        if(item.value === selectedLocation){\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n        if(selectedPatient && item.MRN === selectedPatient.MRN){\n          btn.classList.add('selected');\n        }\n        // Add badge for unique device submissions today\n        if(patientDeviceMap){\n          const deviceSet = patientDeviceMap.get(item.MRN);\n          if (deviceSet && deviceSet.size > 0){\n            const badge = document.createElement('div');\n            badge.className = 'patient-badge';\n            badge.textContent = deviceSet.size.toString();\n            btn.appendChild(badge);\n          }\n        }\n      }\n\n      btn.addEventListener('click', async () => {\n        if(type === 'location'){\n          if(item.value !== selectedLocation){\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            await awaitPatientListUpdateForNewLocation();\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if(!selectedPatient || selectedPatient.MRN !== item.MRN){\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' '){\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  /**\n   * When location is changed, fetch appointments,\n   * update patients accordingly,\n   * set selectedPatient null,\n   * and refresh display & devices\n   */\n  async function awaitPatientListUpdateForNewLocation(){\n    try{\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if(!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  function filterModalList() {\n    const val = modalSearch.value.trim().toLowerCase();\n    if(!val){\n      renderModalButtons(modalAllItems, activeModal);\n      return;\n    }\n    let filtered;\n    if(activeModal === 'location'){\n      filtered = modalAllItems.filter(loc =>\n        loc.label.toLowerCase().indexOf(val) !== -1\n      );\n    } else if(activeModal === 'patient'){\n      filtered = modalAllItems.filter(p => {\n        const fullName = (p.Patient_First_Name + ' ' + p.Patient_Last_Name).toLowerCase();\n        return fullName.indexOf(val) !== -1 || p.MRN.toLowerCase().indexOf(val) !== -1;\n      });\n    }\n    renderModalButtons(filtered, activeModal);\n  }\n\n  window.addEventListener('keydown', e => {\n    if(e.key === 'Escape' && modalOverlay.style.display === 'flex'){\n      closeModal();\n    }\n\n    if(e.key === 'Escape'){\n      if(modalDetailOverlay.style.display === 'flex'){\n        modalDetailOverlay.style.display = 'none';\n      }\n      if(photoModalOverlay.style.display === 'flex'){\n        photoModalOverlay.style.display = 'none';\n      }\n      if(photoSubmitLoaderOverlay.style.display === 'flex'){\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n      if(todaysScoreModal.style.display === 'flex'){\n        todaysScoreModal.style.display = 'none';\n        fastTrackHeader.focus();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if(!selectedLocation){\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n  modalSearch.addEventListener('input', filterModalList);\n\n  // Show Today's Score modal on header click / keypress\n  function updateTodaysScoreText() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n\n    // Count unique device submissions across all patients today\n    let uniqueDevices = new Set();\n    for(const s of submissions){\n      if(s.status !== 'Success') continue;\n      const subDateStr = new Date(s.timestamp).toISOString().split('T')[0];\n      if(subDateStr !== todayStr) continue;\n      try{\n        const deviceObj = JSON.parse(s.device);\n        const deviceName = deviceObj.POCEquipment || '';\n        if(deviceName) uniqueDevices.add(deviceName);\n      }catch{}\n    }\n    todaysScoreText.textContent = \\`Today's Score: \\${uniqueDevices.size}\\`;\n  }\n\n  function showTodaysScoreModal() {\n    updateTodaysScoreText();\n    todaysScoreModal.style.display = 'flex';\n    todaysScoreModal.setAttribute('aria-hidden', 'false');\n    todaysScoreModal.focus();\n  }\n  function hideTodaysScoreModal(){\n    todaysScoreModal.style.display = 'none';\n    todaysScoreModal.setAttribute('aria-hidden', 'true');\n    fastTrackHeader.focus();\n  }\n\n  fastTrackHeader.addEventListener('click', () => {\n    showTodaysScoreModal();\n  });\n  fastTrackHeader.addEventListener('keydown', e => {\n    if(e.key === 'Enter' || e.key === ' '){\n      e.preventDefault();\n      showTodaysScoreModal();\n    }\n  });\n  todaysScoreCloseBtn.addEventListener('click', () => {\n    hideTodaysScoreModal();\n  });\n  todaysScoreModal.addEventListener('keydown', e => {\n    if(e.key === 'Escape'){\n      hideTodaysScoreModal();\n    }\n  });\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10; // seconds countdown timer for photo submit deadline\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  let submissionStatusCache = {};\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if(cached){\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch(e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch(e) {}\n  }\n\n\n  function clearChildren(el) {\n    while(el.firstChild) el.removeChild(el.firstChild);\n  }\n\n\n  function setLoading(btn, isLoading, text) {\n    if(isLoading){\n      btn.disabled = true;\n      btn.innerHTML = '<div class=\"loader\" aria-label=\"Loading\"></div>';\n    } else {\n      btn.disabled = false;\n      btn.textContent = text;\n    }\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n  }\n\n  async function initializePatientDevices(mrn) {\n    if(!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({mrn})\n      });\n      if(!res.ok) throw new Error(\\`Server error: \\${res.status}\\`);\n      let devices = await res.json();\n      if(!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if(currentDevices.length === 0){\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch(e){\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  // Render device cards\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n\n    devices.sort((a, b) => {\n      if(!a.POCEquipment) return 1;\n      if(!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      if(submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]){\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          cameraSection.scrollIntoView({behavior: 'smooth', block: 'end'});\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({behavior: 'smooth', block: 'end'});\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if(cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if(videoTrack && videoTrack.getCapabilities){\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if(capabilities.imageStabilization !== undefined){\n          constraintsApply.imageStabilization = true;\n        }\n        if(capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')){\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if(Object.keys(constraintsApply).length){\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch(e){}\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch(e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if(cameraStream){\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n  });\n\n  captureBtn.addEventListener('click', takePhoto);\n  function takePhoto() {\n    if(!cameraStream) return;\n\n    setTimeout(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n      }, 'image/jpeg', 0.95);\n    }, 200);\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if(photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n  });\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions to show/hide photo submit loader with countdown\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  // Start 10 second countdown timer for photo submit\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if(submissionCountdown < 0){\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        onTimeout();\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  // Cancel timer and hide loader\n  function stopSubmitTimeout() {\n    if(submissionTimeoutId !== null){\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    if(!navigator.onLine){\n      await markSubmissionFailedDueOffline();\n      return;\n    }\n\n    setLoading(photoOkBtn, true, '');\n    uploadStatus.textContent = '';\n    showPhotoSubmitLoader();\n\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n      setLoading(photoOkBtn, false, 'Submit');\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      photoModalOverlay.style.display = 'none';\n    };\n\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      const submissionRecord = {\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: 'Pending',\n        timestamp: Date.now()\n      };\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(submissionRecord.id, 'Success');\n\n      if(!submissionStatusCache[currentMRN]){\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if(deviceName){\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if(photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n      }, 1000);\n    } catch(e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if(e.name === 'AbortError'){\n        return;\n      }\n      if(!navigator.onLine){\n        await markSubmissionFailedDueOffline();\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n      }\n    } finally {\n      setLoading(photoOkBtn, false, 'Submit');\n    }\n  }\n\n  async function markSubmissionFailedDueOffline(){\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n    const base64DataUrl = await blobToDataURL(photoBlob);\n    const submissionRecord = {\n      id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      photoDataUrl: base64DataUrl,\n      status: 'Failed',\n      timestamp: Date.now()\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n  }\n\n  async function updateSubmissionStatusTimed(newStatus){\n    const submissions = loadSavedSubmissions();\n    let found = false;\n    for(let i = submissions.length -1; i >=0; i--){\n      const s = submissions[i];\n      if(s.status === 'Pending' && s.mrn === currentMRN){\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if(!found && newStatus === 'Failed'){\n      const base64DataUrl = await blobToDataURL(photoBlob);\n      submissions.push({\n        id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: base64DataUrl,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function blobToDataURL(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if(!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch(e){\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch(e){\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if(newStatus === 'Failed'){\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        photoDataUrl: null,\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if(dateFilterInput.value){\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n    const searchTerm = searchInput.value.trim().toLowerCase();\n    if(searchTerm) {\n      filtered = filtered.filter(sub => {\n        const deviceObj = JSON.parse(sub.device || '{}');\n        return sub.mrn.toLowerCase().includes(searchTerm) ||\n          (deviceObj.POCEquipment && deviceObj.POCEquipment.toLowerCase().includes(searchTerm));\n      });\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if(filtered.length === 0){\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', \\`Submission for MRN \\${sub.mrn}, Device: \\${(JSON.parse(sub.device).POCEquipment || '')}, Date: \\${formatDate(sub.timestamp)}, Status: \\${sub.status}\\`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if(sub.status === 'Failed'){\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if(e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if(deviceObj.Description){\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch {}\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if(submission.photoDataUrl){\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    }\n\n    if(submission.status === 'Failed'){\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if(!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch(e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if(submission.status !== 'Failed') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n      let photoBlob = dataURLtoBlob(submission.photoDataUrl);\n      if(!photoBlob) throw new Error('No photo data to upload');\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if(!res.ok) throw new Error(\\`Upload failed: \\${res.statusText}\\`);\n\n      removeSubmissionRecord(submission.id);\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n    } catch(e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function dataURLtoBlob(dataURL) {\n    if(!dataURL) return null;\n    const parts = dataURL.split(',');\n    const mime = parts[0].match(/:(.*?);/)[1];\n    const binary = atob(parts[1]);\n    let array = [];\n    for(let i=0; i<binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type:mime});\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if(idx !== -1){\n      submissions.splice(idx,1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  const searchInput = document.getElementById('search-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n  searchInput.addEventListener('input', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if(sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if(hasFailedToday){\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  initialLoad();\n\n  async function initialLoad(){\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if(hasCachedLocations){\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if(storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if(selectedLocation){\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if(hasCachedPatients){\n          patients = patients || [];\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if(storedPat){\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if(storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)){\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch(e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if(selectedPatient && selectedPatient.MRN){\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        -80
      ],
      "id": "45ce22b7-2cba-4ee1-aa88-fcfcb2508015",
      "name": "Code12"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Camera Capture & IndexedDB Image Storage</title>\n<style>\n  body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 1rem;\n    background: #f2f2f2;\n  }\n  header {\n    text-align: center;\n    margin-bottom: 1rem;\n  }\n  #camera {\n    max-width: 100%;\n    border-radius: 8px;\n    background: #000;\n    display: block;\n    margin: 0 auto 1rem;\n  }\n  #captureBtn, #showGalleryBtn {\n    display: inline-block;\n    background: #007bff;\n    color: white;\n    border: none;\n    padding: 0.6rem 1.2rem;\n    border-radius: 5px;\n    font-size: 1rem;\n    margin: 0.5rem;\n    cursor: pointer;\n    transition: background 0.3s ease;\n  }\n  #captureBtn:hover, #showGalleryBtn:hover {\n    background: #0056b3;\n  }\n  #snapshot {\n    margin: 1rem auto;\n    display: block;\n    max-width: 100%;\n    border-radius: 8px;\n    box-shadow: 0 0 5px rgba(0,0,0,0.3);\n  }\n  /* Modal styles */\n  .modal {\n    display: none;\n    position: fixed;\n    z-index: 1000;\n    padding-top: 60px;\n    left: 0;top: 0;\n    width: 100%; height: 100%;\n    overflow: auto;\n    background-color: rgba(0,0,0,0.6);\n  }\n  .modal-content {\n    background-color: #fff;\n    margin: auto;\n    padding: 0;\n    border-radius: 10px;\n    width: 90%;\n    max-width: 800px;\n    max-height: 90vh;\n    box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n    display: flex;\n    flex-direction: column;\n  }\n  .modal-header {\n    padding: 1rem 1.5rem;\n    border-bottom: 1px solid #ccc;\n    font-size: 1.25rem;\n    font-weight: bold;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  .modal-close-btn {\n    cursor: pointer;\n    font-size: 1.5rem;\n    color: #333;\n    border: none;\n    background: transparent;\n    line-height: 1;\n  }\n  .modal-body {\n    padding: 1rem 1.5rem;\n    overflow-y: auto;\n    flex: 1;\n    display: flex;\n    gap: 1rem;\n  }\n  .gallery-list {\n    flex: 1 1 250px;\n    max-width: 250px;\n    border-right: 1px solid #ddd;\n    overflow-y: auto;\n  }\n  .gallery-list ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n  .gallery-list li {\n    padding: 0.5rem;\n    border-bottom: 1px solid #eee;\n    cursor: pointer;\n    transition: background 0.2s ease;\n    font-size: 0.9rem;\n  }\n  .gallery-list li:hover {\n    background: #007bff;\n    color: white;\n  }\n  .gallery-list li.selected {\n    background: #0056b3;\n    color: white;\n  }\n  .gallery-preview {\n    flex: 2 1 auto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n  .gallery-preview img {\n    max-width: 100%;\n    max-height: 70vh;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.3);\n  }\n  .gallery-preview .info {\n    margin-top: 0.5rem;\n    font-size: 0.9rem;\n    color: #444;\n    word-break: break-all;\n    text-align: center;\n  }\n  @media (max-width: 600px) {\n    .modal-body {\n      flex-direction: column;\n    }\n    .gallery-list {\n      max-width: 100%;\n      border-right: none;\n      border-bottom: 1px solid #ddd;\n      max-height: 200px;\n    }\n    .gallery-preview {\n      max-height: 50vh;\n    }\n  }\n</style>\n</head>\n<body>\n<header>\n  <h1>Camera Capture & Image Storage</h1>\n</header>\n\n<video id=\"camera\" autoplay playsinline></video>\n<div style=\"text-align:center;\">\n  <button id=\"captureBtn\">Capture Photo</button>\n  <button id=\"showGalleryBtn\">Show Gallery</button>\n</div>\n<canvas id=\"snapshot\" style=\"display:none;\"></canvas>\n\n<!-- Modal for Gallery -->\n<div id=\"galleryModal\" class=\"modal\" aria-hidden=\"true\" role=\"dialog\" aria-labelledby=\"galleryTitle\" aria-modal=\"true\">\n  <div class=\"modal-content\">\n    <header class=\"modal-header\">\n      <span id=\"galleryTitle\">Saved Photos Gallery</span>\n      <button class=\"modal-close-btn\" aria-label=\"Close Gallery\" id=\"closeGalleryBtn\">&times;</button>\n    </header>\n    <div class=\"modal-body\">\n      <section class=\"gallery-list\" aria-label=\"List of saved photos\">\n        <ul id=\"galleryList\"></ul>\n      </section>\n      <section class=\"gallery-preview\" aria-label=\"Photo preview area\">\n        <p id=\"noSelectionText\">Select a photo from the list to view it</p>\n        <img id=\"previewImage\" alt=\"Selected photo preview\" style=\"display:none;\" />\n        <div class=\"info\" id=\"imageInfo\"></div>\n      </section>\n    </div>\n  </div>\n</div>\n\n<script>\n(() => {\n  // IndexedDB setup\n  const DB_NAME = 'PhotoCaptureDB';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'photos';\n\n  let db;\n\n  function openDB() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        db = request.result;\n        resolve(db);\n      };\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if(!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id', autoIncrement: true });\n          store.createIndex('timestamp', 'timestamp');\n        }\n      };\n    });\n  }\n\n  function addPhoto(blob) {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      const photoRecord = {\n        blob,\n        timestamp: new Date().toISOString()\n      };\n      const request = store.add(photoRecord);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  function getAllPhotos() {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const photos = [];\n      store.openCursor().onsuccess = (event) => {\n        const cursor = event.target.result;\n        if(cursor) {\n          photos.push({ id: cursor.key, ...cursor.value });\n          cursor.continue();\n        } else {\n          resolve(photos);\n        }\n      };\n      store.openCursor().onerror = (event) => reject(event.target.error);\n    });\n  }\n\n  function getPhotoById(id) {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(id);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Camera setup\n  const video = document.getElementById('camera');\n  const canvas = document.getElementById('snapshot');\n  const captureBtn = document.getElementById('captureBtn');\n  const showGalleryBtn = document.getElementById('showGalleryBtn');\n\n  // Modal elements\n  const galleryModal = document.getElementById('galleryModal');\n  const closeGalleryBtn = document.getElementById('closeGalleryBtn');\n  const galleryList = document.getElementById('galleryList');\n  const previewImage = document.getElementById('previewImage');\n  const noSelectionText = document.getElementById('noSelectionText');\n  const imageInfo = document.getElementById('imageInfo');\n\n  let currentStream = null;\n\n  async function initCamera() {\n    try {\n      currentStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' }, audio: false });\n      video.srcObject = currentStream;\n      await video.play();\n    } catch(err) {\n      alert(\"Error accessing camera: \" + err.message);\n    }\n  }\n\n  function stopCamera() {\n    if(currentStream) {\n      currentStream.getTracks().forEach(track => track.stop());\n      currentStream = null;\n    }\n  }\n\n  // Capture photo and save in IndexedDB\n  captureBtn.onclick = async () => {\n    if (!video.videoWidth || !video.videoHeight) {\n      alert(\"Camera not ready yet. Please wait...\");\n      return;\n    }\n\n    // Set canvas size to video size\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    canvas.toBlob(async (blob) => {\n      if(blob) {\n        try {\n          const id = await addPhoto(blob);\n          alert(\"Photo saved with ID: \" + id);\n        } catch (err) {\n          alert(\"Failed to save photo: \" + err.message);\n        }\n      } else {\n        alert(\"Failed to capture photo.\");\n      }\n    }, 'image/png');\n  };\n\n  // Gallery Handling\n\n  // Open modal\n  showGalleryBtn.onclick = async () => {\n    await openDB(); // Ensure DB is open\n    galleryModal.style.display = 'block';\n    galleryModal.setAttribute('aria-hidden', 'false');\n    loadGallery();\n    // Trap focus inside modal for accessibility\n    galleryModal.focus();\n  };\n\n  // Close modal\n  closeGalleryBtn.onclick = () => {\n    galleryModal.style.display = 'none';\n    galleryModal.setAttribute('aria-hidden', 'true');\n    clearGalleryPreview();\n  };\n\n  galleryModal.addEventListener('click', (e) => {\n    if(e.target === galleryModal) {\n      closeGalleryBtn.click();\n    }\n  });\n\n  // Keyboard accessibility for modal: close on Escape\n  document.addEventListener('keydown', (e) => {\n    if (galleryModal.style.display === 'block' && e.key === 'Escape') {\n      closeGalleryBtn.click();\n    }\n  });\n\n  let currentlySelectedLi = null;\n\n  function clearGalleryPreview() {\n    previewImage.src = '';\n    previewImage.style.display = 'none';\n    noSelectionText.style.display = 'block';\n    imageInfo.textContent = '';\n    if(currentlySelectedLi) {\n      currentlySelectedLi.classList.remove('selected');\n      currentlySelectedLi = null;\n    }\n  }\n\n  async function loadGallery() {\n    galleryList.innerHTML = '';\n    clearGalleryPreview();\n    try {\n      const photos = await getAllPhotos();\n      if(photos.length === 0) {\n        galleryList.innerHTML = '<li>No photos saved</li>';\n        return;\n      }\n      photos.sort((a,b) => (a.timestamp > b.timestamp ? -1 : 1));\n      photos.forEach(photo => {\n        const li = document.createElement('li');\n        li.textContent = `ID: ${photo.id}, Time: ${new Date(photo.timestamp).toLocaleString()}`;\n        li.tabIndex = 0;\n        li.dataset.photoId = photo.id;\n        li.setAttribute('role', 'button');\n        li.setAttribute('aria-pressed', 'false');\n        li.addEventListener('click', () => selectPhoto(li, photo.id));\n        li.addEventListener('keydown', (evt) => {\n          if(evt.key === 'Enter' || evt.key === ' ') {\n            evt.preventDefault();\n            selectPhoto(li, photo.id);\n          }\n        });\n        galleryList.appendChild(li);\n      });\n    } catch(err) {\n      galleryList.innerHTML = `<li>Error loading photos: ${err.message}</li>`;\n    }\n  }\n\n  async function selectPhoto(liElement, photoId) {\n    if(currentlySelectedLi) {\n      currentlySelectedLi.classList.remove('selected');\n      currentlySelectedLi.setAttribute('aria-pressed', 'false');\n    }\n    liElement.classList.add('selected');\n    liElement.setAttribute('aria-pressed', 'true');\n    currentlySelectedLi = liElement;\n\n    try {\n      const photo = await getPhotoById(photoId);\n      if(!photo || !photo.blob) {\n        alert('Image data not found or corrupted.');\n        clearGalleryPreview();\n        return;\n      }\n      const objectURL = URL.createObjectURL(photo.blob);\n      previewImage.src = objectURL;\n      previewImage.style.display = 'block';\n      noSelectionText.style.display = 'none';\n      imageInfo.textContent = `ID: ${photo.id} | Captured: ${new Date(photo.timestamp).toLocaleString()}`;\n      // Revoke objectURL after image loads to free memory\n      previewImage.onload = () => {\n        URL.revokeObjectURL(objectURL);\n      };\n    } catch(err) {\n      alert(\"Failed to load image: \" + err.message);\n      clearGalleryPreview();\n    }\n  }\n\n  // Start camera initially\n  openDB().then(() => {\n    initCamera();\n  }).catch(err => {\n    alert(\"Error initializing IndexedDB: \" + err.message);\n  });\n\n  // Clean up on page unload\n  window.addEventListener('beforeunload', () => {\n    stopCamera();\n  });\n})();\n</script>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        400,
        -140
      ],
      "id": "f399049f-a7e7-49a3-8a48-251f92ee3331",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=\n<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n  scroll-padding-bottom: 160px; /* added padding for scrolling */\n  scroll-behavior: smooth;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n  cursor: pointer; /* Make clickable */\n  position: relative;\n}\n\n/* Badge style for patient card that shows number of unique submitted devices */\n.patient-submission-badge {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  background: #dc3545;\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Gallery button: blue style similar to Patients but distinct */\n.btn-gallery {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(0,123,255, 0.6);\n  background: linear-gradient(135deg, #007bff, #004a99);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-gallery:hover {\n  background: linear-gradient(135deg, #004a99, #002c66);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close,\n#gallery-modal-close-btn {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover,\n#gallery-modal-close-btn:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n  flex: 1 0 140px;\n}\n#cancel-capture-btn:hover {\n  background: #005fcc;\n}\n\n/* New container for capture modal buttons including Cancel and Not Completed side by side */\n#capture-buttons-row {\n  display: flex;\n  justify-content: center;\n  gap: 12px;\n  width: 100%;\n  max-width: 480px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n}\n\n/* Not Completed button in capture modal - styled as red cancel style */\n#not-completed-capture-btn {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  flex: 1 0 140px;\n}\n#not-completed-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Not Completed Modal Styles */\n\n#not-completed-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n\n#not-completed-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n#not-completed-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#not-completed-modal-header h2 {\n  font-size: 1.4rem;\n  color: #b00020;\n  font-weight: 700;\n  margin: 0;\n}\n\n#not-completed-modal-close-btn {\n  background: #b00020;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 24px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#not-completed-modal-close-btn:hover {\n  background: #7a000f;\n}\n\n#not-completed-options {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 12px;\n}\n\n#not-completed-options button[data-reason] {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n}\n#not-completed-options button[data-reason]:hover {\n  background: #7a000f;\n}\n\n#not-completed-back-btn {\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n  margin-top: 8px;\n}\n#not-completed-back-btn:hover {\n  background: #005fcc;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n  position: relative; /* for badge positioning */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n/* Red X badge for Not Completed device card */\n.device-not-completed {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #b00020;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(176,0,32,0.6);\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n\n/* Added focus style to badges for accessibility */\n.device-not-completed:focus,\n.device-checked:focus {\n  outline: 2px solid #ffb3b3;\n  outline-offset: 2px;\n}\n\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  scroll-margin-bottom: 160px; /* ensure sufficient margin for scrolling */\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n  z-index: 10000; /* lower than photo-submit-loader-overlay to show loader above */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n  touch-action: manipulation;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n  touch-action: manipulation;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px #80aaff;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay, #gallery-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content, #gallery-modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay with spinner and timer for photo submit */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n  user-select:none;\n}\n\n/* Saved Submissions Panel */\n/* add scrollbar and fixed height with overflow for scroll */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n  overflow-y: auto; /* always show scroll if content overflow */\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n/* Modal for Fast Track Score */\n#fast-track-score-modal {\n  position: fixed;\n  inset: 0;\n  display: none;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#fast-track-score-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n}\n\n#fast-track-score-close {\n  position: absolute;\n  top: 8px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 20px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  transition: background 0.3s;\n  user-select:none;\n}\n#fast-track-score-close:hover {\n  background: #d72950;\n}\n\n/* New styles for disabled button with loading state */\nbutton[disabled] {\n  opacity: 0.6 !important;\n  cursor: not-allowed !important;\n  pointer-events: none !important;\n  user-select:none !important;\n}\n\n/* Gallery Modal Styles */\n#gallery-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#gallery-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 480px;\n  width: 100%;\n  max-height: 80vh;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  position: relative;\n  overflow: hidden;\n}\n\n#gallery-list {\n  overflow-y: auto;\n  flex-grow: 1;\n  display: grid;\n  gap: 8px;\n  max-height: 250px;\n  border: 1px solid #ccc;\n  padding: 8px 12px;\n  border-radius: 10px;\n}\n\n.gallery-item-button {\n  background: #f0f0f0;\n  border: 2px solid transparent;\n  border-radius: 10px;\n  padding: 8px 12px;\n  text-align: left;\n  font-weight: 600;\n  color: #003366;\n  cursor: pointer;\n  user-select: none;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.gallery-item-button:focus,\n.gallery-item-button.selected {\n  outline: none;\n  border-color: #0077ff;\n  background: #d0e6ff;\n}\n\n/* Gallery Image Preview */\n#gallery-image-preview {\n  max-height: 300px;\n  max-width: 100%;\n  border-radius: 14px;\n  background: #000;\n  object-fit: contain;\n  align-self: center;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  user-select:none;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border and click action -->\n<h1 id=\"fast-track-header\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" aria-label=\"Show today's score of unique pictures submitted\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <button id=\"patient-name-btn\" class=\"patient-btn card\" type=\"button\" aria-label=\"Select patient\" style=\"position:relative; padding-right: 40px;\">\n      <span id=\"selected-patient-name-span\">None selected</span>\n      <span id=\"patient-submission-badge\" class=\"patient-submission-badge\" aria-label=\"Number of submitted images for patient\" style=\"display:none;\">0</span>\n    </button>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n  <button id=\"show-gallery-btn\" class=\"btn-gallery\" aria-pressed=\"false\" aria-label=\"Show saved photo gallery\">Gallery</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <div id=\"capture-buttons-row\">\n    <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Back</button>\n    <button id=\"not-completed-capture-btn\" aria-label=\"Mark device as Not Completed\" type=\"button\">Not Completed</button>\n  </div>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Not Completed Options Modal -->\n<div id=\"not-completed-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Not Completed Reason Selection\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"not-completed-modal-content\" tabindex=\"0\">\n    <div id=\"not-completed-modal-header\">\n      <h2>Select Reason for Not Completed</h2>\n      <button id=\"not-completed-modal-close-btn\" aria-label=\"Close Not Completed Reason modal\" title=\"Close\">Ã—</button>\n    </div>\n    <div id=\"not-completed-options\">\n      <button data-reason=\"NC_Patient_Declined\" type=\"button\">Patient Declined</button>\n      <button data-reason=\"NC_Patient_Left\" type=\"button\">Patient Left</button>\n      <button data-reason=\"NC_Supplies_Out\" type=\"button\">Supplies Out</button>\n      <button data-reason=\"NC_Equipment_Failure\" type=\"button\">Equipment Failure</button>\n      <button id=\"not-completed-back-btn\" type=\"button\">Back</button>\n    </div>\n  </div>\n</div>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Gallery Modal for saved photos -->\n<div id=\"gallery-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Saved Photos Gallery\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"gallery-modal-content\" tabindex=\"0\">\n    <button id=\"gallery-modal-close-btn\" aria-label=\"Close gallery modal\" title=\"Close\">Ã—</button>\n    <h2>Saved Photos Gallery</h2>\n    <div id=\"gallery-list\" role=\"list\" aria-live=\"polite\" tabindex=\"0\" aria-relevant=\"additions removals\">\n      <!-- List of saved photos -->\n    </div>\n    <img id=\"gallery-image-preview\" alt=\"Selected photo preview\" aria-live=\"polite\" />\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Modal for Fast Track Today's Score -->\n<div id=\"fast-track-score-modal\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Today's Score\" tabindex=\"-1\">\n  <div id=\"fast-track-score-content\">\n    <button id=\"fast-track-score-close\" aria-label=\"Close Today's Score\">Ã—</button>\n    <div id=\"fast-track-score-text\">Loading...</div>\n  </div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- IndexedDB Photo Storage Module --- */\n\n  const DB_NAME = 'PhotoCaptureDB';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'photos';\n\n  let dbPromise = null;\n\n  function openDB() {\n    if (dbPromise) return dbPromise;\n    dbPromise = new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = () => {\n        reject(request.error || new Error('Failed to open IndexedDB'));\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n          store.createIndex('timestamp', 'timestamp');\n          store.createIndex('mrn', 'mrn');\n        }\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n    });\n    return dbPromise;\n  }\n\n  async function addPhotoRecord({ id, mrn, device, blob, timestamp }) {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const record = { id, mrn, device, blob, timestamp };\n      const putReq = store.put(record);\n      putReq.onsuccess = () => resolve(true);\n      putReq.onerror = () => reject(putReq.error || new Error('Failed to add photo record'));\n    });\n  }\n\n  async function getAllPhotoRecords() {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const allRecords = [];\n      const request = store.openCursor(null, 'prev'); // descending order of keys (id)\n      request.onsuccess = (e) => {\n        const cursor = e.target.result;\n        if (cursor) {\n          allRecords.push(cursor.value);\n          cursor.continue();\n        } else {\n          // We have all records sorted by key descending\n          // Sort by timestamp descending explicitly, if needed\n          allRecords.sort((a, b) => b.timestamp - a.timestamp);\n          resolve(allRecords);\n        }\n      };\n      request.onerror = () => reject(request.error || new Error('Failed to fetch photo records'));\n    });\n  }\n\n  async function getPhotoRecordById(id) {\n    if (!id) return null;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const req = store.get(id);\n      req.onsuccess = () => resolve(req.result || null);\n      req.onerror = () => reject(req.error || new Error('Failed to fetch photo record by id'));\n    });\n  }\n\n  async function deletePhotoRecord(id) {\n    if (!id) return;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const delReq = store.delete(id);\n      delReq.onsuccess = () => resolve(true);\n      delReq.onerror = () => reject(delReq.error || new Error('Failed to delete photo record'));\n    });\n  }\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientNameSpan = document.getElementById('selected-patient-name-span');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const patientSubmissionBadge = document.getElementById('patient-submission-badge');\n  const patientNameBtn = document.getElementById('patient-name-btn');\n\n  const fastTrackHeader = document.getElementById('fast-track-header');\n  const fastTrackScoreModal = document.getElementById('fast-track-score-modal');\n  const fastTrackScoreCloseBtn = document.getElementById('fast-track-score-close');\n  const fastTrackScoreText = document.getElementById('fast-track-score-text');\n\n  /* New Gallery Button & Modal Elements */\n  const showGalleryBtn = document.getElementById('show-gallery-btn');\n  const galleryModalOverlay = document.getElementById('gallery-modal-overlay');\n  const galleryModalContent = document.getElementById('gallery-modal-content');\n  const galleryList = document.getElementById('gallery-list');\n  const galleryImagePreview = document.getElementById('gallery-image-preview');\n  const galleryModalCloseBtn = document.getElementById('gallery-modal-close-btn');\n\n  // For submission status and not completed status cache\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses',\n  };\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  /* --- Not Completed Status Cache --- */\n  const notCompletedModalOverlay = document.getElementById('not-completed-modal-overlay');\n  const notCompletedModalContent = document.getElementById('not-completed-modal-content');\n  const notCompletedModalCloseBtn = document.getElementById('not-completed-modal-close-btn');\n  const notCompletedOptionsContainer = document.getElementById('not-completed-options');\n  const notCompletedBackBtn = document.getElementById('not-completed-back-btn');\n\n  let notCompletedStatusCache = {};\n  let submissionStatusCache = {};\n\n  /* --- Helper Functions for Loader --- */\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  /* --- Fetch appointments and process locations/patients --- */\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoader();\n    }\n    try {\n      let payload = {};\n      if (locationValue !== null && locationValue !== undefined && activeModal === 'patient') {\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if (!appointments.length) {\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if (activeModal === 'location') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if (activeModal === 'patient') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoader();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if (cached) {\n        const cachedLocations = JSON.parse(cached);\n        if (Array.isArray(cachedLocations) && cachedLocations.length) {\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if (cached) {\n        const cachedPatients = JSON.parse(cached);\n        if (Array.isArray(cachedPatients) && cachedPatients.length) {\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if (appt.Appt_Sched_Location_Descr) {\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr,\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a, b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if (!selectedLocation) {\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if (appt.MRN) {\n        if (!patientMap.has(appt.MRN)) {\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if (p.Appt_DateTime) {\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if (storedPatientJSON) {\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch { }\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if (selectedLocation && selectedPatient) {\n      selectedPatientNameSpan.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n      updatePatientSubmissionBadge(selectedPatient.MRN);\n    } else if (selectedLocation && !selectedPatient) {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    } else {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    }\n\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  function updateTimestampLastUpdate() {\n    if (selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    lastListUpdateSpan.textContent = '';\n\n    if (type === 'location') {\n      modalTitle.textContent = 'Select Location';\n      updateListBtn.style.display = 'inline-block';\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if (type === 'location') {\n      const hasCache = loadLocationsFromCache();\n\n      if (hasCache) {\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if (hasPatientsCache) {\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if (activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if (activeModal === 'location') {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if (activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch { }\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch (e) {\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate() {\n    if (activeModal === 'patient') {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if (type === 'location') {\n      items.sort((a, b) => a.label.localeCompare(b.label));\n    } else if (type === 'patient') {\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if (items.length === 0) {\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if (type === 'location') {\n        btn.textContent = item.label;\n        if (item.value === selectedLocation) {\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n\n        // Add submission badge count including both successful and Not Completed counts\n        const uniqueCount = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(item.MRN);\n        if (uniqueCount > 0) {\n          const badge = document.createElement('span');\n          badge.className = 'patient-submission-badge';\n          badge.textContent = uniqueCount;\n          btn.style.position = 'relative';\n          btn.appendChild(badge);\n        }\n\n        if (selectedPatient && item.MRN === selectedPatient.MRN) {\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', async () => {\n        if (type === 'location') {\n          if (item.value !== selectedLocation) {\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            await awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if (!selectedPatient || selectedPatient.MRN !== item.MRN) {\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  async function awaitPatientListUpdateForNewLocation() {\n    try {\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if (!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && modalOverlay.style.display === 'flex') {\n      closeModal();\n    }\n\n    if (e.key === 'Escape') {\n      if (modalDetailOverlay.style.display === 'flex') {\n        modalDetailOverlay.style.display = 'none';\n      }\n      if (photoModalOverlay.style.display === 'flex') {\n        photoModalOverlay.style.display = 'none';\n      }\n      if (galleryModalOverlay.style.display === 'flex') {\n        closeGalleryModal();\n      }\n      if (photoSubmitLoaderOverlay.style.display === 'flex') {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n      if (fastTrackScoreModal.style.display === 'flex') {\n        closeFastTrackScoreModal();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if (!selectedLocation) {\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n  const notCompletedCaptureBtn = document.getElementById('not-completed-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  /* --- Not Completed Status Cache Load/Save --- */\n  function loadNotCompletedStatusCache() {\n    try {\n      const cached = localStorage.getItem('notCompletedStatuses');\n      if (cached) {\n        notCompletedStatusCache = JSON.parse(cached) || {};\n      } else {\n        notCompletedStatusCache = {};\n      }\n    } catch (e) {\n      notCompletedStatusCache = {};\n    }\n  }\n  function saveNotCompletedStatusCache() {\n    try {\n      localStorage.setItem('notCompletedStatuses', JSON.stringify(notCompletedStatusCache));\n    } catch (e) { }\n  }\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if (cached) {\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch (e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch (e) {}\n  }\n\n  function clearChildren(el) {\n    while (el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  }\n\n  async function initializePatientDevices(mrn) {\n    if (!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ mrn })\n      });\n      if (!res.ok) throw new Error(`Server error: ${res.status}`);\n      let devices = await res.json();\n      if (!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if (currentDevices.length === 0) {\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch (e) {\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n\n    devices.sort((a, b) => {\n      if (!a.POCEquipment) return 1;\n      if (!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Show \"Not Completed\" X badge if marked so\n      if (notCompletedStatusCache[currentMRN] && notCompletedStatusCache[currentMRN][device.POCEquipment]) {\n        const xBadge = document.createElement('div');\n        xBadge.className = 'device-not-completed';\n        xBadge.title = 'Marked as Not Completed';\n        xBadge.textContent = 'âœ•';\n        card.appendChild(xBadge);\n      }\n\n      // Show \"checked\" badge if successfully submitted\n      if (submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]) {\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled when opening camera\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          const appElement = document.getElementById('app');\n          if (appElement) {\n            appElement.scrollTo({ top: appElement.scrollHeight - appElement.clientHeight + 20, behavior: 'smooth' });\n          }\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({ behavior: 'smooth', block: 'end' });\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if (cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if (videoTrack && videoTrack.getCapabilities) {\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if (capabilities.imageStabilization !== undefined) {\n          constraintsApply.imageStabilization = true;\n        }\n        if (capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')) {\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if (Object.keys(constraintsApply).length) {\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch (e) { }\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch (e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n\n    const appElement = document.getElementById('app');\n    if (appElement) {\n      appElement.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  });\n\n  // Fix capture button keyboard accessibility and drawing in requestAnimationFrame for reliability:\n  captureBtn.addEventListener('click', takePhoto);\n  captureBtn.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      takePhoto();\n    }\n  });\n\n  function takePhoto() {\n    if (!cameraStream) return;\n\n    requestAnimationFrame(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled on photo display\n      }, 'image/jpeg', 0.95);\n    });\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  // Util function for setting submit button loading state (disabled and text)\n  function setButtonLoadingState(button, isLoading) {\n    if (isLoading) {\n      button.disabled = true;\n      button.textContent = 'Submitting...'; // Change button label during loading\n      button.style.opacity = '0.6';        // Make it appear visually disabled\n      button.style.cursor = 'not-allowed';\n    } else {\n      button.disabled = false;\n      button.textContent = 'Submit';       // Restore original label\n      button.style.opacity = '';\n      button.style.cursor = 'pointer';\n    }\n  }\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions for photo submission loader and timer\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if (submissionCountdown < 0) {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        if(onTimeout && typeof onTimeout === 'function'){\n          onTimeout();\n        }\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  function stopSubmitTimeout() {\n    if (submissionTimeoutId !== null) {\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    if (!navigator.onLine) {\n      await markSubmissionFailedDueOffline();\n      return;\n    }\n\n    // Show overlay loader & disable submit button when Submit pressed\n    setButtonLoadingState(photoOkBtn, true);\n    uploadStatus.textContent = '';\n    showPhotoSubmitLoader();\n\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n      setButtonLoadingState(photoOkBtn, false);\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      photoModalOverlay.style.display = 'none';\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n    };\n\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      // Save photo blob directly in IndexedDB for gallery instead of base64 localStorage\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      const timestamp = Date.now();\n\n      const submissionRecord = {\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: 'Pending',\n        timestamp\n      };\n\n      // Save photo blob record in IndexedDB\n      await addPhotoRecord({ id, mrn: currentMRN, device: submissionRecord.device, blob: photoBlob, timestamp });\n\n      // Also save the submission status record in localStorage (without photoDataUrl)\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(id, 'Success');\n\n      if (!submissionStatusCache[currentMRN]) {\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if (photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n\n      setButtonLoadingState(photoOkBtn, false);\n\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n\n        if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n      }, 1000);\n    } catch (e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if (e.name === 'AbortError') {\n        setButtonLoadingState(photoOkBtn, false);\n        return;\n      }\n      if (!navigator.onLine) {\n        await markSubmissionFailedDueOffline();\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n      }\n      setButtonLoadingState(photoOkBtn, false);\n    }\n  }\n\n  async function markSubmissionFailedDueOffline() {\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n\n    const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    const timestamp = Date.now();\n\n    // Save photo blob record in IndexedDB\n    await addPhotoRecord({ id, mrn: currentMRN, device: JSON.stringify(selectedDevice), blob: photoBlob, timestamp });\n\n    const submissionRecord = {\n      id,\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      status: 'Failed',\n      timestamp\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n\n    setButtonLoadingState(photoOkBtn, false);\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  async function updateSubmissionStatusTimed(newStatus) {\n    const submissions = loadSavedSubmissions();\n    let found = false;\n    for (let i = submissions.length - 1; i >= 0; i--) {\n      const s = submissions[i];\n      if (s.status === 'Pending' && s.mrn === currentMRN) {\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if (!found && newStatus === 'Failed') {\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if (!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch (e) {\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed' || s.status === 'Pending');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if (newStatus === 'Failed') {\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if (dateFilterInput.value) {\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if (filtered.length === 0) {\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', `Submission for MRN ${sub.mrn}, Device: ${(JSON.parse(sub.device).POCEquipment || '')}, Date: ${formatDate(sub.timestamp)}, Status: ${sub.status}`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if (sub.status === 'Failed' || sub.status === 'Pending') {\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if (deviceObj.Description) {\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch { }\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if (typeof submission.photoDataUrl === 'string' && submission.photoDataUrl) {\n      // Legacy base64 is still shown for old records\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    } else {\n      // For new records, fetch blob from IndexedDB and show\n      getPhotoRecordById(submission.id).then(record => {\n        if (record && record.blob) {\n          const img = document.createElement('img');\n          const url = URL.createObjectURL(record.blob);\n          img.src = url;\n          img.alt = 'Captured photo of device';\n          img.style.maxWidth = '100%';\n          img.style.borderRadius = '14px';\n          img.style.marginTop = '12px';\n\n          modalDetailContent.appendChild(img);\n\n          // Revoke Object URL when modal closes\n          const onClose = () => {\n            URL.revokeObjectURL(url);\n            modalDetailOverlay.removeEventListener('click', onClose);\n            modalDetailCloseBtn.removeEventListener('click', onClose);\n          };\n          modalDetailOverlay.addEventListener('click', onClose);\n          modalDetailCloseBtn.addEventListener('click', onClose);\n        }\n      }).catch(() => { /* silently ignore */ });\n    }\n\n    if (submission.status === 'Failed' || submission.status === 'Pending') {\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if (!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch (e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if (submission.status !== 'Failed' && submission.status !== 'Pending') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n\n      const record = await getPhotoRecordById(submission.id);\n      if (!record || !record.blob) throw new Error('No photo data to upload');\n\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', record.blob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      await removeSubmissionRecord(submission.id);\n      await deletePhotoRecord(submission.id);\n\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions.splice(idx, 1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()} ${pad(dt.getHours())}:${pad(dt.getMinutes())}`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()}`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if (visible) {\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if (sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if (hasFailedToday) {\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  // New function: count both successful and Not Completed devices for patient\n  function getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn) {\n    if (!mrn) return 0;\n    let countMap = {};\n    if (submissionStatusCache[mrn]) {\n      Object.keys(submissionStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    if (notCompletedStatusCache[mrn]) {\n      Object.keys(notCompletedStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    return Object.keys(countMap).length;\n  }\n\n  function updatePatientSubmissionBadge(mrn) {\n    const count = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn);\n    if (count > 0) {\n      patientSubmissionBadge.style.display = 'inline-block';\n      patientSubmissionBadge.textContent = count;\n      patientSubmissionBadge.setAttribute('aria-label', `${count} unique devices submitted (including Not Completed) for this patient`);\n    } else {\n      patientSubmissionBadge.style.display = 'none';\n      patientSubmissionBadge.textContent = '';\n    }\n  }\n\n  async function fetchAndDisplayTodaysScore() {\n    fastTrackScoreText.textContent = 'Loading...';\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/49f9681f-32b1-4ac6-ad88-f0d35cc86176', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n      if (!res.ok) throw new Error('Network response was not OK: ' + res.status);\n      const data = await res.text();\n      fastTrackScoreText.innerHTML = data;\n    } catch (e) {\n      fastTrackScoreText.textContent = 'Failed to load score: ' + e.message;\n    }\n  }\n\n  function openFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'flex';\n    fastTrackScoreModal.focus();\n    fetchAndDisplayTodaysScore();\n  }\n\n  function closeFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'none';\n  }\n\n  fastTrackHeader.addEventListener('click', () => {\n    openFastTrackScoreModal();\n  });\n  fastTrackHeader.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      openFastTrackScoreModal();\n    }\n  });\n  fastTrackScoreCloseBtn.addEventListener('click', () => {\n    closeFastTrackScoreModal();\n  });\n\n  notCompletedCaptureBtn.addEventListener('click', () => {\n    if (!selectedDevice) {\n      alert('Please select a device first by clicking on its card.');\n      return;\n    }\n    openNotCompletedModal();\n  });\n\n  function openNotCompletedModal() {\n    // Important: Show devices section underneath as user requested (do NOT hide it)\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false; // Show devices\n\n    notCompletedModalOverlay.style.display = 'flex';\n    notCompletedModalContent.focus();\n  }\n\n  function closeNotCompletedModal() {\n    notCompletedModalOverlay.style.display = 'none';\n    // Back button from Not Completed modal goes back to devices list,\n    // NOT to camera feed as requested\n    devicesSection.hidden = false;\n    cameraSection.classList.add('hidden');\n    devicesSection.focus();\n  }\n\n  notCompletedModalCloseBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedBackBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedOptionsContainer.querySelectorAll('button[data-reason]').forEach(btn => {\n    btn.addEventListener('click', async () => {\n      const reason = btn.getAttribute('data-reason');\n      if (!selectedDevice || !currentMRN) {\n        alert('No device or patient selected.');\n        closeNotCompletedModal();\n        return;\n      }\n      await submitNotCompletedReason(reason, btn.textContent);\n      closeNotCompletedModal();\n    });\n  });\n\n  async function submitNotCompletedReason(reasonCode, reasonText) {\n    try {\n      showLoader();\n      const payload = {\n        mrn: currentMRN,\n        device: selectedDevice,\n        notCompletedReason: reasonCode\n      };\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55';\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      loadNotCompletedStatusCache();\n      if (!notCompletedStatusCache[currentMRN]) {\n        notCompletedStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        notCompletedStatusCache[currentMRN][deviceName] = reasonCode;\n        saveNotCompletedStatusCache();\n      }\n\n      loadSubmissionStatusCache();\n      // We do NOT delete success submission for this device when marking Not Completed,\n      // to comply with requirement to count Not Completed also as counts towards patient badge.\n      // So do not delete from submissionStatusCache here\n\n      renderDeviceCards(currentDevices);\n\n      alert('Not Completed reason \"' + reasonText + '\" submitted successfully.');\n\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      if (e.name === 'AbortError' || e.message.includes('NetworkError') || !navigator.onLine) {\n        alert('No response from server, saved as Failed Sends.');\n        const submissionRecord = {\n          id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n          mrn: currentMRN,\n          device: JSON.stringify(selectedDevice),\n          status: 'Failed',\n          notCompletedReason: reasonCode,\n          timestamp: Date.now()\n        };\n        addSubmissionRecord(submissionRecord);\n        renderSavedSubmissions();\n        updateShowSubmissionsButton();\n        closeNotCompletedModal();\n      } else {\n        alert('Submit failed: ' + e.message);\n      }\n    } finally {\n      hideLoader();\n    }\n  }\n\n  /* --- Gallery Modal Behavior --- */\n\n  showGalleryBtn.addEventListener('click', async () => {\n    if (galleryModalOverlay.style.display === 'flex') {\n      closeGalleryModal();\n    } else {\n      await openGalleryModal();\n    }\n  });\n\n  galleryModalCloseBtn.addEventListener('click', () => {\n    closeGalleryModal();\n  });\n\n  galleryModalOverlay.addEventListener('click', (e) => {\n    if (e.target === galleryModalOverlay) {\n      closeGalleryModal();\n    }\n  });\n\n  async function openGalleryModal() {\n    galleryModalOverlay.style.display = 'flex';\n    galleryModalContent.focus();\n\n    try {\n      showLoader();\n      const allPhotos = await getAllPhotoRecords();\n      renderGalleryList(allPhotos);\n      galleryImagePreview.src = '';\n      galleryImagePreview.alt = 'No photo selected';\n    } catch (e) {\n      alert('Failed to load saved photos from database: ' + e.message);\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function closeGalleryModal() {\n    galleryModalOverlay.style.display = 'none';\n    clearGallerySelection();\n  }\n\n  function renderGalleryList(photos) {\n    clearChildren(galleryList);\n    if (!photos || photos.length === 0) {\n      const p = document.createElement('p');\n      p.textContent = 'No photos saved.';\n      p.style.fontWeight = '600';\n      p.style.color = '#b00020';\n      galleryList.appendChild(p);\n      galleryImagePreview.src = '';\n      galleryImagePreview.alt = 'No photo saved';\n      return;\n    }\n\n    photos.sort((a, b) => b.timestamp - a.timestamp);\n\n    photos.forEach(photoRecord => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = 'gallery-item-button';\n      const date = new Date(photoRecord.timestamp);\n      const timestampStr = date.toLocaleString();\n      btn.textContent = `ID: ${photoRecord.id} â€” ${timestampStr}`;\n      btn.tabIndex = 0;\n\n      btn.addEventListener('click', () => {\n        clearGallerySelection();\n        btn.classList.add('selected');\n        showPhotoPreview(photoRecord);\n      });\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      galleryList.appendChild(btn);\n    });\n  }\n\n  function clearGallerySelection() {\n    const selectedBtn = galleryList.querySelector('.gallery-item-button.selected');\n    if (selectedBtn) selectedBtn.classList.remove('selected');\n    if (galleryImagePreview.src) {\n      URL.revokeObjectURL(galleryImagePreview.src);\n      galleryImagePreview.src = '';\n    }\n    galleryImagePreview.alt = 'No photo selected';\n  }\n\n  function showPhotoPreview(photoRecord) {\n    if (!photoRecord || !photoRecord.blob) {\n      galleryImagePreview.src = '';\n      galleryImagePreview.alt = 'Failed to load photo.';\n      return;\n    }\n    if (galleryImagePreview.src) {\n      URL.revokeObjectURL(galleryImagePreview.src);\n    }\n    const url = URL.createObjectURL(photoRecord.blob);\n    galleryImagePreview.src = url;\n    galleryImagePreview.alt = `Photo from record ID: ${photoRecord.id}`;\n  }\n\n  /* --- Initialization & Misc --- */\n\n  initialLoad();\n\n  async function initialLoad() {\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if (hasCachedLocations) {\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if (selectedLocation) {\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if (hasCachedPatients) {\n          patients = patients || [];\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch (e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if (selectedPatient && selectedPatient.MRN) {\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        480,
        160
      ],
      "id": "24000174-255d-4579-987d-ce0dba6f88a5",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `\n<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n  scroll-padding-bottom: 160px; /* added padding for scrolling */\n  scroll-behavior: smooth;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n  cursor: pointer; /* Make clickable */\n  position: relative;\n}\n\n/* Badge style for patient card that shows number of unique submitted devices */\n.patient-submission-badge {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  background: #dc3545;\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Gallery button: blue style similar to Patients but distinct */\n.btn-gallery {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(0,123,255, 0.6);\n  background: linear-gradient(135deg, #007bff, #004a99);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-gallery:hover {\n  background: linear-gradient(135deg, #004a99, #002c66);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close,\n#gallery-modal-close-btn {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover,\n#gallery-modal-close-btn:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n  flex: 1 0 140px;\n}\n#cancel-capture-btn:hover {\n  background: #005fcc;\n}\n\n/* New container for capture modal buttons including Cancel and Not Completed side by side */\n#capture-buttons-row {\n  display: flex;\n  justify-content: center;\n  gap: 12px;\n  width: 100%;\n  max-width: 480px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n}\n\n/* Not Completed button in capture modal - styled as red cancel style */\n#not-completed-capture-btn {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  flex: 1 0 140px;\n}\n#not-completed-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Not Completed Modal Styles */\n\n#not-completed-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n\n#not-completed-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n#not-completed-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#not-completed-modal-header h2 {\n  font-size: 1.4rem;\n  color: #b00020;\n  font-weight: 700;\n  margin: 0;\n}\n\n#not-completed-modal-close-btn {\n  background: #b00020;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 24px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#not-completed-modal-close-btn:hover {\n  background: #7a000f;\n}\n\n#not-completed-options {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 12px;\n}\n\n#not-completed-options button[data-reason] {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n}\n#not-completed-options button[data-reason]:hover {\n  background: #7a000f;\n}\n\n#not-completed-back-btn {\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n  margin-top: 8px;\n}\n#not-completed-back-btn:hover {\n  background: #005fcc;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n  position: relative; /* for badge positioning */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n/* Red X badge for Not Completed device card */\n.device-not-completed {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #b00020;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(176,0,32,0.6);\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n\n/* Added focus style to badges for accessibility */\n.device-not-completed:focus,\n.device-checked:focus {\n  outline: 2px solid #ffb3b3;\n  outline-offset: 2px;\n}\n\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  scroll-margin-bottom: 160px; /* ensure sufficient margin for scrolling */\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n  z-index: 10000; /* lower than photo-submit-loader-overlay to show loader above */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n  touch-action: manipulation;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n  touch-action: manipulation;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px #80aaff;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay, #gallery-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content, #gallery-modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay with spinner and timer for photo submit */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n  user-select:none;\n}\n\n/* Saved Submissions Panel */\n/* add scrollbar and fixed height with overflow for scroll */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n  overflow-y: auto; /* always show scroll if content overflow */\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n/* Modal for Fast Track Score */\n#fast-track-score-modal {\n  position: fixed;\n  inset: 0;\n  display: none;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#fast-track-score-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n}\n\n#fast-track-score-close {\n  position: absolute;\n  top: 8px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 20px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  transition: background 0.3s;\n  user-select:none;\n}\n#fast-track-score-close:hover {\n  background: #d72950;\n}\n\n/* New styles for disabled button with loading state */\nbutton[disabled] {\n  opacity: 0.6 !important;\n  cursor: not-allowed !important;\n  pointer-events: none !important;\n  user-select:none !important;\n}\n\n/* Gallery Modal Styles */\n#gallery-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#gallery-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 480px;\n  width: 100%;\n  max-height: 80vh;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  position: relative;\n  overflow: hidden;\n}\n\n#gallery-list {\n  overflow-y: auto;\n  flex-grow: 1;\n  display: grid;\n  gap: 8px;\n  max-height: 250px;\n  border: 1px solid #ccc;\n  padding: 8px 12px;\n  border-radius: 10px;\n}\n\n.gallery-item-button {\n  background: #f0f0f0;\n  border: 2px solid transparent;\n  border-radius: 10px;\n  padding: 8px 12px;\n  text-align: left;\n  font-weight: 600;\n  color: #003366;\n  cursor: pointer;\n  user-select: none;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.gallery-item-button:focus,\n.gallery-item-button.selected {\n  outline: none;\n  border-color: #0077ff;\n  background: #d0e6ff;\n}\n\n/* Gallery Image Preview */\n#gallery-image-preview {\n  max-height: 300px;\n  max-width: 100%;\n  border-radius: 14px;\n  background: #000;\n  object-fit: contain;\n  align-self: center;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  user-select:none;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border and click action -->\n<h1 id=\"fast-track-header\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" aria-label=\"Show today's score of unique pictures submitted\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <button id=\"patient-name-btn\" class=\"patient-btn card\" type=\"button\" aria-label=\"Select patient\" style=\"position:relative; padding-right: 40px;\">\n      <span id=\"selected-patient-name-span\">None selected</span>\n      <span id=\"patient-submission-badge\" class=\"patient-submission-badge\" aria-label=\"Number of submitted images for patient\" style=\"display:none;\">0</span>\n    </button>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n  <button id=\"show-gallery-btn\" class=\"btn-gallery\" aria-pressed=\"false\" aria-label=\"Show saved photo gallery\">Gallery</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <div id=\"capture-buttons-row\">\n    <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Back</button>\n    <button id=\"not-completed-capture-btn\" aria-label=\"Mark device as Not Completed\" type=\"button\">Not Completed</button>\n  </div>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Not Completed Options Modal -->\n<div id=\"not-completed-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Not Completed Reason Selection\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"not-completed-modal-content\" tabindex=\"0\">\n    <div id=\"not-completed-modal-header\">\n      <h2>Select Reason for Not Completed</h2>\n      <button id=\"not-completed-modal-close-btn\" aria-label=\"Close Not Completed Reason modal\" title=\"Close\">Ã—</button>\n    </div>\n    <div id=\"not-completed-options\">\n      <button data-reason=\"NC_Patient_Declined\" type=\"button\">Patient Declined</button>\n      <button data-reason=\"NC_Patient_Left\" type=\"button\">Patient Left</button>\n      <button data-reason=\"NC_Supplies_Out\" type=\"button\">Supplies Out</button>\n      <button data-reason=\"NC_Equipment_Failure\" type=\"button\">Equipment Failure</button>\n      <button id=\"not-completed-back-btn\" type=\"button\">Back</button>\n    </div>\n  </div>\n</div>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Gallery Modal for saved photos -->\n<div id=\"gallery-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Saved Photos Gallery\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"gallery-modal-content\" tabindex=\"0\">\n    <button id=\"gallery-modal-close-btn\" aria-label=\"Close gallery modal\" title=\"Close\">Ã—</button>\n    <h2>Saved Photos Gallery</h2>\n    <div id=\"gallery-list\" role=\"list\" aria-live=\"polite\" tabindex=\"0\" aria-relevant=\"additions removals\">\n      <!-- List of saved photos -->\n    </div>\n    <img id=\"gallery-image-preview\" alt=\"Selected photo preview\" aria-live=\"polite\" />\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Modal for Fast Track Today's Score -->\n<div id=\"fast-track-score-modal\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Today's Score\" tabindex=\"-1\">\n  <div id=\"fast-track-score-content\">\n    <button id=\"fast-track-score-close\" aria-label=\"Close Today's Score\">Ã—</button>\n    <div id=\"fast-track-score-text\">Loading...</div>\n  </div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- IndexedDB Photo Storage Module --- */\n\n  const DB_NAME = 'PhotoCaptureDB';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'photos';\n\n  let dbPromise = null;\n\n  function openDB() {\n    if (dbPromise) return dbPromise;\n    dbPromise = new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = () => {\n        reject(request.error || new Error('Failed to open IndexedDB'));\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n          store.createIndex('timestamp', 'timestamp');\n          store.createIndex('mrn', 'mrn');\n        }\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n    });\n    return dbPromise;\n  }\n\n  async function addPhotoRecord({ id, mrn, device, blob, timestamp }) {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const record = { id, mrn, device, blob, timestamp };\n      const putReq = store.put(record);\n      putReq.onsuccess = () => resolve(true);\n      putReq.onerror = () => reject(putReq.error || new Error('Failed to add photo record'));\n    });\n  }\n\n  async function getAllPhotoRecords() {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const allRecords = [];\n      const request = store.openCursor(null, 'prev'); // descending order of keys (id)\n      request.onsuccess = (e) => {\n        const cursor = e.target.result;\n        if (cursor) {\n          allRecords.push(cursor.value);\n          cursor.continue();\n        } else {\n          // We have all records sorted by key descending\n          // Sort by timestamp descending explicitly, if needed\n          allRecords.sort((a, b) => b.timestamp - a.timestamp);\n          resolve(allRecords);\n        }\n      };\n      request.onerror = () => reject(request.error || new Error('Failed to fetch photo records'));\n    });\n  }\n\n  async function getPhotoRecordById(id) {\n    if (!id) return null;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const req = store.get(id);\n      req.onsuccess = () => resolve(req.result || null);\n      req.onerror = () => reject(req.error || new Error('Failed to fetch photo record by id'));\n    });\n  }\n\n  async function deletePhotoRecord(id) {\n    if (!id) return;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const delReq = store.delete(id);\n      delReq.onsuccess = () => resolve(true);\n      delReq.onerror = () => reject(delReq.error || new Error('Failed to delete photo record'));\n    });\n  }\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientNameSpan = document.getElementById('selected-patient-name-span');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const patientSubmissionBadge = document.getElementById('patient-submission-badge');\n  const patientNameBtn = document.getElementById('patient-name-btn');\n\n  const fastTrackHeader = document.getElementById('fast-track-header');\n  const fastTrackScoreModal = document.getElementById('fast-track-score-modal');\n  const fastTrackScoreCloseBtn = document.getElementById('fast-track-score-close');\n  const fastTrackScoreText = document.getElementById('fast-track-score-text');\n\n  /* New Gallery Button & Modal Elements */\n  const showGalleryBtn = document.getElementById('show-gallery-btn');\n  const galleryModalOverlay = document.getElementById('gallery-modal-overlay');\n  const galleryModalContent = document.getElementById('gallery-modal-content');\n  const galleryList = document.getElementById('gallery-list');\n  const galleryImagePreview = document.getElementById('gallery-image-preview');\n  const galleryModalCloseBtn = document.getElementById('gallery-modal-close-btn');\n\n  // For submission status and not completed status cache\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses',\n  };\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  /* --- Not Completed Status Cache --- */\n  const notCompletedModalOverlay = document.getElementById('not-completed-modal-overlay');\n  const notCompletedModalContent = document.getElementById('not-completed-modal-content');\n  const notCompletedModalCloseBtn = document.getElementById('not-completed-modal-close-btn');\n  const notCompletedOptionsContainer = document.getElementById('not-completed-options');\n  const notCompletedBackBtn = document.getElementById('not-completed-back-btn');\n\n  let notCompletedStatusCache = {};\n  let submissionStatusCache = {};\n\n  /* --- Helper Functions for Loader --- */\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  /* --- Fetch appointments and process locations/patients --- */\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoader();\n    }\n    try {\n      let payload = {};\n      if (locationValue !== null && locationValue !== undefined && activeModal === 'patient') {\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if (!appointments.length) {\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if (activeModal === 'location') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if (activeModal === 'patient') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoader();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if (cached) {\n        const cachedLocations = JSON.parse(cached);\n        if (Array.isArray(cachedLocations) && cachedLocations.length) {\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if (cached) {\n        const cachedPatients = JSON.parse(cached);\n        if (Array.isArray(cachedPatients) && cachedPatients.length) {\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if (appt.Appt_Sched_Location_Descr) {\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr,\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a, b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if (!selectedLocation) {\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if (appt.MRN) {\n        if (!patientMap.has(appt.MRN)) {\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if (p.Appt_DateTime) {\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if (storedPatientJSON) {\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch { }\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if (selectedLocation && selectedPatient) {\n      selectedPatientNameSpan.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n      updatePatientSubmissionBadge(selectedPatient.MRN);\n    } else if (selectedLocation && !selectedPatient) {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    } else {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    }\n\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  function updateTimestampLastUpdate() {\n    if (selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    lastListUpdateSpan.textContent = '';\n\n    if (type === 'location') {\n      modalTitle.textContent = 'Select Location';\n      updateListBtn.style.display = 'inline-block';\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if (type === 'location') {\n      const hasCache = loadLocationsFromCache();\n\n      if (hasCache) {\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if (hasPatientsCache) {\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if (activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if (activeModal === 'location') {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if (activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch { }\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch (e) {\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate() {\n    if (activeModal === 'patient') {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if (type === 'location') {\n      items.sort((a, b) => a.label.localeCompare(b.label));\n    } else if (type === 'patient') {\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if (items.length === 0) {\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if (type === 'location') {\n        btn.textContent = item.label;\n        if (item.value === selectedLocation) {\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n\n        // Add submission badge count including both successful and Not Completed counts\n        const uniqueCount = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(item.MRN);\n        if (uniqueCount > 0) {\n          const badge = document.createElement('span');\n          badge.className = 'patient-submission-badge';\n          badge.textContent = uniqueCount;\n          btn.style.position = 'relative';\n          btn.appendChild(badge);\n        }\n\n        if (selectedPatient && item.MRN === selectedPatient.MRN) {\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', async () => {\n        if (type === 'location') {\n          if (item.value !== selectedLocation) {\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            await awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if (!selectedPatient || selectedPatient.MRN !== item.MRN) {\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  async function awaitPatientListUpdateForNewLocation() {\n    try {\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if (!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && modalOverlay.style.display === 'flex') {\n      closeModal();\n    }\n\n    if (e.key === 'Escape') {\n      if (modalDetailOverlay.style.display === 'flex') {\n        modalDetailOverlay.style.display = 'none';\n      }\n      if (photoModalOverlay.style.display === 'flex') {\n        photoModalOverlay.style.display = 'none';\n      }\n      if (galleryModalOverlay.style.display === 'flex') {\n        closeGalleryModal();\n      }\n      if (photoSubmitLoaderOverlay.style.display === 'flex') {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n      if (fastTrackScoreModal.style.display === 'flex') {\n        closeFastTrackScoreModal();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if (!selectedLocation) {\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n  const notCompletedCaptureBtn = document.getElementById('not-completed-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  /* --- Not Completed Status Cache Load/Save --- */\n  function loadNotCompletedStatusCache() {\n    try {\n      const cached = localStorage.getItem('notCompletedStatuses');\n      if (cached) {\n        notCompletedStatusCache = JSON.parse(cached) || {};\n      } else {\n        notCompletedStatusCache = {};\n      }\n    } catch (e) {\n      notCompletedStatusCache = {};\n    }\n  }\n  function saveNotCompletedStatusCache() {\n    try {\n      localStorage.setItem('notCompletedStatuses', JSON.stringify(notCompletedStatusCache));\n    } catch (e) { }\n  }\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if (cached) {\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch (e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch (e) {}\n  }\n\n  function clearChildren(el) {\n    while (el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  }\n\n  async function initializePatientDevices(mrn) {\n    if (!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ mrn })\n      });\n      if (!res.ok) throw new Error(`Server error: ${res.status}`);\n      let devices = await res.json();\n      if (!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if (currentDevices.length === 0) {\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch (e) {\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n\n    devices.sort((a, b) => {\n      if (!a.POCEquipment) return 1;\n      if (!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Show \"Not Completed\" X badge if marked so\n      if (notCompletedStatusCache[currentMRN] && notCompletedStatusCache[currentMRN][device.POCEquipment]) {\n        const xBadge = document.createElement('div');\n        xBadge.className = 'device-not-completed';\n        xBadge.title = 'Marked as Not Completed';\n        xBadge.textContent = 'âœ•';\n        card.appendChild(xBadge);\n      }\n\n      // Show \"checked\" badge if successfully submitted\n      if (submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]) {\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled when opening camera\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          const appElement = document.getElementById('app');\n          if (appElement) {\n            appElement.scrollTo({ top: appElement.scrollHeight - appElement.clientHeight + 20, behavior: 'smooth' });\n          }\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({ behavior: 'smooth', block: 'end' });\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if (cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if (videoTrack && videoTrack.getCapabilities) {\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if (capabilities.imageStabilization !== undefined) {\n          constraintsApply.imageStabilization = true;\n        }\n        if (capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')) {\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if (Object.keys(constraintsApply).length) {\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch (e) { }\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch (e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n\n    const appElement = document.getElementById('app');\n    if (appElement) {\n      appElement.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  });\n\n  // Fix capture button keyboard accessibility and drawing in requestAnimationFrame for reliability:\n  captureBtn.addEventListener('click', takePhoto);\n  captureBtn.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      takePhoto();\n    }\n  });\n\n  function takePhoto() {\n    if (!cameraStream) return;\n\n    requestAnimationFrame(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled on photo display\n      }, 'image/jpeg', 0.95);\n    });\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  // Util function for setting submit button loading state (disabled and text)\n  function setButtonLoadingState(button, isLoading) {\n    if (isLoading) {\n      button.disabled = true;\n      button.textContent = 'Submitting...'; // Change button label during loading\n      button.style.opacity = '0.6';        // Make it appear visually disabled\n      button.style.cursor = 'not-allowed';\n    } else {\n      button.disabled = false;\n      button.textContent = 'Submit';       // Restore original label\n      button.style.opacity = '';\n      button.style.cursor = 'pointer';\n    }\n  }\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions for photo submission loader and timer\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if (submissionCountdown < 0) {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        if(onTimeout && typeof onTimeout === 'function'){\n          onTimeout();\n        }\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  function stopSubmitTimeout() {\n    if (submissionTimeoutId !== null) {\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    if (!navigator.onLine) {\n      await markSubmissionFailedDueOffline();\n      return;\n    }\n\n    // Show overlay loader & disable submit button when Submit pressed\n    setButtonLoadingState(photoOkBtn, true);\n    uploadStatus.textContent = '';\n    showPhotoSubmitLoader();\n\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n      setButtonLoadingState(photoOkBtn, false);\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      photoModalOverlay.style.display = 'none';\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n    };\n\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      // Save photo blob directly in IndexedDB for gallery instead of base64 localStorage\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      const timestamp = Date.now();\n\n      const submissionRecord = {\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: 'Pending',\n        timestamp\n      };\n\n      // Save photo blob record in IndexedDB\n      await addPhotoRecord({ id, mrn: currentMRN, device: submissionRecord.device, blob: photoBlob, timestamp });\n\n      // Also save the submission status record in localStorage (without photoDataUrl)\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(id, 'Success');\n\n      if (!submissionStatusCache[currentMRN]) {\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if (photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n\n      setButtonLoadingState(photoOkBtn, false);\n\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n\n        if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n      }, 1000);\n    } catch (e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if (e.name === 'AbortError') {\n        setButtonLoadingState(photoOkBtn, false);\n        return;\n      }\n      if (!navigator.onLine) {\n        await markSubmissionFailedDueOffline();\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n      }\n      setButtonLoadingState(photoOkBtn, false);\n    }\n  }\n\n  async function markSubmissionFailedDueOffline() {\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n\n    const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    const timestamp = Date.now();\n\n    // Save photo blob record in IndexedDB\n    await addPhotoRecord({ id, mrn: currentMRN, device: JSON.stringify(selectedDevice), blob: photoBlob, timestamp });\n\n    const submissionRecord = {\n      id,\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      status: 'Failed',\n      timestamp\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n\n    setButtonLoadingState(photoOkBtn, false);\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  async function updateSubmissionStatusTimed(newStatus) {\n    const submissions = loadSavedSubmissions();\n    let found = false;\n    for (let i = submissions.length - 1; i >= 0; i--) {\n      const s = submissions[i];\n      if (s.status === 'Pending' && s.mrn === currentMRN) {\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if (!found && newStatus === 'Failed') {\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if (!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch (e) {\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed' || s.status === 'Pending');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if (newStatus === 'Failed') {\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if (dateFilterInput.value) {\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if (filtered.length === 0) {\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', `Submission for MRN ${sub.mrn}, Device: ${(JSON.parse(sub.device).POCEquipment || '')}, Date: ${formatDate(sub.timestamp)}, Status: ${sub.status}`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if (sub.status === 'Failed' || sub.status === 'Pending') {\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if (deviceObj.Description) {\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch { }\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if (typeof submission.photoDataUrl === 'string' && submission.photoDataUrl) {\n      // Legacy base64 is still shown for old records\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    } else {\n      // For new records, fetch blob from IndexedDB and show\n      getPhotoRecordById(submission.id).then(record => {\n        if (record && record.blob) {\n          const img = document.createElement('img');\n          const url = URL.createObjectURL(record.blob);\n          img.src = url;\n          img.alt = 'Captured photo of device';\n          img.style.maxWidth = '100%';\n          img.style.borderRadius = '14px';\n          img.style.marginTop = '12px';\n\n          modalDetailContent.appendChild(img);\n\n          // Revoke Object URL when modal closes\n          const onClose = () => {\n            URL.revokeObjectURL(url);\n            modalDetailOverlay.removeEventListener('click', onClose);\n            modalDetailCloseBtn.removeEventListener('click', onClose);\n          };\n          modalDetailOverlay.addEventListener('click', onClose);\n          modalDetailCloseBtn.addEventListener('click', onClose);\n        }\n      }).catch(() => { /* silently ignore */ });\n    }\n\n    if (submission.status === 'Failed' || submission.status === 'Pending') {\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if (!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch (e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if (submission.status !== 'Failed' && submission.status !== 'Pending') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n\n      const record = await getPhotoRecordById(submission.id);\n      if (!record || !record.blob) throw new Error('No photo data to upload');\n\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', record.blob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      await removeSubmissionRecord(submission.id);\n      await deletePhotoRecord(submission.id);\n\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions.splice(idx, 1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()} ${pad(dt.getHours())}:${pad(dt.getMinutes())}`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()}`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if (visible) {\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if (sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if (hasFailedToday) {\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  // New function: count both successful and Not Completed devices for patient\n  function getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn) {\n    if (!mrn) return 0;\n    let countMap = {};\n    if (submissionStatusCache[mrn]) {\n      Object.keys(submissionStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    if (notCompletedStatusCache[mrn]) {\n      Object.keys(notCompletedStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    return Object.keys(countMap).length;\n  }\n\n  function updatePatientSubmissionBadge(mrn) {\n    const count = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn);\n    if (count > 0) {\n      patientSubmissionBadge.style.display = 'inline-block';\n      patientSubmissionBadge.textContent = count;\n      patientSubmissionBadge.setAttribute('aria-label', `${count} unique devices submitted (including Not Completed) for this patient`);\n    } else {\n      patientSubmissionBadge.style.display = 'none';\n      patientSubmissionBadge.textContent = '';\n    }\n  }\n\n  async function fetchAndDisplayTodaysScore() {\n    fastTrackScoreText.textContent = 'Loading...';\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/49f9681f-32b1-4ac6-ad88-f0d35cc86176', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n      if (!res.ok) throw new Error('Network response was not OK: ' + res.status);\n      const data = await res.text();\n      fastTrackScoreText.innerHTML = data;\n    } catch (e) {\n      fastTrackScoreText.textContent = 'Failed to load score: ' + e.message;\n    }\n  }\n\n  function openFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'flex';\n    fastTrackScoreModal.focus();\n    fetchAndDisplayTodaysScore();\n  }\n\n  function closeFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'none';\n  }\n\n  fastTrackHeader.addEventListener('click', () => {\n    openFastTrackScoreModal();\n  });\n  fastTrackHeader.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      openFastTrackScoreModal();\n    }\n  });\n  fastTrackScoreCloseBtn.addEventListener('click', () => {\n    closeFastTrackScoreModal();\n  });\n\n  notCompletedCaptureBtn.addEventListener('click', () => {\n    if (!selectedDevice) {\n      alert('Please select a device first by clicking on its card.');\n      return;\n    }\n    openNotCompletedModal();\n  });\n\n  function openNotCompletedModal() {\n    // Important: Show devices section underneath as user requested (do NOT hide it)\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false; // Show devices\n\n    notCompletedModalOverlay.style.display = 'flex';\n    notCompletedModalContent.focus();\n  }\n\n  function closeNotCompletedModal() {\n    notCompletedModalOverlay.style.display = 'none';\n    // Back button from Not Completed modal goes back to devices list,\n    // NOT to camera feed as requested\n    devicesSection.hidden = false;\n    cameraSection.classList.add('hidden');\n    devicesSection.focus();\n  }\n\n  notCompletedModalCloseBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedBackBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedOptionsContainer.querySelectorAll('button[data-reason]').forEach(btn => {\n    btn.addEventListener('click', async () => {\n      const reason = btn.getAttribute('data-reason');\n      if (!selectedDevice || !currentMRN) {\n        alert('No device or patient selected.');\n        closeNotCompletedModal();\n        return;\n      }\n      await submitNotCompletedReason(reason, btn.textContent);\n      closeNotCompletedModal();\n    });\n  });\n\n  async function submitNotCompletedReason(reasonCode, reasonText) {\n    try {\n      showLoader();\n      const payload = {\n        mrn: currentMRN,\n        device: selectedDevice,\n        notCompletedReason: reasonCode\n      };\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55';\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      loadNotCompletedStatusCache();\n      if (!notCompletedStatusCache[currentMRN]) {\n        notCompletedStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        notCompletedStatusCache[currentMRN][deviceName] = reasonCode;\n        saveNotCompletedStatusCache();\n      }\n\n      loadSubmissionStatusCache();\n      // We do NOT delete success submission for this device when marking Not Completed,\n      // to comply with requirement to count Not Completed also as counts towards patient badge.\n      // So do not delete from submissionStatusCache here\n\n      renderDeviceCards(currentDevices);\n\n      alert('Not Completed reason \"' + reasonText + '\" submitted successfully.');\n\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      if (e.name === 'AbortError' || e.message.includes('NetworkError') || !navigator.onLine) {\n        alert('No response from server, saved as Failed Sends.');\n        const submissionRecord = {\n          id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n          mrn: currentMRN,\n          device: JSON.stringify(selectedDevice),\n          status: 'Failed',\n          notCompletedReason: reasonCode,\n          timestamp: Date.now()\n        };\n        addSubmissionRecord(submissionRecord);\n        renderSavedSubmissions();\n        updateShowSubmissionsButton();\n        closeNotCompletedModal();\n      } else {\n        alert('Submit failed: ' + e.message);\n      }\n    } finally {\n      hideLoader();\n    }\n  }\n\n  /* --- Gallery Modal Behavior --- */\n\n  showGalleryBtn.addEventListener('click', async () => {\n    if (galleryModalOverlay.style.display === 'flex') {\n      closeGalleryModal();\n    } else {\n      await openGalleryModal();\n    }\n  });\n\n  galleryModalCloseBtn.addEventListener('click', () => {\n    closeGalleryModal();\n  });\n\n  galleryModalOverlay.addEventListener('click', (e) => {\n    if (e.target === galleryModalOverlay) {\n      closeGalleryModal();\n    }\n  });\n\n  async function openGalleryModal() {\n    galleryModalOverlay.style.display = 'flex';\n    galleryModalContent.focus();\n\n    try {\n      showLoader();\n      const allPhotos = await getAllPhotoRecords();\n      renderGalleryList(allPhotos);\n      galleryImagePreview.src = '';\n      galleryImagePreview.alt = 'No photo selected';\n    } catch (e) {\n      alert('Failed to load saved photos from database: ' + e.message);\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function closeGalleryModal() {\n    galleryModalOverlay.style.display = 'none';\n    clearGallerySelection();\n  }\n\n  function renderGalleryList(photos) {\n    clearChildren(galleryList);\n    if (!photos || photos.length === 0) {\n      const p = document.createElement('p');\n      p.textContent = 'No photos saved.';\n      p.style.fontWeight = '600';\n      p.style.color = '#b00020';\n      galleryList.appendChild(p);\n      galleryImagePreview.src = '';\n      galleryImagePreview.alt = 'No photo saved';\n      return;\n    }\n\n    photos.sort((a, b) => b.timestamp - a.timestamp);\n\n    photos.forEach(photoRecord => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = 'gallery-item-button';\n      const date = new Date(photoRecord.timestamp);\n      const timestampStr = date.toLocaleString();\n      btn.textContent = `ID: ${photoRecord.id} â€” ${timestampStr}`;\n      btn.tabIndex = 0;\n\n      btn.addEventListener('click', () => {\n        clearGallerySelection();\n        btn.classList.add('selected');\n        showPhotoPreview(photoRecord);\n      });\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      galleryList.appendChild(btn);\n    });\n  }\n\n  function clearGallerySelection() {\n    const selectedBtn = galleryList.querySelector('.gallery-item-button.selected');\n    if (selectedBtn) selectedBtn.classList.remove('selected');\n    if (galleryImagePreview.src) {\n      URL.revokeObjectURL(galleryImagePreview.src);\n      galleryImagePreview.src = '';\n    }\n    galleryImagePreview.alt = 'No photo selected';\n  }\n\n  function showPhotoPreview(photoRecord) {\n    if (!photoRecord || !photoRecord.blob) {\n      galleryImagePreview.src = '';\n      galleryImagePreview.alt = 'Failed to load photo.';\n      return;\n    }\n    if (galleryImagePreview.src) {\n      URL.revokeObjectURL(galleryImagePreview.src);\n    }\n    const url = URL.createObjectURL(photoRecord.blob);\n    galleryImagePreview.src = url;\n    galleryImagePreview.alt = `Photo from record ID: ${photoRecord.id}`;\n  }\n\n  /* --- Initialization & Misc --- */\n\n  initialLoad();\n\n  async function initialLoad() {\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if (hasCachedLocations) {\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if (selectedLocation) {\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if (hasCachedPatients) {\n          patients = patients || [];\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch (e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if (selectedPatient && selectedPatient.MRN) {\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>\n`\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1380,
        680
      ],
      "id": "9d80f681-96f5-4a32-ab26-a5bac00f5590",
      "name": "Code13"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=\n<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n  scroll-padding-bottom: 160px; /* added padding for scrolling */\n  scroll-behavior: smooth;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n  cursor: pointer; /* Make clickable */\n  position: relative;\n}\n\n/* Badge style for patient card that shows number of unique submitted devices */\n.patient-submission-badge {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  background: #dc3545;\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Gallery button: blue style similar to Patients but distinct */\n.btn-gallery {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(0,123,255, 0.6);\n  background: linear-gradient(135deg, #007bff, #004a99);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-gallery:hover {\n  background: linear-gradient(135deg, #004a99, #002c66);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close,\n#gallery-modal-close-btn {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover,\n#gallery-modal-close-btn:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n  flex: 1 0 140px;\n}\n#cancel-capture-btn:hover {\n  background: #005fcc;\n}\n\n/* New container for capture modal buttons including Cancel and Not Completed side by side */\n#capture-buttons-row {\n  display: flex;\n  justify-content: center;\n  gap: 12px;\n  width: 100%;\n  max-width: 480px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n}\n\n/* Not Completed button in capture modal - styled as red cancel style */\n#not-completed-capture-btn {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  flex: 1 0 140px;\n}\n#not-completed-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Not Completed Modal Styles */\n\n#not-completed-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n\n#not-completed-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n#not-completed-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#not-completed-modal-header h2 {\n  font-size: 1.4rem;\n  color: #b00020;\n  font-weight: 700;\n  margin: 0;\n}\n\n#not-completed-modal-close-btn {\n  background: #b00020;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 24px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#not-completed-modal-close-btn:hover {\n  background: #7a000f;\n}\n\n#not-completed-options {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 12px;\n}\n\n#not-completed-options button[data-reason] {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n}\n#not-completed-options button[data-reason]:hover {\n  background: #7a000f;\n}\n\n#not-completed-back-btn {\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n  margin-top: 8px;\n}\n#not-completed-back-btn:hover {\n  background: #005fcc;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n  position: relative; /* for badge positioning */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n/* Red X badge for Not Completed device card */\n.device-not-completed {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #b00020;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(176,0,32,0.6);\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n\n/* Added focus style to badges for accessibility */\n.device-not-completed:focus,\n.device-checked:focus {\n  outline: 2px solid #ffb3b3;\n  outline-offset: 2px;\n}\n\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  scroll-margin-bottom: 160px; /* ensure sufficient margin for scrolling */\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n  z-index: 10000; /* lower than photo-submit-loader-overlay to show loader above */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n  touch-action: manipulation;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n  touch-action: manipulation;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px #80aaff;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay, #gallery-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content, #gallery-modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay with spinner and timer for photo submit */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n  user-select:none;\n}\n\n/* Saved Submissions Panel */\n/* add scrollbar and fixed height with overflow for scroll */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n  overflow-y: auto; /* always show scroll if content overflow */\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n/* Modal for Fast Track Score */\n#fast-track-score-modal {\n  position: fixed;\n  inset: 0;\n  display: none;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#fast-track-score-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n}\n\n#fast-track-score-close {\n  position: absolute;\n  top: 8px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 20px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  transition: background 0.3s;\n  user-select:none;\n}\n#fast-track-score-close:hover {\n  background: #d72950;\n}\n\n/* New styles for disabled button with loading state */\nbutton[disabled] {\n  opacity: 0.6 !important;\n  cursor: not-allowed !important;\n  pointer-events: none !important;\n  user-select:none !important;\n}\n\n/* Gallery Modal Styles */\n#gallery-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#gallery-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 480px;\n  width: 100%;\n  max-height: 80vh;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  position: relative;\n  overflow: hidden;\n}\n\n#gallery-list {\n  overflow-y: auto;\n  flex-grow: 1;\n  display: grid;\n  gap: 8px;\n  max-height: 250px;\n  border: 1px solid #ccc;\n  padding: 8px 12px;\n  border-radius: 10px;\n}\n\n.gallery-item-button {\n  background: #f0f0f0;\n  border: 2px solid transparent;\n  border-radius: 10px;\n  padding: 8px 12px;\n  text-align: left;\n  font-weight: 600;\n  color: #003366;\n  cursor: pointer;\n  user-select: none;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.gallery-item-button:focus,\n.gallery-item-button.selected {\n  outline: none;\n  border-color: #0077ff;\n  background: #d0e6ff;\n}\n\n/* Gallery Image Preview */\n#gallery-image-preview {\n  max-height: 300px;\n  max-width: 100%;\n  border-radius: 14px;\n  background: #000;\n  object-fit: contain;\n  align-self: center;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  user-select:none;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border and click action -->\n<h1 id=\"fast-track-header\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" aria-label=\"Show today's score of unique pictures submitted\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <button id=\"patient-name-btn\" class=\"patient-btn card\" type=\"button\" aria-label=\"Select patient\" style=\"position:relative; padding-right: 40px;\">\n      <span id=\"selected-patient-name-span\">None selected</span>\n      <span id=\"patient-submission-badge\" class=\"patient-submission-badge\" aria-label=\"Number of submitted images for patient\" style=\"display:none;\">0</span>\n    </button>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n  <button id=\"show-gallery-btn\" class=\"btn-gallery\" aria-pressed=\"false\" aria-label=\"Show saved photo gallery\">Gallery</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <div id=\"capture-buttons-row\">\n    <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Back</button>\n    <button id=\"not-completed-capture-btn\" aria-label=\"Mark device as Not Completed\" type=\"button\">Not Completed</button>\n  </div>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Not Completed Options Modal -->\n<div id=\"not-completed-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Not Completed Reason Selection\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"not-completed-modal-content\" tabindex=\"0\">\n    <div id=\"not-completed-modal-header\">\n      <h2>Select Reason for Not Completed</h2>\n      <button id=\"not-completed-modal-close-btn\" aria-label=\"Close Not Completed Reason modal\" title=\"Close\">Ã—</button>\n    </div>\n    <div id=\"not-completed-options\">\n      <button data-reason=\"NC_Patient_Declined\" type=\"button\">Patient Declined</button>\n      <button data-reason=\"NC_Patient_Left\" type=\"button\">Patient Left</button>\n      <button data-reason=\"NC_Supplies_Out\" type=\"button\">Supplies Out</button>\n      <button data-reason=\"NC_Equipment_Failure\" type=\"button\">Equipment Failure</button>\n      <button id=\"not-completed-back-btn\" type=\"button\">Back</button>\n    </div>\n  </div>\n</div>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Gallery Modal for saved photos -->\n<div id=\"gallery-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Saved Photos Gallery\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"gallery-modal-content\" tabindex=\"0\">\n    <button id=\"gallery-modal-close-btn\" aria-label=\"Close gallery modal\" title=\"Close\">Ã—</button>\n    <h2>Saved Photos Gallery</h2>\n    <div id=\"gallery-list\" role=\"list\" aria-live=\"polite\" tabindex=\"0\" aria-relevant=\"additions removals\">\n      <!-- List of saved photos -->\n    </div>\n    <img id=\"gallery-image-preview\" alt=\"Selected photo preview\" aria-live=\"polite\" />\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Modal for Fast Track Today's Score -->\n<div id=\"fast-track-score-modal\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Today's Score\" tabindex=\"-1\">\n  <div id=\"fast-track-score-content\">\n    <button id=\"fast-track-score-close\" aria-label=\"Close Today's Score\">Ã—</button>\n    <div id=\"fast-track-score-text\">Loading...</div>\n  </div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- IndexedDB Photo Storage Module --- */\n\n  const DB_NAME = 'PhotoCaptureDB';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'photos';\n\n  let dbPromise = null;\n\n  function openDB() {\n    if (dbPromise) return dbPromise;\n    dbPromise = new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = () => {\n        reject(request.error || new Error('Failed to open IndexedDB'));\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n          store.createIndex('timestamp', 'timestamp');\n          store.createIndex('mrn', 'mrn');\n        }\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n    });\n    return dbPromise;\n  }\n\n  async function addPhotoRecord({ id, mrn, device, blob, timestamp }) {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const record = { id, mrn, device, blob, timestamp };\n      const putReq = store.put(record);\n      putReq.onsuccess = () => resolve(true);\n      putReq.onerror = () => reject(putReq.error || new Error('Failed to add photo record'));\n    });\n  }\n\n  async function getAllPhotoRecords() {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const allRecords = [];\n      const request = store.openCursor(null, 'prev'); // descending order of keys (id)\n      request.onsuccess = (e) => {\n        const cursor = e.target.result;\n        if (cursor) {\n          allRecords.push(cursor.value);\n          cursor.continue();\n        } else {\n          // We have all records sorted by key descending\n          // Sort by timestamp descending explicitly, if needed\n          allRecords.sort((a, b) => b.timestamp - a.timestamp);\n          resolve(allRecords);\n        }\n      };\n      request.onerror = () => reject(request.error || new Error('Failed to fetch photo records'));\n    });\n  }\n\n  async function getPhotoRecordById(id) {\n    if (!id) return null;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const req = store.get(id);\n      req.onsuccess = () => resolve(req.result || null);\n      req.onerror = () => reject(req.error || new Error('Failed to fetch photo record by id'));\n    });\n  }\n\n  async function deletePhotoRecord(id) {\n    if (!id) return;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const delReq = store.delete(id);\n      delReq.onsuccess = () => resolve(true);\n      delReq.onerror = () => reject(delReq.error || new Error('Failed to delete photo record'));\n    });\n  }\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientNameSpan = document.getElementById('selected-patient-name-span');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const patientSubmissionBadge = document.getElementById('patient-submission-badge');\n  const patientNameBtn = document.getElementById('patient-name-btn');\n\n  const fastTrackHeader = document.getElementById('fast-track-header');\n  const fastTrackScoreModal = document.getElementById('fast-track-score-modal');\n  const fastTrackScoreCloseBtn = document.getElementById('fast-track-score-close');\n  const fastTrackScoreText = document.getElementById('fast-track-score-text');\n\n  /* New Gallery Button & Modal Elements */\n  const showGalleryBtn = document.getElementById('show-gallery-btn');\n  const galleryModalOverlay = document.getElementById('gallery-modal-overlay');\n  const galleryModalContent = document.getElementById('gallery-modal-content');\n  const galleryList = document.getElementById('gallery-list');\n  const galleryImagePreview = document.getElementById('gallery-image-preview');\n  const galleryModalCloseBtn = document.getElementById('gallery-modal-close-btn');\n\n  // For submission status and not completed status cache\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses',\n  };\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  /* --- Not Completed Status Cache --- */\n  const notCompletedModalOverlay = document.getElementById('not-completed-modal-overlay');\n  const notCompletedModalContent = document.getElementById('not-completed-modal-content');\n  const notCompletedModalCloseBtn = document.getElementById('not-completed-modal-close-btn');\n  const notCompletedOptionsContainer = document.getElementById('not-completed-options');\n  const notCompletedBackBtn = document.getElementById('not-completed-back-btn');\n\n  let notCompletedStatusCache = {};\n  let submissionStatusCache = {};\n\n  /* --- Helper Functions for Loader --- */\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  /* --- Fetch appointments and process locations/patients --- */\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoader();\n    }\n    try {\n      let payload = {};\n      if (locationValue !== null && locationValue !== undefined && activeModal === 'patient') {\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if (!appointments.length) {\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if (activeModal === 'location') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if (activeModal === 'patient') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoader();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if (cached) {\n        const cachedLocations = JSON.parse(cached);\n        if (Array.isArray(cachedLocations) && cachedLocations.length) {\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if (cached) {\n        const cachedPatients = JSON.parse(cached);\n        if (Array.isArray(cachedPatients) && cachedPatients.length) {\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if (appt.Appt_Sched_Location_Descr) {\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr,\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a, b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if (!selectedLocation) {\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if (appt.MRN) {\n        if (!patientMap.has(appt.MRN)) {\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if (p.Appt_DateTime) {\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if (storedPatientJSON) {\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch { }\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if (selectedLocation && selectedPatient) {\n      selectedPatientNameSpan.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n      updatePatientSubmissionBadge(selectedPatient.MRN);\n    } else if (selectedLocation && !selectedPatient) {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    } else {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    }\n\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  function updateTimestampLastUpdate() {\n    if (selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    lastListUpdateSpan.textContent = '';\n\n    if (type === 'location') {\n      modalTitle.textContent = 'Select Location';\n      updateListBtn.style.display = 'inline-block';\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if (type === 'location') {\n      const hasCache = loadLocationsFromCache();\n\n      if (hasCache) {\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if (hasPatientsCache) {\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if (activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if (activeModal === 'location') {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if (activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch { }\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch (e) {\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate() {\n    if (activeModal === 'patient') {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if (type === 'location') {\n      items.sort((a, b) => a.label.localeCompare(b.label));\n    } else if (type === 'patient') {\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if (items.length === 0) {\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if (type === 'location') {\n        btn.textContent = item.label;\n        if (item.value === selectedLocation) {\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n\n        // Add submission badge count including both successful and Not Completed counts\n        const uniqueCount = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(item.MRN);\n        if (uniqueCount > 0) {\n          const badge = document.createElement('span');\n          badge.className = 'patient-submission-badge';\n          badge.textContent = uniqueCount;\n          btn.style.position = 'relative';\n          btn.appendChild(badge);\n        }\n\n        if (selectedPatient && item.MRN === selectedPatient.MRN) {\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', async () => {\n        if (type === 'location') {\n          if (item.value !== selectedLocation) {\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            await awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if (!selectedPatient || selectedPatient.MRN !== item.MRN) {\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  async function awaitPatientListUpdateForNewLocation() {\n    try {\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if (!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && modalOverlay.style.display === 'flex') {\n      closeModal();\n    }\n\n    if (e.key === 'Escape') {\n      if (modalDetailOverlay.style.display === 'flex') {\n        modalDetailOverlay.style.display = 'none';\n      }\n      if (photoModalOverlay.style.display === 'flex') {\n        photoModalOverlay.style.display = 'none';\n      }\n      if (galleryModalOverlay.style.display === 'flex') {\n        closeGalleryModal();\n      }\n      if (photoSubmitLoaderOverlay.style.display === 'flex') {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n      if (fastTrackScoreModal.style.display === 'flex') {\n        closeFastTrackScoreModal();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if (!selectedLocation) {\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n  const notCompletedCaptureBtn = document.getElementById('not-completed-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  /* --- Not Completed Status Cache Load/Save --- */\n  function loadNotCompletedStatusCache() {\n    try {\n      const cached = localStorage.getItem('notCompletedStatuses');\n      if (cached) {\n        notCompletedStatusCache = JSON.parse(cached) || {};\n      } else {\n        notCompletedStatusCache = {};\n      }\n    } catch (e) {\n      notCompletedStatusCache = {};\n    }\n  }\n  function saveNotCompletedStatusCache() {\n    try {\n      localStorage.setItem('notCompletedStatuses', JSON.stringify(notCompletedStatusCache));\n    } catch (e) { }\n  }\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if (cached) {\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch (e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch (e) {}\n  }\n\n  function clearChildren(el) {\n    while (el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  }\n\n  async function initializePatientDevices(mrn) {\n    if (!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ mrn })\n      });\n      if (!res.ok) throw new Error(`Server error: ${res.status}`);\n      let devices = await res.json();\n      if (!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if (currentDevices.length === 0) {\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch (e) {\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n\n    devices.sort((a, b) => {\n      if (!a.POCEquipment) return 1;\n      if (!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Show \"Not Completed\" X badge if marked so\n      if (notCompletedStatusCache[currentMRN] && notCompletedStatusCache[currentMRN][device.POCEquipment]) {\n        const xBadge = document.createElement('div');\n        xBadge.className = 'device-not-completed';\n        xBadge.title = 'Marked as Not Completed';\n        xBadge.textContent = 'âœ•';\n        card.appendChild(xBadge);\n      }\n\n      // Show \"checked\" badge if successfully submitted\n      if (submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]) {\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled when opening camera\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          const appElement = document.getElementById('app');\n          if (appElement) {\n            appElement.scrollTo({ top: appElement.scrollHeight - appElement.clientHeight + 20, behavior: 'smooth' });\n          }\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({ behavior: 'smooth', block: 'end' });\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if (cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if (videoTrack && videoTrack.getCapabilities) {\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if (capabilities.imageStabilization !== undefined) {\n          constraintsApply.imageStabilization = true;\n        }\n        if (capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')) {\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if (Object.keys(constraintsApply).length) {\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch (e) { }\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch (e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n\n    const appElement = document.getElementById('app');\n    if (appElement) {\n      appElement.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  });\n\n  // Fix capture button keyboard accessibility and drawing in requestAnimationFrame for reliability:\n  captureBtn.addEventListener('click', takePhoto);\n  captureBtn.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      takePhoto();\n    }\n  });\n\n  function takePhoto() {\n    if (!cameraStream) return;\n\n    requestAnimationFrame(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled on photo display\n      }, 'image/jpeg', 0.95);\n    });\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  // Util function for setting submit button loading state (disabled and text)\n  function setButtonLoadingState(button, isLoading) {\n    if (isLoading) {\n      button.disabled = true;\n      button.textContent = 'Submitting...'; // Change button label during loading\n      button.style.opacity = '0.6';        // Make it appear visually disabled\n      button.style.cursor = 'not-allowed';\n    } else {\n      button.disabled = false;\n      button.textContent = 'Submit';       // Restore original label\n      button.style.opacity = '';\n      button.style.cursor = 'pointer';\n    }\n  }\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions for photo submission loader and timer\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if (submissionCountdown < 0) {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        if(onTimeout && typeof onTimeout === 'function'){\n          onTimeout();\n        }\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  function stopSubmitTimeout() {\n    if (submissionTimeoutId !== null) {\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    if (!navigator.onLine) {\n      await markSubmissionFailedDueOffline();\n      return;\n    }\n\n    // Show overlay loader & disable submit button when Submit pressed\n    setButtonLoadingState(photoOkBtn, true);\n    uploadStatus.textContent = '';\n    showPhotoSubmitLoader();\n\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n      setButtonLoadingState(photoOkBtn, false);\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      photoModalOverlay.style.display = 'none';\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n    };\n\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      // Save photo blob directly in IndexedDB for gallery instead of base64 localStorage\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      const timestamp = Date.now();\n\n      const submissionRecord = {\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: 'Pending',\n        timestamp\n      };\n\n      // Save photo blob record in IndexedDB\n      await addPhotoRecord({ id, mrn: currentMRN, device: submissionRecord.device, blob: photoBlob, timestamp });\n\n      // Also save the submission status record in localStorage (without photoDataUrl)\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(id, 'Success');\n\n      if (!submissionStatusCache[currentMRN]) {\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if (photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n\n      setButtonLoadingState(photoOkBtn, false);\n\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n\n        if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n      }, 1000);\n    } catch (e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if (e.name === 'AbortError') {\n        setButtonLoadingState(photoOkBtn, false);\n        return;\n      }\n      if (!navigator.onLine) {\n        await markSubmissionFailedDueOffline();\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n      }\n      setButtonLoadingState(photoOkBtn, false);\n    }\n  }\n\n  async function markSubmissionFailedDueOffline() {\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n\n    const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    const timestamp = Date.now();\n\n    // Save photo blob record in IndexedDB\n    await addPhotoRecord({ id, mrn: currentMRN, device: JSON.stringify(selectedDevice), blob: photoBlob, timestamp });\n\n    const submissionRecord = {\n      id,\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      status: 'Failed',\n      timestamp\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n\n    setButtonLoadingState(photoOkBtn, false);\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  async function updateSubmissionStatusTimed(newStatus) {\n    const submissions = loadSavedSubmissions();\n    let found = false;\n    for (let i = submissions.length - 1; i >= 0; i--) {\n      const s = submissions[i];\n      if (s.status === 'Pending' && s.mrn === currentMRN) {\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if (!found && newStatus === 'Failed') {\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if (!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch (e) {\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed' || s.status === 'Pending');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if (newStatus === 'Failed') {\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if (dateFilterInput.value) {\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if (filtered.length === 0) {\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', `Submission for MRN ${sub.mrn}, Device: ${(JSON.parse(sub.device).POCEquipment || '')}, Date: ${formatDate(sub.timestamp)}, Status: ${sub.status}`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if (sub.status === 'Failed' || sub.status === 'Pending') {\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if (deviceObj.Description) {\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch { }\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if (typeof submission.photoDataUrl === 'string' && submission.photoDataUrl) {\n      // Legacy base64 is still shown for old records\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    } else {\n      // For new records, fetch blob from IndexedDB and show\n      getPhotoRecordById(submission.id).then(record => {\n        if (record && record.blob) {\n          const img = document.createElement('img');\n          const url = URL.createObjectURL(record.blob);\n          img.src = url;\n          img.alt = 'Captured photo of device';\n          img.style.maxWidth = '100%';\n          img.style.borderRadius = '14px';\n          img.style.marginTop = '12px';\n\n          modalDetailContent.appendChild(img);\n\n          // Revoke Object URL when modal closes\n          const onClose = () => {\n            URL.revokeObjectURL(url);\n            modalDetailOverlay.removeEventListener('click', onClose);\n            modalDetailCloseBtn.removeEventListener('click', onClose);\n          };\n          modalDetailOverlay.addEventListener('click', onClose);\n          modalDetailCloseBtn.addEventListener('click', onClose);\n        }\n      }).catch(() => { /* silently ignore */ });\n    }\n\n    if (submission.status === 'Failed' || submission.status === 'Pending') {\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if (!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch (e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if (submission.status !== 'Failed' && submission.status !== 'Pending') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n\n      const record = await getPhotoRecordById(submission.id);\n      if (!record || !record.blob) throw new Error('No photo data to upload');\n\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', record.blob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      await removeSubmissionRecord(submission.id);\n      await deletePhotoRecord(submission.id);\n\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions.splice(idx, 1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()} ${pad(dt.getHours())}:${pad(dt.getMinutes())}`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()}`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if (visible) {\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if (sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if (hasFailedToday) {\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  // New function: count both successful and Not Completed devices for patient\n  function getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn) {\n    if (!mrn) return 0;\n    let countMap = {};\n    if (submissionStatusCache[mrn]) {\n      Object.keys(submissionStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    if (notCompletedStatusCache[mrn]) {\n      Object.keys(notCompletedStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    return Object.keys(countMap).length;\n  }\n\n  function updatePatientSubmissionBadge(mrn) {\n    const count = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn);\n    if (count > 0) {\n      patientSubmissionBadge.style.display = 'inline-block';\n      patientSubmissionBadge.textContent = count;\n      patientSubmissionBadge.setAttribute('aria-label', `${count} unique devices submitted (including Not Completed) for this patient`);\n    } else {\n      patientSubmissionBadge.style.display = 'none';\n      patientSubmissionBadge.textContent = '';\n    }\n  }\n\n  async function fetchAndDisplayTodaysScore() {\n    fastTrackScoreText.textContent = 'Loading...';\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/49f9681f-32b1-4ac6-ad88-f0d35cc86176', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n      if (!res.ok) throw new Error('Network response was not OK: ' + res.status);\n      const data = await res.text();\n      fastTrackScoreText.innerHTML = data;\n    } catch (e) {\n      fastTrackScoreText.textContent = 'Failed to load score: ' + e.message;\n    }\n  }\n\n  function openFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'flex';\n    fastTrackScoreModal.focus();\n    fetchAndDisplayTodaysScore();\n  }\n\n  function closeFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'none';\n  }\n\n  fastTrackHeader.addEventListener('click', () => {\n    openFastTrackScoreModal();\n  });\n  fastTrackHeader.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      openFastTrackScoreModal();\n    }\n  });\n  fastTrackScoreCloseBtn.addEventListener('click', () => {\n    closeFastTrackScoreModal();\n  });\n\n  notCompletedCaptureBtn.addEventListener('click', () => {\n    if (!selectedDevice) {\n      alert('Please select a device first by clicking on its card.');\n      return;\n    }\n    openNotCompletedModal();\n  });\n\n  function openNotCompletedModal() {\n    // Important: Show devices section underneath as user requested (do NOT hide it)\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false; // Show devices\n\n    notCompletedModalOverlay.style.display = 'flex';\n    notCompletedModalContent.focus();\n  }\n\n  function closeNotCompletedModal() {\n    notCompletedModalOverlay.style.display = 'none';\n    // Back button from Not Completed modal goes back to devices list,\n    // NOT to camera feed as requested\n    devicesSection.hidden = false;\n    cameraSection.classList.add('hidden');\n    devicesSection.focus();\n  }\n\n  notCompletedModalCloseBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedBackBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedOptionsContainer.querySelectorAll('button[data-reason]').forEach(btn => {\n    btn.addEventListener('click', async () => {\n      const reason = btn.getAttribute('data-reason');\n      if (!selectedDevice || !currentMRN) {\n        alert('No device or patient selected.');\n        closeNotCompletedModal();\n        return;\n      }\n      await submitNotCompletedReason(reason, btn.textContent);\n      closeNotCompletedModal();\n    });\n  });\n\n  async function submitNotCompletedReason(reasonCode, reasonText) {\n    try {\n      showLoader();\n      const payload = {\n        mrn: currentMRN,\n        device: selectedDevice,\n        notCompletedReason: reasonCode\n      };\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55';\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      loadNotCompletedStatusCache();\n      if (!notCompletedStatusCache[currentMRN]) {\n        notCompletedStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        notCompletedStatusCache[currentMRN][deviceName] = reasonCode;\n        saveNotCompletedStatusCache();\n      }\n\n      loadSubmissionStatusCache();\n      // We do NOT delete success submission for this device when marking Not Completed,\n      // to comply with requirement to count Not Completed also as counts towards patient badge.\n      // So do not delete from submissionStatusCache here\n\n      renderDeviceCards(currentDevices);\n\n      alert('Not Completed reason \"' + reasonText + '\" submitted successfully.');\n\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      if (e.name === 'AbortError' || e.message.includes('NetworkError') || !navigator.onLine) {\n        alert('No response from server, saved as Failed Sends.');\n        const submissionRecord = {\n          id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n          mrn: currentMRN,\n          device: JSON.stringify(selectedDevice),\n          status: 'Failed',\n          notCompletedReason: reasonCode,\n          timestamp: Date.now()\n        };\n        addSubmissionRecord(submissionRecord);\n        renderSavedSubmissions();\n        updateShowSubmissionsButton();\n        closeNotCompletedModal();\n      } else {\n        alert('Submit failed: ' + e.message);\n      }\n    } finally {\n      hideLoader();\n    }\n  }\n\n  /* --- Gallery Modal Behavior --- */\n\n  showGalleryBtn.addEventListener('click', async () => {\n    if (galleryModalOverlay.style.display === 'flex') {\n      closeGalleryModal();\n    } else {\n      await openGalleryModal();\n    }\n  });\n\n  galleryModalCloseBtn.addEventListener('click', () => {\n    closeGalleryModal();\n  });\n\n  galleryModalOverlay.addEventListener('click', (e) => {\n    if (e.target === galleryModalOverlay) {\n      closeGalleryModal();\n    }\n  });\n\n  async function openGalleryModal() {\n    galleryModalOverlay.style.display = 'flex';\n    galleryModalContent.focus();\n\n    try {\n      showLoader();\n      const allPhotos = await getAllPhotoRecords();\n      renderGalleryList(allPhotos);\n      galleryImagePreview.src = '';\n      galleryImagePreview.alt = 'No photo selected';\n    } catch (e) {\n      alert('Failed to load saved photos from database: ' + e.message);\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function closeGalleryModal() {\n    galleryModalOverlay.style.display = 'none';\n    clearGallerySelection();\n  }\n\n  function renderGalleryList(photos) {\n    clearChildren(galleryList);\n    if (!photos || photos.length === 0) {\n      const p = document.createElement('p');\n      p.textContent = 'No photos saved.';\n      p.style.fontWeight = '600';\n      p.style.color = '#b00020';\n      galleryList.appendChild(p);\n      galleryImagePreview.src = '';\n      galleryImagePreview.alt = 'No photo saved';\n      return;\n    }\n\n    photos.sort((a, b) => b.timestamp - a.timestamp);\n\n    photos.forEach(photoRecord => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = 'gallery-item-button';\n      const date = new Date(photoRecord.timestamp);\n      const timestampStr = date.toLocaleString();\n      btn.textContent = `ID: ${photoRecord.id} â€” ${timestampStr}`;\n      btn.tabIndex = 0;\n\n      btn.addEventListener('click', () => {\n        clearGallerySelection();\n        btn.classList.add('selected');\n        showPhotoPreview(photoRecord);\n      });\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      galleryList.appendChild(btn);\n    });\n  }\n\n  function clearGallerySelection() {\n    const selectedBtn = galleryList.querySelector('.gallery-item-button.selected');\n    if (selectedBtn) selectedBtn.classList.remove('selected');\n    if (galleryImagePreview.src) {\n      URL.revokeObjectURL(galleryImagePreview.src);\n      galleryImagePreview.src = '';\n    }\n    galleryImagePreview.alt = 'No photo selected';\n  }\n\n  function showPhotoPreview(photoRecord) {\n    if (!photoRecord || !photoRecord.blob) {\n      galleryImagePreview.src = '';\n      galleryImagePreview.alt = 'Failed to load photo.';\n      return;\n    }\n    if (galleryImagePreview.src) {\n      URL.revokeObjectURL(galleryImagePreview.src);\n    }\n    const url = URL.createObjectURL(photoRecord.blob);\n    galleryImagePreview.src = url;\n    galleryImagePreview.alt = `Photo from record ID: ${photoRecord.id}`;\n  }\n\n  /* --- Initialization & Misc --- */\n\n  initialLoad();\n\n  async function initialLoad() {\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if (hasCachedLocations) {\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if (selectedLocation) {\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if (hasCachedPatients) {\n          patients = patients || [];\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch (e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if (selectedPatient && selectedPatient.MRN) {\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1680,
        820
      ],
      "id": "670ff052-f1e1-4ed6-85ea-d77d81a504ff",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n  scroll-padding-bottom: 160px; /* added padding for scrolling */\n  scroll-behavior: smooth;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n  cursor: pointer; /* Make clickable */\n  position: relative;\n}\n\n/* Badge style for patient card that shows number of unique submitted devices */\n.patient-submission-badge {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  background: #dc3545;\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n  flex: 1 0 140px;\n}\n#cancel-capture-btn:hover {\n  background: #005fcc;\n}\n\n/* New container for capture modal buttons including Cancel and Not Completed side by side */\n#capture-buttons-row {\n  display: flex;\n  justify-content: center;\n  gap: 12px;\n  width: 100%;\n  max-width: 480px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n}\n\n/* Not Completed button in capture modal - styled as red cancel style */\n#not-completed-capture-btn {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  flex: 1 0 140px;\n}\n#not-completed-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Not Completed Modal Styles */\n\n#not-completed-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n\n#not-completed-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n#not-completed-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#not-completed-modal-header h2 {\n  font-size: 1.4rem;\n  color: #b00020;\n  font-weight: 700;\n  margin: 0;\n}\n\n#not-completed-modal-close-btn {\n  background: #b00020;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 24px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#not-completed-modal-close-btn:hover {\n  background: #7a000f;\n}\n\n#not-completed-options {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 12px;\n}\n\n#not-completed-options button[data-reason] {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n}\n#not-completed-options button[data-reason]:hover {\n  background: #7a000f;\n}\n\n#not-completed-back-btn {\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n  margin-top: 8px;\n}\n#not-completed-back-btn:hover {\n  background: #005fcc;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n  position: relative; /* for badge positioning */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n/* Red X badge for Not Completed device card */\n.device-not-completed {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #b00020;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(176,0,32,0.6);\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n\n/* Added focus style to badges for accessibility */\n.device-not-completed:focus,\n.device-checked:focus {\n  outline: 2px solid #ffb3b3;\n  outline-offset: 2px;\n}\n\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  scroll-margin-bottom: 160px; /* ensure sufficient margin for scrolling */\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n  z-index: 10000; /* lower than photo-submit-loader-overlay to show loader above */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n  touch-action: manipulation;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n  touch-action: manipulation;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px #80aaff;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay with spinner and timer for photo submit */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n  user-select:none;\n}\n\n/* Saved Submissions Panel */\n/* add scrollbar and fixed height with overflow for scroll */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n  overflow-y: auto; /* always show scroll if content overflow */\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n/* Modal for Fast Track Score */\n#fast-track-score-modal {\n  position: fixed;\n  inset: 0;\n  display: none;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#fast-track-score-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n}\n\n#fast-track-score-close {\n  position: absolute;\n  top: 8px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 20px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  transition: background 0.3s;\n  user-select:none;\n}\n#fast-track-score-close:hover {\n  background: #d72950;\n}\n\n/* New styles for disabled button with loading state */\nbutton[disabled] {\n  opacity: 0.6 !important;\n  cursor: not-allowed !important;\n  pointer-events: none !important;\n  user-select:none !important;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border and click action -->\n<h1 id=\"fast-track-header\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" aria-label=\"Show today's score of unique pictures submitted\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <button id=\"patient-name-btn\" class=\"patient-btn card\" type=\"button\" aria-label=\"Select patient\" style=\"position:relative; padding-right: 40px;\">\n      <span id=\"selected-patient-name-span\">None selected</span>\n      <span id=\"patient-submission-badge\" class=\"patient-submission-badge\" aria-label=\"Number of submitted images for patient\" style=\"display:none;\">0</span>\n    </button>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <div id=\"capture-buttons-row\">\n    <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Back</button>\n    <button id=\"not-completed-capture-btn\" aria-label=\"Mark device as Not Completed\" type=\"button\">Not Completed</button>\n  </div>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Not Completed Options Modal -->\n<div id=\"not-completed-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Not Completed Reason Selection\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"not-completed-modal-content\" tabindex=\"0\">\n    <div id=\"not-completed-modal-header\">\n      <h2>Select Reason for Not Completed</h2>\n      <button id=\"not-completed-modal-close-btn\" aria-label=\"Close Not Completed Reason modal\" title=\"Close\">Ã—</button>\n    </div>\n    <div id=\"not-completed-options\">\n      <button data-reason=\"NC_Patient_Declined\" type=\"button\">Patient Declined</button>\n      <button data-reason=\"NC_Patient_Left\" type=\"button\">Patient Left</button>\n      <button data-reason=\"NC_Supplies_Out\" type=\"button\">Supplies Out</button>\n      <button data-reason=\"NC_Equipment_Failure\" type=\"button\">Equipment Failure</button>\n      <button id=\"not-completed-back-btn\" type=\"button\">Back</button>\n    </div>\n  </div>\n</div>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Modal for Fast Track Today's Score -->\n<div id=\"fast-track-score-modal\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Today's Score\" tabindex=\"-1\">\n  <div id=\"fast-track-score-content\">\n    <button id=\"fast-track-score-close\" aria-label=\"Close Today's Score\">Ã—</button>\n    <div id=\"fast-track-score-text\">Loading...</div>\n  </div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- IndexedDB Photo Storage Module --- */\n\n  const DB_NAME = 'PhotoCaptureDB';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'photos';\n\n  let dbPromise = null;\n\n  function openDB() {\n    if (dbPromise) return dbPromise;\n    dbPromise = new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = () => {\n        reject(request.error || new Error('Failed to open IndexedDB'));\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n          store.createIndex('timestamp', 'timestamp');\n          store.createIndex('mrn', 'mrn');\n        }\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n    });\n    return dbPromise;\n  }\n\n  async function addPhotoRecord({ id, mrn, device, blob, timestamp }) {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const record = { id, mrn, device, blob, timestamp };\n      const putReq = store.put(record);\n      putReq.onsuccess = () => resolve(true);\n      putReq.onerror = () => reject(putReq.error || new Error('Failed to add photo record'));\n    });\n  }\n\n  async function getAllPhotoRecords() {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const allRecords = [];\n      const request = store.openCursor(null, 'prev'); // descending order of keys (id)\n      request.onsuccess = (e) => {\n        const cursor = e.target.result;\n        if (cursor) {\n          allRecords.push(cursor.value);\n          cursor.continue();\n        } else {\n          // We have all records sorted by key descending\n          // Sort by timestamp descending explicitly, if needed\n          allRecords.sort((a, b) => b.timestamp - a.timestamp);\n          resolve(allRecords);\n        }\n      };\n      request.onerror = () => reject(request.error || new Error('Failed to fetch photo records'));\n    });\n  }\n\n  async function getPhotoRecordById(id) {\n    if (!id) return null;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const req = store.get(id);\n      req.onsuccess = () => resolve(req.result || null);\n      req.onerror = () => reject(req.error || new Error('Failed to fetch photo record by id'));\n    });\n  }\n\n  async function deletePhotoRecord(id) {\n    if (!id) return;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const delReq = store.delete(id);\n      delReq.onsuccess = () => resolve(true);\n      delReq.onerror = () => reject(delReq.error || new Error('Failed to delete photo record'));\n    });\n  }\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientNameSpan = document.getElementById('selected-patient-name-span');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const patientSubmissionBadge = document.getElementById('patient-submission-badge');\n  const patientNameBtn = document.getElementById('patient-name-btn');\n\n  const fastTrackHeader = document.getElementById('fast-track-header');\n  const fastTrackScoreModal = document.getElementById('fast-track-score-modal');\n  const fastTrackScoreCloseBtn = document.getElementById('fast-track-score-close');\n  const fastTrackScoreText = document.getElementById('fast-track-score-text');\n\n  // For submission status and not completed status cache\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses',\n  };\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  /* --- Not Completed Status Cache --- */\n  const notCompletedModalOverlay = document.getElementById('not-completed-modal-overlay');\n  const notCompletedModalContent = document.getElementById('not-completed-modal-content');\n  const notCompletedModalCloseBtn = document.getElementById('not-completed-modal-close-btn');\n  const notCompletedOptionsContainer = document.getElementById('not-completed-options');\n  const notCompletedBackBtn = document.getElementById('not-completed-back-btn');\n\n  let notCompletedStatusCache = {};\n  let submissionStatusCache = {};\n\n  /* --- Helper Functions for Loader --- */\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  /* --- Fetch appointments and process locations/patients --- */\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoader();\n    }\n    try {\n      let payload = {};\n      if (locationValue !== null && locationValue !== undefined && activeModal === 'patient') {\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if (!appointments.length) {\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if (activeModal === 'location') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if (activeModal === 'patient') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoader();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if (cached) {\n        const cachedLocations = JSON.parse(cached);\n        if (Array.isArray(cachedLocations) && cachedLocations.length) {\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if (cached) {\n        const cachedPatients = JSON.parse(cached);\n        if (Array.isArray(cachedPatients) && cachedPatients.length) {\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if (appt.Appt_Sched_Location_Descr) {\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr,\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a, b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if (!selectedLocation) {\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if (appt.MRN) {\n        if (!patientMap.has(appt.MRN)) {\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if (p.Appt_DateTime) {\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if (storedPatientJSON) {\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch { }\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if (selectedLocation && selectedPatient) {\n      selectedPatientNameSpan.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n      updatePatientSubmissionBadge(selectedPatient.MRN);\n    } else if (selectedLocation && !selectedPatient) {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    } else {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    }\n\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  function updateTimestampLastUpdate() {\n    if (selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    lastListUpdateSpan.textContent = '';\n\n    if (type === 'location') {\n      modalTitle.textContent = 'Select Location';\n      updateListBtn.style.display = 'inline-block';\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if (type === 'location') {\n      const hasCache = loadLocationsFromCache();\n\n      if (hasCache) {\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if (hasPatientsCache) {\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if (activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if (activeModal === 'location') {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if (activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch { }\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch (e) {\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate() {\n    if (activeModal === 'patient') {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if (type === 'location') {\n      items.sort((a, b) => a.label.localeCompare(b.label));\n    } else if (type === 'patient') {\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if (items.length === 0) {\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if (type === 'location') {\n        btn.textContent = item.label;\n        if (item.value === selectedLocation) {\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n\n        // Add submission badge count including both successful and Not Completed counts\n        const uniqueCount = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(item.MRN);\n        if (uniqueCount > 0) {\n          const badge = document.createElement('span');\n          badge.className = 'patient-submission-badge';\n          badge.textContent = uniqueCount;\n          btn.style.position = 'relative';\n          btn.appendChild(badge);\n        }\n\n        if (selectedPatient && item.MRN === selectedPatient.MRN) {\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', async () => {\n        if (type === 'location') {\n          if (item.value !== selectedLocation) {\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            await awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if (!selectedPatient || selectedPatient.MRN !== item.MRN) {\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  async function awaitPatientListUpdateForNewLocation() {\n    try {\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if (!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && modalOverlay.style.display === 'flex') {\n      closeModal();\n    }\n\n    if (e.key === 'Escape') {\n      if (modalDetailOverlay.style.display === 'flex') {\n        modalDetailOverlay.style.display = 'none';\n      }\n      if (photoModalOverlay.style.display === 'flex') {\n        photoModalOverlay.style.display = 'none';\n      }\n      if (photoSubmitLoaderOverlay.style.display === 'flex') {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n      if (fastTrackScoreModal.style.display === 'flex') {\n        closeFastTrackScoreModal();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if (!selectedLocation) {\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n  const notCompletedCaptureBtn = document.getElementById('not-completed-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  /* --- Not Completed Status Cache Load/Save --- */\n  function loadNotCompletedStatusCache() {\n    try {\n      const cached = localStorage.getItem('notCompletedStatuses');\n      if (cached) {\n        notCompletedStatusCache = JSON.parse(cached) || {};\n      } else {\n        notCompletedStatusCache = {};\n      }\n    } catch (e) {\n      notCompletedStatusCache = {};\n    }\n  }\n  function saveNotCompletedStatusCache() {\n    try {\n      localStorage.setItem('notCompletedStatuses', JSON.stringify(notCompletedStatusCache));\n    } catch (e) { }\n  }\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if (cached) {\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch (e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch (e) {}\n  }\n\n  function clearChildren(el) {\n    while (el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  }\n\n  async function initializePatientDevices(mrn) {\n    if (!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ mrn })\n      });\n      if (!res.ok) throw new Error(`Server error: ${res.status}`);\n      let devices = await res.json();\n      if (!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if (currentDevices.length === 0) {\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch (e) {\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n\n    devices.sort((a, b) => {\n      if (!a.POCEquipment) return 1;\n      if (!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      // Show \"Not Completed\" X badge if marked so\n      if (notCompletedStatusCache[currentMRN] && notCompletedStatusCache[currentMRN][device.POCEquipment]) {\n        const xBadge = document.createElement('div');\n        xBadge.className = 'device-not-completed';\n        xBadge.title = 'Marked as Not Completed';\n        xBadge.textContent = 'âœ•';\n        card.appendChild(xBadge);\n      }\n\n      // Show \"checked\" badge if successfully submitted\n      if (submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][device.POCEquipment]) {\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled when opening camera\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          const appElement = document.getElementById('app');\n          if (appElement) {\n            appElement.scrollTo({ top: appElement.scrollHeight - appElement.clientHeight + 20, behavior: 'smooth' });\n          }\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({ behavior: 'smooth', block: 'end' });\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if (cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if (videoTrack && videoTrack.getCapabilities) {\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if (capabilities.imageStabilization !== undefined) {\n          constraintsApply.imageStabilization = true;\n        }\n        if (capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')) {\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if (Object.keys(constraintsApply).length) {\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch (e) { }\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch (e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n\n    const appElement = document.getElementById('app');\n    if (appElement) {\n      appElement.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  });\n\n  // Fix capture button keyboard accessibility and drawing in requestAnimationFrame for reliability:\n  captureBtn.addEventListener('click', takePhoto);\n  captureBtn.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      takePhoto();\n    }\n  });\n\n  function takePhoto() {\n    if (!cameraStream) return;\n\n    requestAnimationFrame(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled on photo display\n      }, 'image/jpeg', 0.95);\n    });\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  // Util function for setting submit button loading state (disabled and text)\n  function setButtonLoadingState(button, isLoading) {\n    if (isLoading) {\n      button.disabled = true;\n      button.textContent = 'Submitting...'; // Change button label during loading\n      button.style.opacity = '0.6';        // Make it appear visually disabled\n      button.style.cursor = 'not-allowed';\n    } else {\n      button.disabled = false;\n      button.textContent = 'Submit';       // Restore original label\n      button.style.opacity = '';\n      button.style.cursor = 'pointer';\n    }\n  }\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions for photo submission loader and timer\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if (submissionCountdown < 0) {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        if(onTimeout && typeof onTimeout === 'function'){\n          onTimeout();\n        }\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  function stopSubmitTimeout() {\n    if (submissionTimeoutId !== null) {\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    if (!navigator.onLine) {\n      await markSubmissionFailedDueOffline();\n      return;\n    }\n\n    // Show overlay loader & disable submit button when Submit pressed\n    setButtonLoadingState(photoOkBtn, true);\n    uploadStatus.textContent = '';\n    showPhotoSubmitLoader();\n\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n      setButtonLoadingState(photoOkBtn, false);\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      photoModalOverlay.style.display = 'none';\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n    };\n\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      // Save photo blob directly in IndexedDB instead of base64 localStorage\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      const timestamp = Date.now();\n\n      const submissionRecord = {\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: 'Pending',\n        timestamp\n      };\n\n      // Save photo blob record in IndexedDB\n      await addPhotoRecord({ id, mrn: currentMRN, device: submissionRecord.device, blob: photoBlob, timestamp });\n\n      // Also save the submission status record in localStorage (without photoDataUrl)\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(id, 'Success');\n\n      if (!submissionStatusCache[currentMRN]) {\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      if (photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n\n      setButtonLoadingState(photoOkBtn, false);\n\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n\n        if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n      }, 1000);\n    } catch (e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if (e.name === 'AbortError') {\n        setButtonLoadingState(photoOkBtn, false);\n        return;\n      }\n      if (!navigator.onLine) {\n        await markSubmissionFailedDueOffline();\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n      }\n      setButtonLoadingState(photoOkBtn, false);\n    }\n  }\n\n  async function markSubmissionFailedDueOffline() {\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n\n    const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    const timestamp = Date.now();\n\n    // Save photo blob record in IndexedDB\n    await addPhotoRecord({ id, mrn: currentMRN, device: JSON.stringify(selectedDevice), blob: photoBlob, timestamp });\n\n    const submissionRecord = {\n      id,\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      status: 'Failed',\n      timestamp\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n\n    setButtonLoadingState(photoOkBtn, false);\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  async function updateSubmissionStatusTimed(newStatus) {\n    const submissions = loadSavedSubmissions();\n    let found = false;\n    for (let i = submissions.length - 1; i >= 0; i--) {\n      const s = submissions[i];\n      if (s.status === 'Pending' && s.mrn === currentMRN) {\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if (!found && newStatus === 'Failed') {\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if (!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch (e) {\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed' || s.status === 'Pending');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if (newStatus === 'Failed') {\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if (dateFilterInput.value) {\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if (filtered.length === 0) {\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', `Submission for MRN ${sub.mrn}, Device: ${(JSON.parse(sub.device).POCEquipment || '')}, Date: ${formatDate(sub.timestamp)}, Status: ${sub.status}`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if (sub.status === 'Failed' || sub.status === 'Pending') {\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if (deviceObj.Description) {\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch { }\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if (typeof submission.photoDataUrl === 'string' && submission.photoDataUrl) {\n      // Legacy base64 is still shown for old records\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    } else {\n      // For new records, fetch blob from IndexedDB and show\n      getPhotoRecordById(submission.id).then(record => {\n        if (record && record.blob) {\n          const img = document.createElement('img');\n          const url = URL.createObjectURL(record.blob);\n          img.src = url;\n          img.alt = 'Captured photo of device';\n          img.style.maxWidth = '100%';\n          img.style.borderRadius = '14px';\n          img.style.marginTop = '12px';\n\n          modalDetailContent.appendChild(img);\n\n          // Revoke Object URL when modal closes\n          const onClose = () => {\n            URL.revokeObjectURL(url);\n            modalDetailOverlay.removeEventListener('click', onClose);\n            modalDetailCloseBtn.removeEventListener('click', onClose);\n          };\n          modalDetailOverlay.addEventListener('click', onClose);\n          modalDetailCloseBtn.addEventListener('click', onClose);\n        }\n      }).catch(() => { /* silently ignore */ });\n    }\n\n    if (submission.status === 'Failed' || submission.status === 'Pending') {\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if (!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n    } catch (e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if (submission.status !== 'Failed' && submission.status !== 'Pending') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n\n      const record = await getPhotoRecordById(submission.id);\n      if (!record || !record.blob) throw new Error('No photo data to upload');\n\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', record.blob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      await removeSubmissionRecord(submission.id);\n      await deletePhotoRecord(submission.id);\n\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions.splice(idx, 1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()} ${pad(dt.getHours())}:${pad(dt.getMinutes())}`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()}`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if (visible) {\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if (sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if (hasFailedToday) {\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  // New function: count both successful and Not Completed devices for patient\n  function getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn) {\n    if (!mrn) return 0;\n    let countMap = {};\n    if (submissionStatusCache[mrn]) {\n      Object.keys(submissionStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    if (notCompletedStatusCache[mrn]) {\n      Object.keys(notCompletedStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    return Object.keys(countMap).length;\n  }\n\n  function updatePatientSubmissionBadge(mrn) {\n    const count = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn);\n    if (count > 0) {\n      patientSubmissionBadge.style.display = 'inline-block';\n      patientSubmissionBadge.textContent = count;\n      patientSubmissionBadge.setAttribute('aria-label', `${count} unique devices submitted (including Not Completed) for this patient`);\n    } else {\n      patientSubmissionBadge.style.display = 'none';\n      patientSubmissionBadge.textContent = '';\n    }\n  }\n\n  async function fetchAndDisplayTodaysScore() {\n    fastTrackScoreText.textContent = 'Loading...';\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/49f9681f-32b1-4ac6-ad88-f0d35cc86176', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n      if (!res.ok) throw new Error('Network response was not OK: ' + res.status);\n      const data = await res.text();\n      fastTrackScoreText.innerHTML = data;\n    } catch (e) {\n      fastTrackScoreText.textContent = 'Failed to load score: ' + e.message;\n    }\n  }\n\n  function openFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'flex';\n    fastTrackScoreModal.focus();\n    fetchAndDisplayTodaysScore();\n  }\n\n  function closeFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'none';\n  }\n\n  fastTrackHeader.addEventListener('click', () => {\n    openFastTrackScoreModal();\n  });\n  fastTrackHeader.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      openFastTrackScoreModal();\n    }\n  });\n  fastTrackScoreCloseBtn.addEventListener('click', () => {\n    closeFastTrackScoreModal();\n  });\n\n  notCompletedCaptureBtn.addEventListener('click', () => {\n    if (!selectedDevice) {\n      alert('Please select a device first by clicking on its card.');\n      return;\n    }\n    openNotCompletedModal();\n  });\n\n  function openNotCompletedModal() {\n    // Important: Show devices section underneath as user requested (do NOT hide it)\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false; // Show devices\n\n    notCompletedModalOverlay.style.display = 'flex';\n    notCompletedModalContent.focus();\n  }\n\n  function closeNotCompletedModal() {\n    notCompletedModalOverlay.style.display = 'none';\n    // Back button from Not Completed modal goes back to devices list,\n    // NOT to camera feed as requested\n    devicesSection.hidden = false;\n    cameraSection.classList.add('hidden');\n    devicesSection.focus();\n  }\n\n  notCompletedModalCloseBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedBackBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedOptionsContainer.querySelectorAll('button[data-reason]').forEach(btn => {\n    btn.addEventListener('click', async () => {\n      const reason = btn.getAttribute('data-reason');\n      if (!selectedDevice || !currentMRN) {\n        alert('No device or patient selected.');\n        closeNotCompletedModal();\n        return;\n      }\n      await submitNotCompletedReason(reason, btn.textContent);\n      closeNotCompletedModal();\n    });\n  });\n\n  async function submitNotCompletedReason(reasonCode, reasonText) {\n    try {\n      showLoader();\n      const payload = {\n        mrn: currentMRN,\n        device: selectedDevice,\n        notCompletedReason: reasonCode\n      };\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55';\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      loadNotCompletedStatusCache();\n      if (!notCompletedStatusCache[currentMRN]) {\n        notCompletedStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        notCompletedStatusCache[currentMRN][deviceName] = reasonCode;\n        saveNotCompletedStatusCache();\n      }\n\n      loadSubmissionStatusCache();\n      // We do NOT delete success submission for this device when marking Not Completed,\n      // to comply with requirement to count Not Completed also as counts towards patient badge.\n      // So do not delete from submissionStatusCache here\n\n      renderDeviceCards(currentDevices);\n\n      alert('Not Completed reason \"' + reasonText + '\" submitted successfully.');\n\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      if (e.name === 'AbortError' || e.message.includes('NetworkError') || !navigator.onLine) {\n        alert('No response from server, saved as Failed Sends.');\n        const submissionRecord = {\n          id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n          mrn: currentMRN,\n          device: JSON.stringify(selectedDevice),\n          status: 'Failed',\n          notCompletedReason: reasonCode,\n          timestamp: Date.now()\n        };\n        addSubmissionRecord(submissionRecord);\n        renderSavedSubmissions();\n        updateShowSubmissionsButton();\n        closeNotCompletedModal();\n      } else {\n        alert('Submit failed: ' + e.message);\n      }\n    } finally {\n      hideLoader();\n    }\n  }\n\n  /* --- Initialization & Misc --- */\n\n  initialLoad();\n\n  async function initialLoad() {\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if (hasCachedLocations) {\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if (selectedLocation) {\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if (hasCachedPatients) {\n          patients = patients || [];\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch (e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if (selectedPatient && selectedPatient.MRN) {\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        460,
        340
      ],
      "id": "1e85149d-137a-4697-b369-296a1aba0e51",
      "name": "Respond to Webhook4"
    },
    {
      "parameters": {
        "width": 520,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        140,
        320
      ],
      "id": "2fb2bd53-db32-40f0-a221-5d559c82c7bc",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n  scroll-padding-bottom: 160px; /* added padding for scrolling */\n  scroll-behavior: smooth;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n  cursor: pointer; /* Make clickable */\n  position: relative;\n}\n\n/* Badge style for patient card that shows number of unique submitted devices */\n.patient-submission-badge {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  background: #dc3545;\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n  flex: 1 0 140px;\n}\n#cancel-capture-btn:hover {\n  background: #005fcc;\n}\n\n/* New container for capture modal buttons including Cancel and Not Completed side by side */\n#capture-buttons-row {\n  display: flex;\n  justify-content: center;\n  gap: 12px;\n  width: 100%;\n  max-width: 480px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n}\n\n/* Not Completed button in capture modal - styled as red cancel style */\n#not-completed-capture-btn {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  flex: 1 0 140px;\n}\n#not-completed-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Not Completed Modal Styles */\n\n#not-completed-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n\n#not-completed-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n#not-completed-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#not-completed-modal-header h2 {\n  font-size: 1.4rem;\n  color: #b00020;\n  font-weight: 700;\n  margin: 0;\n}\n\n#not-completed-modal-close-btn {\n  background: #b00020;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 24px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#not-completed-modal-close-btn:hover {\n  background: #7a000f;\n}\n\n#not-completed-options {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 12px;\n}\n\n#not-completed-options button[data-reason] {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n}\n#not-completed-options button[data-reason]:hover {\n  background: #7a000f;\n}\n\n#not-completed-back-btn {\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n  margin-top: 8px;\n}\n#not-completed-back-btn:hover {\n  background: #005fcc;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n  position: relative; /* for badge positioning */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n/* Red X badge for Not Completed device card */\n.device-not-completed {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #b00020;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(176,0,32,0.6);\n}\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  user-select: none;\n}\n\n/* Added focus style to badges for accessibility */\n.device-not-completed:focus,\n.device-checked:focus {\n  outline: 2px solid #ffb3b3;\n  outline-offset: 2px;\n}\n\n/* New yellow \"pending\" badge for failed submission */\n.device-pending {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #ffc107;  /* Bootstrap warning/yellow */\n  color: #333;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(255,193,7,0.6);\n}\n\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  scroll-margin-bottom: 160px; /* ensure sufficient margin for scrolling */\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n  z-index: 10000; /* lower than photo-submit-loader-overlay to show loader above */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n  touch-action: manipulation;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n  touch-action: manipulation;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px #80aaff;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay with spinner and timer for photo submit */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n  user-select:none;\n}\n\n/* Saved Submissions Panel */\n/* add scrollbar and fixed height with overflow for scroll */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n  overflow-y: auto; /* always show scroll if content overflow */\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n/* Modal for Fast Track Score */\n#fast-track-score-modal {\n  position: fixed;\n  inset: 0;\n  display: none;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#fast-track-score-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n}\n\n#fast-track-score-close {\n  position: absolute;\n  top: 8px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 20px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  transition: background 0.3s;\n  user-select:none;\n}\n#fast-track-score-close:hover {\n  background: #d72950;\n}\n\n/* New styles for disabled button with loading state */\nbutton[disabled] {\n  opacity: 0.6 !important;\n  cursor: not-allowed !important;\n  pointer-events: none !important;\n  user-select:none !important;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border and click action -->\n<h1 id=\"fast-track-header\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" aria-label=\"Show today's score of unique pictures submitted\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <button id=\"patient-name-btn\" class=\"patient-btn card\" type=\"button\" aria-label=\"Select patient\" style=\"position:relative; padding-right: 40px;\">\n      <span id=\"selected-patient-name-span\">None selected</span>\n      <span id=\"patient-submission-badge\" class=\"patient-submission-badge\" aria-label=\"Number of submitted images for patient\" style=\"display:none;\">0</span>\n    </button>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <div id=\"capture-buttons-row\">\n    <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Back</button>\n    <button id=\"not-completed-capture-btn\" aria-label=\"Mark device as Not Completed\" type=\"button\">Not Completed</button>\n  </div>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Not Completed Options Modal -->\n<div id=\"not-completed-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Not Completed Reason Selection\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"not-completed-modal-content\" tabindex=\"0\">\n    <div id=\"not-completed-modal-header\">\n      <h2>Select Reason for Not Completed</h2>\n      <button id=\"not-completed-modal-close-btn\" aria-label=\"Close Not Completed Reason modal\" title=\"Close\">Ã—</button>\n    </div>\n    <div id=\"not-completed-options\">\n      <button data-reason=\"NC_Patient_Declined\" type=\"button\">Patient Declined</button>\n      <button data-reason=\"NC_Patient_Left\" type=\"button\">Patient Left</button>\n      <button data-reason=\"NC_Supplies_Out\" type=\"button\">Supplies Out</button>\n      <button data-reason=\"NC_Equipment_Failure\" type=\"button\">Equipment Failure</button>\n      <button id=\"not-completed-back-btn\" type=\"button\">Back</button>\n    </div>\n  </div>\n</div>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Modal for Fast Track Today's Score -->\n<div id=\"fast-track-score-modal\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Today's Score\" tabindex=\"-1\">\n  <div id=\"fast-track-score-content\">\n    <button id=\"fast-track-score-close\" aria-label=\"Close Today's Score\">Ã—</button>\n    <div id=\"fast-track-score-text\">Loading...</div>\n  </div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- IndexedDB Photo Storage Module --- */\n\n  const DB_NAME = 'PhotoCaptureDB';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'photos';\n\n  let dbPromise = null;\n\n  function openDB() {\n    if (dbPromise) return dbPromise;\n    dbPromise = new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = () => {\n        reject(request.error || new Error('Failed to open IndexedDB'));\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n          store.createIndex('timestamp', 'timestamp');\n          store.createIndex('mrn', 'mrn');\n        }\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n    });\n    return dbPromise;\n  }\n\n  async function addPhotoRecord({ id, mrn, device, blob, timestamp }) {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const record = { id, mrn, device, blob, timestamp };\n      const putReq = store.put(record);\n      putReq.onsuccess = () => resolve(true);\n      putReq.onerror = () => reject(putReq.error || new Error('Failed to add photo record'));\n    });\n  }\n\n  async function getAllPhotoRecords() {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const allRecords = [];\n      const request = store.openCursor(null, 'prev'); // descending order of keys (id)\n      request.onsuccess = (e) => {\n        const cursor = e.target.result;\n        if (cursor) {\n          allRecords.push(cursor.value);\n          cursor.continue();\n        } else {\n          // We have all records sorted by key descending\n          // Sort by timestamp descending explicitly, if needed\n          allRecords.sort((a, b) => b.timestamp - a.timestamp);\n          resolve(allRecords);\n        }\n      };\n      request.onerror = () => reject(request.error || new Error('Failed to fetch photo records'));\n    });\n  }\n\n  async function getPhotoRecordById(id) {\n    if (!id) return null;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const req = store.get(id);\n      req.onsuccess = () => resolve(req.result || null);\n      req.onerror = () => reject(req.error || new Error('Failed to fetch photo record by id'));\n    });\n  }\n\n  async function deletePhotoRecord(id) {\n    if (!id) return;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const delReq = store.delete(id);\n      delReq.onsuccess = () => resolve(true);\n      delReq.onerror = () => reject(delReq.error || new Error('Failed to delete photo record'));\n    });\n  }\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientNameSpan = document.getElementById('selected-patient-name-span');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const patientSubmissionBadge = document.getElementById('patient-submission-badge');\n  const patientNameBtn = document.getElementById('patient-name-btn');\n\n  const fastTrackHeader = document.getElementById('fast-track-header');\n  const fastTrackScoreModal = document.getElementById('fast-track-score-modal');\n  const fastTrackScoreCloseBtn = document.getElementById('fast-track-score-close');\n  const fastTrackScoreText = document.getElementById('fast-track-score-text');\n\n  // For submission status and not completed status cache\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses',\n  };\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  /* --- Not Completed Status Cache --- */\n  const notCompletedModalOverlay = document.getElementById('not-completed-modal-overlay');\n  const notCompletedModalContent = document.getElementById('not-completed-modal-content');\n  const notCompletedModalCloseBtn = document.getElementById('not-completed-modal-close-btn');\n  const notCompletedOptionsContainer = document.getElementById('not-completed-options');\n  const notCompletedBackBtn = document.getElementById('not-completed-back-btn');\n\n  let notCompletedStatusCache = {};\n  let submissionStatusCache = {};\n\n  /* --- Helper Functions for Loader --- */\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  /* --- Fetch appointments and process locations/patients --- */\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoader();\n    }\n    try {\n      let payload = {};\n      if (locationValue !== null && locationValue !== undefined && activeModal === 'patient') {\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if (!appointments.length) {\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if (activeModal === 'location') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if (activeModal === 'patient') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoader();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if (cached) {\n        const cachedLocations = JSON.parse(cached);\n        if (Array.isArray(cachedLocations) && cachedLocations.length) {\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if (cached) {\n        const cachedPatients = JSON.parse(cached);\n        if (Array.isArray(cachedPatients) && cachedPatients.length) {\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if (appt.Appt_Sched_Location_Descr) {\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr,\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a, b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if (!selectedLocation) {\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if (appt.MRN) {\n        if (!patientMap.has(appt.MRN)) {\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if (p.Appt_DateTime) {\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if (storedPatientJSON) {\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch { }\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if (selectedLocation && selectedPatient) {\n      selectedPatientNameSpan.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n      updatePatientSubmissionBadge(selectedPatient.MRN);\n    } else if (selectedLocation && !selectedPatient) {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    } else {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    }\n\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  function updateTimestampLastUpdate() {\n    if (selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    lastListUpdateSpan.textContent = '';\n\n    if (type === 'location') {\n      modalTitle.textContent = 'Select Location';\n      updateListBtn.style.display = 'inline-block';\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if (type === 'location') {\n      const hasCache = loadLocationsFromCache();\n\n      if (hasCache) {\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if (hasPatientsCache) {\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if (activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if (activeModal === 'location') {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if (activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch { }\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch (e) {\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate() {\n    if (activeModal === 'patient') {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if (type === 'location') {\n      items.sort((a, b) => a.label.localeCompare(b.label));\n    } else if (type === 'patient') {\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if (items.length === 0) {\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if (type === 'location') {\n        btn.textContent = item.label;\n        if (item.value === selectedLocation) {\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n\n        // Add submission badge count including both successful and Not Completed counts\n        const uniqueCount = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(item.MRN);\n        if (uniqueCount > 0) {\n          const badge = document.createElement('span');\n          badge.className = 'patient-submission-badge';\n          badge.textContent = uniqueCount;\n          btn.style.position = 'relative';\n          btn.appendChild(badge);\n        }\n\n        if (selectedPatient && item.MRN === selectedPatient.MRN) {\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', async () => {\n        if (type === 'location') {\n          if (item.value !== selectedLocation) {\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            await awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if (!selectedPatient || selectedPatient.MRN !== item.MRN) {\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  async function awaitPatientListUpdateForNewLocation() {\n    try {\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if (!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && modalOverlay.style.display === 'flex') {\n      closeModal();\n    }\n\n    if (e.key === 'Escape') {\n      if (modalDetailOverlay.style.display === 'flex') {\n        modalDetailOverlay.style.display = 'none';\n      }\n      if (photoModalOverlay.style.display === 'flex') {\n        photoModalOverlay.style.display = 'none';\n      }\n      if (photoSubmitLoaderOverlay.style.display === 'flex') {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n      if (fastTrackScoreModal.style.display === 'flex') {\n        closeFastTrackScoreModal();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if (!selectedLocation) {\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n  const notCompletedCaptureBtn = document.getElementById('not-completed-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  /* --- Not Completed Status Cache Load/Save --- */\n  function loadNotCompletedStatusCache() {\n    try {\n      const cached = localStorage.getItem('notCompletedStatuses');\n      if (cached) {\n        notCompletedStatusCache = JSON.parse(cached) || {};\n      } else {\n        notCompletedStatusCache = {};\n      }\n    } catch (e) {\n      notCompletedStatusCache = {};\n    }\n  }\n  function saveNotCompletedStatusCache() {\n    try {\n      localStorage.setItem('notCompletedStatuses', JSON.stringify(notCompletedStatusCache));\n    } catch (e) { }\n  }\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if (cached) {\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch (e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch (e) {}\n  }\n\n  function clearChildren(el) {\n    while (el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  }\n\n  async function initializePatientDevices(mrn) {\n    if (!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ mrn })\n      });\n      if (!res.ok) throw new Error(`Server error: ${res.status}`);\n      let devices = await res.json();\n      if (!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if (currentDevices.length === 0) {\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch (e) {\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n\n    // Also load failed/pending submissions for current MRN to show yellow badge\n    const allSubmissions = loadSavedSubmissions();\n    // Filter pending or failed submissions for current MRN and device\n    const pendingOrFailedSubmissions = allSubmissions.filter(sub => \n      sub.mrn === currentMRN && \n      (sub.status === 'Pending' || sub.status === 'Failed')\n    );\n\n    devices.sort((a, b) => {\n      if (!a.POCEquipment) return 1;\n      if (!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      const deviceName = device.POCEquipment || '';\n\n      // Show \"Not Completed\" X badge if marked so\n      if (notCompletedStatusCache[currentMRN] && notCompletedStatusCache[currentMRN][deviceName]) {\n        const xBadge = document.createElement('div');\n        xBadge.className = 'device-not-completed';\n        xBadge.title = 'Marked as Not Completed';\n        xBadge.textContent = 'âœ•';\n        card.appendChild(xBadge);\n      }\n\n      // Show \"pending/failed\" yellow dash badge if any pending or failed submissions exist for this device:\n      if (pendingOrFailedSubmissions.some(sub => {\n        try {\n          const dev = JSON.parse(sub.device);\n          return dev.POCEquipment === deviceName;\n        } catch {\n          return false;\n        }\n      })) {\n        const pendingBadge = document.createElement('div');\n        pendingBadge.className = 'device-pending';\n        pendingBadge.title = 'Submission Pending or Failed';\n        pendingBadge.textContent = '-';\n        card.appendChild(pendingBadge);\n      }\n      // Show \"checked\" badge if successfully submitted AND no pending or failed submission\n      else if (submissionStatusCache[currentMRN] && submissionStatusCache[currentMRN][deviceName]) {\n        const checkmark = document.createElement('div');\n        checkmark.className = 'device-checked';\n        checkmark.title = 'Device Successfully Submitted';\n        checkmark.textContent = 'âœ“';\n        card.appendChild(checkmark);\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled when opening camera\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          const appElement = document.getElementById('app');\n          if (appElement) {\n            appElement.scrollTo({ top: appElement.scrollHeight - appElement.clientHeight + 20, behavior: 'smooth' });\n          }\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({ behavior: 'smooth', block: 'end' });\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  async function startCamera() {\n    try {\n      if (cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if (videoTrack && videoTrack.getCapabilities) {\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if (capabilities.imageStabilization !== undefined) {\n          constraintsApply.imageStabilization = true;\n        }\n        if (capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')) {\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if (Object.keys(constraintsApply).length) {\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch (e) { }\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch (e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n\n    const appElement = document.getElementById('app');\n    if (appElement) {\n      appElement.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  });\n\n  // Fix capture button keyboard accessibility and drawing in requestAnimationFrame for reliability:\n  captureBtn.addEventListener('click', takePhoto);\n  captureBtn.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      takePhoto();\n    }\n  });\n\n  function takePhoto() {\n    if (!cameraStream) return;\n\n    requestAnimationFrame(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled on photo display\n      }, 'image/jpeg', 0.95);\n    });\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  // Util function for setting submit button loading state (disabled and text)\n  function setButtonLoadingState(button, isLoading) {\n    if (isLoading) {\n      button.disabled = true;\n      button.textContent = 'Submitting...'; // Change button label during loading\n      button.style.opacity = '0.6';        // Make it appear visually disabled\n      button.style.cursor = 'not-allowed';\n    } else {\n      button.disabled = false;\n      button.textContent = 'Submit';       // Restore original label\n      button.style.opacity = '';\n      button.style.cursor = 'pointer';\n    }\n  }\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions for photo submission loader and timer\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if (submissionCountdown < 0) {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        if(onTimeout && typeof onTimeout === 'function'){\n          onTimeout();\n        }\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  function stopSubmitTimeout() {\n    if (submissionTimeoutId !== null) {\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    if (!navigator.onLine) {\n      await markSubmissionFailedDueOffline();\n      // After failure handling, update device cards with badges\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n      return;\n    }\n\n    // Show overlay loader & disable submit button when Submit pressed\n    setButtonLoadingState(photoOkBtn, true);\n    uploadStatus.textContent = '';\n    showPhotoSubmitLoader();\n\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n\n      // Update badge and device cards immediately\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n      setButtonLoadingState(photoOkBtn, false);\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n    };\n\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      // Save photo blob directly in IndexedDB instead of base64 localStorage\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      const timestamp = Date.now();\n\n      const submissionRecord = {\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: 'Pending',\n        timestamp\n      };\n\n      // Save photo blob record in IndexedDB\n      await addPhotoRecord({ id, mrn: currentMRN, device: submissionRecord.device, blob: photoBlob, timestamp });\n\n      // Also save the submission status record in localStorage (without photoDataUrl)\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(id, 'Success');\n\n      if (!submissionStatusCache[currentMRN]) {\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        submissionStatusCache[currentMRN][deviceName] = true;\n        saveSubmissionStatusCache();\n      }\n\n      // After success, refresh device cards with badges\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n      if (photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n\n      setButtonLoadingState(photoOkBtn, false);\n\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n\n        if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n      }, 1000);\n    } catch (e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if (e.name === 'AbortError') {\n        setButtonLoadingState(photoOkBtn, false);\n        return;\n      }\n      if (!navigator.onLine) {\n        await markSubmissionFailedDueOffline();\n\n        loadSubmissionStatusCache();\n        loadNotCompletedStatusCache();\n        renderDeviceCards(currentDevices);\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n\n        loadSubmissionStatusCache();\n        loadNotCompletedStatusCache();\n        renderDeviceCards(currentDevices);\n      }\n      setButtonLoadingState(photoOkBtn, false);\n    }\n  }\n\n  async function markSubmissionFailedDueOffline() {\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n\n    const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    const timestamp = Date.now();\n\n    // Save photo blob record in IndexedDB\n    await addPhotoRecord({ id, mrn: currentMRN, device: JSON.stringify(selectedDevice), blob: photoBlob, timestamp });\n\n    const submissionRecord = {\n      id,\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      status: 'Failed',\n      timestamp\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n\n    setButtonLoadingState(photoOkBtn, false);\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    // After failure, update device cards with yellow badge immediately\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n    renderDeviceCards(currentDevices);\n  }\n\n  async function updateSubmissionStatusTimed(newStatus) {\n    const submissions = loadSavedSubmissions();\n    let found = false;\n    for (let i = submissions.length - 1; i >= 0; i--) {\n      const s = submissions[i];\n      if (s.status === 'Pending' && s.mrn === currentMRN) {\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if (!found && newStatus === 'Failed') {\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if (!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch (e) {\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed' || s.status === 'Pending');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if (newStatus === 'Failed') {\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if (dateFilterInput.value) {\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if (filtered.length === 0) {\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', `Submission for MRN ${sub.mrn}, Device: ${(JSON.parse(sub.device).POCEquipment || '')}, Date: ${formatDate(sub.timestamp)}, Status: ${sub.status}`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if (sub.status === 'Failed' || sub.status === 'Pending') {\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n            // After retry success, refresh device badges immediately\n            loadSubmissionStatusCache();\n            loadNotCompletedStatusCache();\n            renderDeviceCards(currentDevices);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if (deviceObj.Description) {\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch { }\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if (typeof submission.photoDataUrl === 'string' && submission.photoDataUrl) {\n      // Legacy base64 is still shown for old records\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    } else {\n      // For new records, fetch blob from IndexedDB and show\n      getPhotoRecordById(submission.id).then(record => {\n        if (record && record.blob) {\n          const img = document.createElement('img');\n          const url = URL.createObjectURL(record.blob);\n          img.src = url;\n          img.alt = 'Captured photo of device';\n          img.style.maxWidth = '100%';\n          img.style.borderRadius = '14px';\n          img.style.marginTop = '12px';\n\n          modalDetailContent.appendChild(img);\n\n          // Revoke Object URL when modal closes\n          const onClose = () => {\n            URL.revokeObjectURL(url);\n            modalDetailOverlay.removeEventListener('click', onClose);\n            modalDetailCloseBtn.removeEventListener('click', onClose);\n          };\n          modalDetailOverlay.addEventListener('click', onClose);\n          modalDetailCloseBtn.addEventListener('click', onClose);\n        }\n      }).catch(() => { /* silently ignore */ });\n    }\n\n    if (submission.status === 'Failed' || submission.status === 'Pending') {\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if (!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n\n      // Refresh devices cards upon retry success\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n    } catch (e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if (submission.status !== 'Failed' && submission.status !== 'Pending') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n\n      const record = await getPhotoRecordById(submission.id);\n      if (!record || !record.blob) throw new Error('No photo data to upload');\n\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', record.blob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      await removeSubmissionRecord(submission.id);\n      await deletePhotoRecord(submission.id);\n\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n      // Update internal caches for success indication\n      if (!submissionStatusCache[submission.mrn]) submissionStatusCache[submission.mrn] = {};\n      try {\n        const dev = JSON.parse(submission.device);\n        if (dev.POCEquipment) {\n          submissionStatusCache[submission.mrn][dev.POCEquipment] = true;\n          saveSubmissionStatusCache();\n        }\n      } catch {}\n\n    } catch (e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions.splice(idx, 1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()} ${pad(dt.getHours())}:${pad(dt.getMinutes())}`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()}`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if (visible) {\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if (sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if (hasFailedToday) {\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  // New function: count both successful and Not Completed devices for patient\n  // Also count Pending and Failed as devices to include for badges\n  function getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn) {\n    if (!mrn) return 0;\n    let countMap = {};\n    if (submissionStatusCache[mrn]) {\n      Object.keys(submissionStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    if (notCompletedStatusCache[mrn]) {\n      Object.keys(notCompletedStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    const allSubmissions = loadSavedSubmissions();\n    allSubmissions.forEach(sub => {\n      if ((sub.status === 'Pending' || sub.status === 'Failed') && sub.mrn === mrn) {\n        try {\n          const dev = JSON.parse(sub.device);\n          if (dev.POCEquipment) {\n            countMap[dev.POCEquipment] = true;\n          }\n        } catch {}\n      }\n    });\n    return Object.keys(countMap).length;\n  }\n\n  function updatePatientSubmissionBadge(mrn) {\n    const count = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn);\n    if (count > 0) {\n      patientSubmissionBadge.style.display = 'inline-block';\n      patientSubmissionBadge.textContent = count;\n      patientSubmissionBadge.setAttribute('aria-label', `${count} unique devices submitted (including Not Completed) for this patient`);\n    } else {\n      patientSubmissionBadge.style.display = 'none';\n      patientSubmissionBadge.textContent = '';\n    }\n  }\n\n  async function fetchAndDisplayTodaysScore() {\n    fastTrackScoreText.textContent = 'Loading...';\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/49f9681f-32b1-4ac6-ad88-f0d35cc86176', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n      if (!res.ok) throw new Error('Network response was not OK: ' + res.status);\n      const data = await res.text();\n      fastTrackScoreText.innerHTML = data;\n    } catch (e) {\n      fastTrackScoreText.textContent = 'Failed to load score: ' + e.message;\n    }\n  }\n\n  function openFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'flex';\n    fastTrackScoreModal.focus();\n    fetchAndDisplayTodaysScore();\n  }\n\n  function closeFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'none';\n  }\n\n  fastTrackHeader.addEventListener('click', () => {\n    openFastTrackScoreModal();\n  });\n  fastTrackHeader.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      openFastTrackScoreModal();\n    }\n  });\n  fastTrackScoreCloseBtn.addEventListener('click', () => {\n    closeFastTrackScoreModal();\n  });\n\n  notCompletedCaptureBtn.addEventListener('click', () => {\n    if (!selectedDevice) {\n      alert('Please select a device first by clicking on its card.');\n      return;\n    }\n    openNotCompletedModal();\n  });\n\n  function openNotCompletedModal() {\n    // Important: Show devices section underneath as user requested (do NOT hide it)\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false; // Show devices\n\n    notCompletedModalOverlay.style.display = 'flex';\n    notCompletedModalContent.focus();\n  }\n\n  function closeNotCompletedModal() {\n    notCompletedModalOverlay.style.display = 'none';\n    // Back button from Not Completed modal goes back to devices list,\n    // NOT to camera feed as requested\n    devicesSection.hidden = false;\n    cameraSection.classList.add('hidden');\n    devicesSection.focus();\n  }\n\n  notCompletedModalCloseBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedBackBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedOptionsContainer.querySelectorAll('button[data-reason]').forEach(btn => {\n    btn.addEventListener('click', async () => {\n      const reason = btn.getAttribute('data-reason');\n      if (!selectedDevice || !currentMRN) {\n        alert('No device or patient selected.');\n        closeNotCompletedModal();\n        return;\n      }\n      await submitNotCompletedReason(reason, btn.textContent);\n\n      // After submit (success or failure), update device cards badges\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n      closeNotCompletedModal();\n    });\n  });\n\n  async function submitNotCompletedReason(reasonCode, reasonText) {\n    try {\n      showLoader();\n      const payload = {\n        mrn: currentMRN,\n        device: selectedDevice,\n        notCompletedReason: reasonCode\n      };\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55';\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      loadNotCompletedStatusCache();\n      if (!notCompletedStatusCache[currentMRN]) {\n        notCompletedStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        notCompletedStatusCache[currentMRN][deviceName] = reasonCode;\n        saveNotCompletedStatusCache();\n      }\n\n      loadSubmissionStatusCache();\n      // We do NOT delete success submission for this device when marking Not Completed,\n      // to comply with requirement to count Not Completed also as counts towards patient badge.\n      // So do not delete from submissionStatusCache here\n\n      renderDeviceCards(currentDevices);\n\n      alert('Not Completed reason \"' + reasonText + '\" submitted successfully.');\n\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      if (e.name === 'AbortError' || e.message.includes('NetworkError') || !navigator.onLine) {\n        alert('No response from server, saved as Failed Sends.');\n        const submissionRecord = {\n          id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n          mrn: currentMRN,\n          device: JSON.stringify(selectedDevice),\n          status: 'Failed',\n          notCompletedReason: reasonCode,\n          timestamp: Date.now()\n        };\n        addSubmissionRecord(submissionRecord);\n        renderSavedSubmissions();\n        updateShowSubmissionsButton();\n\n        // After failure save, update device cards badges immediately\n        loadSubmissionStatusCache();\n        loadNotCompletedStatusCache();\n        renderDeviceCards(currentDevices);\n\n        closeNotCompletedModal();\n      } else {\n        alert('Submit failed: ' + e.message);\n      }\n    } finally {\n      hideLoader();\n    }\n  }\n\n  /* --- Initialization & Misc --- */\n\n  initialLoad();\n\n  async function initialLoad() {\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if (hasCachedLocations) {\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if (selectedLocation) {\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if (hasCachedPatients) {\n          patients = patients || [];\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch (e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if (selectedPatient && selectedPatient.MRN) {\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        460,
        520
      ],
      "id": "e89f41ff-1bb7-4d34-bebe-a69e6d1f27a7",
      "name": "Yellow Badge"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n  scroll-padding-bottom: 160px; /* added padding for scrolling */\n  scroll-behavior: smooth;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n  cursor: pointer; /* Make clickable */\n  position: relative;\n}\n\n/* Badge style for patient card that shows number of unique submitted devices */\n.patient-submission-badge {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  background: #dc3545;\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n  flex: 1 0 140px;\n}\n#cancel-capture-btn:hover {\n  background: #005fcc;\n}\n\n/* New container for capture modal buttons including Cancel and Not Completed side by side */\n#capture-buttons-row {\n  display: flex;\n  justify-content: center;\n  gap: 12px;\n  width: 100%;\n  max-width: 480px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n}\n\n/* Not Completed button in capture modal - styled as red cancel style */\n#not-completed-capture-btn {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  flex: 1 0 140px;\n}\n#not-completed-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Not Completed Modal Styles */\n\n#not-completed-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n\n#not-completed-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n#not-completed-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#not-completed-modal-header h2 {\n  font-size: 1.4rem;\n  color: #b00020;\n  font-weight: 700;\n  margin: 0;\n}\n\n#not-completed-modal-close-btn {\n  background: #b00020;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 24px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#not-completed-modal-close-btn:hover {\n  background: #7a000f;\n}\n\n#not-completed-options {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 12px;\n}\n\n#not-completed-options button[data-reason] {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n}\n#not-completed-options button[data-reason]:hover {\n  background: #7a000f;\n}\n\n#not-completed-back-btn {\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n  margin-top: 8px;\n}\n#not-completed-back-btn:hover {\n  background: #005fcc;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n  position: relative; /* for badge positioning */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nbutton.patient-btn.card small {\n  font-size: 0.875rem;\n  color: #444;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n/* Red X badge for Not Completed device card */\n.device-not-completed {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #b00020;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(176,0,32,0.6);\n}\n\n/* Modified device-checked style for count badge */\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  min-width: 24px;\n  height: 24px;\n  padding: 0 6px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 12px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  font-weight: 700;\n  user-select: none;\n  white-space: nowrap;\n}\n\n/* Added focus style to badges for accessibility */\n.device-not-completed:focus,\n.device-checked:focus {\n  outline: 2px solid #ffb3b3;\n  outline-offset: 2px;\n}\n\n/* New yellow \"pending\" badge for failed submission */\n.device-pending {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #ffc107;  /* Bootstrap warning/yellow */\n  color: #333;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(255,193,7,0.6);\n}\n\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  scroll-margin-bottom: 160px; /* ensure sufficient margin for scrolling */\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n  z-index: 10000; /* lower than photo-submit-loader-overlay to show loader above */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n  touch-action: manipulation;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n  touch-action: manipulation;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px #80aaff;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay with spinner and timer for photo submit */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n  user-select:none;\n}\n\n/* Saved Submissions Panel */\n/* add scrollbar and fixed height with overflow for scroll */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n  overflow-y: auto; /* always show scroll if content overflow */\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n/* Modal for Fast Track Score */\n#fast-track-score-modal {\n  position: fixed;\n  inset: 0;\n  display: none;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#fast-track-score-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n}\n\n#fast-track-score-close {\n  position: absolute;\n  top: 8px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 20px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  transition: background 0.3s;\n  user-select:none;\n}\n#fast-track-score-close:hover {\n  background: #d72950;\n}\n\n/* New styles for disabled button with loading state */\nbutton[disabled] {\n  opacity: 0.6 !important;\n  cursor: not-allowed !important;\n  pointer-events: none !important;\n  user-select:none !important;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border and click action -->\n<h1 id=\"fast-track-header\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" aria-label=\"Show today's score of unique pictures submitted\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <button id=\"patient-name-btn\" class=\"patient-btn card\" type=\"button\" aria-label=\"Select patient\" style=\"position:relative; padding-right: 40px;\">\n      <span id=\"selected-patient-name-span\">None selected</span>\n      <span id=\"patient-submission-badge\" class=\"patient-submission-badge\" aria-label=\"Number of submitted images for patient\" style=\"display:none;\">0</span>\n    </button>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <div id=\"capture-buttons-row\">\n    <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Back</button>\n    <button id=\"not-completed-capture-btn\" aria-label=\"Mark device as Not Completed\" type=\"button\">Not Completed</button>\n  </div>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Not Completed Options Modal -->\n<div id=\"not-completed-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Not Completed Reason Selection\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"not-completed-modal-content\" tabindex=\"0\">\n    <div id=\"not-completed-modal-header\">\n      <h2>Select Reason for Not Completed</h2>\n      <button id=\"not-completed-modal-close-btn\" aria-label=\"Close Not Completed Reason modal\" title=\"Close\">Ã—</button>\n    </div>\n    <div id=\"not-completed-options\">\n      <button data-reason=\"NC_Patient_Declined\" type=\"button\">Patient Declined</button>\n      <button data-reason=\"NC_Patient_Left\" type=\"button\">Patient Left</button>\n      <button data-reason=\"NC_Supplies_Out\" type=\"button\">Supplies Out</button>\n      <button data-reason=\"NC_Equipment_Failure\" type=\"button\">Equipment Failure</button>\n      <button id=\"not-completed-back-btn\" type=\"button\">Back</button>\n    </div>\n  </div>\n</div>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Modal for Fast Track Today's Score -->\n<div id=\"fast-track-score-modal\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Today's Score\" tabindex=\"-1\">\n  <div id=\"fast-track-score-content\">\n    <button id=\"fast-track-score-close\" aria-label=\"Close Today's Score\">Ã—</button>\n    <div id=\"fast-track-score-text\">Loading...</div>\n  </div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- IndexedDB Photo Storage Module --- */\n\n  const DB_NAME = 'PhotoCaptureDB';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'photos';\n\n  let dbPromise = null;\n\n  function openDB() {\n    if (dbPromise) return dbPromise;\n    dbPromise = new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = () => {\n        reject(request.error || new Error('Failed to open IndexedDB'));\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n          store.createIndex('timestamp', 'timestamp');\n          store.createIndex('mrn', 'mrn');\n        }\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n    });\n    return dbPromise;\n  }\n\n  async function addPhotoRecord({ id, mrn, device, blob, timestamp }) {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const record = { id, mrn, device, blob, timestamp };\n      const putReq = store.put(record);\n      putReq.onsuccess = () => resolve(true);\n      putReq.onerror = () => reject(putReq.error || new Error('Failed to add photo record'));\n    });\n  }\n\n  async function getAllPhotoRecords() {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const allRecords = [];\n      const request = store.openCursor(null, 'prev'); // descending order of keys (id)\n      request.onsuccess = (e) => {\n        const cursor = e.target.result;\n        if (cursor) {\n          allRecords.push(cursor.value);\n          cursor.continue();\n        } else {\n          // We have all records sorted by key descending\n          // Sort by timestamp descending explicitly, if needed\n          allRecords.sort((a, b) => b.timestamp - a.timestamp);\n          resolve(allRecords);\n        }\n      };\n      request.onerror = () => reject(request.error || new Error('Failed to fetch photo records'));\n    });\n  }\n\n  async function getPhotoRecordById(id) {\n    if (!id) return null;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const req = store.get(id);\n      req.onsuccess = () => resolve(req.result || null);\n      req.onerror = () => reject(req.error || new Error('Failed to fetch photo record by id'));\n    });\n  }\n\n  async function deletePhotoRecord(id) {\n    if (!id) return;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const delReq = store.delete(id);\n      delReq.onsuccess = () => resolve(true);\n      delReq.onerror = () => reject(delReq.error || new Error('Failed to delete photo record'));\n    });\n  }\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientNameSpan = document.getElementById('selected-patient-name-span');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const patientSubmissionBadge = document.getElementById('patient-submission-badge');\n  const patientNameBtn = document.getElementById('patient-name-btn');\n\n  const fastTrackHeader = document.getElementById('fast-track-header');\n  const fastTrackScoreModal = document.getElementById('fast-track-score-modal');\n  const fastTrackScoreCloseBtn = document.getElementById('fast-track-score-close');\n  const fastTrackScoreText = document.getElementById('fast-track-score-text');\n\n  // For submission status and not completed status cache\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses',\n  };\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  /* --- Not Completed Status Cache --- */\n  const notCompletedModalOverlay = document.getElementById('not-completed-modal-overlay');\n  const notCompletedModalContent = document.getElementById('not-completed-modal-content');\n  const notCompletedModalCloseBtn = document.getElementById('not-completed-modal-close-btn');\n  const notCompletedOptionsContainer = document.getElementById('not-completed-options');\n  const notCompletedBackBtn = document.getElementById('not-completed-back-btn');\n\n  let notCompletedStatusCache = {};\n  let submissionStatusCache = {};\n\n  /* --- Helper Functions for Loader --- */\n  function showLoader() {\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  /* --- Fetch appointments and process locations/patients --- */\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoader();\n    }\n    try {\n      let payload = {};\n      if (locationValue !== null && locationValue !== undefined && activeModal === 'patient') {\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if (!appointments.length) {\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if (activeModal === 'location') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if (activeModal === 'patient') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoader();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if (cached) {\n        const cachedLocations = JSON.parse(cached);\n        if (Array.isArray(cachedLocations) && cachedLocations.length) {\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if (cached) {\n        const cachedPatients = JSON.parse(cached);\n        if (Array.isArray(cachedPatients) && cachedPatients.length) {\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if (appt.Appt_Sched_Location_Descr) {\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr,\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a, b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if (!selectedLocation) {\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if (appt.MRN) {\n        if (!patientMap.has(appt.MRN)) {\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if (p.Appt_DateTime) {\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if (storedPatientJSON) {\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch { }\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if (selectedLocation && selectedPatient) {\n      selectedPatientNameSpan.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n      updatePatientSubmissionBadge(selectedPatient.MRN);\n    } else if (selectedLocation && !selectedPatient) {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    } else {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadge.style.display = 'none';\n    }\n\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  function updateTimestampLastUpdate() {\n    if (selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    lastListUpdateSpan.textContent = '';\n\n    if (type === 'location') {\n      modalTitle.textContent = 'Select Location';\n      updateListBtn.style.display = 'inline-block';\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if (type === 'location') {\n      const hasCache = loadLocationsFromCache();\n\n      if (hasCache) {\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if (hasPatientsCache) {\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if (activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if (activeModal === 'location') {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if (activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch { }\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch (e) {\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate() {\n    if (activeModal === 'patient') {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if (type === 'location') {\n      items.sort((a, b) => a.label.localeCompare(b.label));\n    } else if (type === 'patient') {\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if (items.length === 0) {\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if (type === 'location') {\n        btn.textContent = item.label;\n        if (item.value === selectedLocation) {\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n\n        // Add submission badge count including both successful and Not Completed counts\n        const uniqueCount = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(item.MRN);\n        if (uniqueCount > 0) {\n          const badge = document.createElement('span');\n          badge.className = 'patient-submission-badge';\n          badge.textContent = uniqueCount;\n          btn.style.position = 'relative';\n          btn.appendChild(badge);\n        }\n\n        if (selectedPatient && item.MRN === selectedPatient.MRN) {\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', async () => {\n        if (type === 'location') {\n          if (item.value !== selectedLocation) {\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            await awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if (!selectedPatient || selectedPatient.MRN !== item.MRN) {\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  async function awaitPatientListUpdateForNewLocation() {\n    try {\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if (!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && modalOverlay.style.display === 'flex') {\n      closeModal();\n    }\n\n    if (e.key === 'Escape') {\n      if (modalDetailOverlay.style.display === 'flex') {\n        modalDetailOverlay.style.display = 'none';\n      }\n      if (photoModalOverlay.style.display === 'flex') {\n        photoModalOverlay.style.display = 'none';\n      }\n      if (photoSubmitLoaderOverlay.style.display === 'flex') {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n      if (fastTrackScoreModal.style.display === 'flex') {\n        closeFastTrackScoreModal();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if (!selectedLocation) {\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n  const notCompletedCaptureBtn = document.getElementById('not-completed-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  /* --- Not Completed Status Cache Load/Save --- */\n  function loadNotCompletedStatusCache() {\n    try {\n      const cached = localStorage.getItem('notCompletedStatuses');\n      if (cached) {\n        notCompletedStatusCache = JSON.parse(cached) || {};\n      } else {\n        notCompletedStatusCache = {};\n      }\n    } catch (e) {\n      notCompletedStatusCache = {};\n    }\n  }\n  function saveNotCompletedStatusCache() {\n    try {\n      localStorage.setItem('notCompletedStatuses', JSON.stringify(notCompletedStatusCache));\n    } catch (e) { }\n  }\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if (cached) {\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch (e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch (e) {}\n  }\n\n  function clearChildren(el) {\n    while (el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  }\n\n  async function initializePatientDevices(mrn) {\n    if (!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ mrn })\n      });\n      if (!res.ok) throw new Error(`Server error: ${res.status}`);\n      let devices = await res.json();\n      if (!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if (currentDevices.length === 0) {\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch (e) {\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n\n    // Also load failed/pending submissions for current MRN to show yellow badge\n    const allSubmissions = loadSavedSubmissions();\n    // Filter pending or failed submissions for current MRN and device\n    const pendingOrFailedSubmissions = allSubmissions.filter(sub => \n      sub.mrn === currentMRN && \n      (sub.status === 'Pending' || sub.status === 'Failed')\n    );\n\n    devices.sort((a, b) => {\n      if (!a.POCEquipment) return 1;\n      if (!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      const deviceName = device.POCEquipment || '';\n\n      // Show \"Not Completed\" X badge if marked so\n      if (notCompletedStatusCache[currentMRN] && notCompletedStatusCache[currentMRN][deviceName]) {\n        const xBadge = document.createElement('div');\n        xBadge.className = 'device-not-completed';\n        xBadge.title = 'Marked as Not Completed';\n        xBadge.textContent = 'âœ•';\n        card.appendChild(xBadge);\n      }\n\n      // Show \"pending/failed\" yellow dash badge if any pending or failed submissions exist for this device:\n      if (pendingOrFailedSubmissions.some(sub => {\n        try {\n          const dev = JSON.parse(sub.device);\n          return dev.POCEquipment === deviceName;\n        } catch {\n          return false;\n        }\n      })) {\n        const pendingBadge = document.createElement('div');\n        pendingBadge.className = 'device-pending';\n        pendingBadge.title = 'Submission Pending or Failed';\n        pendingBadge.textContent = '-';\n        card.appendChild(pendingBadge);\n      }\n      // Show green badge with count if device has successful submissions AND no pending or failed submission\n      else {\n        const successCount = getSuccessfulSubmissionCountForDevice(currentMRN, deviceName);\n        if (successCount > 0) {\n          const countBadge = document.createElement('div');\n          countBadge.className = 'device-checked'; // reuse styling for badge\n          countBadge.title = `Successfully submitted ${successCount} time${successCount > 1 ? 's' : ''}`;\n          countBadge.textContent = successCount;\n          card.appendChild(countBadge);\n        }\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled when opening camera\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          const appElement = document.getElementById('app');\n          if (appElement) {\n            appElement.scrollTo({ top: appElement.scrollHeight - appElement.clientHeight + 20, behavior: 'smooth' });\n          }\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({ behavior: 'smooth', block: 'end' });\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  // Returns the count of successful submissions (number) for the given patient MRN and deviceName\n  function getSuccessfulSubmissionCountForDevice(mrn, deviceName) {\n    if (!mrn || !deviceName) return 0;\n    if (submissionStatusCache[mrn] && submissionStatusCache[mrn][deviceName]) {\n      return submissionStatusCache[mrn][deviceName];\n    }\n    return 0;\n  }\n\n  async function startCamera() {\n    try {\n      if (cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if (videoTrack && videoTrack.getCapabilities) {\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if (capabilities.imageStabilization !== undefined) {\n          constraintsApply.imageStabilization = true;\n        }\n        if (capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')) {\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if (Object.keys(constraintsApply).length) {\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch (e) { }\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch (e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n\n    const appElement = document.getElementById('app');\n    if (appElement) {\n      appElement.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  });\n\n  // Fix capture button keyboard accessibility and drawing in requestAnimationFrame for reliability:\n  captureBtn.addEventListener('click', takePhoto);\n  captureBtn.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      takePhoto();\n    }\n  });\n\n  function takePhoto() {\n    if (!cameraStream) return;\n\n    requestAnimationFrame(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled on photo display\n      }, 'image/jpeg', 0.95);\n    });\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  // Util function for setting submit button loading state (disabled and text)\n  function setButtonLoadingState(button, isLoading) {\n    if (isLoading) {\n      button.disabled = true;\n      button.textContent = 'Submitting...'; // Change button label during loading\n      button.style.opacity = '0.6';        // Make it appear visually disabled\n      button.style.cursor = 'not-allowed';\n    } else {\n      button.disabled = false;\n      button.textContent = 'Submit';       // Restore original label\n      button.style.opacity = '';\n      button.style.cursor = 'pointer';\n    }\n  }\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions for photo submission loader and timer\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if (submissionCountdown < 0) {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        if(onTimeout && typeof onTimeout === 'function'){\n          onTimeout();\n        }\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  function stopSubmitTimeout() {\n    if (submissionTimeoutId !== null) {\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    if (!navigator.onLine) {\n      await markSubmissionFailedDueOffline();\n      // After failure handling, update device cards with badges\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n      return;\n    }\n\n    // Show overlay loader & disable submit button when Submit pressed\n    setButtonLoadingState(photoOkBtn, true);\n    uploadStatus.textContent = '';\n    showPhotoSubmitLoader();\n\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n\n      // Update badge and device cards immediately\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n      setButtonLoadingState(photoOkBtn, false);\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n    };\n\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      // Save photo blob directly in IndexedDB instead of base64 localStorage\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      const timestamp = Date.now();\n\n      const submissionRecord = {\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: 'Pending',\n        timestamp\n      };\n\n      // Save photo blob record in IndexedDB\n      await addPhotoRecord({ id, mrn: currentMRN, device: submissionRecord.device, blob: photoBlob, timestamp });\n\n      // Also save the submission status record in localStorage (without photoDataUrl)\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(id, 'Success');\n\n      // Increment count on success (change from boolean to count)\n      if (!submissionStatusCache[currentMRN]) {\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        const currentCount = submissionStatusCache[currentMRN][deviceName] || 0;\n        submissionStatusCache[currentMRN][deviceName] = currentCount + 1;\n        saveSubmissionStatusCache();\n      }\n\n      // After success, refresh device cards with badges\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n      if (photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n\n      setButtonLoadingState(photoOkBtn, false);\n\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n\n        if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n      }, 1000);\n    } catch (e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if (e.name === 'AbortError') {\n        setButtonLoadingState(photoOkBtn, false);\n        return;\n      }\n      if (!navigator.onLine) {\n        await markSubmissionFailedDueOffline();\n\n        loadSubmissionStatusCache();\n        loadNotCompletedStatusCache();\n        renderDeviceCards(currentDevices);\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n\n        loadSubmissionStatusCache();\n        loadNotCompletedStatusCache();\n        renderDeviceCards(currentDevices);\n      }\n      setButtonLoadingState(photoOkBtn, false);\n    }\n  }\n\n  async function markSubmissionFailedDueOffline() {\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n\n    const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    const timestamp = Date.now();\n\n    // Save photo blob record in IndexedDB\n    await addPhotoRecord({ id, mrn: currentMRN, device: JSON.stringify(selectedDevice), blob: photoBlob, timestamp });\n\n    const submissionRecord = {\n      id,\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      status: 'Failed',\n      timestamp\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n\n    setButtonLoadingState(photoOkBtn, false);\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    // After failure, update device cards with yellow badge immediately\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n    renderDeviceCards(currentDevices);\n  }\n\n  async function updateSubmissionStatusTimed(newStatus) {\n    const submissions = loadSavedSubmissions();\n    let found = false;\n    for (let i = submissions.length - 1; i >= 0; i--) {\n      const s = submissions[i];\n      if (s.status === 'Pending' && s.mrn === currentMRN) {\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if (!found && newStatus === 'Failed') {\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if (!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch (e) {\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed' || s.status === 'Pending');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if (newStatus === 'Failed') {\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if (dateFilterInput.value) {\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if (filtered.length === 0) {\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', `Submission for MRN ${sub.mrn}, Device: ${(JSON.parse(sub.device).POCEquipment || '')}, Date: ${formatDate(sub.timestamp)}, Status: ${sub.status}`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if (sub.status === 'Failed' || sub.status === 'Pending') {\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n            // After retry success, refresh device badges immediately\n            loadSubmissionStatusCache();\n            loadNotCompletedStatusCache();\n            renderDeviceCards(currentDevices);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if (deviceObj.Description) {\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch { }\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if (typeof submission.photoDataUrl === 'string' && submission.photoDataUrl) {\n      // Legacy base64 is still shown for old records\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    } else {\n      // For new records, fetch blob from IndexedDB and show\n      getPhotoRecordById(submission.id).then(record => {\n        if (record && record.blob) {\n          const img = document.createElement('img');\n          const url = URL.createObjectURL(record.blob);\n          img.src = url;\n          img.alt = 'Captured photo of device';\n          img.style.maxWidth = '100%';\n          img.style.borderRadius = '14px';\n          img.style.marginTop = '12px';\n\n          modalDetailContent.appendChild(img);\n\n          // Revoke Object URL when modal closes\n          const onClose = () => {\n            URL.revokeObjectURL(url);\n            modalDetailOverlay.removeEventListener('click', onClose);\n            modalDetailCloseBtn.removeEventListener('click', onClose);\n          };\n          modalDetailOverlay.addEventListener('click', onClose);\n          modalDetailCloseBtn.addEventListener('click', onClose);\n        }\n      }).catch(() => { /* silently ignore */ });\n    }\n\n    if (submission.status === 'Failed' || submission.status === 'Pending') {\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if (!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n\n      // Refresh devices cards upon retry success\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n    } catch (e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if (submission.status !== 'Failed' && submission.status !== 'Pending') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n\n      const record = await getPhotoRecordById(submission.id);\n      if (!record || !record.blob) throw new Error('No photo data to upload');\n\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', record.blob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      await removeSubmissionRecord(submission.id);\n      await deletePhotoRecord(submission.id);\n\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n      // Update internal caches for success indication\n      if (!submissionStatusCache[submission.mrn]) submissionStatusCache[submission.mrn] = {};\n      try {\n        const dev = JSON.parse(submission.device);\n        if (dev.POCEquipment) {\n          // Increment count on retry success as well\n          const prevCount = submissionStatusCache[submission.mrn][dev.POCEquipment] || 0;\n          submissionStatusCache[submission.mrn][dev.POCEquipment] = prevCount + 1; \n          saveSubmissionStatusCache();\n        }\n      } catch {}\n\n    } catch (e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions.splice(idx, 1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()} ${pad(dt.getHours())}:${pad(dt.getMinutes())}`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()}`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if (visible) {\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if (sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if (hasFailedToday) {\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  // New function: count both successful and Not Completed devices for patient\n  // Also count Pending and Failed as devices to include for badges\n  function getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn) {\n    if (!mrn) return 0;\n    let countMap = {};\n    // include successful submission counts (note: now a count, so just presence counts for unique devices)\n    if (submissionStatusCache[mrn]) {\n      Object.keys(submissionStatusCache[mrn]).forEach(dev => {\n        if (submissionStatusCache[mrn][dev] > 0) {\n          countMap[dev] = true;\n        }\n      });\n    }\n    if (notCompletedStatusCache[mrn]) {\n      Object.keys(notCompletedStatusCache[mrn]).forEach(dev => {\n        countMap[dev] = true;\n      });\n    }\n    const allSubmissions = loadSavedSubmissions();\n    allSubmissions.forEach(sub => {\n      if ((sub.status === 'Pending' || sub.status === 'Failed') && sub.mrn === mrn) {\n        try {\n          const dev = JSON.parse(sub.device);\n          if (dev.POCEquipment) {\n            countMap[dev.POCEquipment] = true;\n          }\n        } catch {}\n      }\n    });\n    return Object.keys(countMap).length;\n  }\n\n  function updatePatientSubmissionBadge(mrn) {\n    const count = getUniqueSubmittedAndNotCompletedDevicesCountForPatient(mrn);\n    if (count > 0) {\n      patientSubmissionBadge.style.display = 'inline-block';\n      patientSubmissionBadge.textContent = count;\n      patientSubmissionBadge.setAttribute('aria-label', `${count} unique devices submitted (including Not Completed) for this patient`);\n    } else {\n      patientSubmissionBadge.style.display = 'none';\n      patientSubmissionBadge.textContent = '';\n    }\n  }\n\n  async function fetchAndDisplayTodaysScore() {\n    fastTrackScoreText.textContent = 'Loading...';\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/49f9681f-32b1-4ac6-ad88-f0d35cc86176', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n      if (!res.ok) throw new Error('Network response was not OK: ' + res.status);\n      const data = await res.text();\n      fastTrackScoreText.innerHTML = data;\n    } catch (e) {\n      fastTrackScoreText.textContent = 'Failed to load score: ' + e.message;\n    }\n  }\n\n  function openFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'flex';\n    fastTrackScoreModal.focus();\n    fetchAndDisplayTodaysScore();\n  }\n\n  function closeFastTrackScoreModal() {\n    fastTrackScoreModal.style.display = 'none';\n  }\n\n  fastTrackHeader.addEventListener('click', () => {\n    openFastTrackScoreModal();\n  });\n  fastTrackHeader.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      openFastTrackScoreModal();\n    }\n  });\n  fastTrackScoreCloseBtn.addEventListener('click', () => {\n    closeFastTrackScoreModal();\n  });\n\n  notCompletedCaptureBtn.addEventListener('click', () => {\n    if (!selectedDevice) {\n      alert('Please select a device first by clicking on its card.');\n      return;\n    }\n    openNotCompletedModal();\n  });\n\n  function openNotCompletedModal() {\n    // Important: Show devices section underneath as user requested (do NOT hide it)\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false; // Show devices\n\n    notCompletedModalOverlay.style.display = 'flex';\n    notCompletedModalContent.focus();\n  }\n\n  function closeNotCompletedModal() {\n    notCompletedModalOverlay.style.display = 'none';\n    // Back button from Not Completed modal goes back to devices list,\n    // NOT to camera feed as requested\n    devicesSection.hidden = false;\n    cameraSection.classList.add('hidden');\n    devicesSection.focus();\n  }\n\n  notCompletedModalCloseBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedBackBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedOptionsContainer.querySelectorAll('button[data-reason]').forEach(btn => {\n    btn.addEventListener('click', async () => {\n      const reason = btn.getAttribute('data-reason');\n      if (!selectedDevice || !currentMRN) {\n        alert('No device or patient selected.');\n        closeNotCompletedModal();\n        return;\n      }\n      await submitNotCompletedReason(reason, btn.textContent);\n\n      // After submit (success or failure), update device cards badges\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n      closeNotCompletedModal();\n    });\n  });\n\n  async function submitNotCompletedReason(reasonCode, reasonText) {\n    try {\n      showLoader();\n      const payload = {\n        mrn: currentMRN,\n        device: selectedDevice,\n        notCompletedReason: reasonCode\n      };\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55';\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      loadNotCompletedStatusCache();\n      if (!notCompletedStatusCache[currentMRN]) {\n        notCompletedStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        notCompletedStatusCache[currentMRN][deviceName] = reasonCode;\n        saveNotCompletedStatusCache();\n      }\n\n      loadSubmissionStatusCache();\n      // We do NOT delete success submission for this device when marking Not Completed,\n      // to comply with requirement to count Not Completed also as counts towards patient badge.\n      // So do not delete from submissionStatusCache here\n\n      renderDeviceCards(currentDevices);\n\n      alert('Not Completed reason \"' + reasonText + '\" submitted successfully.');\n\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      if (e.name === 'AbortError' || e.message.includes('NetworkError') || !navigator.onLine) {\n        alert('No response from server, saved as Failed Sends.');\n        const submissionRecord = {\n          id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n          mrn: currentMRN,\n          device: JSON.stringify(selectedDevice),\n          status: 'Failed',\n          notCompletedReason: reasonCode,\n          timestamp: Date.now()\n        };\n        addSubmissionRecord(submissionRecord);\n        renderSavedSubmissions();\n        updateShowSubmissionsButton();\n\n        // After failure save, update device cards badges immediately\n        loadSubmissionStatusCache();\n        loadNotCompletedStatusCache();\n        renderDeviceCards(currentDevices);\n\n        closeNotCompletedModal();\n      } else {\n        alert('Submit failed: ' + e.message);\n      }\n    } finally {\n      hideLoader();\n    }\n  }\n\n  /* --- Initialization & Misc --- */\n\n  initialLoad();\n\n  async function initialLoad() {\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if (hasCachedLocations) {\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if (selectedLocation) {\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if (hasCachedPatients) {\n          patients = patients || [];\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch (e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if (selectedPatient && selectedPatient.MRN) {\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        460,
        660
      ],
      "id": "971c4a65-a1fb-4b26-bbcc-c2355269b0c4",
      "name": "Yellow Badge1"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n\n<html lang=\"en\" >\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n<title>Patient Device Capture with Saved Data - Full Screen, Date Picker & Search</title>\n<style>\n/* Reset and base */\n* {\n  box-sizing: border-box;\n  margin: 0; padding: 0;\n}\nhtml, body {\n  height: 100%;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n  Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background: #f7f9fc;\n  color: #1a1a1a;\n  scroll-padding-bottom: 160px; /* added padding for scrolling */\n  scroll-behavior: smooth;\n}\n#app {\n  max-width: 480px;\n  margin: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\nheader {\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* Update h1 as \"Fast Track\" with bold and black rounded border */\nh1 {\n  font-weight: 700;\n  letter-spacing: 0.08em;\n  font-size: 1.5rem;\n  color: #000000;\n  margin-bottom: 12px;\n  text-align: center;\n  padding: 8px 16px;\n  border: 3px solid black;\n  border-radius: 14px;\n  user-select:none;\n  display: inline-block;\n  align-self: center;\n  cursor: pointer; /* Make clickable */\n  position: relative;\n}\n\n/* Badge style for patient card that shows number of unique submitted devices */\n.patient-submission-badge {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  background: #dc3545;\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n}\n\n/* Patient Location & Patient selection styles (replacing MRN input section) */\n/* Increase contrast for info card and unify style for Location and Patient cards as well */\n#selected-info {\n  background: #14345a; /* darker blue */\n  padding: 14px 16px;\n  border-radius: 14px;\n  box-shadow: inset 0 0 15px #000000aa;\n  color: #f0f0f0;\n  user-select:none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  font-weight: 700;\n  margin-bottom: 24px;\n}\n\n#selected-info > div {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n}\n\n#selected-info strong.label {\n  font-weight: 700;\n  font-size: 1rem;\n  color: #aad8ff;\n  user-select:none;\n  min-width: 75px;\n}\n\n#selected-info .value {\n  font-size: 1.1rem;\n  user-select:none;\n  min-width: 140px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #e3e3e3;\n}\n\n/* Buttons row container */\n#btns-row {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n\n/* Restore previous larger, rounded button style with updated colors */\n/* Failed Sends red (unchanged colors) */\n.btn-danger {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(220,53,69, 0.6);\n  background: linear-gradient(135deg, #dc3545, #a71d2a);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n  position: relative;\n}\n.btn-danger:hover {\n  background: linear-gradient(135deg, #a71d2a, #7a131d);\n  transform: translateY(-2px);\n}\n\n/* Locations button: yellow with previous style */\n.btn-primary {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(255,193,7, 0.6);\n  background: linear-gradient(135deg, #ffc107, #b38600);\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, #b38600, #856600);\n  color: black;\n  transform: translateY(-2px);\n}\n\n/* Patients button: green with previous style */\n.btn-info {\n  padding: 10px 0;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.6);\n  background: linear-gradient(135deg, #28a745, #1e7e34);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: none;\n  transition: background 0.3s, transform 0.15s;\n  user-select: none;\n  height: 40px;\n}\n.btn-info:hover {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n  transform: translateY(-2px);\n}\n\n/* Star indicator for failed submissions today */\n.btn-danger.star::after {\n  content: \"â˜…\";\n  color: yellow;\n  font-size: 1.4rem;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  user-select: none;\n  pointer-events: none;\n  text-shadow: 0 0 3px black;\n}\n\n/* Modal Overlay */\n#modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  padding: 12px;\n  box-sizing: border-box;\n}\n/* Modal Content with full height to show more cards */\n#modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  max-height: calc(100vh - 64px); /* full height with some margin */\n  display: flex;\n  flex-direction: column;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.25);\n  outline: none;\n  position: relative;\n  z-index: 10; /* ensure modal content is above loader */\n  overflow: hidden; /* hide scrollbars in content area */\n}\n\n#modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n#modal-header h2 {\n  font-size: 1.4rem;\n  color: #003366;\n  font-weight: 700;\n}\n#modal-close-btn,\n#modal-detail-close-btn,\n#photo-modal-close-btn,\n#saved-submissions-close {\n  position: fixed;\n  top: 12px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  z-index: 110001;\n  transition: background 0.3s;\n  user-select:none;\n\n  /* center 'X' inside the circle */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#modal-close-btn:hover,\n#modal-detail-close-btn:hover,\n#photo-modal-close-btn:hover,\n#saved-submissions-close:hover {\n  background: #d72950;\n}\n\n/* Update cancel button style for capture modal - from grey to dark red with white text */\n#cancel-capture-btn {\n  margin-top: 12px;\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n  flex: 1 0 140px;\n}\n#cancel-capture-btn:hover {\n  background: #005fcc;\n}\n\n/* New container for capture modal buttons including Cancel and Not Completed side by side */\n#capture-buttons-row {\n  display: flex;\n  justify-content: center;\n  gap: 12px;\n  width: 100%;\n  max-width: 480px;\n  margin-top: 12px;\n  margin-bottom: 24px;\n  position: sticky;\n  bottom: 16px;\n  z-index: 12;\n}\n\n/* Not Completed button in capture modal - styled as red cancel style */\n#not-completed-capture-btn {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  flex: 1 0 140px;\n}\n#not-completed-capture-btn:hover {\n  background: #7a000f;\n}\n\n/* Not Completed Modal Styles */\n\n#not-completed-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n\n#not-completed-modal-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n#not-completed-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#not-completed-modal-header h2 {\n  font-size: 1.4rem;\n  color: #b00020;\n  font-weight: 700;\n  margin: 0;\n}\n\n#not-completed-modal-close-btn {\n  background: #b00020;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 24px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-family: Arial, sans-serif;\n  padding-bottom: 2px;\n}\n#not-completed-modal-close-btn:hover {\n  background: #7a000f;\n}\n\n#not-completed-options {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 12px;\n}\n\n#not-completed-options button[data-reason] {\n  background: #b00020;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n}\n#not-completed-options button[data-reason]:hover {\n  background: #7a000f;\n}\n\n#not-completed-back-btn {\n  background: #0077ff;\n  color: white;\n  border-radius: 12px;\n  border: none;\n  padding: 10px 14px;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0,119,255,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  width: 100%;\n  text-align: center;\n  font-size: 1.1rem;\n  margin-top: 8px;\n}\n#not-completed-back-btn:hover {\n  background: #005fcc;\n}\n\n/* Input and search styles */\ninput[type=search] {\n  padding: 12px 14px;\n  font-size: 1rem;\n  border-radius: 12px;\n  border: 1.5px solid #ccc;\n  transition: border-color 0.3s;\n  width: 100%;\n  box-sizing: border-box;\n  margin-bottom: 12px;\n}\n/* Make search input area fixed/flexible height */\n#modal-search {\n  flex-shrink: 0;\n}\ninput[type=search]:focus {\n  border-color: #0077ff;\n  outline: none;\n}\n/* Container for modal list with flex-grow and overflow scroll */\n.buttons-container {\n  display: grid;\n  grid-template-columns: 1fr; /* One column wide */\n  gap: 10px;\n  flex-grow: 1; /* take remaining vertical space */\n  overflow-y: auto;\n  padding-right: 4px;\n  user-select:none;\n  /* scroll margin for better mobile usability */\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Location and Patient buttons styled the same and fixed Patient card text layout */\nbutton.location-btn, button.patient-btn {\n  text-align: left; /* align left to allow full width text */\n  padding: 10px 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  border-radius: 12px;\n  box-shadow: 0 3px 8px rgba(0, 119, 255, 0.25);\n  white-space: normal;\n  word-wrap: break-word;\n  user-select:none;\n  border: 2px solid transparent;\n  transition: background 0.25s ease, color 0.25s ease;\n  width: 100%; /* full width */\n  display: block;\n}\n/* Selected styling for both types with green border and background */\nbutton.location-btn.selected, button.patient-btn.selected {\n  background: rgba(144, 238, 144, 0.3); /* light green transparent highlight */\n  color: #004bb5;\n  border-color: #90ee90; /* lightgreen border to match */\n}\n/* Hover styling */\nbutton.location-btn:hover:not(.selected),\nbutton.patient-btn:hover:not(.selected) {\n  background: #005fcc;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(0, 95, 204, 0.6);\n  color: white;\n}\n\n/* Patient card text container fix */\nbutton.patient-btn.card {\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  padding: 12px 14px;\n  line-height: 1.3;\n  width: 100%; /* full width */\n  position: relative; /* for badge positioning */\n}\nbutton.patient-btn.card strong {\n  font-size: 1.15rem;\n  margin-bottom: 8px;\n  color: #004bb5;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Style for counts of successful (green) and not completed (red) numbers on patient card */\n.patient-submission-badge-success {\n  position: absolute;\n  top: 6px;\n  right: 36px; /* Leave space for red badge */\n  background-color: rgba(40, 167, 69, 0.9);\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n  box-shadow: 0 0 6px rgba(40,167,69,0.6);\n}\n\n.patient-submission-badge-notcompleted {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  background-color: rgba(176, 0, 32, 0.9);\n  color: white;\n  border-radius: 12px;\n  padding: 2px 8px;\n  font-size: 0.85rem;\n  font-weight: 700;\n  line-height: 1;\n  user-select: none;\n  box-shadow: 0 0 6px rgba(176,0,32,0.6);\n}\n\n/* Update List button for Location and Patient modal */\n#update-list-btn {\n  margin-bottom: 12px;\n  background: linear-gradient(135deg, #28a745, #1e7e34); /* Green gradient */\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 10px 14px;\n  cursor: pointer;\n  font-size: 1rem;\n  box-shadow: 0 4px 10px rgba(40,167,69, 0.5);\n  user-select:none;\n  transition: background 0.3s;\n  justify-self: start;\n  width: fit-content;\n}\n#update-list-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #1e7e34, #155d27);\n}\n#update-list-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n/* Loader overlay */\n#loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.8);\n  backdrop-filter: blur(2px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 120000; /* very high to be on top of all */\n}\n.spinner {\n  border: 5px solid #ccc;\n  border-top: 5px solid #004bb5;\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  animation: spin 1s linear infinite;\n  user-select:none;\n}\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* -------- End Location/Patient selector styles -------- */\n\n/* Rest of your styles for main app below: */\nlabel {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 8px;\n  color: #004bb5;\n}\ncards-container {\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 wide */\n  gap: 14px;\n  margin-top: 8px;\n  margin-bottom: 24px;\n}\n@media (max-width:700px) {\n  .cards-container {\n    grid-template-columns: repeat(2, 1fr); /* 2 wide on smaller screens */\n  }\n}\n@media (max-width:400px) {\n  .cards-container {\n    grid-template-columns: 1fr; /* 1 wide on very small */\n  }\n}\n\n/* Device card with only image, no title or description */\n.card {\n  background: white;\n  border-radius: 14px;\n  box-shadow: 0 2px 8px rgba(34, 60, 80, 0.1);\n  padding: 8px; /* reduced padding */\n  cursor: pointer;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  user-select: none;\n  border: 2px solid transparent;\n  position: relative; /* for checkmark badge */\n  height: 112px; /* height fits image */\n  justify-content: center;\n}\n.card:hover, .card:focus {\n  box-shadow: 0 8px 20px rgba(0,120,220, 0.3);\n  border-color: #0077ff;\n  outline: none;\n  transform: scale(1.05);\n}\n.card img {\n  width: 90px;\n  height: 90px;\n  object-fit: contain;\n  margin-bottom: 0;\n  filter: grayscale(30%);\n  transition: filter 0.3s;\n  border-radius: 12px;\n}\n.card:hover img, .card:focus img {\n  filter: none;\n}\n/* Red X badge for Not Completed device card */\n.device-not-completed {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #b00020;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(176,0,32,0.6);\n}\n\n/* Modified device-checked style for count badge */\n.device-checked {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  min-width: 24px;\n  height: 24px;\n  padding: 0 6px;\n  background-color: rgba(40, 167, 69, 0.8);\n  color: white;\n  border-radius: 12px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  font-weight: 700;\n  user-select: none;\n  white-space: nowrap;\n}\n\n/* Added focus style to badges for accessibility */\n.device-not-completed:focus,\n.device-checked:focus {\n  outline: 2px solid #ffb3b3;\n  outline-offset: 2px;\n}\n\n/* New yellow \"pending\" badge for failed submission */\n.device-pending {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 24px;\n  height: 24px;\n  background-color: #ffc107;  /* Bootstrap warning/yellow */\n  color: #333;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n  font-weight: 700;\n  user-select: none;\n  pointer-events: none;\n  box-shadow: 0 0 5px rgba(255,193,7,0.6);\n}\n\n#camera-section {\n  margin-top: auto;\n  margin-bottom: 24px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  scroll-margin-bottom: 160px; /* ensure sufficient margin for scrolling */\n}\n#camera-wrapper {\n  position: relative;\n  width: 100%;\n  max-width: 480px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  background: black;\n  scroll-margin-bottom: 120px; /* Added to help scroll to bottom */\n  user-select:none;\n  z-index: 10000; /* lower than photo-submit-loader-overlay to show loader above */\n}\n#video {\n  width: 100%;\n  height: auto;\n  max-height: 720px;\n  object-fit: contain; /* preserve aspect ratio */\n  display: block;\n  will-change: transform;\n  transform-style: preserve-3d;\n  touch-action: manipulation;\n}\n#capture-btn {\n  position: absolute;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 4px solid white;\n  background: rgba(0, 119, 255, 0.8);\n  box-shadow: 0 2px 6px rgba(0, 119, 255, 0.9);\n  font-size: 0;\n  cursor: pointer;\n  transition: background 0.3s, box-shadow 0.3s;\n  user-select: none;\n  z-index: 10;\n  touch-action: manipulation;\n}\n#capture-btn:hover:not(:disabled) {\n  background: rgba(0, 119, 255, 1);\n  box-shadow: 0 4px 10px rgba(0, 119, 255, 1);\n}\n#capture-btn:focus {\n  outline: 2px solid #004bb5;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 3px #80aaff;\n}\n#canvas {\n  display: none;\n}\n#captured-photo {\n  display: none;\n}\n.hidden {\n  display: none !important;\n}\n/* Loader */\n.loader {\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #0077ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  animation: spin 1.1s linear infinite;\n  margin: 0 auto;\n}\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n/* Modal for details */\n#modal-detail-overlay, #modal-overlay, #photo-modal-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 110000;\n}\n#modal-detail-content, #photo-modal-content, #modal-content {\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 1rem;\n  color: #1a1a1a;\n  line-height: 1.4;\n  background: white;\n  border-radius: 14px;\n  padding: 16px 24px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  width: 90vw;\n  max-width: 480px;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 10; /* Ensure modals above loader */\n}\n\n#modal-retry-btn {\n  align-self: flex-start;\n  background: #b00020;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px 16px;\n  font-size: 1rem;\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(176,0,32,0.8);\n  transition: background 0.3s;\n  user-select:none;\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n#modal-retry-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#modal-retry-btn:disabled {\n  background: #999999cc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n#photo-modal-buttons {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 12px;\n}\n#photo-modal-buttons button {\n  flex: 1;\n  max-width: 140px;\n  padding: 10px;\n  font-size: 1.1rem;\n  border-radius: 12px;\n  border: none;\n  cursor: pointer;\n  user-select:none;\n  transition: background 0.3s;\n}\n#photo-tryagain-btn {\n  background: #b00020;\n  color: white;\n  margin-right: 12px;\n}\n#photo-tryagain-btn:hover:not(:disabled) {\n  background: #7a000f;\n}\n#photo-ok-btn {\n  background: #0077ff;\n  color: white;\n}\n#photo-ok-btn:hover:not(:disabled) {\n  background: #005fcc;\n}\n#upload-status {\n  margin-top: 12px;\n  min-height: 18px;\n  color: #0077ff;\n  font-weight: 600;\n  text-align: center;\n  user-select:none;\n}\n\n/* Loader overlay with spinner and timer for photo submit */\n#photo-submit-loader-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(255,255,255,0.85);\n  backdrop-filter: blur(3px);\n  display: none;\n  align-items: center;\n  justify-content: center;\n  z-index: 130000; /* above other overlays */\n  flex-direction: column;\n  user-select:none;\n}\n#photo-submit-spinner {\n  border: 6px solid #ccc;\n  border-top: 6px solid #004bb5;\n  border-radius: 50%;\n  width: 64px;\n  height: 64px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 12px;\n}\n#photo-submit-timer {\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: #004bb5;\n  font-family: monospace, monospace;\n  user-select:none;\n}\n\n/* Saved Submissions Panel */\n/* add scrollbar and fixed height with overflow for scroll */\n#saved-submissions-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #fff8e1;\n  border: 2px solid #fcbf49;\n  padding: 16px;\n  box-sizing: border-box;\n  display: none;\n  flex-direction: column;\n  user-select:none;\n  z-index: 100000;\n  overflow-y: auto; /* always show scroll if content overflow */\n}\n#saved-submissions-panel h2 {\n  margin-bottom: 8px;\n  font-weight: 700;\n  color: #cf8f00;\n  font-size: 1.8rem;\n  text-align: center;\n}\n#pagination-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 12px 0;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n#pagination-controls label {\n  font-weight: 700;\n  font-size: 1.1rem;\n  color: #996700;\n}\n#pagination-controls input[type=date] {\n  padding: 8px 10px;\n  font-size: 1.1rem;\n  border-radius: 8px;\n  border: 1.5px solid #fcbf49;\n  width: 180px;\n  max-width: 45vw;\n  box-sizing: border-box;\n}\n#saved-submissions-table-wrapper {\n  width: 100%;\n  overflow-x: auto;\n}\n#saved-submissions-table {\n  border-collapse: collapse;\n  width: 100%;\n  min-width: 400px;\n}\n#saved-submissions-table thead th {\n  background-color: #fde6a3;\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  font-weight: 700;\n  text-align: center;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  min-width: 90px;\n}\n#saved-submissions-table tbody tr {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n#saved-submissions-table tbody tr:hover {\n  background-color: #fffae6;\n}\n#saved-submissions-table tbody td {\n  border: 1px solid #f0c96e;\n  padding: 8px 10px;\n  font-size: 1rem;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-width: 90px;\n}\n\n.status-pending {\n  color: #d18e00;\n  font-weight: 700;\n}\n.status-success {\n  color: #2b7a0b;\n  font-weight: 700;\n}\n.status-failed {\n  color: #b00020;\n  font-weight: 700;\n}\n.thumbnail-img {\n  max-width: 80px;\n  max-height: 60px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n/* Modal for Fast Track Score */\n#fast-track-score-modal {\n  position: fixed;\n  inset: 0;\n  display: none;\n  background: rgba(0,0,0,0.5);\n  backdrop-filter: blur(4px);\n  align-items: center;\n  justify-content: center;\n  z-index: 150000;\n  padding: 12px;\n  box-sizing: border-box;\n}\n#fast-track-score-content {\n  background: white;\n  border-radius: 14px;\n  max-width: 460px;\n  width: 100%;\n  padding: 16px 20px;\n  box-shadow: 0 8px 28px rgba(0,0,0,0.35);\n  font-size: 1rem;\n  font-weight: 400;\n  color: #222222;\n  user-select:none;\n  position: relative;\n  overflow-y: auto;\n  max-height: 80vh;\n}\n\n#fast-track-score-close {\n  position: absolute;\n  top: 8px;\n  right: 12px;\n  background: #ff385c;\n  border: none;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  color: white;\n  font-size: 20px;\n  line-height: 32px;\n  text-align: center;\n  cursor: pointer;\n  box-shadow: 0 2px 8px rgba(255,56,92,0.6);\n  transition: background 0.3s;\n  user-select:none;\n}\n#fast-track-score-close:hover {\n  background: #d72950;\n}\n\n/* New styles for disabled button with loading state */\nbutton[disabled] {\n  opacity: 0.6 !important;\n  cursor: not-allowed !important;\n  pointer-events: none !important;\n  user-select:none !important;\n}\n</style>\n\n</head>\n<body>\n<div id=\"app\" role=\"main\" aria-label=\"Patient Device Capture App\">\n<header>\n<!-- Changed title to Fast Track with border and click action -->\n<h1 id=\"fast-track-header\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" aria-label=\"Show today's score of unique pictures submitted\">Fast Track</h1>\n\n<!-- Patient selection and MRN display -->\n<section id=\"selected-info\" aria-live=\"polite\" aria-atomic=\"true\">\n  <div>\n    <strong class=\"label\">Location:</strong>\n    <span class=\"value\" id=\"selected-location\">None selected</span>\n  </div>\n  <div>\n    <strong class=\"label\">Patient:</strong>\n    <button id=\"patient-name-btn\" class=\"patient-btn card\" type=\"button\" aria-label=\"Select patient\" style=\"position:relative; padding-right: 70px;\">\n      <span id=\"selected-patient-name-span\">None selected</span>\n      <!-- Green badge for successful count -->\n      <span id=\"patient-submission-badge-success\" class=\"patient-submission-badge-success\" aria-label=\"Number of successful submitted images for patient\" style=\"display:none;\">0</span>\n      <!-- Red badge for Not Completed count -->\n      <span id=\"patient-submission-badge-notcompleted\" class=\"patient-submission-badge-notcompleted\" aria-label=\"Number of devices marked Not Completed for patient\" style=\"display:none;\">0</span>\n    </button>\n  </div>\n  <div>\n    <strong class=\"label\">MRN:</strong>\n    <span class=\"value\" id=\"selected-patient-mrn\">N/A</span>\n  </div>\n  <div id=\"last-update-timestamp\" style=\"font-weight:600; margin-top:6px; color: #aad8ff;\"></div>\n</section>\n\n<div id=\"btns-row\">\n  <button id=\"show-submissions-btn\" class=\"btn-danger\" aria-pressed=\"false\" aria-label=\"Show failed submissions\">Failed Sends</button>\n  <button id=\"change-location-btn\" class=\"btn-primary\" aria-label=\"Change selected location\">Locations</button>\n  <button id=\"change-patient-btn\" class=\"btn-info\" aria-label=\"Change selected patient\" disabled>Patients</button>\n</div>\n\n<!-- Devices section shown under patient info, hidden initially -->\n<section id=\"devices-section\" aria-label=\"Device selection\" tabindex=\"-1\" hidden>\n  <h2>Available Devices</h2>\n  <div class=\"cards-container\" id=\"devices-container\" role=\"list\">\n    <!-- Device cards inserted dynamically -->\n  </div>\n</section>\n</header>\n\n<main style=\"flex-grow:1;\">\n<section id=\"camera-section\" class=\"hidden\" aria-label=\"Take a photo of device\" tabindex=\"-1\" >\n  <h2>Capture Device Photo</h2>\n  <div id=\"camera-wrapper\" tabindex=\"0\">\n    <video id=\"video\" autoplay playsinline aria-label=\"Camera preview\"></video>\n    <button id=\"capture-btn\" aria-label=\"Take picture\" title=\"Take Picture\"></button>\n  </div>\n  <div id=\"capture-buttons-row\">\n    <button id=\"cancel-capture-btn\" aria-label=\"Cancel capture\">Back</button>\n    <button id=\"not-completed-capture-btn\" aria-label=\"Mark device as Not Completed\" type=\"button\">Not Completed</button>\n  </div>\n  <canvas id=\"canvas\" class=\"hidden\"></canvas>\n  <img id=\"captured-photo\" alt=\"Captured photo preview\" class=\"hidden\" />\n  <div id=\"upload-status\" style=\"margin-top:12px; min-height:18px; color:#0077ff; font-weight:600;\"></div>\n</section>\n\n<!-- Not Completed Options Modal -->\n<div id=\"not-completed-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Not Completed Reason Selection\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"not-completed-modal-content\" tabindex=\"0\">\n    <div id=\"not-completed-modal-header\">\n      <h2>Select Reason for Not Completed</h2>\n      <button id=\"not-completed-modal-close-btn\" aria-label=\"Close Not Completed Reason modal\" title=\"Close\">Ã—</button>\n    </div>\n    <div id=\"not-completed-options\">\n      <button data-reason=\"NC_Patient_Declined\" type=\"button\">Patient Declined</button>\n      <button data-reason=\"NC_Patient_Left\" type=\"button\">Patient Left</button>\n      <button data-reason=\"NC_Supplies_Out\" type=\"button\">Supplies Out</button>\n      <button data-reason=\"NC_Equipment_Failure\" type=\"button\">Equipment Failure</button>\n      <button id=\"not-completed-back-btn\" type=\"button\">Back</button>\n    </div>\n  </div>\n</div>\n\n<!-- Loader overlay specifically for photo submit timer and spinner -->\n<div id=\"photo-submit-loader-overlay\" aria-live=\"polite\" aria-label=\"Photo Submission In Progress\" aria-busy=\"true\" role=\"alert\">\n  <div id=\"photo-submit-spinner\" aria-hidden=\"true\"></div>\n  <div id=\"photo-submit-timer\" aria-live=\"assertive\" aria-atomic=\"true\">10</div>\n</div>\n\n<!-- Saved Submissions Panel -->\n<section id=\"saved-submissions-panel\" aria-label=\"Saved Submitted Images\">\n  <h2>Saved Submissions</h2>\n  <button id=\"saved-submissions-close\" aria-label=\"Close saved submissions panel\" title=\"Close saved submissions panel\" tabindex=\"0\">Ã—</button>\n  <div id=\"pagination-controls\">\n    <label for=\"date-filter-input\">Select Date:</label>\n    <input type=\"date\" id=\"date-filter-input\" aria-label=\"Select submission date\" />\n  </div>\n  <div id=\"saved-submissions-table-wrapper\">\n    <table id=\"saved-submissions-table\" aria-live=\"polite\" aria-relevant=\"all\">\n      <thead>\n        <tr>\n          <th>MRN</th>\n          <th>POC</th>\n          <th>Date</th>\n          <th>Status</th>\n          <th>Retry</th>\n        </tr>\n      </thead>\n      <tbody id=\"saved-submissions-body\" tabindex=\"0\">\n        <!-- Entries dynamically inserted -->\n      </tbody>\n    </table>\n  </div>\n  <button id=\"modal-retry-btn\" style=\"display:none;\">Retry Submit</button>\n</section>\n</main> </div>\n\n<!-- Modal for Location or Patient selection -->\n<div id=\"modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Selection Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"modal-content\" tabindex=\"0\">\n    <div id=\"modal-header\">\n      <h2 id=\"modal-title\">Select<span id=\"last-list-update\"></span></h2>\n      <button id=\"modal-close-btn\" aria-label=\"Close selection modal\" title=\"Close\">Ã—</button>\n    </div>\n\n    <!-- Update List button for both modals -->\n    <button type=\"button\" id=\"update-list-btn\" style=\"display:none;\">Update List</button>\n\n    <div class=\"buttons-container\" id=\"modal-list\" role=\"list\" aria-live=\"polite\" aria-relevant=\"additions removals\" tabindex=\"0\">\n      <!-- Buttons inserted dynamically -->\n    </div>\n  </div>\n</div>\n\n<!-- Modal for showing submission details -->\n<div id=\"modal-detail-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Submission Details Modal\" tabindex=\"-1\" style=\"display:none;\">\n  <button id=\"modal-detail-close-btn\" aria-label=\"Close details modal\">Ã—</button>\n  <div id=\"modal-detail-content\" tabindex=\"0\" aria-live=\"polite\" aria-atomic=\"true\">\n    <!-- Populated dynamically -->\n  </div>\n</div>\n\n<!-- Modal to show captured photo and Try Again/Submit buttons -->\n<div id=\"photo-modal-overlay\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Captured Photo Preview\" tabindex=\"-1\" style=\"display:none;\">\n  <div id=\"photo-modal-content\" tabindex=\"0\">\n    <button id=\"photo-modal-close-btn\" aria-label=\"Close photo preview\">Ã—</button>\n    <img id=\"photo-modal-img\" alt=\"Captured photo preview\" style=\"max-width: 100%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25);\" />\n    <div id=\"photo-modal-buttons\">\n      <button id=\"photo-tryagain-btn\" aria-label=\"Try taking photo again\">Try Again</button>\n      <button id=\"photo-ok-btn\" aria-label=\"Submit this photo\">Submit</button>\n    </div>\n    <div id=\"upload-status\"></div>\n  </div>\n</div>\n\n<!-- Loader overlay -->\n<div id=\"loader-overlay\" aria-hidden=\"true\" style=\"display:none; position: fixed; inset: 0; background: rgba(255,255,255,0.8); backdrop-filter: blur(2px); align-items: center; justify-content: center; z-index: 120000;\">\n  <div class=\"spinner\" aria-label=\"Loading\"></div>\n</div>\n\n<!-- Modal for Fast Track Today's Score -->\n<div id=\"fast-track-score-modal\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Today's Score\" tabindex=\"-1\">\n  <div id=\"fast-track-score-content\">\n    <button id=\"fast-track-score-close\" aria-label=\"Close Today's Score\">Ã—</button>\n    <div id=\"fast-track-score-text\">Loading...</div>\n  </div>\n</div>\n\n<script>\n(() => {\n  'use strict';\n\n  /* --- IndexedDB Photo Storage Module --- */\n\n  const DB_NAME = 'PhotoCaptureDB';\n  const DB_VERSION = 1;\n  const STORE_NAME = 'photos';\n\n  let dbPromise = null;\n\n  function openDB() {\n    if (dbPromise) return dbPromise;\n    dbPromise = new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = () => {\n        reject(request.error || new Error('Failed to open IndexedDB'));\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n          store.createIndex('timestamp', 'timestamp');\n          store.createIndex('mrn', 'mrn');\n        }\n      };\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n    });\n    return dbPromise;\n  }\n\n  async function addPhotoRecord({ id, mrn, device, blob, timestamp }) {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const record = { id, mrn, device, blob, timestamp };\n      const putReq = store.put(record);\n      putReq.onsuccess = () => resolve(true);\n      putReq.onerror = () => reject(putReq.error || new Error('Failed to add photo record'));\n    });\n  }\n\n  async function getAllPhotoRecords() {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const allRecords = [];\n      const request = store.openCursor(null, 'prev'); // descending order of keys (id)\n      request.onsuccess = (e) => {\n        const cursor = e.target.result;\n        if (cursor) {\n          allRecords.push(cursor.value);\n          cursor.continue();\n        } else {\n          // We have all records sorted by key descending\n          // Sort by timestamp descending explicitly, if needed\n          allRecords.sort((a, b) => b.timestamp - a.timestamp);\n          resolve(allRecords);\n        }\n      };\n      request.onerror = () => reject(request.error || new Error('Failed to fetch photo records'));\n    });\n  }\n\n  async function getPhotoRecordById(id) {\n    if (!id) return null;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readonly');\n      const store = tx.objectStore(STORE_NAME);\n      const req = store.get(id);\n      req.onsuccess = () => resolve(req.result || null);\n      req.onerror = () => reject(req.error || new Error('Failed to fetch photo record by id'));\n    });\n  }\n\n  async function deletePhotoRecord(id) {\n    if (!id) return;\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const store = tx.objectStore(STORE_NAME);\n      const delReq = store.delete(id);\n      delReq.onsuccess = () => resolve(true);\n      delReq.onerror = () => reject(delReq.error || new Error('Failed to delete photo record'));\n    });\n  }\n\n  /* --- Location & Patient Selection Module --- */\n\n  const selectedLocationElem = document.getElementById('selected-location');\n  const selectedPatientNameSpan = document.getElementById('selected-patient-name-span');\n  const selectedPatientMRN = document.getElementById('selected-patient-mrn');\n  const lastUpdateTimestampElem = document.getElementById('last-update-timestamp');\n  const changeLocationBtn = document.getElementById('change-location-btn');\n  const changePatientBtn = document.getElementById('change-patient-btn');\n  const showSubmissionsBtn = document.getElementById('show-submissions-btn');\n\n  const modalOverlay = document.getElementById('modal-overlay');\n  const modalTitle = document.getElementById('modal-title');\n  const modalCloseBtn = document.getElementById('modal-close-btn');\n  const modalList = document.getElementById('modal-list');\n  const updateListBtn = document.getElementById('update-list-btn');\n  const lastListUpdateSpan = document.getElementById('last-list-update');\n\n  const loaderOverlay = document.getElementById('loader-overlay');\n\n  const savedSubmissionsPanel = document.getElementById('saved-submissions-panel');\n  const savedSubmissionsBody = document.getElementById('saved-submissions-body');\n  const modalRetryBtn = document.getElementById('modal-retry-btn');\n\n  const patientSubmissionBadgeSuccess = document.getElementById('patient-submission-badge-success');\n  const patientSubmissionBadgeNotCompleted = document.getElementById('patient-submission-badge-notcompleted');\n  const patientNameBtn = document.getElementById('patient-name-btn');\n\n  const fastTrackHeader = document.getElementById('fast-track-header');\n  const fastTrackScoreModal = document.getElementById('fast-track-score-modal');\n  const fastTrackScoreCloseBtn = document.getElementById('fast-track-score-close');\n  const fastTrackScoreText = document.getElementById('fast-track-score-text');\n\n  // For submission status and not completed status cache\n  const STORAGE_KEYS = {\n    location: 'defaultLocation',\n    patient: 'defaultPatient',\n    cachedLocations: 'cachedLocations',\n    cachedPatients: 'cachedPatients',\n    submissionStatuses: 'submissionStatuses',\n  };\n\n  let appointments = [];\n  let locations = [];\n  let patients = [];\n  let selectedLocation = null;\n  let selectedPatient = null;\n  let activeModal = null; // 'location' or 'patient'\n  let modalAllItems = [];\n\n  /* --- Not Completed Status Cache --- */\n  const notCompletedModalOverlay = document.getElementById('not-completed-modal-overlay');\n  const notCompletedModalContent = document.getElementById('not-completed-modal-content');\n  const notCompletedModalCloseBtn = document.getElementById('not-completed-modal-close-btn');\n  const notCompletedOptionsContainer = document.getElementById('not-completed-options');\n  const notCompletedBackBtn = document.getElementById('not-completed-back-btn');\n\n  let notCompletedStatusCache = {};\n  let submissionStatusCache = {};\n\n  /* --- Helper Functions for Loader --- */\n  function showLoader() {\n    console.log('showLoader called');\n    loaderOverlay.style.display = 'flex';\n    loaderOverlay.setAttribute('aria-hidden', 'false');\n  }\n\n  function hideLoader() {\n    console.log('hideLoader called');\n    loaderOverlay.style.display = 'none';\n    loaderOverlay.setAttribute('aria-hidden', 'true');\n  }\n\n  /* --- Fetch appointments and process locations/patients --- */\n  async function fetchAppointments(locationValue) {\n    if (activeModal === 'location' || activeModal === 'patient') {\n      showLoader();\n    }\n    try {\n      let payload = {};\n      if (locationValue !== null && locationValue !== undefined && activeModal === 'patient') {\n        payload.location = locationValue;\n      }\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/529e525f-c819-4520-a8c6-ee412032cd57';\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) throw new Error('HTTP error ' + res.status);\n\n      const data = await res.json();\n\n      if (!Array.isArray(data)) {\n        appointments = Array.isArray(data) ? data : [data];\n      } else {\n        appointments = data;\n      }\n\n      if (!appointments.length) {\n        alert('No appointment data received.');\n      }\n\n      processLocations();\n      processPatients();\n\n      updateSelectedDisplay();\n      updateLastListUpdate();\n\n      if (activeModal === 'location') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedLocations, JSON.stringify(locations));\n        } catch (e) {\n          console.warn('Could not cache locations:', e);\n        }\n        // After location fetch, also update patients for this location automatically\n        activeModal = 'patient';\n        await fetchAppointments(selectedLocation);\n        activeModal = null;\n      }\n\n      if (activeModal === 'patient') {\n        try {\n          localStorage.setItem(STORAGE_KEYS.cachedPatients, JSON.stringify(patients));\n        } catch (e) {\n          console.warn('Could not cache patients:', e);\n        }\n      }\n\n    } catch (e) {\n      alert('Failed to load data: ' + e.message);\n      console.error(e);\n    } finally {\n      if (activeModal === 'location' || activeModal === 'patient') {\n        hideLoader();\n      }\n    }\n  }\n\n  function loadLocationsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedLocations);\n      if (cached) {\n        const cachedLocations = JSON.parse(cached);\n        if (Array.isArray(cachedLocations) && cachedLocations.length) {\n          locations = cachedLocations;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached locations', e);\n    }\n    return false;\n  }\n  function loadPatientsFromCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.cachedPatients);\n      if (cached) {\n        const cachedPatients = JSON.parse(cached);\n        if (Array.isArray(cachedPatients) && cachedPatients.length) {\n          patients = cachedPatients;\n          return true;\n        }\n      }\n    } catch (e) {\n      console.warn('Failed to load cached patients', e);\n    }\n    return false;\n  }\n\n  function processLocations() {\n    const locMap = new Map();\n    appointments.forEach(appt => {\n      if (appt.Appt_Sched_Location_Descr) {\n        locMap.set(appt.Appt_Sched_Location_Descr, {\n          label: appt.Appt_Sched_Location_Descr,\n          value: appt.Appt_Sched_Location_Descr,\n        });\n      }\n    });\n    locations = Array.from(locMap.values()).sort((a, b) => a.label.localeCompare(b.label));\n\n    const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n    if (storedLoc && locations.find(l => l.value === storedLoc)) {\n      selectedLocation = storedLoc;\n    } else {\n      selectedLocation = null;\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.location);\n      localStorage.removeItem(STORAGE_KEYS.patient);\n    }\n  }\n\n  function processPatients() {\n    if (!selectedLocation) {\n      patients = [];\n      selectedPatient = null;\n      return;\n    }\n    const filteredAppts = appointments.filter(appt => appt.Appt_Sched_Location_Descr === selectedLocation);\n\n    const patientMap = new Map();\n    filteredAppts.forEach(appt => {\n      if (appt.MRN) {\n        if (!patientMap.has(appt.MRN)) {\n          patientMap.set(appt.MRN, appt);\n        }\n      }\n    });\n    patients = Array.from(patientMap.values());\n\n    // Correct appointment time by adjusting timezone offset (adding 4 hours)\n    patients.forEach(p => {\n      if (p.Appt_DateTime) {\n        const dt = new Date(p.Appt_DateTime);\n        dt.setHours(dt.getHours() + 4); // add 4 hours\n        p.Appt_DateTimeCorrected = dt.toISOString();\n      } else {\n        p.Appt_DateTimeCorrected = null;\n      }\n    });\n\n    // Sort patients by corrected appointment date/time descending\n    patients.sort((a, b) => {\n      const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n      const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n      return dateB - dateA;\n    });\n\n    const storedPatientJSON = localStorage.getItem(STORAGE_KEYS.patient);\n    if (storedPatientJSON) {\n      try {\n        const storedPatient = JSON.parse(storedPatientJSON);\n        if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n          selectedPatient = storedPatient;\n          return;\n        }\n      } catch { }\n    }\n    selectedPatient = null;\n  }\n\n  function updateSelectedDisplay() {\n    selectedLocationElem.textContent = selectedLocation || 'None selected';\n\n    if (selectedLocation && selectedPatient) {\n      selectedPatientNameSpan.textContent = selectedPatient.Patient_First_Name + ' ' + selectedPatient.Patient_Last_Name;\n      selectedPatientMRN.textContent = selectedPatient.MRN;\n      updatePatientSubmissionBadge(selectedPatient.MRN);\n    } else if (selectedLocation && !selectedPatient) {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadgeSuccess.style.display = 'none';\n      patientSubmissionBadgeNotCompleted.style.display = 'none';\n    } else {\n      selectedPatientNameSpan.textContent = 'None selected';\n      selectedPatientMRN.textContent = 'N/A';\n      patientSubmissionBadgeSuccess.style.display = 'none';\n      patientSubmissionBadgeNotCompleted.style.display = 'none';\n    }\n\n    updateTimestampLastUpdate();\n\n    changePatientBtn.disabled = !selectedLocation;\n  }\n\n  function updateTimestampLastUpdate() {\n    if (selectedPatient) {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastUpdateTimestampElem.textContent = 'Last Update: ' + hh + ':' + mm;\n    } else {\n      lastUpdateTimestampElem.textContent = '';\n    }\n  }\n\n  function updatePatientSubmissionBadge(mrn) {\n    // Update badges based on cached counts\n    const successCount = getSuccessfulSubmittedDevicesCountForPatient(mrn);\n    const notCompletedCount = getNotCompletedDevicesCountForPatient(mrn);\n\n    if (successCount > 0) {\n      patientSubmissionBadgeSuccess.style.display = 'inline-block';\n      patientSubmissionBadgeSuccess.textContent = successCount;\n    } else {\n      patientSubmissionBadgeSuccess.style.display = 'none';\n      patientSubmissionBadgeSuccess.textContent = '';\n    }\n\n    if (notCompletedCount > 0) {\n      patientSubmissionBadgeNotCompleted.style.display = 'inline-block';\n      patientSubmissionBadgeNotCompleted.textContent = notCompletedCount;\n    } else {\n      patientSubmissionBadgeNotCompleted.style.display = 'none';\n      patientSubmissionBadgeNotCompleted.textContent = '';\n    }\n  }\n\n  async function openModal(type) {\n    activeModal = type;\n    modalOverlay.style.display = 'flex';\n    lastListUpdateSpan.textContent = '';\n\n    if (type === 'location') {\n      modalTitle.textContent = 'Select Location';\n      updateListBtn.style.display = 'inline-block';\n    } else {\n      modalTitle.textContent = 'Select Patient';\n      updateListBtn.style.display = 'inline-block';\n      updateLastListUpdate();\n    }\n\n    modalList.textContent = '';\n\n    if (type === 'location') {\n      const hasCache = loadLocationsFromCache();\n\n      if (hasCache) {\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    } else {\n      let hasPatientsCache = loadPatientsFromCache();\n      if (hasPatientsCache) {\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      } else {\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, activeModal);\n      }\n    }\n  }\n\n  updateListBtn.addEventListener('click', async () => {\n    if (activeModal !== 'location' && activeModal !== 'patient') return;\n    updateListBtn.disabled = true;\n    updateListBtn.textContent = 'Updating...';\n\n    try {\n      if (activeModal === 'location') {\n        await fetchAppointments(null);\n        modalAllItems = locations.slice();\n        renderModalButtons(modalAllItems, 'location');\n      } else if (activeModal === 'patient') {\n        try {\n          localStorage.removeItem(STORAGE_KEYS.cachedPatients);\n        } catch { }\n        await fetchAppointments(selectedLocation);\n        modalAllItems = patients.slice();\n        renderModalButtons(modalAllItems, 'patient');\n      }\n    } catch (e) {\n      alert('Failed to update list: ' + e.message);\n    } finally {\n      updateListBtn.disabled = false;\n      updateListBtn.textContent = 'Update List';\n      updateLastListUpdate();\n    }\n  });\n\n  function updateLastListUpdate() {\n    if (activeModal === 'patient') {\n      const now = new Date();\n      const hh = now.getHours().toString().padStart(2, '0');\n      const mm = now.getMinutes().toString().padStart(2, '0');\n      lastListUpdateSpan.textContent = ' Last List Update: ' + hh + ':' + mm;\n    } else {\n      lastListUpdateSpan.textContent = '';\n    }\n  }\n\n  function closeModal() {\n    modalOverlay.style.display = 'none';\n    activeModal = null;\n    modalList.textContent = '';\n    updateListBtn.style.display = 'none';\n    lastListUpdateSpan.textContent = '';\n  }\n\n  function renderModalButtons(items, type) {\n    if (type === 'location') {\n      items.sort((a, b) => a.label.localeCompare(b.label));\n    } else if (type === 'patient') {\n      items.sort((a, b) => {\n        const dateA = a.Appt_DateTimeCorrected ? new Date(a.Appt_DateTimeCorrected).getTime() : 0;\n        const dateB = b.Appt_DateTimeCorrected ? new Date(b.Appt_DateTimeCorrected).getTime() : 0;\n        return dateB - dateA;\n      });\n    }\n\n    modalList.textContent = '';\n    if (items.length === 0) {\n      const noMsg = document.createElement('p');\n      noMsg.textContent = type === 'location' ? 'No locations found.' : 'No patients found.';\n      noMsg.style.color = '#b00020';\n      modalList.appendChild(noMsg);\n      return;\n    }\n\n    items.forEach(item => {\n      const btn = document.createElement('button');\n      btn.type = 'button';\n      btn.className = type === 'location' ? 'location-btn' : 'patient-btn card';\n      btn.setAttribute('role', 'listitem');\n      btn.tabIndex = 0;\n\n      if (type === 'location') {\n        btn.textContent = item.label;\n        if (item.value === selectedLocation) {\n          btn.classList.add('selected');\n        }\n      } else { // patient\n        btn.innerHTML =\n          '<div><strong>' + item.Patient_First_Name + ' ' + item.Patient_Last_Name + '</strong></div>' +\n          '<div><small>DOB: ' + (item.Patient_DOB || 'Unknown') + '</small></div>' +\n          '<div><small>MRN: ' + item.MRN + '</small></div>' +\n          '<div><small>Appt: ' + formatApptDateTime(item.Appt_DateTimeCorrected) + '</small></div>';\n\n        // Add separate badges for successful and Not Completed counts\n        const successCount = getSuccessfulSubmittedDevicesCountForPatient(item.MRN);\n        const notCompletedCount = getNotCompletedDevicesCountForPatient(item.MRN);\n\n        if (successCount > 0) {\n          const successBadge = document.createElement('span');\n          successBadge.className = 'patient-submission-badge-success';\n          successBadge.textContent = successCount;\n          btn.style.position = 'relative';\n          btn.appendChild(successBadge);\n        }\n\n        if (notCompletedCount > 0) {\n          const ncBadge = document.createElement('span');\n          ncBadge.className = 'patient-submission-badge-notcompleted';\n          ncBadge.textContent = notCompletedCount;\n          btn.style.position = 'relative';\n          btn.appendChild(ncBadge);\n        }\n\n        if (selectedPatient && item.MRN === selectedPatient.MRN) {\n          btn.classList.add('selected');\n        }\n      }\n\n      btn.addEventListener('click', async () => {\n        if (type === 'location') {\n          if (item.value !== selectedLocation) {\n            selectedLocation = item.value;\n            localStorage.setItem(STORAGE_KEYS.location, selectedLocation);\n            selectedPatient = null;\n            localStorage.removeItem(STORAGE_KEYS.patient);\n\n            await awaitPatientListUpdateForNewLocation();\n\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n          }\n          closeModal();\n        } else {\n          if (!selectedPatient || selectedPatient.MRN !== item.MRN) {\n            selectedPatient = item;\n            localStorage.setItem(STORAGE_KEYS.patient, JSON.stringify(selectedPatient));\n            updateSelectedDisplay();\n            resetDevicesAndCamera();\n            initializePatientDevices(item.MRN);\n          }\n          closeModal();\n        }\n      });\n\n      btn.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          btn.click();\n        }\n      });\n\n      modalList.appendChild(btn);\n    });\n  }\n\n  async function awaitPatientListUpdateForNewLocation() {\n    try {\n      activeModal = 'patient';\n      await fetchAppointments(selectedLocation);\n      selectedPatient = null;\n      localStorage.removeItem(STORAGE_KEYS.patient);\n      modalAllItems = patients.slice();\n    } finally {\n      activeModal = null;\n    }\n  }\n\n  function formatApptDateTime(dateStr) {\n    if (!dateStr) return 'Unknown';\n    try {\n      const dt = new Date(dateStr);\n      if (isNaN(dt)) return 'Unknown';\n      return dt.toLocaleString(undefined, {\n        year: 'numeric', month: 'short', day: 'numeric',\n        hour: '2-digit', minute: '2-digit', hour12: true,\n      });\n    } catch {\n      return 'Unknown';\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    if (e.key === 'Escape' && modalOverlay.style.display === 'flex') {\n      closeModal();\n    }\n\n    if (e.key === 'Escape') {\n      if (modalDetailOverlay.style.display === 'flex') {\n        modalDetailOverlay.style.display = 'none';\n      }\n      if (photoModalOverlay.style.display === 'flex') {\n        photoModalOverlay.style.display = 'none';\n      }\n      if (photoSubmitLoaderOverlay.style.display === 'flex') {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n      }\n      if (fastTrackScoreModal.style.display === 'flex') {\n        closeFastTrackScoreModal();\n      }\n    }\n  });\n\n  changeLocationBtn.addEventListener('click', () => openModal('location'));\n  changePatientBtn.addEventListener('click', () => {\n    if (!selectedLocation) {\n      alert('Please select a location first.');\n      return;\n    }\n    openModal('patient');\n  });\n  modalCloseBtn.addEventListener('click', closeModal);\n\n  /* --- Patient Devices and Photo Capture Module --- */\n\n  const devicesSection = document.getElementById('devices-section');\n  const devicesContainer = document.getElementById('devices-container');\n\n  const cameraSection = document.getElementById('camera-section');\n  const cameraWrapper = document.getElementById('camera-wrapper');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const captureBtn = document.getElementById('capture-btn');\n  const cancelCaptureBtn = document.getElementById('cancel-capture-btn');\n  const notCompletedCaptureBtn = document.getElementById('not-completed-capture-btn');\n\n  const photoModalOverlay = document.getElementById('photo-modal-overlay');\n  const photoModalContent = document.getElementById('photo-modal-content');\n  const photoModalImg = document.getElementById('photo-modal-img');\n  const photoModalCloseBtn = document.getElementById('photo-modal-close-btn');\n  const photoTryAgainBtn = document.getElementById('photo-tryagain-btn');\n  const photoOkBtn = document.getElementById('photo-ok-btn');\n  const uploadStatus = photoModalContent.querySelector('#upload-status');\n\n  const modalDetailOverlay = document.getElementById('modal-detail-overlay');\n  const modalDetailContent = document.getElementById('modal-detail-content');\n  const modalDetailCloseBtn = document.getElementById('modal-detail-close-btn');\n\n  const photoSubmitLoaderOverlay = document.getElementById('photo-submit-loader-overlay');\n  const photoSubmitTimerDisplay = document.getElementById('photo-submit-timer');\n\n  let currentDevices = [];\n  let selectedDevice = null;\n  let currentMRN = '';\n  let cameraStream = null;\n  let photoBlob = null;\n\n  let submissionTimeoutId = null;\n  let submissionCountdown = 10;\n\n  const STORAGE_KEY = 'patientDeviceSubmissions';\n\n  /* --- Not Completed Status Cache Load/Save --- */\n  function loadNotCompletedStatusCache() {\n    try {\n      const cached = localStorage.getItem('notCompletedStatuses');\n      if (cached) {\n        notCompletedStatusCache = JSON.parse(cached) || {};\n      } else {\n        notCompletedStatusCache = {};\n      }\n    } catch (e) {\n      notCompletedStatusCache = {};\n    }\n  }\n  function saveNotCompletedStatusCache() {\n    try {\n      localStorage.setItem('notCompletedStatuses', JSON.stringify(notCompletedStatusCache));\n    } catch (e) { }\n  }\n\n  function loadSubmissionStatusCache() {\n    try {\n      const cached = localStorage.getItem(STORAGE_KEYS.submissionStatuses);\n      if (cached) {\n        submissionStatusCache = JSON.parse(cached) || {};\n      }\n    } catch (e) {\n      submissionStatusCache = {};\n    }\n  }\n  function saveSubmissionStatusCache() {\n    try {\n      localStorage.setItem(STORAGE_KEYS.submissionStatuses, JSON.stringify(submissionStatusCache));\n    } catch (e) {}\n  }\n\n  function clearChildren(el) {\n    while (el.firstChild) el.removeChild(el.firstChild);\n  }\n\n  function resetDevicesAndCamera() {\n    currentDevices = [];\n    selectedDevice = null;\n    devicesSection.hidden = true;\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    photoModalOverlay.style.display = 'none';\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  }\n\n  async function initializePatientDevices(mrn) {\n    if (!mrn) return;\n    currentMRN = mrn;\n    await loadDevices(mrn);\n  }\n\n  async function loadDevices(mrn) {\n    showLoader();\n    try {\n      const res = await fetch('https://xl.epicpc.com/webhook/46551f79-7e2c-4222-8c14-8eb335257994', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ mrn })\n      });\n      if (!res.ok) throw new Error(`Server error: ${res.status}`);\n      let devices = await res.json();\n      if (!Array.isArray(devices)) throw new Error('Invalid response');\n      currentDevices = devices;\n      if (currentDevices.length === 0) {\n        alert('No devices found for this patient.');\n        devicesSection.hidden = true;\n        hideLoader();\n        return false;\n      }\n      renderDeviceCards(currentDevices);\n      devicesSection.hidden = false;\n      hideLoader();\n      devicesSection.focus();\n      return true;\n    } catch (e) {\n      alert('Failed to load devices: ' + e.message);\n      devicesSection.hidden = true;\n      hideLoader();\n      return false;\n    }\n  }\n\n  function renderDeviceCards(devices) {\n    clearChildren(devicesContainer);\n    selectedDevice = null;\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n\n    // Also load failed/pending submissions for current MRN to show yellow badge\n    const allSubmissions = loadSavedSubmissions();\n    // Filter pending or failed submissions for current MRN and device\n    const pendingOrFailedSubmissions = allSubmissions.filter(sub => \n      sub.mrn === currentMRN && \n      (sub.status === 'Pending' || sub.status === 'Failed')\n    );\n\n    devices.sort((a, b) => {\n      if (!a.POCEquipment) return 1;\n      if (!b.POCEquipment) return -1;\n      return a.POCEquipment.localeCompare(b.POCEquipment);\n    });\n\n    devices.forEach(device => {\n      const card = document.createElement('div');\n      card.classList.add('card');\n      card.role = 'listitem';\n      card.tabIndex = 0;\n      card.setAttribute('aria-label', device.POCEquipment + (device.Description ? ': ' + device.Description : ''));\n\n      const img = document.createElement('img');\n      img.alt = device.POCEquipment + ' image' || 'Device image';\n      img.src = device.imageurl || '';\n      img.loading = 'lazy';\n      card.appendChild(img);\n\n      const deviceName = device.POCEquipment || '';\n\n      // Show \"Not Completed\" X badge if marked so\n      if (notCompletedStatusCache[currentMRN] && notCompletedStatusCache[currentMRN][deviceName]) {\n        const xBadge = document.createElement('div');\n        xBadge.className = 'device-not-completed';\n        xBadge.title = 'Marked as Not Completed';\n        xBadge.textContent = 'âœ•';\n        card.appendChild(xBadge);\n      }\n\n      // Show \"pending/failed\" yellow dash badge if any pending or failed submissions exist for this device:\n      if (pendingOrFailedSubmissions.some(sub => {\n        try {\n          const dev = JSON.parse(sub.device);\n          return dev.POCEquipment === deviceName;\n        } catch {\n          return false;\n        }\n      })) {\n        const pendingBadge = document.createElement('div');\n        pendingBadge.className = 'device-pending';\n        pendingBadge.title = 'Submission Pending or Failed';\n        pendingBadge.textContent = '-';\n        card.appendChild(pendingBadge);\n      }\n      // Show green badge with count if device has successful submissions AND no pending or failed submission\n      else {\n        const successCount = getSuccessfulSubmissionCountForDevice(currentMRN, deviceName);\n        if (successCount > 0) {\n          const countBadge = document.createElement('div');\n          countBadge.className = 'device-checked'; // reuse styling for badge\n          countBadge.title = `Successfully submitted ${successCount} time${successCount > 1 ? 's' : ''}`;\n          countBadge.textContent = successCount;\n          card.appendChild(countBadge);\n        }\n      }\n\n      const openCameraForDevice = () => {\n        selectedDevice = device;\n        devicesSection.hidden = true;\n        cameraSection.classList.remove('hidden');\n        cameraSection.focus();\n        photoBlob = null;\n        uploadStatus.textContent = '';\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled when opening camera\n        photoModalOverlay.style.display = 'none';\n        startCamera().then(() => {\n          const appElement = document.getElementById('app');\n          if (appElement) {\n            appElement.scrollTo({ top: appElement.scrollHeight - appElement.clientHeight + 20, behavior: 'smooth' });\n          }\n          setTimeout(() => {\n            cameraWrapper.scrollIntoView({ behavior: 'smooth', block: 'end' });\n          }, 150);\n        });\n      };\n      card.addEventListener('click', openCameraForDevice);\n      card.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          openCameraForDevice();\n        }\n      });\n      devicesContainer.appendChild(card);\n    });\n  }\n\n  // Returns the count of successful submissions (number) for the given patient MRN and deviceName\n  function getSuccessfulSubmissionCountForDevice(mrn, deviceName) {\n    if (!mrn || !deviceName) return 0;\n    if (submissionStatusCache[mrn] && submissionStatusCache[mrn][deviceName]) {\n      return submissionStatusCache[mrn][deviceName];\n    }\n    return 0;\n  }\n  // Returns total successful submitted devices count (number of devices with count>0) for patient MRN\n  function getSuccessfulSubmittedDevicesCountForPatient(mrn) {\n    if (!mrn) return 0;\n    if (!submissionStatusCache[mrn]) return 0;\n    // Count how many device keys have count > 0\n    let count = 0;\n    for (const deviceName in submissionStatusCache[mrn]) {\n      if (Object.hasOwnProperty.call(submissionStatusCache[mrn], deviceName)) {\n        const val = submissionStatusCache[mrn][deviceName];\n        if (typeof val === 'number' && val > 0) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n  // Returns total Not Completed devices count for patient MRN\n  function getNotCompletedDevicesCountForPatient(mrn) {\n    if (!mrn) return 0;\n    if (!notCompletedStatusCache[mrn]) return 0;\n    return Object.keys(notCompletedStatusCache[mrn]).length;\n  }\n\n  async function startCamera() {\n    try {\n      if (cameraStream) stopCamera();\n\n      let constraints = {\n        video: {\n          facingMode: { ideal: 'environment' },\n          width: { ideal: 3840 },\n          height: { ideal: 2160 }\n        },\n        audio: false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      const [videoTrack] = stream.getVideoTracks();\n      if (videoTrack && videoTrack.getCapabilities) {\n        const capabilities = videoTrack.getCapabilities();\n        const constraintsApply = {};\n        if (capabilities.imageStabilization !== undefined) {\n          constraintsApply.imageStabilization = true;\n        }\n        if (capabilities.stabilizationMode && capabilities.stabilizationMode.includes('standard')) {\n          constraintsApply.stabilizationMode = 'standard';\n        }\n        if (Object.keys(constraintsApply).length) {\n          try {\n            await videoTrack.applyConstraints(constraintsApply);\n          } catch (e) { }\n        }\n      }\n\n      cameraStream = stream;\n      video.srcObject = cameraStream;\n      await video.play();\n\n    } catch (e) {\n      alert('Failed to access camera: ' + e.message);\n      cancelCaptureBtn.click();\n    }\n  }\n\n  function stopCamera() {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(t => t.stop());\n      cameraStream = null;\n    }\n  }\n\n  cancelCaptureBtn.addEventListener('click', () => {\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoModalOverlay.style.display = 'none';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n\n    const appElement = document.getElementById('app');\n    if (appElement) {\n      appElement.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  });\n\n  // Fix capture button keyboard accessibility and drawing in requestAnimationFrame for reliability:\n  captureBtn.addEventListener('click', takePhoto);\n  captureBtn.addEventListener('keydown', e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      takePhoto();\n    }\n  });\n\n  function takePhoto() {\n    if (!cameraStream) return;\n\n    requestAnimationFrame(() => {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        photoBlob = blob;\n        const url = URL.createObjectURL(blob);\n        photoModalImg.src = url;\n        photoModalOverlay.style.display = 'flex';\n        photoModalContent.focus();\n        setButtonLoadingState(photoOkBtn, false); // Ensure submit button enabled on photo display\n      }, 'image/jpeg', 0.95);\n    });\n  }\n\n  photoModalCloseBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  photoTryAgainBtn.addEventListener('click', () => {\n    photoModalOverlay.style.display = 'none';\n    if (photoModalImg.src) {\n      URL.revokeObjectURL(photoModalImg.src);\n      photoModalImg.src = '';\n    }\n    photoBlob = null;\n    uploadStatus.textContent = '';\n    stopSubmitTimeout();\n    hidePhotoSubmitLoader();\n    setButtonLoadingState(photoOkBtn, false);\n  });\n\n  // Util function for setting submit button loading state (disabled and text)\n  function setButtonLoadingState(button, isLoading) {\n    if (isLoading) {\n      button.disabled = true;\n      button.textContent = 'Submitting...'; // Change button label during loading\n      button.style.opacity = '0.6';        // Make it appear visually disabled\n      button.style.cursor = 'not-allowed';\n    } else {\n      button.disabled = false;\n      button.textContent = 'Submit';       // Restore original label\n      button.style.opacity = '';\n      button.style.cursor = 'pointer';\n    }\n  }\n\n  photoOkBtn.addEventListener('click', uploadPhoto);\n\n  // Helper functions for photo submission loader and timer\n  function showPhotoSubmitLoader() {\n    submissionCountdown = 10;\n    photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n    photoSubmitLoaderOverlay.style.display = 'flex';\n  }\n  function hidePhotoSubmitLoader() {\n    photoSubmitLoaderOverlay.style.display = 'none';\n  }\n  function startSubmitTimeout(onTimeout) {\n    showPhotoSubmitLoader();\n    stopSubmitTimeout();\n    submissionTimeoutId = setInterval(() => {\n      submissionCountdown--;\n      if (submissionCountdown < 0) {\n        stopSubmitTimeout();\n        hidePhotoSubmitLoader();\n        if(onTimeout && typeof onTimeout === 'function'){\n          onTimeout();\n        }\n      } else {\n        photoSubmitTimerDisplay.textContent = submissionCountdown.toString();\n      }\n    }, 1000);\n  }\n  function stopSubmitTimeout() {\n    if (submissionTimeoutId !== null) {\n      clearInterval(submissionTimeoutId);\n      submissionTimeoutId = null;\n    }\n    hidePhotoSubmitLoader();\n  }\n\n  async function uploadPhoto() {\n    if (!photoBlob || !selectedDevice || !currentMRN) return;\n\n    if (!navigator.onLine) {\n      await markSubmissionFailedDueOffline();\n      // After failure handling, update device cards with badges\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n      return;\n    }\n\n    // Show overlay loader & disable submit button when Submit pressed\n    setButtonLoadingState(photoOkBtn, true);\n    uploadStatus.textContent = '';\n    showPhotoSubmitLoader();\n\n    const onTimeout = async () => {\n      uploadStatus.textContent = 'Upload timed out, saved as Failed.';\n      await updateSubmissionStatusTimed('Failed');\n\n      // Update badge and device cards immediately\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n      setButtonLoadingState(photoOkBtn, false);\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n    };\n\n    startSubmitTimeout(onTimeout);\n\n    try {\n      const formData = new FormData();\n      formData.append('mrn', currentMRN);\n      formData.append('device', JSON.stringify(selectedDevice));\n      formData.append('photo', photoBlob, 'device.jpg');\n\n      // Save photo blob directly in IndexedDB instead of base64 localStorage\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      const timestamp = Date.now();\n\n      const submissionRecord = {\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: 'Pending',\n        timestamp\n      };\n\n      // Save photo blob record in IndexedDB\n      await addPhotoRecord({ id, mrn: currentMRN, device: submissionRecord.device, blob: photoBlob, timestamp });\n\n      // Also save the submission status record in localStorage (without photoDataUrl)\n      addSubmissionRecord(submissionRecord);\n      updateDatePickerRange();\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n\n      const abortController = new AbortController();\n      const timeoutId = setTimeout(() => abortController.abort(), 10000);\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n        signal: abortController.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      updateSubmissionStatus(id, 'Success');\n\n      // Increment count on success (change from boolean to count)\n      if (!submissionStatusCache[currentMRN]) {\n        submissionStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        const currentCount = submissionStatusCache[currentMRN][deviceName] || 0;\n        const newCount = currentCount + 1;\n        submissionStatusCache[currentMRN][deviceName] = newCount;\n        saveSubmissionStatusCache();\n\n        // Special case: if this is the first successful submit for this device, update count to 1 not 'true' (already done above)\n        // (This fixes the original issue: first success is '1' number, not boolean True)\n      }\n\n      // After success, refresh device cards with badges\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n      if (photoModalImg.src) {\n        URL.revokeObjectURL(photoModalImg.src);\n        photoModalImg.src = '';\n      }\n      photoBlob = null;\n\n      uploadStatus.textContent = 'Upload successful!';\n\n      setButtonLoadingState(photoOkBtn, false);\n\n      setTimeout(() => {\n        uploadStatus.textContent = '';\n        photoModalOverlay.style.display = 'none';\n        stopCamera();\n        cameraSection.classList.add('hidden');\n        devicesSection.hidden = false;\n        loadDevices(currentMRN);\n\n        if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n      }, 1000);\n    } catch (e) {\n      stopSubmitTimeout();\n      hidePhotoSubmitLoader();\n\n      if (e.name === 'AbortError') {\n        setButtonLoadingState(photoOkBtn, false);\n        return;\n      }\n      if (!navigator.onLine) {\n        await markSubmissionFailedDueOffline();\n\n        loadSubmissionStatusCache();\n        loadNotCompletedStatusCache();\n        renderDeviceCards(currentDevices);\n      } else {\n        uploadStatus.textContent = 'Upload failed: ' + e.message;\n        await updateSubmissionStatusTimed('Failed');\n\n        loadSubmissionStatusCache();\n        loadNotCompletedStatusCache();\n        renderDeviceCards(currentDevices);\n      }\n      setButtonLoadingState(photoOkBtn, false);\n    }\n  }\n\n  async function markSubmissionFailedDueOffline() {\n    uploadStatus.textContent = 'Device is offline, saved as Failed.';\n\n    const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    const timestamp = Date.now();\n\n    // Save photo blob record in IndexedDB\n    await addPhotoRecord({ id, mrn: currentMRN, device: JSON.stringify(selectedDevice), blob: photoBlob, timestamp });\n\n    const submissionRecord = {\n      id,\n      mrn: currentMRN,\n      device: JSON.stringify(selectedDevice),\n      status: 'Failed',\n      timestamp\n    };\n    addSubmissionRecord(submissionRecord);\n    updateDatePickerRange();\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    photoModalOverlay.style.display = 'none';\n    stopCamera();\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false;\n    photoBlob = null;\n\n    setButtonLoadingState(photoOkBtn, false);\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    // After failure, update device cards with yellow badge immediately\n    loadSubmissionStatusCache();\n    loadNotCompletedStatusCache();\n    renderDeviceCards(currentDevices);\n  }\n\n  async function updateSubmissionStatusTimed(newStatus) {\n    const submissions = loadSavedSubmissions();\n    let found = false;\n    for (let i = submissions.length - 1; i >= 0; i--) {\n      const s = submissions[i];\n      if (s.status === 'Pending' && s.mrn === currentMRN) {\n        s.status = newStatus;\n        found = true;\n        break;\n      }\n    }\n    if (!found && newStatus === 'Failed') {\n      const id = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n    }\n    saveSubmissions(submissions);\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function loadSavedSubmissions() {\n    try {\n      const dataStr = localStorage.getItem(STORAGE_KEY);\n      if (!dataStr) return [];\n      return JSON.parse(dataStr);\n    } catch (e) {\n      console.warn('Failed to parse saved submissions in localStorage', e);\n      return [];\n    }\n  }\n  function saveSubmissions(submissions) {\n    try {\n      const toSave = submissions.filter(s => s.status === 'Failed' || s.status === 'Pending');\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.warn('Failed to save submissions to localStorage', e);\n    }\n  }\n  function addSubmissionRecord(record) {\n    const submissions = loadSavedSubmissions();\n    submissions.push(record);\n    saveSubmissions(submissions);\n  }\n  function updateSubmissionStatus(id, newStatus) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions[idx].status = newStatus;\n      saveSubmissions(submissions);\n    } else if (newStatus === 'Failed') {\n      submissions.push({\n        id,\n        mrn: currentMRN,\n        device: JSON.stringify(selectedDevice),\n        status: newStatus,\n        timestamp: Date.now()\n      });\n      saveSubmissions(submissions);\n    }\n    renderSavedSubmissions();\n    updateShowSubmissionsButton();\n\n    if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n  }\n\n  function renderSavedSubmissions() {\n    const submissions = loadSavedSubmissions();\n    let filtered = submissions;\n\n    if (dateFilterInput.value) {\n      const selectedDateValue = dateFilterInput.value;\n      const selectedDate = new Date(selectedDateValue + 'T00:00:00');\n      if (!isNaN(selectedDate.getTime())) {\n        const nextDate = new Date(selectedDate.getTime() + 86400000);\n        filtered = filtered.filter(sub => {\n          const subDate = new Date(sub.timestamp);\n          return subDate >= selectedDate && subDate < nextDate;\n        });\n      }\n    }\n\n    clearChildren(savedSubmissionsBody);\n    if (filtered.length === 0) {\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n      td.colSpan = 5;\n      td.textContent = 'No submissions found.';\n      td.style.textAlign = 'center';\n      tr.appendChild(td);\n      savedSubmissionsBody.appendChild(tr);\n      modalRetryBtn.style.display = 'none';\n      return;\n    }\n    filtered.forEach(sub => {\n      const tr = document.createElement('tr');\n      tr.tabIndex = 0;\n      tr.setAttribute('aria-label', `Submission for MRN ${sub.mrn}, Device: ${(JSON.parse(sub.device).POCEquipment || '')}, Date: ${formatDate(sub.timestamp)}, Status: ${sub.status}`);\n      const tdMrn = document.createElement('td');\n      tdMrn.textContent = sub.mrn;\n      const tdDevice = document.createElement('td');\n      try {\n        const deviceObj = JSON.parse(sub.device);\n        tdDevice.textContent = deviceObj.POCEquipment || '';\n      } catch {\n        tdDevice.textContent = '';\n      }\n      const tdDate = document.createElement('td');\n      tdDate.textContent = formatDate(sub.timestamp);\n      const tdStatus = document.createElement('td');\n      tdStatus.textContent = sub.status;\n      tdStatus.classList.add(sub.status === 'Pending' ? 'status-pending' : sub.status === 'Success' ? 'status-success' : 'status-failed');\n      const tdRetry = document.createElement('td');\n      if (sub.status === 'Failed' || sub.status === 'Pending') {\n        const retryBtn = document.createElement('button');\n        retryBtn.textContent = 'Retry';\n        retryBtn.className = 'btn-danger';\n        retryBtn.style.padding = '4px 10px';\n        retryBtn.style.fontSize = '1rem';\n        retryBtn.style.borderRadius = '8px';\n        retryBtn.style.cursor = 'pointer';\n        retryBtn.style.userSelect = 'none';\n        retryBtn.addEventListener('click', async (ev) => {\n          ev.stopPropagation();\n          retryBtn.disabled = true;\n          retryBtn.textContent = 'Retrying...';\n          try {\n            await retrySubmission(sub);\n            // After retry success, refresh device badges immediately\n            loadSubmissionStatusCache();\n            loadNotCompletedStatusCache();\n            renderDeviceCards(currentDevices);\n          } catch (e) {\n            alert('Retry failed: ' + e.message);\n          } finally {\n            retryBtn.disabled = false;\n            retryBtn.textContent = 'Retry';\n          }\n        });\n        tdRetry.appendChild(retryBtn);\n      }\n      tr.appendChild(tdMrn);\n      tr.appendChild(tdDevice);\n      tr.appendChild(tdDate);\n      tr.appendChild(tdStatus);\n      tr.appendChild(tdRetry);\n\n      tr.addEventListener('click', () => {\n        showSubmissionDetails(sub);\n      });\n      tr.addEventListener('keydown', e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          showSubmissionDetails(sub);\n        }\n      });\n\n      savedSubmissionsBody.appendChild(tr);\n    });\n\n    modalRetryBtn.style.display = 'none';\n  }\n\n  let currentOpenSubmission = null;\n\n  function showSubmissionDetails(submission) {\n    currentOpenSubmission = submission;\n    clearChildren(modalDetailContent);\n    try {\n      const deviceObj = JSON.parse(submission.device);\n      const title = document.createElement('h3');\n      title.textContent = deviceObj.POCEquipment || 'Device';\n      modalDetailContent.appendChild(title);\n      if (deviceObj.Description) {\n        const desc = document.createElement('p');\n        desc.textContent = deviceObj.Description;\n        modalDetailContent.appendChild(desc);\n      }\n    } catch { }\n\n    const mrnP = document.createElement('p');\n    mrnP.textContent = 'MRN: ' + submission.mrn;\n    modalDetailContent.appendChild(mrnP);\n\n    const dateP = document.createElement('p');\n    dateP.textContent = 'Date: ' + formatDateTime(submission.timestamp);\n    modalDetailContent.appendChild(dateP);\n\n    const statusP = document.createElement('p');\n    statusP.textContent = 'Status: ' + submission.status;\n    statusP.className = submission.status === 'Pending' ? 'status-pending' : submission.status === 'Success' ? 'status-success' : 'status-failed';\n    modalDetailContent.appendChild(statusP);\n\n    if (typeof submission.photoDataUrl === 'string' && submission.photoDataUrl) {\n      // Legacy base64 is still shown for old records\n      const img = document.createElement('img');\n      img.src = submission.photoDataUrl;\n      img.alt = 'Captured photo of device';\n      img.style.maxWidth = '100%';\n      img.style.borderRadius = '14px';\n      img.style.marginTop = '12px';\n      modalDetailContent.appendChild(img);\n    } else {\n      // For new records, fetch blob from IndexedDB and show\n      getPhotoRecordById(submission.id).then(record => {\n        if (record && record.blob) {\n          const img = document.createElement('img');\n          const url = URL.createObjectURL(record.blob);\n          img.src = url;\n          img.alt = 'Captured photo of device';\n          img.style.maxWidth = '100%';\n          img.style.borderRadius = '14px';\n          img.style.marginTop = '12px';\n\n          modalDetailContent.appendChild(img);\n\n          // Revoke Object URL when modal closes\n          const onClose = () => {\n            URL.revokeObjectURL(url);\n            modalDetailOverlay.removeEventListener('click', onClose);\n            modalDetailCloseBtn.removeEventListener('click', onClose);\n          };\n          modalDetailOverlay.addEventListener('click', onClose);\n          modalDetailCloseBtn.addEventListener('click', onClose);\n        }\n      }).catch(() => { /* silently ignore */ });\n    }\n\n    if (submission.status === 'Failed' || submission.status === 'Pending') {\n      modalRetryBtn.style.display = 'flex';\n    } else {\n      modalRetryBtn.style.display = 'none';\n    }\n\n    modalDetailOverlay.style.display = 'flex';\n    modalDetailContent.focus();\n  }\n\n  modalRetryBtn.addEventListener('click', async () => {\n    if (!currentOpenSubmission) return;\n    modalRetryBtn.disabled = true;\n    modalRetryBtn.textContent = 'Retrying...';\n    try {\n      await retrySubmission(currentOpenSubmission);\n      modalRetryBtn.style.display = 'none';\n      currentOpenSubmission = null;\n      modalDetailOverlay.style.display = 'none';\n\n      // Refresh devices cards upon retry success\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n    } catch (e) {\n      alert('Retry failed: ' + e.message);\n    } finally {\n      modalRetryBtn.disabled = false;\n      modalRetryBtn.textContent = 'Retry Submit';\n    }\n  });\n\n  modalDetailCloseBtn.addEventListener('click', () => {\n    modalDetailOverlay.style.display = 'none';\n    modalRetryBtn.style.display = 'none';\n    currentOpenSubmission = null;\n  });\n\n  async function retrySubmission(submission) {\n    if (submission.status !== 'Failed' && submission.status !== 'Pending') return;\n    showLoader();\n    try {\n      uploadStatus.textContent = 'Retrying upload...';\n\n      const record = await getPhotoRecordById(submission.id);\n      if (!record || !record.blob) throw new Error('No photo data to upload');\n\n      const formData = new FormData();\n      formData.append('mrn', submission.mrn);\n      formData.append('device', submission.device);\n      formData.append('photo', record.blob, 'device.jpg');\n\n      const res = await fetch('https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      await removeSubmissionRecord(submission.id);\n      await deletePhotoRecord(submission.id);\n\n      alert('Retry upload successful and record removed.');\n      renderSavedSubmissions();\n      updateShowSubmissionsButton();\n      uploadStatus.textContent = '';\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n      // Update internal caches for success indication\n      if (!submissionStatusCache[submission.mrn]) submissionStatusCache[submission.mrn] = {};\n      try {\n        const dev = JSON.parse(submission.device);\n        if (dev.POCEquipment) {\n          // Increment count on retry success as well\n          const prevCount = submissionStatusCache[submission.mrn][dev.POCEquipment] || 0;\n          submissionStatusCache[submission.mrn][dev.POCEquipment] = prevCount + 1; \n          saveSubmissionStatusCache();\n        }\n      } catch {}\n\n    } catch (e) {\n      alert('Retry upload failed: ' + e.message);\n      uploadStatus.textContent = 'Retry failed: ' + e.message;\n      throw e;\n    } finally {\n      hideLoader();\n    }\n  }\n\n  function removeSubmissionRecord(id) {\n    const submissions = loadSavedSubmissions();\n    const idx = submissions.findIndex(s => s.id === id);\n    if (idx !== -1) {\n      submissions.splice(idx, 1);\n      saveSubmissions(submissions);\n    }\n  }\n\n  function formatDateTime(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()} ${pad(dt.getHours())}:${pad(dt.getMinutes())}`;\n  }\n  function formatDate(timestamp) {\n    const dt = new Date(timestamp);\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${pad(dt.getMonth() + 1)}/${pad(dt.getDate())}/${dt.getFullYear()}`;\n  }\n\n  showSubmissionsBtn.addEventListener('click', () => {\n    const visible = savedSubmissionsPanel.style.display === 'flex';\n    if (visible) {\n      savedSubmissionsPanel.style.display = 'none';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n    } else {\n      savedSubmissionsPanel.style.display = 'flex';\n      showSubmissionsBtn.setAttribute('aria-pressed', 'true');\n      updateDatePickerRange();\n      renderSavedSubmissions();\n    }\n  });\n\n  const savedSubmissionsCloseBtn = document.getElementById('saved-submissions-close');\n  savedSubmissionsCloseBtn.addEventListener('click', () => {\n    savedSubmissionsPanel.style.display = 'none';\n    showSubmissionsBtn.setAttribute('aria-pressed', 'false');\n  });\n\n  const dateFilterInput = document.getElementById('date-filter-input');\n  dateFilterInput.addEventListener('change', () => renderSavedSubmissions());\n\n  function updateDatePickerRange() {\n    dateFilterInput.min = '';\n    dateFilterInput.max = '';\n  }\n\n  function updateShowSubmissionsButton() {\n    const submissions = loadSavedSubmissions();\n    const todayStr = new Date().toISOString().split('T')[0];\n    const hasFailedToday = submissions.some(sub => {\n      if (sub.status !== 'Failed') return false;\n      const subDate = new Date(sub.timestamp).toISOString().split('T')[0];\n      return subDate === todayStr;\n    });\n    if (hasFailedToday) {\n      showSubmissionsBtn.classList.add('star');\n    } else {\n      showSubmissionsBtn.classList.remove('star');\n    }\n  }\n\n  notCompletedCaptureBtn.addEventListener('click', () => {\n    if (!selectedDevice) {\n      alert('Please select a device first by clicking on its card.');\n      return;\n    }\n    openNotCompletedModal();\n  });\n\n  function openNotCompletedModal() {\n    // Important: Show devices section underneath as user requested (do NOT hide it)\n    cameraSection.classList.add('hidden');\n    devicesSection.hidden = false; // Show devices\n\n    notCompletedModalOverlay.style.display = 'flex';\n    notCompletedModalContent.focus();\n  }\n\n  function closeNotCompletedModal() {\n    notCompletedModalOverlay.style.display = 'none';\n    // Back button from Not Completed modal goes back to devices list,\n    // NOT to camera feed as requested\n    devicesSection.hidden = false;\n    cameraSection.classList.add('hidden');\n    devicesSection.focus();\n  }\n\n  notCompletedModalCloseBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedBackBtn.addEventListener('click', () => {\n    closeNotCompletedModal();\n  });\n\n  notCompletedOptionsContainer.querySelectorAll('button[data-reason]').forEach(btn => {\n    btn.addEventListener('click', async () => {\n      const reason = btn.getAttribute('data-reason');\n      if (!selectedDevice || !currentMRN) {\n        alert('No device or patient selected.');\n        closeNotCompletedModal();\n        return;\n      }\n      await submitNotCompletedReason(reason, btn.textContent);\n\n      // After submit (success or failure), update device cards badges\n      loadSubmissionStatusCache();\n      loadNotCompletedStatusCache();\n      renderDeviceCards(currentDevices);\n\n      closeNotCompletedModal();\n    });\n  });\n\n  async function submitNotCompletedReason(reasonCode, reasonText) {\n    try {\n      showLoader();\n      const payload = {\n        mrn: currentMRN,\n        device: selectedDevice,\n        notCompletedReason: reasonCode\n      };\n\n      const webhookUrl = 'https://xl.epicpc.com/webhook/29fcc38d-2ae6-45f4-bce2-b6097cf84c55';\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      const res = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) throw new Error(`Upload failed: ${res.statusText}`);\n\n      loadNotCompletedStatusCache();\n      if (!notCompletedStatusCache[currentMRN]) {\n        notCompletedStatusCache[currentMRN] = {};\n      }\n      const deviceName = selectedDevice.POCEquipment || '';\n      if (deviceName) {\n        notCompletedStatusCache[currentMRN][deviceName] = reasonCode;\n        saveNotCompletedStatusCache();\n      }\n\n      loadSubmissionStatusCache();\n      // We do NOT delete success submission for this device when marking Not Completed,\n      // to comply with requirement to count Not Completed also as counts towards patient badge.\n      // So do not delete from submissionStatusCache here\n\n      renderDeviceCards(currentDevices);\n\n      alert('Not Completed reason \"' + reasonText + '\" submitted successfully.');\n\n      stopCamera();\n      cameraSection.classList.add('hidden');\n      devicesSection.hidden = false;\n\n      if (selectedPatient) updatePatientSubmissionBadge(selectedPatient.MRN);\n\n    } catch (e) {\n      if (e.name === 'AbortError' || e.message.includes('NetworkError') || !navigator.onLine) {\n        alert('No response from server, saved as Failed Sends.');\n        const submissionRecord = {\n          id: Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n          mrn: currentMRN,\n          device: JSON.stringify(selectedDevice),\n          status: 'Failed',\n          notCompletedReason: reasonCode,\n          timestamp: Date.now()\n        };\n        addSubmissionRecord(submissionRecord);\n        renderSavedSubmissions();\n        updateShowSubmissionsButton();\n\n        // After failure save, update device cards badges immediately\n        loadSubmissionStatusCache();\n        loadNotCompletedStatusCache();\n        renderDeviceCards(currentDevices);\n\n        closeNotCompletedModal();\n      } else {\n        alert('Submit failed: ' + e.message);\n      }\n    } finally {\n      hideLoader();\n    }\n  }\n\n  /* --- Initialization & Misc --- */\n\n  initialLoad();\n\n  async function initialLoad() {\n    showLoader();\n\n    try {\n      const storedLoc = localStorage.getItem(STORAGE_KEYS.location);\n      const storedPat = localStorage.getItem(STORAGE_KEYS.patient);\n\n      const hasCachedLocations = loadLocationsFromCache();\n\n      if (hasCachedLocations) {\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      } else {\n        activeModal = 'location';\n        await fetchAppointments(null);\n        activeModal = null;\n\n        if (storedLoc && locations.find(l => l.value === storedLoc)) {\n          selectedLocation = storedLoc;\n        } else {\n          selectedLocation = null;\n          selectedPatient = null;\n          localStorage.removeItem(STORAGE_KEYS.location);\n          localStorage.removeItem(STORAGE_KEYS.patient);\n        }\n      }\n\n      if (selectedLocation) {\n        const hasCachedPatients = loadPatientsFromCache();\n\n        if (hasCachedPatients) {\n          patients = patients || [];\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        } else {\n          activeModal = 'patient';\n          await fetchAppointments(selectedLocation);\n          activeModal = null;\n\n          if (storedPat) {\n            try {\n              const storedPatient = JSON.parse(storedPat);\n              if (storedPatient && storedPatient.MRN && patients.find(p => p.MRN === storedPatient.MRN)) {\n                selectedPatient = storedPatient;\n              } else {\n                selectedPatient = null;\n                localStorage.removeItem(STORAGE_KEYS.patient);\n              }\n            } catch {\n              selectedPatient = null;\n              localStorage.removeItem(STORAGE_KEYS.patient);\n            }\n          } else {\n            selectedPatient = null;\n          }\n        }\n      } else {\n        selectedPatient = null;\n      }\n    } catch (e) {\n      alert('Failed to load initial data: ' + e.message);\n      console.error(e);\n    } finally {\n      updateSelectedDisplay();\n      hideLoader();\n\n      if (selectedPatient && selectedPatient.MRN) {\n        initializePatientDevices(selectedPatient.MRN);\n      } else {\n        resetDevicesAndCamera();\n      }\n      updateShowSubmissionsButton();\n    }\n  }\n\n})();\n</script>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        540,
        660
      ],
      "id": "7f238597-bf60-42dc-b86d-d11ca3e1ffa3",
      "name": "Yellow Badge2"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-08-07T20:18:29.005Z",
  "versionId": "1d7950bd-f536-4b9f-bcad-96e7ecf89f2e"
}