{
  "active": true,
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "No Operation, do nothing6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "If9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PCARE": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres2": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Compare Datasets": {
      "main": [
        [
          {
            "node": "PM P-CARE1",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "PM P-CARE2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "PM P-CARE1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Respond to Webhook5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres4": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dateRange": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If9": {
      "main": [
        [],
        [
          {
            "node": "dateRange",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PM P-CARE1": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          },
          {
            "node": "PM P-CARE4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code31": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PM P-CARE2": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "PCARE",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        [],
        [
          {
            "node": "PA-LAB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing6": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PA-LAB": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code69": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-10T16:56:11.674Z",
  "id": "lxnrt1HQ0k1BTN3W",
  "isArchived": false,
  "meta": null,
  "name": "Quick Scheduler TESTING",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "575543b3-8c31-47bf-8dd5-58fcef206b0a",
              "leftValue": "={{ $json.patient_number }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "af2135e6-bcbc-480f-81bf-efbf9ce45f9b",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        2220,
        1580
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * \nFROM bir.patient_rfm_catg \nWHERE patient_number = '{{ $('Webhook').item.json.query.patientId }}' \nORDER BY id ASC\nLIMIT 1;",
        "options": {}
      },
      "id": "1f51da51-9aa3-476d-aeae-9403c6884afd",
      "name": "Postgres1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2060,
        1580
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "6UhfXvPEQwS0wZ1c",
          "name": "BIREporting"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "002536a4-da85-4eb0-be88-be97097656d2",
              "leftValue": "={{ $json.query.patientId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e5cbfdfe-ea75-42a4-80e6-afd79e8f2c59",
      "name": "If2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -160,
        1700
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "You clicked PCARE",
        "options": {}
      },
      "id": "26833557-04de-4bc4-8a05-07aac22d5f35",
      "name": "PCARE",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1300,
        1580
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM public.resource_pract_prov_caregiver",
        "options": {}
      },
      "id": "4f84efa7-661e-4097-8221-0cf0ea2e0d77",
      "name": "Postgres2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2160,
        1300
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "ZobWMB3IA3M32d1Z",
          "name": "automations Pract_Prov"
        }
      }
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "provider_name",
              "field2": "PROV_FULLNAME_REVERSED"
            }
          ]
        },
        "resolve": "preferInput2",
        "options": {}
      },
      "id": "4d64423f-8af8-45fd-87b0-5321393d5629",
      "name": "Compare Datasets",
      "type": "n8n-nodes-base.compareDatasets",
      "typeVersion": 2.3,
      "position": [
        2400,
        1260
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "e5054551-3af4-4267-b876-156b7ed7bc77",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2400,
        1760
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retrieve external modal contents (if any) and the appointments array from the incoming JSON.\nconst providerContentVar = $json[\"providerContent\"] || '';\nconst dateRangeContentVar = $json[\"dateRangeContent\"] || '';\nconst appointmentsArr = $json[\"data\"] || [];\n\n// Derive unique locations from the appointments data (using the location_description field)\n// Works whether location_description is a string or an array.\nconst uniqueLocations = [...new Set(appointmentsArr.flatMap(item => {\n  return Array.isArray(item.location_description)\n    ? item.location_description\n    : [item.location_description];\n}))].filter(x => x && x.trim() !== '');\n\n// Derive unique providers from the appointments data (using the provider_name field)\n// and sort them alphabetically.\nconst uniqueProviders = [...new Set(appointmentsArr.map(item => item.provider_name))]\n  .filter(x => x && x.trim() !== '')\n  .sort((a, b) => a.localeCompare(b));\n\n// Build dynamic location modal content with updated modern UI (light mode only)\nconst locationContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Locations</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please search and select your preferred locations:</p>\n  <input type=\"text\" id=\"locationSearch\" placeholder=\"Search locations...\" oninput=\"filterLocations()\"\n    style=\"width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px;\">\n  <div id=\"locationList\" style=\"max-height: 200px; overflow-y: auto; margin-bottom: 10px;\">\n    ${uniqueLocations.map(option => `\n      <div class=\"location-item\" style=\"padding: 6px 0; border-bottom: 1px solid #eee;\">\n        <label style=\"cursor: pointer; display: block; font-family: Arial, sans-serif;\">\n          <input type=\"checkbox\" class=\"location-checkbox\" value=\"${option}\" style=\"margin-right: 8px;\"> ${option}\n        </label>\n      </div>\n    `).join('')}\n  </div>\n  <button class=\"button-modern\" onclick=\"handleLocationChange()\">Apply Filters</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetLocations()\">Reset Locations</button>\n`;\nconst locationContent = locationContentNew;\n\n// Build dynamic provider modal content with updated modern UI (light mode only)\nconst providerContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Provider</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please select your preferred provider:</p>\n  <select id=\"providerDropdown\" style=\"width:100%; padding:8px; margin-bottom:10px; border:1px solid #ccc; border-radius:4px;\">\n    <option value=\"\">-- Select a Provider --</option>\n    ${uniqueProviders.map(provider => `<option value=\"${provider}\">${provider}</option>`).join('')}\n  </select>\n  <button class=\"button-modern\" onclick=\"handleProviderChange()\">Apply Provider</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetProvider()\">Reset Provider</button>\n`;\nconst providerContent = providerContentNew;\n\n// Convert appointments data to a JSON string for use in the HTML.\nconst appointmentsData = JSON.stringify(appointmentsArr);\n\n// Build the full HTML content.\nconst html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Schedule</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      overflow: hidden;\n      font-family: Arial, sans-serif;\n    }\n    .modal-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(0,0,0,0.5);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 9999;\n    }\n    .modal {\n      background-color: white;\n      padding: 20px;\n      border-radius: 8px;\n      width: 300px;\n      position: relative;\n      max-height: 90vh;\n      overflow-y: auto;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n    }\n    .close-button {\n      position: absolute;\n      top: 10px; right: 10px;\n      cursor: pointer;\n      font-size: 16px;\n      color: #333;\n    }\n    .modal button {\n      padding: 10px;\n      margin-bottom: 10px;\n      width: 100%;\n      background-color: #3b82f6;\n      color: #fff;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 16px;\n    }\n    .modal button:hover {\n      background-color: #2563eb;\n    }\n    .loader-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(255,255,255,0.8);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 99999;\n    }\n    .loader {\n      border: 8px solid #f3f3f3;\n      border-top: 8px solid #3b82f6;\n      border-radius: 50%;\n      width: 60px;\n      height: 60px;\n      animation: spin 1s linear infinite;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    .header-controls {\n      display: flex;\n      justify-content: space-around;\n      border: 1px solid #ccc;\n      padding: 8px;\n      border-radius: 4px;\n      margin-bottom: 8px;\n    }\n    .header-controls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    .header-controls button:hover {\n      background-color: #f0f0f0;\n    }\n    #searchInput {\n      width: 100%;\n      padding: 8px;\n      margin-bottom: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    .table-responsive {\n      max-height: 50vh;\n      overflow-y: auto;\n      border-radius: 8px;\n      border: 1px solid #e5e7eb;\n      overflow-x: auto;\n      padding: 8px;\n      box-sizing: border-box;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      background-color: #ffffff;\n      font-size: 14px;\n      line-height: 1.4em;\n    }\n    thead tr {\n      position: sticky;\n      top: 0;\n      background-color: #000;\n      z-index: 1;\n    }\n    thead th {\n      padding: 12px;\n      text-align: left;\n      font-weight: bold;\n      color: #fff;\n      font-size: 14px;\n      cursor: pointer;\n      border-bottom: 1px solid #d1d5db;\n    }\n    tbody tr:hover {\n      background-color: #f9fafb;\n    }\n    tbody td {\n      padding: 12px;\n      color: #4b5563;\n      font-size: 14px;\n      border-top: 1px solid #e5e7eb;\n      vertical-align: middle;\n    }\n    tbody td button {\n      padding: 8px 16px;\n      background-color: #f59e0b;\n      color: #000;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    tbody td button:hover {\n      background-color: #d97706;\n    }\n    #paginationControls {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 8px;\n    }\n    #paginationControls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    #paginationControls button:hover {\n      background-color: #f0f0f0;\n    }\n    #showAllButton {\n      margin-top: 10px;\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      width: 100%;\n      font-size: 14px;\n    }\n    #showAllButton:hover {\n      background-color: #f0f0f0;\n    }\n    @media (max-width: 600px) {\n      .modal {\n        width: 95%;\n        padding: 10px;\n        max-height: 90vh;\n        overflow-y: auto;\n      }\n    }\n    /* Modern button styling for the modals' apply buttons */\n    .button-modern {\n      width: 100%;\n      padding: 12px;\n      background: linear-gradient(90deg, #4f46e5, #3b82f6);\n      color: #fff;\n      border: none;\n      border-radius: 8px;\n      font-size: 16px;\n      cursor: pointer;\n      font-family: Arial, sans-serif;\n      transition: background 0.3s ease;\n      box-shadow: 0px 4px 6px rgba(0,0,0,0.1);\n    }\n    .button-modern:hover {\n      background: linear-gradient(90deg, #3b82f6, #2563eb);\n    }\n  </style>\n</head>\n<body>\n  <div style=\"background-image: url('https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png');\n              background-size: cover;\n              background-position: center;\n              height: 100vh;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              overflow: hidden;\">\n    <div style=\"max-width: 900px;\n                width: 100%;\n                background-color: rgba(255,255,255,0.9);\n                padding: 16px;\n                border-radius: 8px;\n                box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n                overflow: hidden;\">\n      <h2 style=\"text-align: center; margin: 8px 0; font-size: 20px; color: #111827;\">Change Search Options</h2>\n      <div class=\"header-controls\">\n        <button onclick=\"openModal(locationContent)\">Location</button>\n        <button onclick=\"openModal(providerContent)\">Provider</button>\n        <button onclick=\"openModal(dateRangeContent)\">Date Range</button>\n      </div>\n      <input type=\"text\" id=\"searchInput\" placeholder=\"Search...\">\n      <div class=\"table-responsive\">\n        <table>\n          <thead>\n            <tr>\n              <th onclick=\"sortTable('location_description')\">Location</th>\n              <th onclick=\"sortTable('provider_name')\">Provider</th>\n              <th onclick=\"sortTable('day')\">Day</th>\n              <th onclick=\"sortTable('date')\">Date</th>\n              <th onclick=\"sortTable('start')\">Time</th>\n              <th style=\"text-align: center;\">Schedule</th>\n            </tr>\n          </thead>\n          <tbody id=\"appointmentTableBody\">\n            <!-- Rows inserted by JavaScript -->\n          </tbody>\n        </table>\n      </div>\n      <div id=\"paginationControls\">\n        <button onclick=\"prevPage()\">Previous</button>\n        <span id=\"pageIndicator\" style=\"font-size: 14px; color: #374151;\">Page 1</span>\n        <button onclick=\"nextPage()\">Next</button>\n      </div>\n      <button onclick=\"toggleShowAll()\" id=\"showAllButton\">Show All</button>\n    </div>\n  </div>\n  <div id=\"modalOverlay\" class=\"modal-overlay\" onclick=\"closeModal()\">\n    <div class=\"modal\" onclick=\"event.stopPropagation()\">\n      <span class=\"close-button\" onclick=\"closeModal()\">x</span>\n      <div id=\"modalContent\">Modal Content</div>\n    </div>\n  </div>\n  <div id=\"loaderOverlay\" class=\"loader-overlay\">\n    <div class=\"loader\"></div>\n  </div>\n  <script>\n    // Embed modal content using JSON.stringify to safely escape characters.\n    const providerContent = ${JSON.stringify(providerContentNew)};\n    const dateRangeContent = ${JSON.stringify(dateRangeContentVar)};\n    const locationContent = ${JSON.stringify(locationContent)};\n    const appointments = ${appointmentsData};\n    \n    // Sort appointments by date and start time.\n    appointments.sort((a, b) => new Date(a.date + ' ' + a.start) - new Date(b.date + ' ' + b.start));\n    \n    const appointmentMap = {};\n    let currentPage = 1;\n    const rowsPerPage = 8;\n    let filteredAppointments = appointments.slice();\n    let showingAll = false;\n    let sortOrder = {};\n    let selectedLocation = '';\n    let selectedProvider = '';\n    \n    // Read URL parameters.\n    const urlParams = new URLSearchParams(window.location.search);\n    selectedLocation = urlParams.get('location') || '';\n    selectedProvider = urlParams.get('provider') || '';\n    \n    function applyFilters() {\n      filteredAppointments = appointments.slice();\n      // Filter by location (case-insensitive; handles both string and array values)\n      if (selectedLocation) {\n        const selectedArray = selectedLocation.split(',').map(item => item.trim().toLowerCase());\n        filteredAppointments = filteredAppointments.filter(app => {\n          let loc = \"\";\n          if (Array.isArray(app.location_description)) {\n            loc = app.location_description.join(', ');\n          } else {\n            loc = app.location_description || '';\n          }\n          return selectedArray.some(sel => loc.toLowerCase().includes(sel));\n        });\n      }\n      // Filter by provider (case-insensitive)\n      if (selectedProvider) {\n        const providerVal = selectedProvider.trim().toLowerCase();\n        filteredAppointments = filteredAppointments.filter(app =>\n          (app.provider_name || '').trim().toLowerCase() === providerVal\n        );\n      }\n      currentPage = 1;\n      renderTable(currentPage);\n    }\n    applyFilters();\n    \n    function openModal(content) {\n      document.getElementById('modalOverlay').style.display = 'flex';\n      document.getElementById('modalContent').innerHTML = content;\n      if (content === locationContent) {\n        setTimeout(setCheckedLocations, 0);\n      }\n      if (content === providerContent) {\n        setTimeout(setProviderDropdown, 0);\n      }\n    }\n    function closeModal() {\n      document.getElementById('modalOverlay').style.display = 'none';\n    }\n    \n    // Location functions\n    function handleLocationChange() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      const selected = [];\n      checkboxes.forEach(cb => { if (cb.checked) { selected.push(cb.value); } });\n      selectedLocation = selected.join(',');\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedLocation) { \n        urlParams.set('location', selectedLocation); \n      } else { \n        urlParams.delete('location'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setCheckedLocations() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const locParam = urlParams.get('location') || '';\n      if (locParam) {\n        const selectedArr = locParam.split(',').map(item => item.trim());\n        const checkboxes = document.querySelectorAll('.location-checkbox');\n        checkboxes.forEach(cb => {\n          if (selectedArr.includes(cb.value)) { cb.checked = true; }\n        });\n      }\n    }\n    \n    function resetLocations() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      checkboxes.forEach(cb => cb.checked = false);\n      selectedLocation = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('location');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function filterLocations() {\n      const filter = document.getElementById('locationSearch').value.toLowerCase();\n      const items = document.querySelectorAll('.location-item');\n      items.forEach(item => {\n        item.style.display = item.textContent.toLowerCase().includes(filter) ? '' : 'none';\n      });\n    }\n    \n    // Provider functions\n    function handleProviderChange() {\n      selectedProvider = document.getElementById('providerDropdown').value;\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedProvider) { \n        urlParams.set('provider', selectedProvider); \n      } else { \n        urlParams.delete('provider'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setProviderDropdown() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const providerParam = urlParams.get('provider') || '';\n      if (providerParam) {\n        const dropdown = document.getElementById('providerDropdown');\n        if (dropdown) { dropdown.value = providerParam; }\n      }\n    }\n    \n    function resetProvider() {\n      const dropdown = document.getElementById('providerDropdown');\n      if (dropdown) { dropdown.value = \"\"; }\n      selectedProvider = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('provider');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    // Date Range functions remain unchanged.\n    function confirmDateRange() {\n      const startDate = document.getElementById('startDate').value;\n      const endDate = document.getElementById('endDate').value;\n      if (startDate && endDate) {\n        closeModal();\n        showLoader();\n        const url = new URL(window.location.href);\n        url.searchParams.set(\"startDate\", startDate);\n        url.searchParams.set(\"endDate\", endDate);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert(\"Please select both start and end dates.\");\n      }\n    }\n    \n    function handleDateRangeSelection(rangeOption) {\n      closeModal();\n      showLoader();\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.set('dateRange', rangeOption);\n      setTimeout(() => { window.location.search = urlParams.toString(); }, 100);\n    }\n    \n    // ----------------------------\n    // Other functions\n    // ----------------------------\n    \n    function generateTableRows(data) {\n      return data.map((appointment, index) => {\n        const appointmentId = 'appointment' + index;\n        appointmentMap[appointmentId] = appointment;\n        let locationDisplay = Array.isArray(appointment.location_description)\n          ? appointment.location_description.join(', ')\n          : appointment.location_description || '';\n        if (locationDisplay.toLowerCase().includes('video')) {\n          locationDisplay = '📹 ' + locationDisplay;\n        }\n        return \\`\n          <tr>\n            <td data-label=\"Location\">\\${locationDisplay}</td>\n            <td data-label=\"Provider\">\\${appointment.provider_name || ''}</td>\n            <td data-label=\"Day\">\\${appointment.day || ''}</td>\n            <td data-label=\"Date\">\\${appointment.date || ''}</td>\n            <td data-label=\"Time\">\\${appointment.start || ''}</td>\n            <td data-label=\"Schedule\" style=\"text-align:center;\">\n              <button onclick=\"scheduleAppointment('\\${appointmentId}')\">Schedule</button>\n            </td>\n          </tr>\\`;\n      }).join('');\n    }\n    \n    function scheduleAppointment(appointmentId) {\n      const appointment = appointmentMap[appointmentId];\n      if (appointment) {\n        showLoader();\n        const appointmentData = encodeURIComponent(JSON.stringify(appointment));\n        const url = new URL(window.location.href);\n        url.searchParams.set('schedule', appointmentData);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert('Appointment data not found.');\n      }\n    }\n    \n    function renderTable(page) {\n      if (filteredAppointments.length === 0) {\n        document.getElementById('appointmentTableBody').innerHTML = '<tr><td colspan=\"6\" style=\"text-align:center; padding:16px; color:#6b7280;\">No appointments available.</td></tr>';\n        document.getElementById('paginationControls').style.display = 'none';\n        return;\n      }\n      const start = (page - 1) * rowsPerPage;\n      const end = page * rowsPerPage;\n      const dataToRender = showingAll ? filteredAppointments : filteredAppointments.slice(start, end);\n      document.getElementById('appointmentTableBody').innerHTML = generateTableRows(dataToRender);\n      document.getElementById('pageIndicator').textContent = showingAll ? 'Showing All Results' : \\`Page \\${page}\\`;\n      document.getElementById('paginationControls').style.display = (filteredAppointments.length > rowsPerPage && !showingAll) ? 'flex' : 'none';\n    }\n    \n    function sortTable(field) {\n      sortOrder[field] = sortOrder[field] === 'asc' ? 'desc' : 'asc';\n      filteredAppointments.sort((a, b) => {\n        if (field === 'date' || field === 'start') {\n          const dateA = new Date(a.date + ' ' + a.start);\n          const dateB = new Date(b.date + ' ' + b.start);\n          return sortOrder[field] === 'asc' ? dateA - dateB : dateB - dateA;\n        }\n        return sortOrder[field] === 'asc'\n          ? (a[field] || '').localeCompare(b[field] || '')\n          : (b[field] || '').localeCompare(a[field] || '');\n      });\n      currentPage = 1;\n      renderTable(currentPage);\n    }\n    \n    function searchAppointments() {\n      const query = document.getElementById('searchInput').value.toLowerCase();\n      filteredAppointments = appointments.filter(app => {\n        let locVal = Array.isArray(app.location_description)\n          ? app.location_description.join(', ')\n          : (app.location_description || '');\n        locVal = locVal.toLowerCase();\n        const providerVal = (app.provider_name || '').toLowerCase();\n        const dateVal = (app.date || '').toLowerCase();\n        const startVal = (app.start || '').toLowerCase();\n        return locVal.includes(query) || providerVal.includes(query) || dateVal.includes(query) || startVal.includes(query);\n      });\n      currentPage = 1;\n      renderTable(currentPage);\n    }\n    \n    function nextPage() {\n      if (currentPage < Math.ceil(filteredAppointments.length / rowsPerPage)) {\n        currentPage++;\n        renderTable(currentPage);\n      }\n    }\n    \n    function prevPage() {\n      if (currentPage > 1) {\n        currentPage--;\n        renderTable(currentPage);\n      }\n    }\n    \n    function toggleShowAll() {\n      showingAll = !showingAll;\n      document.getElementById('showAllButton').textContent = showingAll ? 'Collapse All' : 'Show All';\n      renderTable(currentPage);\n    }\n    \n    function showLoader() {\n      document.getElementById('loaderOverlay').style.display = 'flex';\n    }\n    \n    function hideLoader() {\n      document.getElementById('loaderOverlay').style.display = 'none';\n    }\n    \n    document.addEventListener('DOMContentLoaded', () => { hideLoader(); });\n    window.addEventListener('popstate', () => { hideLoader(); });\n    window.addEventListener('pageshow', (event) => { if (event.persisted) { hideLoader(); } });\n    document.getElementById('searchInput').addEventListener('input', searchAppointments);\n    \n    // Expose functions to the global scope.\n    window.openModal = openModal;\n    window.closeModal = closeModal;\n    window.handleLocationChange = handleLocationChange;\n    window.filterLocations = filterLocations;\n    window.resetLocations = resetLocations;\n    window.handleProviderChange = handleProviderChange;\n    window.setProviderDropdown = setProviderDropdown;\n    window.resetProvider = resetProvider;\n    window.handleDateRangeSelection = handleDateRangeSelection;\n    window.sortTable = sortTable;\n    window.nextPage = nextPage;\n    window.prevPage = prevPage;\n    window.toggleShowAll = toggleShowAll;\n    window.scheduleAppointment = scheduleAppointment;\n    window.confirmDateRange = confirmDateRange;\n    \n    // Initial table render.\n    renderTable(currentPage);\n  </script>\n</body>\n</html>\n`;\n\n// Return the HTML content from the Code node.\nreturn [{ htmlContent: html }];\n"
      },
      "id": "6c3e29ea-befc-43c1-9fae-375d30a937ae",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4160,
        1800
      ]
    },
    {
      "parameters": {
        "path": "db6a5527-6d27-469f-ad2b-c30333199ec3",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "b440cd2e-5b5f-4c35-a11f-3ed54aea1c74",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1680,
        1440
      ],
      "webhookId": "db6a5527-6d27-469f-ad2b-c30333199ec3",
      "disabled": true
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.htmlContent }}",
        "options": {}
      },
      "id": "71d6bbcf-d5fa-41a4-9d7c-9d5b61d1ed99",
      "name": "Respond to Webhook5",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        4340,
        1800
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * \nFROM bir.patient_rfm_catg \nWHERE patient_number = '697040' \nORDER BY id ASC\nLIMIT 1;",
        "options": {}
      },
      "id": "7953495c-619a-4f18-8504-af03db8c659c",
      "name": "Postgres4",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1840,
        1440
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "6UhfXvPEQwS0wZ1c",
          "name": "BIREporting"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "50b0a025-f41d-4739-82fd-0d997b470a74",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3060,
        1660
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Care Selection</title>\n\n  <!-- Early IE check: If IE, only show the warning message and stop. -->\n  <script>\n    // If 'document.documentMode' is defined, we're in IE (including IE11).\n    if (document.documentMode) {\n      var style =\n        '<style>' +\n          'body {' +\n            'margin: 0; padding: 0; background-color: #f3f4f6;' +\n            'display: flex; align-items: center; justify-content: center;' +\n            'min-height: 100vh; font-family: Arial, sans-serif;' +\n          '}' +\n          '.ie-message {' +\n            'max-width: 600px; margin: auto; font-size: 1.2rem;' +\n            'color: #333; padding: 20px; text-align: center;' +\n            'background: #fff; border-radius: 8px;' +\n            'box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);' +\n          '}' +\n          '.ie-message p { margin: 1em 0; }' +\n          '.ie-message button {' +\n            'padding: 0.6em 1.2em;' +\n            'font-size: 1rem;' +\n            'cursor: pointer;' +\n            'border: none;' +\n            'border-radius: 4px;' +\n            'background-color: #0066cc;' +\n            'color: #fff;' +\n            'transition: background-color 0.2s;' +\n          '}' +\n          '.ie-message button:hover {' +\n            'background-color: #005bb5;' +\n          '}' +\n        '</style>';\n\n      var messageHTML =\n        '<div class=\"ie-message\">' +\n          '<p><strong>Quick Scheduler does not work with Internet Explorer.</strong></p>' +\n          '<p>Please change your default browser to Chrome or Edge. Thank you!</p>' +\n          '<p>' +\n            '<button onclick=\"window.open(\\'https://file.cybertech.app/EPIC/Documents/Default%20Browsing.pdf\\', \\'_blank\\')\">' +\n              'Download Instructions' +\n            '</button>' +\n          '</p>' +\n        '</div>';\n\n      document.write(style + messageHTML);\n      // Stop further loading; IE won't see the rest of the page\n      document.close();\n    }\n  </script>\n\n  <!-- If not IE, the rest of the page (including styles) will load normally. -->\n  <link href=\"https://cdn.jsdelivr.net/npm/shadcn-ui@latest/dist/shadcn-ui.min.css\" rel=\"stylesheet\">\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n      background-color: #f3f4f6;\n      margin: 0;\n    }\n    .container {\n      max-width: 400px;\n      width: 100%;\n      padding: 20px;\n      background-color: white;\n      border-radius: 15px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n      text-align: center;\n      position: relative;\n    }\n    .logo {\n      width: 100%;\n      border-radius: 10px;\n      margin-bottom: 20px;\n    }\n    .title {\n      font-size: 1.5rem;\n      font-weight: bold;\n      color: #333;\n      margin-bottom: 10px;\n    }\n    .patient-info {\n      font-size: 1rem;\n      color: #555;\n      margin-bottom: 20px;\n    }\n    .button-group {\n      display: flex;\n      flex-direction: column;\n      gap: 15px;\n    }\n    .care-row {\n      display: flex;\n      gap: 10px;\n    }\n    .care-button,\n    .next-button {\n      padding: 15px;\n      font-size: 18px;\n      font-weight: bold;\n      color: white;\n      border: none;\n      border-radius: 30px;\n      cursor: pointer;\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n    .care-button {\n      flex: 3;\n    }\n    .next-button {\n      flex: 1;\n    }\n    .care-button:hover,\n    .next-button:hover {\n      transform: scale(1.05);\n      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n    }\n    /* Office Visit styling */\n    .pcare {\n      background: linear-gradient(135deg, #4a90e2, #357abd);\n    }\n    /* PA-Lab styling with a muted color */\n    .palab {\n      background: linear-gradient(135deg, #95a5a6, #7f8c8d);\n    }\n    /* Other button colors */\n    .dcare {\n      background: linear-gradient(135deg, #34a853, #2a7e42);\n    }\n    .icare {\n      background: linear-gradient(135deg, #9b51e0, #7a3fb5);\n    }\n    .scare {\n      background: linear-gradient(135deg, #00bfa5, #009f89);\n    }\n    .care-button:disabled,\n    .next-button:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n    .overlay {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: rgba(255, 255, 255, 0.8);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 15px;\n      opacity: 0;\n      pointer-events: none;\n      transition: opacity 0.3s ease;\n    }\n    .overlay.show {\n      opacity: 1;\n      pointer-events: all;\n    }\n    .loader {\n      border: 6px solid rgba(0, 0, 0, 0.1);\n      border-top: 6px solid #3498db;\n      border-radius: 50%;\n      width: 50px;\n      height: 50px;\n      animation: spin 1s linear infinite;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n  </style>\n</head>\n<body>\n\n  <!-- Main container (hidden if IE, because the script above stops the rest of the page) -->\n  <div class=\"container\">\n    <img\n      src=\"https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png\"\n      alt=\"Logo\"\n      class=\"logo\"\n    />\n    <h1 class=\"title\">Select Care Type</h1>\n    <div class=\"patient-info\">\n      <p id=\"patientName\"></p>\n      <p id=\"patientId\"></p>\n    </div>\n    <div class=\"button-group\">\n      <div class=\"care-row\">\n        <button class=\"care-button pcare\" onclick=\"redirectToCareType('PCARE')\">Office Visit</button>\n        <button class=\"next-button pcare\" onclick=\"redirectToCareType('PCARE-LINK', true)\">Link</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button palab\" onclick=\"redirectToCareType('PA-LAB')\">PA-Lab</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button dcare\" onclick=\"redirectToCareType('DCARE')\">1-2 F/U | Ordered Procedures</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button icare\" onclick=\"redirectToCareType('ICARE')\">Behavioral Health/Physical Therapy</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button scare\" onclick=\"redirectToCareType('SCARE')\">Specialty Visit</button>\n      </div>\n    </div>\n    <div class=\"overlay\" id=\"overlay\">\n      <div class=\"loader\"></div>\n    </div>\n  </div>\n\n  <script>\n    // Fallback query-string parser for IE (no URLSearchParams).\n    function getUrlParams() {\n      var search = window.location.search || \"\";\n      if (search.indexOf(\"?\") === 0) {\n        search = search.substring(1);\n      }\n      var parts = search.split(\"&\");\n      var params = {};\n      for (var i = 0; i < parts.length; i++) {\n        var pair = parts[i].split(\"=\");\n        var key = decodeURIComponent(pair[0] || \"\");\n        var value = decodeURIComponent(pair[1] || \"\");\n        if (key) {\n          params[key] = value;\n        }\n      }\n      return params;\n    }\n\n    var existingParams = getUrlParams();\n\n    var fullName = existingParams.fullName || \"Unknown Patient\";\n    var patientId = existingParams.patientId || \"Unknown MRN\";\n\n    document.getElementById(\"patientName\").textContent = \"Patient: \" + fullName;\n    document.getElementById(\"patientId\").textContent = \"MRN: \" + patientId;\n\n    function redirectToCareType(careType, isNext) {\n      if (typeof isNext === \"undefined\") {\n        isNext = false;\n      }\n      var overlay = document.getElementById(\"overlay\");\n      overlay.classList.add(\"show\");\n\n      var buttons = document.querySelectorAll(\".care-button, .next-button\");\n      for (var i = 0; i < buttons.length; i++) {\n        buttons[i].disabled = true;\n      }\n\n      // Rebuild the URL with the new parameters\n      var baseUrl = window.location.href.split(\"?\")[0];\n      var newParams = [];\n\n      // Include existing params, excluding caretype/available\n      for (var key in existingParams) {\n        if (existingParams.hasOwnProperty(key) && key !== \"caretype\" && key !== \"available\") {\n          newParams.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(existingParams[key]));\n        }\n      }\n\n      // Add caretype\n      newParams.push(\"caretype=\" + encodeURIComponent(careType));\n\n      // If \"isNext\" is true, add \"available=next\"\n      if (isNext) {\n        newParams.push(\"available=next\");\n      }\n\n      var redirectUrl = baseUrl + \"?\" + newParams.join(\"&\");\n      console.log(\"Redirecting to: \" + redirectUrl);\n\n      setTimeout(function () {\n        window.location.href = redirectUrl;\n      }, 500);\n    }\n\n    function hideLoaderAndEnableButtons() {\n      var overlay = document.getElementById(\"overlay\");\n      overlay.classList.remove(\"show\");\n      var buttons = document.querySelectorAll(\".care-button, .next-button\");\n      for (var i = 0; i < buttons.length; i++) {\n        buttons[i].disabled = false;\n      }\n    }\n\n    // Hide loader and re-enable buttons when navigating back\n    window.addEventListener(\"popstate\", hideLoaderAndEnableButtons, false);\n\n    // Handle pageshow event to ensure loader/buttons reset if the page is cached\n    window.addEventListener(\"pageshow\", function (event) {\n      if (event.persisted) {\n        hideLoaderAndEnableButtons();\n      }\n    }, false);\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "id": "b3e69ac9-49b4-4ac7-9d8a-840f96a174ea",
      "name": "Respond to Webhook6",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        80,
        1900
      ]
    },
    {
      "parameters": {},
      "id": "3f4993ba-4628-46c1-ac99-03dea3067731",
      "name": "No Operation, do nothing1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3620,
        1780
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\n\nconst addDays = (date, days) => {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  result.setHours(0, 0, 0, 0); // Reset time to the start of the day\n  return result;\n};\n\nconst formatDate = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\nconst updatedData = input.map(item => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0); // Reset to the start of the current day\n  let startDate, endDate;\n\n  // Check if startDate and endDate are provided in the query parameters\n  if (item.json.query.startDate && item.json.query.endDate) {\n    startDate = addDays(new Date(item.json.query.startDate), 1); // Add one day to the provided startDate\n    endDate = addDays(new Date(item.json.query.endDate), 1); // Add one day to the provided endDate\n  } else {\n    // Fallback to dateRange logic\n    const dateRange = item.json.query.dateRange || '1-3days'; // Default to '1-3days' if not specified\n\n    switch (dateRange) {\n      case '1-3days':\n        startDate = addDays(today, 1); // Start from today + 1\n        endDate = addDays(today, 3);   // End on today + 3\n        break;\n      case '1week':\n        startDate = addDays(today, 7); // Start from today + 7\n        endDate = addDays(today, 13);  // End on today + 13\n        break;\n      case '2weeks':\n        startDate = addDays(today, 14); // Start from today + 14\n        endDate = addDays(today, 20);   // End on today + 20\n        break;\n      case '1month':\n        startDate = addDays(today, 30); // Start from today + 30\n        endDate = addDays(today, 36);   // End on today + 36\n        break;\n      case '2months':\n        startDate = addDays(today, 60); // Start from today + 60\n        endDate = addDays(today, 72);   // End on today + 72\n        break;\n      default:\n        startDate = addDays(today, 1); // Default to 1-3 days\n        endDate = addDays(today, 3);\n    }\n  }\n\n  return {\n    ...item.json,\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate)\n  };\n});\n\nreturn updatedData;\n"
      },
      "id": "3a016b3c-dd89-45ce-ba77-ac45b3b6b3e8",
      "name": "dateRange",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        280,
        1680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "002536a4-da85-4eb0-be88-be97097656d2",
              "leftValue": "={{ $json.query.schedule }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0414118e-1623-443c-a1c5-bd097fb51771",
      "name": "If9",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @RES VARCHAR(50) = '%%';\nDECLARE @LOC VARCHAR(250) = '%%';\nDECLARE @APPT_TYPE VARCHAR(250) = '%%';\nDECLARE @STARTDATE DATE = '{{ $('dateRange').item.json.startDate }}';\nDECLARE @ENDDATE DATE = '{{ $('dateRange').item.json.endDate }}'; \n\n \n\nWITH sched_appt_avail AS (\n    SELECT  \n        s.[Available_Date],\n        s.[Start_Time],\n        s.[End_Time],\n        s.[Sched_Loc_Abbr],\n        s.[Sched_Dept_Abbr],\n        s.[Resource_Desc],\n        s.[Resource_Abbr],\n        s.[Activity_Type_Abbr],\n        s.Resource_ID,\n        s.Scheduling_Location_ID,\n        CASE WHEN s.Booking_Factor = 1 THEN 'BookableSlot' END AS BookableAppt\n    FROM [PM].[vwApptSchedAvail] s\n    WHERE s.Available_Date BETWEEN @STARTDATE AND @ENDDATE\n      AND s.Resource_Abbr NOT LIKE 'PALAB'\n      AND s.Activity_Type_Abbr NOT LIKE 'BREAK'\n      AND s.Activity_Type_Abbr NOT LIKE 'lunch'\n      AND s.Activity_Type_Abbr NOT LIKE 'Blocked'\n     -- AND s.Resource_Desc = @RES\n),\nscheduled_appt_slots AS (\n    SELECT \n        p.[Patient_ID],\n        p.[Patient_Number],\n        p.[Appt_ID],\n        p.[Appt_DateTime],\n        p.[Appt_Resource_ID],\n        p.[Appt_Status],\n        CASE WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' END AS BookedAppt,\n\t\tp.Appt_Resource_Descr\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN @STARTDATE AND @ENDDATE\n      --AND p.Appt_Resource_Descr= @RES\n),\nscheduled_appt_slots2 AS (\n    SELECT \n        p.[Patient_ID],\n        p.[Patient_Number],\n        p.[Appt_ID],\n        p.[Appt_DateTime],\n        CAST(p.Appt_DateTime AS DATE) AS OnlyDate,\n        p.[Appt_Resource_ID],\n        p.[Appt_Status],\n\t\tCASE WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' END AS BookedAppt,\n        COUNT(CASE WHEN p.Appt_Status IN ('A', 'S','C') THEN 1 END) \n            OVER (PARTITION BY p.Patient_ID, CAST(p.Appt_DateTime AS DATE)) AS Has_A_or_S_C\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN @STARTDATE AND @ENDDATE\n    AND p.Appt_Resource_Descr LIKE @RES  and p.Appt_Status not in ('X','N')\n),\nscheduled_appt_slots3 as(\nSELECT \n    i.*, \n    CASE \n        WHEN i.Has_A_or_S_C > 0 THEN 'BookedAppt' \n        ELSE 'Bookable' \n    END AS BookableStatus\nFROM scheduled_appt_slots2 i\n),\nres_pract_info as(\nselect \nr.Resource_ID as res_resource_id,r.Abbreviation as res_abbreviation,r.Description as res_description,r.Appointment_Group_ID as res_appointment_group_id,ag.Abbreviation as appt_gp_abbreviation,\nag.Description as appt_gp_description,r.Practitioner_ID as res_practitioner_id,\np.Practitioner_ID as prac_practitioner_id,\np.Is_Ref_Source,p.Is_Physician,p.Abbreviation as prac_abbreviation,\nUPPER(p.First_Name) First_Name,upper(p.Last_Name) Last_Name,p.Sex,p.Street1,p.City,p.State,p.Zip_Code,p.Phone,p.Phone_Ext,\np.Fax_Number,p.UPIN,p.Specialty_ID,p.Is_Non_Person,p.Specialty_ID spec_Specialty_Id,s.Abbreviation spec_abbreviation,s.Description spec_description,\np.Is_Mid_Level,p.Is_Mid_Level_PA,\np.Inactivation_Date,p.Is_Locum_Tenan\nfrom [PM].[Resources] r \nleft join [PM].[Practitioners] p on r.Practitioner_ID=p.Practitioner_ID\nleft join [PM].[Specialties] s on p.Specialty_ID=s.Specialty_ID\nLEFT JOIN [PM].[Appointment_Groups] ag on r.Appointment_Group_ID=ag.Appointment_Group_ID\nwhere r.Description not like 'zz%' and r.Description not like 'CM%'\nand r.Description not like 'super%' and r.Description not like 'blue%'\nand r.Description not like 'bella%' and r.Description not like 'surg%'\nand r.Description not like 'uop' and r.Description not like 'Tin%'\nand r.Description not like 'dunc%' and p.Inactivation_Date is null\nand r.Description not like 'prior%'\nand r.Description not like 'chee%' and r.Description not like 'PA,%'\nand r.Description not like 'PharmD - Sabbagh, Hussein' and r.Description  not like'%event%'\n)\n \nSELECT \n    a.Available_Date,a.Start_Time,a.End_Time,a.Resource_Abbr,a.Resource_Desc,a.Resource_ID,a.Activity_Type_Abbr,a.Sched_Dept_Abbr,\n\ta.Sched_Loc_Abbr,a.Scheduling_Location_ID,s.Abbreviation,s.Description,s.Location_ID,\n\ta.BookableAppt,\n\tr.*\nFROM \n    sched_appt_avail a\nLEFT JOIN \n    scheduled_appt_slots3 b \n    ON a.Available_Date = CAST(b.Appt_DateTime AS DATE)\n    AND a.Start_Time = DATEPART(HOUR, b.Appt_DateTime) * 100 + DATEPART(MINUTE, b.Appt_DateTime) \n    AND a.Resource_ID = b.Appt_Resource_ID\nLEFT JOIN res_pract_info r ON r.res_resource_id=a.Resource_ID\nleft join [Ntier_EPIC].[PM].[Scheduling_Locations] s on s.Scheduling_Location_ID=a.Scheduling_Location_ID\nWHERE \n    b.Patient_ID IS NULL  -- Only show slots with no booked appointment\n    AND a.BookableAppt = 'BookableSlot'\n\tand r.res_appointment_group_id  in ('42','79')\n\tand (s.Description not like 'z%' and ( s.Description like 'EPIC%' or s.Description like 'DIAG%')and s.Description not in ('DIAG Eastpointe Kelly','DIAG Westland','EPIC Billing Office','EPIC Events','EPIC HS ADMIN','EPIC Events','EPIC Billing Office','EPIC Westland Palmer','EPIC Wyandotte Biddle','EPIC Care Management','EPIC Eastpointe Kelly','EPIC Southfield Greenfield'))\n\tand a.Resource_Desc like @RES\nORDER BY a.Available_Date, a.Start_Time;"
      },
      "id": "08197856-6b1f-41ea-8b9d-89874d3d0104",
      "name": "PM P-CARE1",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        2580,
        1760
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function to convert the current data to the new format\nfunction transformData(currentData) {\n  // If there's no data, return an empty array\n  if (!currentData || !currentData.data || !Array.isArray(currentData.data)) {\n    return []; // No data to process\n  }\n\n  return currentData.data.map((item, index) => {\n    // Parse date as UTC and format it\n    const dateObj = new Date(item.Available_Date || ''); // Ensure we handle undefined dates\n    const year = dateObj.getUTCFullYear();\n    const month = String(dateObj.getUTCMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n    const day = String(dateObj.getUTCDate()).padStart(2, '0');\n    const dateStr = `${month}-${day}-${year}`;\n\n    // Get day of the week\n    const dayOfWeekNum = dateObj.getUTCDay();\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const dayOfWeekStr = daysOfWeek[dayOfWeekNum];\n\n    // Format time\n    const startTime = String(item.Start_Time || '').padStart(4, '0');\n    const endTime = String(item.End_Time || '').padStart(4, '0');\n\n    const startHours = startTime.slice(0, 2);\n    const startMinutes = startTime.slice(2, 4);\n    const endHours = endTime.slice(0, 2);\n    const endMinutes = endTime.slice(2, 4);\n\n    const startFixer = `${startHours}:${startMinutes}`;\n    const start = `${((startHours % 12) || 12)}:${startMinutes} ${startHours >= 12 ? 'PM' : 'AM'}`;\n    const end = `${endHours}:${endMinutes}`;\n    const orderkeytime = `${year}-${month}-${day} ${startHours}:${startMinutes}:00`;\n\n    return {\n      index: index + 1,\n      slots_available: 0, // Assuming 0 as no mapping is provided\n      start_fixer: startFixer,\n      start: start,\n      end: end,\n      location: item.Sched_Loc_Abbr || '',\n      date: dateStr,\n      day: dayOfWeekStr, // Added day of the week\n      location_description: item.Description || '', // Updated to use Description\n      provider_name: `${item.Last_Name || ''}, ${item.First_Name || ''}`.trim(),\n      duration: String((item.End_Time || 0) - (item.Start_Time || 0)),\n      provider: item.Resource_Abbr || '',\n      res_appointment_group_id: item.res_appointment_group_id || '--', // Use res_appointment_group_id\n      resource_abbr: item.Resource_Abbr || '',\n      orderkeytime: orderkeytime,\n    };\n  });\n}\n\n// Check if items exist\nif (!items || !items[0] || !items[0].json) {\n  // If no input, return an empty array\n  return [{ json: { data: [] } }];\n}\n\n// Get the input data\nconst inputData = items[0].json;\n\n// Transform the data\nconst transformedData = transformData(inputData);\n\n// Return the transformed data\nreturn [{ json: { data: transformedData } }];\n"
      },
      "id": "c27f06a9-b9e9-4171-820c-fdf82453898f",
      "name": "Code31",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3260,
        1780
      ],
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Updated to always convert location to array to prevent breaking"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @RES VARCHAR(50) = '{{ $json.res_description }}';\nDECLARE @LOC VARCHAR(250) = '';\nDECLARE @APPT_TYPE VARCHAR(250) = '';\nDECLARE @STARTDATE DATE = '{{ $('dateRange').item.json.startDate }}';\nDECLARE @ENDDATE DATE = '{{ $('dateRange').item.json.endDate }}'; \n\n \nWITH sched_appt_avail AS (\n    SELECT  \n        s.[Available_Date],\n        s.[Start_Time],\n        s.[End_Time],\n        s.[Sched_Loc_Abbr],\n        s.[Sched_Dept_Abbr],\n        s.[Resource_Desc],\n        s.[Resource_Abbr],\n        s.[Activity_Type_Abbr],\n        s.Resource_ID,\n        s.Scheduling_Location_ID,\n        CASE WHEN s.Booking_Factor = 1 THEN 'BookableSlot' END AS BookableAppt\n    FROM [PM].[vwApptSchedAvail] s\n    WHERE s.Available_Date BETWEEN @STARTDATE AND @ENDDATE\n      AND s.Resource_Abbr NOT LIKE 'PALAB'\n      AND s.Activity_Type_Abbr NOT LIKE 'BREAK'\n      AND s.Activity_Type_Abbr NOT LIKE 'lunch'\n      AND s.Activity_Type_Abbr NOT LIKE 'Blocked'\n     AND s.Resource_Desc = @RES\n),\nscheduled_appt_slots AS (\n    SELECT \n        p.[Patient_ID],\n        p.[Patient_Number],\n        p.[Appt_ID],\n        p.[Appt_DateTime],\n        p.[Appt_Resource_ID],\n        p.[Appt_Status],\n        CASE WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' END AS BookedAppt\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN @STARTDATE AND @ENDDATE\n     AND p.Appt_Resource_Descr= @RES\n),\nres_pract_info as(\nselect \nr.Resource_ID as res_resource_id,r.Abbreviation as res_abbreviation,r.Description as res_description,r.Appointment_Group_ID as res_appointment_group_id,ag.Abbreviation as appt_gp_abbreviation,\nag.Description as appt_gp_description,r.Practitioner_ID as res_practitioner_id,\np.Practitioner_ID as prac_practitioner_id,\np.Is_Ref_Source,p.Is_Physician,p.Abbreviation as prac_abbreviation,\nUPPER(p.First_Name) First_Name,upper(p.Last_Name) Last_Name,p.Sex,p.Street1,p.City,p.State,p.Zip_Code,p.Phone,p.Phone_Ext,\np.Fax_Number,p.UPIN,p.Specialty_ID,p.Is_Non_Person,p.Specialty_ID spec_Specialty_Id,s.Abbreviation spec_abbreviation,s.Description spec_description,\np.Is_Mid_Level,p.Is_Mid_Level_PA,\np.Inactivation_Date,p.Is_Locum_Tenan\nfrom [PM].[Resources] r \nleft join [PM].[Practitioners] p on r.Practitioner_ID=p.Practitioner_ID\nleft join [PM].[Specialties] s on p.Specialty_ID=s.Specialty_ID\nLEFT JOIN [PM].[Appointment_Groups] ag on r.Appointment_Group_ID=ag.Appointment_Group_ID\nwhere r.Description not like 'zz%' and r.Description not like 'CM%'\nand r.Description not like 'super%' and r.Description not like 'blue%'\nand r.Description not like 'bella%' and r.Description not like 'surg%'\nand r.Description not like 'uop' and r.Description not like 'Tin%'\nand r.Description not like 'dunc%' and p.Inactivation_Date is null\nand r.Description not like 'prior%'\nand r.Description not like 'chee%' and r.Description not like 'PA,%'\nand r.Description not like 'PharmD - Sabbagh, Hussein' and r.Description  not like'%event%'\n)\nSELECT \n    a.Available_Date,a.Start_Time,a.End_Time,a.Resource_Abbr,a.Resource_Desc,a.Resource_ID,a.Activity_Type_Abbr,a.Sched_Dept_Abbr,\n\ta.Sched_Loc_Abbr,a.Scheduling_Location_ID,s.Abbreviation,s.Description,s.Location_ID,\n\ta.BookableAppt,\n\tr.*\nFROM \n    sched_appt_avail a\nLEFT JOIN \n    scheduled_appt_slots b \n    ON a.Available_Date = CAST(b.Appt_DateTime AS DATE)\n    AND a.Start_Time = DATEPART(HOUR, b.Appt_DateTime) * 100 + DATEPART(MINUTE, b.Appt_DateTime) \n    AND a.Resource_ID = b.Appt_Resource_ID\nLEFT JOIN res_pract_info r ON r.res_resource_id=a.Resource_ID\nleft join [Ntier_EPIC].[PM].[Scheduling_Locations] s on s.Scheduling_Location_ID=a.Scheduling_Location_ID\n \nWHERE \n    b.Patient_ID IS NULL  -- Only show slots with no booked appointment\n    AND a.BookableAppt = 'BookableSlot'\n\tand r.res_appointment_group_id  in ('42','79')\n\tand (s.Description not like 'z%' and ( s.Description like 'EPIC%' or s.Description like 'DIAG%')and s.Description not in ('DIAG Eastpointe Kelly','DIAG Westland','EPIC Billing Office','EPIC Events','EPIC HS ADMIN','EPIC Events','EPIC Billing Office','EPIC Westland Palmer','EPIC Wyandotte Biddle','EPIC Care Management','EPIC Eastpointe Kelly','EPIC Southfield Greenfield'))\nORDER BY a.Available_Date, a.Start_Time;"
      },
      "id": "c4a2a617-d7ae-42be-a7f6-96590261c20f",
      "name": "PM P-CARE2",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        2680,
        1300
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "e3c0e747-32ce-45d3-98a0-10b78f6fde6b",
              "leftValue": "={{ $json.query.caretype }}",
              "rightValue": "LINK",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "62dc37c9-ee97-4220-ab32-e50f0d6ead43",
      "name": "If3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        500,
        1680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "575543b3-8c31-47bf-8dd5-58fcef206b0a",
              "leftValue": "={{ $json.Available_Date }}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "5b0a1898-3631-42d0-b695-db19e1a8fe9f",
      "name": "If5",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        2920,
        1760
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.query.caretype }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "empty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7482d1fe-6761-4e79-a28b-47567d840089",
                    "leftValue": "={{ $json.query.caretype }}",
                    "rightValue": "PCARE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "45218cc2-db2b-4079-8e72-f6e6a407ddf2",
                    "leftValue": "={{ $json.query.caretype }}",
                    "rightValue": "DCARE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "ef8b5139-14da-4711-9703-b9d3faa01e9d",
                    "leftValue": "={{ $json.query.caretype }}",
                    "rightValue": "ICARE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "b8a88142-7a1c-430a-a11a-128b588d5327",
                    "leftValue": "={{ $json.query.caretype }}",
                    "rightValue": "SCARE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d1a55733-5990-42d0-a357-75cdec4af4d6",
                    "leftValue": "={{ $json.query.caretype }}",
                    "rightValue": "PA-LAB",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7076db56-b8f3-4576-b69c-3604c91ba977",
                    "leftValue": "={{ $json.query.caretype }}",
                    "rightValue": "RESCHEDULE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "017dd964-e30e-4e27-99e8-933e61f40f18",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        760,
        1680
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\n\nconst addDays = (date, days) => {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n};\n\nconst formatDate = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\nconst updatedData = input.map(item => {\n  const today = new Date();\n  let startDate, endDate;\n\n  const dateRange = item.json.query.dateRange || '1-3days'; // Default to '1-3days' if not specified\n\n  switch (dateRange) {\n    case '1-3days':\n      startDate = addDays(today, 1);\n      endDate = addDays(today, 3);\n      break;\n    case '1week':\n      startDate = addDays(today, 7);\n      endDate = addDays(today, 13);\n      break;\n    case '2weeks':\n      startDate = addDays(today, 14);\n      endDate = addDays(today, 20);\n      break;\n    case '1month':\n      startDate = addDays(today, 30);\n      endDate = addDays(today, 36);\n      break;\n    case '2months':\n      startDate = addDays(today, 60);\n      endDate = addDays(today, 72);\n      break;\n    default:\n      startDate = today;\n      endDate = addDays(today, 3);\n  }\n\n  return {\n    ...item.json,\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate)\n  };\n});\n\nreturn updatedData;\n"
      },
      "id": "3ce38b50-13d2-400c-8081-6fffd82be31c",
      "name": "dateRange1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        280,
        1520
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\n\nconst addDays = (date, days) => {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  result.setHours(0, 0, 0, 0); // Reset time to the start of the day\n  return result;\n};\n\nconst formatDate = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\nconst updatedData = input.map(item => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0); // Reset to the start of the current day\n  let startDate, endDate;\n\n  // Check if startDate and endDate are provided in the query parameters\n  if (item.json.query.startDate && item.json.query.endDate) {\n    startDate = addDays(new Date(item.json.query.startDate), 1); // Add one day to the provided startDate\n    endDate = addDays(new Date(item.json.query.endDate), 1); // Add one day to the provided endDate\n  } else {\n    const dateRange = item.json.query.dateRange || '0-2days'; // Default to '0-2days' if not specified\n\n    switch (dateRange) {\n      case '0-2days':\n        startDate = today;\n        endDate = addDays(today, 2); // Inclusive of today and 2 extra days\n        break;\n      case '1week':\n        startDate = addDays(today, 1); // Start from tomorrow\n        endDate = addDays(today, 7);\n        break;\n      case '2weeks':\n        startDate = addDays(today, 1);\n        endDate = addDays(today, 14);\n        break;\n      case '1month':\n        startDate = addDays(today, 1);\n        endDate = addDays(today, 30);\n        break;\n      case '2months':\n        startDate = addDays(today, 1);\n        endDate = addDays(today, 60);\n        break;\n      default:\n        startDate = today;\n        endDate = addDays(today, 2); // Default to 0-2 days if unspecified\n    }\n  }\n\n  return {\n    ...item.json,\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate)\n  };\n});\n\nreturn updatedData;\n"
      },
      "id": "014a93e3-1ec1-4f06-b751-ab0050f48eb6",
      "name": "dateRange2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        280,
        1360
      ]
    },
    {
      "parameters": {},
      "id": "378e6a7a-b077-40bb-97db-ace8e4d37686",
      "name": "No Operation, do nothing6",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2380,
        1180
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Care Selection</title>\n  <link href=\"https://cdn.jsdelivr.net/npm/shadcn-ui@latest/dist/shadcn-ui.min.css\" rel=\"stylesheet\">\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n      background-color: #f3f4f6;\n      margin: 0;\n    }\n    .container {\n      max-width: 400px;\n      width: 100%;\n      padding: 20px;\n      background-color: white;\n      border-radius: 15px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n      text-align: center;\n      position: relative;\n    }\n    .logo {\n      width: 100%;\n      border-radius: 10px;\n      margin-bottom: 20px;\n    }\n    .title {\n      font-size: 1.5rem;\n      font-weight: bold;\n      color: #333;\n      margin-bottom: 10px;\n    }\n    .patient-info {\n      font-size: 1rem;\n      color: #555;\n      margin-bottom: 20px;\n    }\n    .button-group {\n      display: flex;\n      flex-direction: column;\n      gap: 15px;\n    }\n    .care-row {\n      display: flex;\n      gap: 10px;\n    }\n    .care-button, .next-button {\n      padding: 15px;\n      font-size: 18px;\n      font-weight: bold;\n      color: white;\n      border: none;\n      border-radius: 30px;\n      cursor: pointer;\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n    .care-button {\n      flex: 3;\n    }\n    .next-button {\n      flex: 1;\n    }\n    .care-button:hover, .next-button:hover {\n      transform: scale(1.05);\n      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n    }\n    .pcare {\n      background: linear-gradient(135deg, #4a90e2, #357abd);\n    }\n    .dcare {\n      background: linear-gradient(135deg, #34a853, #2a7e42);\n    }\n    .icare {\n      background: linear-gradient(135deg, #9b51e0, #7a3fb5);\n    }\n    .scare {\n      background: linear-gradient(135deg, #00bfa5, #009f89);\n    }\n    .care-button:disabled, .next-button:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n    .overlay {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: rgba(255, 255, 255, 0.8);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 15px;\n      opacity: 0;\n      pointer-events: none;\n      transition: opacity 0.3s ease;\n    }\n    .overlay.show {\n      opacity: 1;\n      pointer-events: all;\n    }\n    .loader {\n      border: 6px solid rgba(0, 0, 0, 0.1);\n      border-top: 6px solid #3498db;\n      border-radius: 50%;\n      width: 50px;\n      height: 50px;\n      animation: spin 1s linear infinite;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n  </style>\n</head>\n<body>\n\n  <div class=\"container\">\n    <img src=\"https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png\" alt=\"Logo\" class=\"logo\">\n    <h1 class=\"title\">Select Care Type</h1>\n    <div class=\"patient-info\">\n      <p id=\"patientName\"></p>\n      <p id=\"patientId\"></p>\n    </div>\n    <div class=\"button-group\">\n      <div class=\"care-row\">\n        <button class=\"care-button pcare\" onclick=\"redirectToCareType('PCARE')\">P-CARE</button>\n        <button class=\"next-button pcare\" onclick=\"redirectToCareType('PCARE-LINK', true)\">Link</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button dcare\" onclick=\"redirectToCareType('DCARE')\">D-CARE</button>\n        <button class=\"next-button dcare\" onclick=\"redirectToCareType('DCARE-LINK', true)\">Link</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button icare\" onclick=\"redirectToCareType('ICARE')\">I-CARE</button>\n        <button class=\"next-button icare\" onclick=\"redirectToCareType('ICARE-LINK', true)\">Link</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button scare\" onclick=\"redirectToCareType('SCARE')\">S-CARE</button>\n        <button class=\"next-button scare\" onclick=\"redirectToCareType('SCARE-LINK', true)\">Link</button>\n      </div>\n    </div>\n    <div class=\"overlay\" id=\"overlay\">\n      <div class=\"loader\"></div>\n    </div>\n  </div>\n\n  <script>\n    function getUrlParams() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const params = {};\n      urlParams.forEach((value, key) => {\n        params[key] = value;\n      });\n      return params;\n    }\n\n    const existingParams = getUrlParams();\n\n    const fullName = existingParams['fullName'] || 'Unknown Patient';\n    const patientId = existingParams['patientId'] || 'Unknown MRN';\n\n    document.getElementById('patientName').textContent = `Patient: ${fullName}`;\n    document.getElementById('patientId').textContent = `MRN: ${patientId}`;\n\n    function redirectToCareType(careType, isNext = false) {\n      const overlay = document.getElementById('overlay');\n      overlay.classList.add('show');\n\n      const buttons = document.querySelectorAll('.care-button, .next-button');\n      buttons.forEach(button => button.disabled = true);\n\n      const baseUrl = window.location.href.split('?')[0];\n      const urlParams = new URLSearchParams(existingParams);\n\n      urlParams.set('caretype', careType);\n      if (isNext) {\n        urlParams.set('available', 'next');\n      }\n\n      const redirectUrl = `${baseUrl}?${urlParams.toString()}`;\n      console.log(\"Redirecting to:\", redirectUrl);\n\n      setTimeout(() => {\n        window.location.href = redirectUrl;\n      }, 500);\n    }\n  </script>\n\n</body>\n</html>\n",
        "options": {}
      },
      "id": "f892a6fe-fa99-4e78-a509-753cb3b04552",
      "name": "Respond to Webhook7",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1320,
        1160
      ]
    },
    {
      "parameters": {
        "maxItems": 10
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        4100,
        1580
      ],
      "id": "8020a906-d166-454d-b40b-031e9ceaea7a",
      "name": "Limit",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "--Only PA/LAB\n \nDECLARE @RES VARCHAR(50) = '%%';\n\nDECLARE @LOC VARCHAR(250) = '';\n\nDECLARE @APPT_TYPE VARCHAR(250) = '';\n\nDECLARE @STARTDATE DATE =  '{{ $('dateRange').item.json.startDate }}';\n\nDECLARE @ENDDATE DATE = '{{ $('dateRange').item.json.endDate }}';\n \n \nWITH sched_appt_avail AS (\n\n    SELECT  \n\n        s.[Available_Date],\n\n        s.[Start_Time],\n\n        s.[End_Time],\n\n        s.[Sched_Loc_Abbr],\n\n        s.[Sched_Dept_Abbr],\n\n        s.[Resource_Desc],\n\n        s.[Resource_Abbr],\n\n        s.[Activity_Type_Abbr],\n\n        s.Resource_ID,\n\n        s.Scheduling_Location_ID,\n\n        CASE WHEN s.Booking_Factor = 1 THEN 'BookableSlot' END AS BookableAppt\n\n    FROM [PM].[vwApptSchedAvail] s\n\n    WHERE s.Available_Date BETWEEN @STARTDATE AND @ENDDATE\n\n      --AND s.Resource_Abbr NOT LIKE 'PALAB'\n\n      AND s.Activity_Type_Abbr NOT LIKE 'BREAK'\n\n      AND s.Activity_Type_Abbr NOT LIKE 'lunch'\n\n      AND s.Activity_Type_Abbr NOT LIKE 'Blocked'\n\n     -- AND s.Resource_Desc = @RES\n\n),\n\nscheduled_appt_slots AS (\n\n    SELECT \n\n        p.[Patient_ID],\n\n        p.[Patient_Number],\n\n        p.[Appt_ID],\n\n        p.[Appt_DateTime],\n\n        p.[Appt_Resource_ID],\n\n        p.[Appt_Status],\n\n        CASE WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' END AS BookedAppt\n\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN @STARTDATE AND @ENDDATE\n\n      --AND p.Appt_Resource_Descr= @RES\n\n),\n\nres_pract_info as(\n\nselect \n\nr.Resource_ID as res_resource_id,r.Abbreviation as res_abbreviation,r.Description as res_description,r.Appointment_Group_ID as res_appointment_group_id,ag.Abbreviation as appt_gp_abbreviation,\n\nag.Description as appt_gp_description,r.Practitioner_ID as res_practitioner_id,\n\np.Practitioner_ID as prac_practitioner_id,\n\np.Is_Ref_Source,p.Is_Physician,p.Abbreviation as prac_abbreviation,\n\nUPPER(p.First_Name) First_Name,upper(p.Last_Name) Last_Name,p.Sex,p.Street1,p.City,p.State,p.Zip_Code,p.Phone,p.Phone_Ext,\n\np.Fax_Number,p.UPIN,p.Specialty_ID,p.Is_Non_Person,p.Specialty_ID spec_Specialty_Id,s.Abbreviation spec_abbreviation,s.Description spec_description,\n\np.Is_Mid_Level,p.Is_Mid_Level_PA,\n\np.Inactivation_Date,p.Is_Locum_Tenan\n\nfrom [PM].[Resources] r \n\nleft join [PM].[Practitioners] p on r.Practitioner_ID=p.Practitioner_ID\n\nleft join [PM].[Specialties] s on p.Specialty_ID=s.Specialty_ID\n\nLEFT JOIN [PM].[Appointment_Groups] ag on r.Appointment_Group_ID=ag.Appointment_Group_ID\n\nwhere r.Description not like 'zz%' and r.Description not like 'CM%'\n\nand r.Description not like 'super%' and r.Description not like 'blue%'\n\nand r.Description not like 'bella%' and r.Description not like 'surg%'\n\nand r.Description not like 'uop' and r.Description not like 'Tin%'\n\nand r.Description not like 'dunc%' and p.Inactivation_Date is null\n\nand r.Description not like 'prior%'\n\nand r.Description not like 'chee%' --and r.Description not like 'PA,%'\n\nand r.Description not like 'PharmD - Sabbagh, Hussein' and r.Description  not like'%event%'\n\n)\n\nSELECT \n\n    a.Available_Date,a.Start_Time,a.End_Time,a.Resource_Abbr,a.Resource_Desc,a.Resource_ID,a.Activity_Type_Abbr,a.Sched_Dept_Abbr,\n\n\ta.Sched_Loc_Abbr,a.Scheduling_Location_ID,s.Abbreviation,s.Description,s.Location_ID,\n\n\ta.BookableAppt,\n\n\tr.*\n\nFROM \n\n    sched_appt_avail a\n\nLEFT JOIN \n\n    scheduled_appt_slots b \n\n    ON cast(a.Available_Date as date) = CAST(b.Appt_DateTime AS DATE)\n\n    AND a.Start_Time = DATEPART(HOUR, b.Appt_DateTime) * 100 + DATEPART(MINUTE, b.Appt_DateTime) \n\n    AND a.Resource_ID = b.Appt_Resource_ID\n\nLEFT JOIN res_pract_info r ON r.res_resource_id=a.Resource_ID\n\nleft join [Ntier_EPIC].[PM].[Scheduling_Locations] s on s.Scheduling_Location_ID=a.Scheduling_Location_ID\n\nWHERE \n\n    b.Patient_ID IS NULL  -- Only show slots with no booked appointment\n\n    AND a.BookableAppt = 'BookableSlot'\n\n\tand r.res_appointment_group_id  in ('18')\n\n\tand (s.Description not like 'z%' and ( s.Description like 'EPIC%' or s.Description like 'DIAG%')and s.Description not in ('DIAG Eastpointe Kelly','DIAG Westland','EPIC Billing Office','EPIC Events','EPIC HS ADMIN','EPIC Events','EPIC Billing Office','EPIC Westland Palmer','EPIC Wyandotte Biddle','EPIC Care Management','EPIC Eastpointe Kelly','EPIC Southfield Greenfield'))\n\nORDER BY a.Available_Date, a.Start_Time;\n "
      },
      "id": "eac4b5c9-8d9a-46e6-abb1-5ffd8415d82b",
      "name": "PA-LAB",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        1120,
        1840
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Retrieve external modal contents (if any) and the appointments array from the incoming JSON.\nconst providerContentVar = $json[\"providerContent\"] || '';\nconst dateRangeContentVar = $json[\"dateRangeContent\"] || '';\nconst appointmentsArr = $json[\"data\"] || [];\n\n// Derive unique locations from the appointments data (using the location_description field)\nconst uniqueLocations = [...new Set(appointmentsArr.map(item => item.location_description))]\n\t.filter(x => x && x.trim() !== '');\n\n// Derive unique providers from the appointments data (using the provider_name field)\nconst uniqueProviders = [...new Set(appointmentsArr.map(item => item.provider_name))]\n\t.filter(x => x && x.trim() !== '');\n\n// Build dynamic location modal content with a modern, friendly UI.\nconst locationContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Locations</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please search and select your preferred locations:</p>\n  <input type=\"text\" id=\"locationSearch\" placeholder=\"Search locations...\" oninput=\"filterLocations()\"\n    style=\"width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px;\">\n  <div id=\"locationList\" style=\"max-height: 200px; overflow-y: auto; margin-bottom: 10px;\">\n    ${uniqueLocations\n      .map(option => `\n        <div class=\"location-item\" style=\"padding: 6px 0; border-bottom: 1px solid #eee;\">\n          <label style=\"cursor: pointer; display: block; font-family: Arial, sans-serif;\">\n            <input type=\"checkbox\" class=\"location-checkbox\" value=\"${option}\" style=\"margin-right: 8px;\"> ${option}\n          </label>\n        </div>\n      `)\n      .join('')}\n  </div>\n  <button class=\"button-modern\" onclick=\"handleLocationChange()\">Apply Filters</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetLocations()\">Reset Locations</button>\n`;\nconst locationContent = locationContentNew;\n\n// Build dynamic provider modal content with a modern, friendly UI.\nconst providerContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Provider</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please select your preferred provider:</p>\n  <select id=\"providerDropdown\" style=\"width:100%; padding:8px; margin-bottom:10px; border:1px solid #ccc; border-radius:4px;\">\n    <option value=\"\">-- Select a Provider --</option>\n    ${uniqueProviders.map(provider => `<option value=\"${provider}\">${provider}</option>`).join('')}\n  </select>\n  <button class=\"button-modern\" onclick=\"handleProviderChange()\">Apply Provider</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetProvider()\">Reset Provider</button>\n`;\nconst providerContent = providerContentNew;\n\n// Convert appointments data to a JSON string for use in the HTML.\nconst appointmentsData = JSON.stringify(appointmentsArr);\n\n// Build the full HTML content.\nconst html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Schedule</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      overflow: hidden;\n      font-family: Arial, sans-serif;\n    }\n    .modal-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(0,0,0,0.5);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 9999;\n    }\n    .modal {\n      background-color: white;\n      padding: 20px;\n      border-radius: 8px;\n      width: 300px;\n      position: relative;\n      max-height: 90vh;\n      overflow-y: auto;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n    }\n    .close-button {\n      position: absolute;\n      top: 10px; right: 10px;\n      cursor: pointer;\n      font-size: 16px;\n      color: #333;\n    }\n    .modal button {\n      padding: 10px;\n      margin-bottom: 10px;\n      width: 100%;\n      background-color: #3b82f6;\n      color: #fff;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 16px;\n    }\n    .modal button:hover {\n      background-color: #2563eb;\n    }\n    .loader-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(255,255,255,0.8);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 99999;\n    }\n    .loader {\n      border: 8px solid #f3f3f3;\n      border-top: 8px solid #3b82f6;\n      border-radius: 50%;\n      width: 60px;\n      height: 60px;\n      animation: spin 1s linear infinite;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    .header-controls {\n      display: flex;\n      justify-content: space-around;\n      border: 1px solid #ccc;\n      padding: 8px;\n      border-radius: 4px;\n      margin-bottom: 8px;\n    }\n    .header-controls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    .header-controls button:hover {\n      background-color: #f0f0f0;\n    }\n    #searchInput {\n      width: 100%;\n      padding: 8px;\n      margin-bottom: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    .table-responsive {\n      max-height: 50vh;\n      overflow-y: auto;\n      border-radius: 8px;\n      border: 1px solid #e5e7eb;\n      overflow-x: auto;\n      padding: 8px;\n      box-sizing: border-box;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      background-color: #ffffff;\n      font-size: 14px;\n      line-height: 1.4em;\n    }\n    thead tr {\n      position: sticky;\n      top: 0;\n      background-color: #000;\n      z-index: 1;\n    }\n    thead th {\n      padding: 12px;\n      text-align: left;\n      font-weight: bold;\n      color: #fff;\n      font-size: 14px;\n      cursor: pointer;\n      border-bottom: 1px solid #d1d5db;\n    }\n    tbody tr:hover {\n      background-color: #f9fafb;\n    }\n    tbody td {\n      padding: 12px;\n      color: #4b5563;\n      font-size: 14px;\n      border-top: 1px solid #e5e7eb;\n      vertical-align: middle;\n    }\n    tbody td button {\n      padding: 8px 16px;\n      background-color: #f59e0b;\n      color: #000;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    tbody td button:hover {\n      background-color: #d97706;\n    }\n    #paginationControls {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 8px;\n    }\n    #paginationControls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    #paginationControls button:hover {\n      background-color: #f0f0f0;\n    }\n    #showAllButton {\n      margin-top: 10px;\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      width: 100%;\n      font-size: 14px;\n    }\n    #showAllButton:hover {\n      background-color: #f0f0f0;\n    }\n    @media (max-width: 600px) {\n      .modal {\n        width: 95%;\n        padding: 10px;\n        max-height: 90vh;\n        overflow-y: auto;\n      }\n    }\n    /* Modern button styling for the modals' apply buttons */\n    .button-modern {\n      width: 100%;\n      padding: 12px;\n      background: linear-gradient(90deg, #4f46e5, #3b82f6);\n      color: #fff;\n      border: none;\n      border-radius: 8px;\n      font-size: 16px;\n      cursor: pointer;\n      font-family: Arial, sans-serif;\n      transition: background 0.3s ease;\n      box-shadow: 0px 4px 6px rgba(0,0,0,0.1);\n    }\n    .button-modern:hover {\n      background: linear-gradient(90deg, #3b82f6, #2563eb);\n    }\n  </style>\n</head>\n<body>\n  <div style=\"background-image: url('https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png');\n              background-size: cover;\n              background-position: center;\n              height: 100vh;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              overflow: hidden;\">\n    <div style=\"max-width: 900px;\n                width: 100%;\n                background-color: rgba(255,255,255,0.9);\n                padding: 16px;\n                border-radius: 8px;\n                box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n                overflow: hidden;\">\n      <h2 style=\"text-align: center; margin: 8px 0; font-size: 20px; color: #111827;\">Change Search Options</h2>\n      <div class=\"header-controls\">\n        <button onclick=\"openModal(locationContent)\">Location</button>\n        <button onclick=\"openModal(providerContent)\">Provider</button>\n        <button onclick=\"openModal(dateRangeContent)\">Date Range</button>\n      </div>\n      <input type=\"text\" id=\"searchInput\" placeholder=\"Search...\">\n      <div class=\"table-responsive\">\n        <table>\n          <thead>\n            <tr>\n              <th onclick=\"sortTable('location_description')\">Location</th>\n              <th onclick=\"sortTable('provider_name')\">Provider</th>\n              <th onclick=\"sortTable('day')\">Day</th>\n              <th onclick=\"sortTable('date')\">Date</th>\n              <th onclick=\"sortTable('start')\">Time</th>\n              <th style=\"text-align: center;\">Schedule</th>\n            </tr>\n          </thead>\n          <tbody id=\"appointmentTableBody\">\n            <!-- Rows inserted by JavaScript -->\n          </tbody>\n        </table>\n      </div>\n      <div id=\"paginationControls\">\n        <button onclick=\"prevPage()\">Previous</button>\n        <span id=\"pageIndicator\" style=\"font-size: 14px; color: #374151;\">Page 1</span>\n        <button onclick=\"nextPage()\">Next</button>\n      </div>\n      <button onclick=\"toggleShowAll()\" id=\"showAllButton\">Show All</button>\n    </div>\n  </div>\n  <div id=\"modalOverlay\" class=\"modal-overlay\" onclick=\"closeModal()\">\n    <div class=\"modal\" onclick=\"event.stopPropagation()\">\n      <span class=\"close-button\" onclick=\"closeModal()\">x</span>\n      <div id=\"modalContent\">Modal Content</div>\n    </div>\n  </div>\n  <div id=\"loaderOverlay\" class=\"loader-overlay\">\n    <div class=\"loader\"></div>\n  </div>\n  <script>\n    // Embed modal content using JSON.stringify to safely escape characters.\n    const providerContent = ${JSON.stringify(providerContentNew)};\n    const dateRangeContent = ${JSON.stringify(dateRangeContentVar)};\n    const locationContent = ${JSON.stringify(locationContent)};\n    const appointments = ${appointmentsData};\n    \n    // Sort appointments by date and start time.\n    appointments.sort((a, b) => new Date(a.date + ' ' + a.start) - new Date(b.date + ' ' + b.start));\n    \n    const appointmentMap = {};\n    let currentPage = 1;\n    const rowsPerPage = 8;\n    let filteredAppointments = appointments.slice();\n    let showingAll = false;\n    let sortOrder = {};\n    let selectedLocation = '';\n    let selectedProvider = '';\n    \n    // Read URL parameters.\n    const urlParams = new URLSearchParams(window.location.search);\n    selectedLocation = urlParams.get('location') || '';\n    selectedProvider = urlParams.get('provider') || '';\n    \n    function applyFilters() {\n      filteredAppointments = appointments.slice();\n      if (selectedLocation) {\n        const selectedArray = selectedLocation.split(',').map(item => item.trim());\n        filteredAppointments = filteredAppointments.filter(app => selectedArray.includes(app.location_description));\n      }\n      if (selectedProvider) {\n        filteredAppointments = filteredAppointments.filter(app => app.provider_name === selectedProvider);\n      }\n      renderTable(1);\n    }\n    applyFilters();\n    \n    function openModal(content) {\n      document.getElementById('modalOverlay').style.display = 'flex';\n      document.getElementById('modalContent').innerHTML = content;\n      if(content === locationContent) {\n        setTimeout(setCheckedLocations, 0);\n      }\n      if(content === providerContent) {\n        setTimeout(setProviderDropdown, 0);\n      }\n    }\n    function closeModal() {\n      document.getElementById('modalOverlay').style.display = 'none';\n    }\n    \n    // ----------------------------\n    // Location functions\n    // ----------------------------\n    \n    function handleLocationChange() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      const selected = [];\n      checkboxes.forEach(cb => {\n        if (cb.checked) { selected.push(cb.value); }\n      });\n      selectedLocation = selected.join(',');\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedLocation) { \n        urlParams.set('location', selectedLocation); \n      } else { \n        urlParams.delete('location'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setCheckedLocations() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const locParam = urlParams.get('location') || '';\n      if (locParam) {\n        const selectedArr = locParam.split(',').map(item => item.trim());\n        const checkboxes = document.querySelectorAll('.location-checkbox');\n        checkboxes.forEach(cb => {\n          if (selectedArr.includes(cb.value)) {\n            cb.checked = true;\n          }\n        });\n      }\n    }\n    \n    function resetLocations() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      checkboxes.forEach(cb => cb.checked = false);\n      selectedLocation = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('location');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function filterLocations() {\n      const filter = document.getElementById('locationSearch').value.toLowerCase();\n      const items = document.querySelectorAll('.location-item');\n      items.forEach(item => {\n        item.style.display = (item.textContent.toLowerCase().indexOf(filter) > -1) ? '' : 'none';\n      });\n    }\n    \n    // ----------------------------\n    // Provider functions\n    // ----------------------------\n    \n    function handleProviderChange() {\n      selectedProvider = document.getElementById('providerDropdown').value;\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedProvider) { \n        urlParams.set('provider', selectedProvider); \n      } else { \n        urlParams.delete('provider'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setProviderDropdown() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const providerParam = urlParams.get('provider') || '';\n      if (providerParam) {\n        const dropdown = document.getElementById('providerDropdown');\n        if (dropdown) {\n          dropdown.value = providerParam;\n        }\n      }\n    }\n    \n    function resetProvider() {\n      const dropdown = document.getElementById('providerDropdown');\n      if (dropdown) {\n        dropdown.value = \"\";\n      }\n      selectedProvider = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('provider');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    // ----------------------------\n    // Date Range functions\n    // ----------------------------\n    \n    // Function used when a user picks a custom date range (via startDate/endDate inputs)\n    function confirmDateRange() {\n      const startDate = document.getElementById('startDate').value;\n      const endDate = document.getElementById('endDate').value;\n      if (startDate && endDate) {\n        closeModal();\n        showLoader();\n        const url = new URL(window.location.href);\n        url.searchParams.set(\"startDate\", startDate);\n        url.searchParams.set(\"endDate\", endDate);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert(\"Please select both start and end dates.\");\n      }\n    }\n    \n    // New function: when a date range button (e.g., 1-3 days) is clicked.\n    function handleDateRangeSelection(rangeOption) {\n      closeModal();\n      showLoader();\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.set('dateRange', rangeOption);\n      setTimeout(() => { window.location.search = urlParams.toString(); }, 100);\n    }\n    \n    // ----------------------------\n    // Other functions\n    // ----------------------------\n    \n    function generateTableRows(data) {\n      return data.map((appointment, index) => {\n        const appointmentId = 'appointment' + index;\n        appointmentMap[appointmentId] = appointment;\n        let locationDisplay = appointment.location_description || '';\n        if (locationDisplay.toLowerCase().includes('video')) {\n          locationDisplay = '📹 ' + locationDisplay;\n        }\n        return \\`\n          <tr>\n            <td data-label=\"Location\">\\${locationDisplay}</td>\n            <td data-label=\"Provider\">\\${appointment.provider_name || ''}</td>\n            <td data-label=\"Day\">\\${appointment.day || ''}</td>\n            <td data-label=\"Date\">\\${appointment.date || ''}</td>\n            <td data-label=\"Time\">\\${appointment.start || ''}</td>\n            <td data-label=\"Schedule\" style=\"text-align:center;\">\n              <button onclick=\"scheduleAppointment('\\${appointmentId}')\">Schedule</button>\n            </td>\n          </tr>\\`;\n      }).join('');\n    }\n    \n    function scheduleAppointment(appointmentId) {\n      const appointment = appointmentMap[appointmentId];\n      if (appointment) {\n        showLoader();\n        const appointmentData = encodeURIComponent(JSON.stringify(appointment));\n        const url = new URL(window.location.href);\n        url.searchParams.set('schedule', appointmentData);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert('Appointment data not found.');\n      }\n    }\n    \n    function renderTable(page) {\n      if (filteredAppointments.length === 0) {\n        document.getElementById('appointmentTableBody').innerHTML = '<tr><td colspan=\"6\" style=\"text-align:center; padding:16px; color:#6b7280;\">No appointments available.</td></tr>';\n        document.getElementById('paginationControls').style.display = 'none';\n        return;\n      }\n      const start = (page - 1) * rowsPerPage;\n      const end = page * rowsPerPage;\n      const dataToRender = showingAll ? filteredAppointments : filteredAppointments.slice(start, end);\n      document.getElementById('appointmentTableBody').innerHTML = generateTableRows(dataToRender);\n      document.getElementById('pageIndicator').textContent = showingAll ? 'Showing All Results' : \\`Page \\${page}\\`;\n      document.getElementById('paginationControls').style.display = (filteredAppointments.length > rowsPerPage && !showingAll) ? 'flex' : 'none';\n    }\n    \n    function sortTable(field) {\n      sortOrder[field] = sortOrder[field] === 'asc' ? 'desc' : 'asc';\n      filteredAppointments.sort((a, b) => {\n        if (field === 'date' || field === 'start') {\n          const dateA = new Date(a.date + ' ' + a.start);\n          const dateB = new Date(b.date + ' ' + b.start);\n          return sortOrder[field] === 'asc' ? dateA - dateB : dateB - dateA;\n        }\n        return sortOrder[field] === 'asc'\n          ? (a[field] || '').localeCompare(b[field] || '')\n          : (b[field] || '').localeCompare(a[field] || '');\n      });\n      renderTable(1);\n      currentPage = 1;\n    }\n    \n    function searchAppointments() {\n      const query = document.getElementById('searchInput').value.toLowerCase();\n      filteredAppointments = appointments.filter(app =>\n        (app.location_description || '').toLowerCase().includes(query) ||\n        (app.provider_name || '').toLowerCase().includes(query) ||\n        (app.date || '').includes(query) ||\n        (app.start || '').includes(query)\n      );\n      renderTable(1);\n      currentPage = 1;\n    }\n    \n    function nextPage() {\n      if (currentPage < Math.ceil(filteredAppointments.length / rowsPerPage)) {\n        currentPage++;\n        renderTable(currentPage);\n      }\n    }\n    \n    function prevPage() {\n      if (currentPage > 1) {\n        currentPage--;\n        renderTable(currentPage);\n      }\n    }\n    \n    function toggleShowAll() {\n      showingAll = !showingAll;\n      document.getElementById('showAllButton').textContent = showingAll ? 'Collapse All' : 'Show All';\n      renderTable(currentPage);\n    }\n    \n    function showLoader() {\n      document.getElementById('loaderOverlay').style.display = 'flex';\n    }\n    \n    function hideLoader() {\n      document.getElementById('loaderOverlay').style.display = 'none';\n    }\n    \n    document.addEventListener('DOMContentLoaded', () => { hideLoader(); });\n    window.addEventListener('popstate', () => { hideLoader(); });\n    window.addEventListener('pageshow', (event) => { if (event.persisted) { hideLoader(); } });\n    document.getElementById('searchInput').addEventListener('input', searchAppointments);\n    \n    // Expose functions to the global scope.\n    window.openModal = openModal;\n    window.closeModal = closeModal;\n    window.handleLocationChange = handleLocationChange;\n    window.filterLocations = filterLocations;\n    window.resetLocations = resetLocations;\n    window.handleProviderChange = handleProviderChange;\n    window.setProviderDropdown = setProviderDropdown;\n    window.resetProvider = resetProvider;\n    window.handleDateRangeSelection = handleDateRangeSelection;\n    window.sortTable = sortTable;\n    window.nextPage = nextPage;\n    window.prevPage = prevPage;\n    window.toggleShowAll = toggleShowAll;\n    window.scheduleAppointment = scheduleAppointment;\n    window.confirmDateRange = confirmDateRange;\n    \n    // Initial table render.\n    renderTable(currentPage);\n  </script>\n</body>\n</html>\n`;\n\n// Return the HTML content from the Code node.\nreturn [{ htmlContent: html }];\n"
      },
      "id": "46c46d9f-75f3-4157-b11b-c3f035c0648a",
      "name": "Code64",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4160,
        1320
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retrieve external modal contents (if any) and the appointments array from the incoming JSON.\nconst providerContentVar = $json[\"providerContent\"] || '';\nconst dateRangeContentVar = $json[\"dateRangeContent\"] || '';\nconst appointmentsArr = $json[\"data\"] || [];\n\n// Derive unique locations from the appointments data (using the location_description field)\nconst uniqueLocations = [...new Set(appointmentsArr.map(item => item.location_description))]\n\t.filter(x => x && x.trim() !== '');\n\n// Derive unique providers from the appointments data (using the provider_name field)\n// and sort them alphabetically\nconst uniqueProviders = [...new Set(appointmentsArr.map(item => item.provider_name))]\n\t.filter(x => x && x.trim() !== '')\n\t.sort((a, b) => a.localeCompare(b));\n\n// Build dynamic location modal content with a modern, friendly UI.\nconst locationContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Locations</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please search and select your preferred locations:</p>\n  <input type=\"text\" id=\"locationSearch\" placeholder=\"Search locations...\" oninput=\"filterLocations()\"\n    style=\"width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px;\">\n  <div id=\"locationList\" style=\"max-height: 200px; overflow-y: auto; margin-bottom: 10px;\">\n    ${uniqueLocations\n      .map(option => `\n        <div class=\"location-item\" style=\"padding: 6px 0; border-bottom: 1px solid #eee;\">\n          <label style=\"cursor: pointer; display: block; font-family: Arial, sans-serif;\">\n            <input type=\"checkbox\" class=\"location-checkbox\" value=\"${option}\" style=\"margin-right: 8px;\"> ${option}\n          </label>\n        </div>\n      `)\n      .join('')}\n  </div>\n  <button class=\"button-modern\" onclick=\"handleLocationChange()\">Apply Filters</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetLocations()\">Reset Locations</button>\n`;\nconst locationContent = locationContentNew;\n\n// Build dynamic provider modal content with a modern, friendly UI.\nconst providerContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Provider</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please select your preferred provider:</p>\n  <select id=\"providerDropdown\" style=\"width:100%; padding:8px; margin-bottom:10px; border:1px solid #ccc; border-radius:4px;\">\n    <option value=\"\">-- Select a Provider --</option>\n    ${uniqueProviders.map(provider => `<option value=\"${provider}\">${provider}</option>`).join('')}\n  </select>\n  <button class=\"button-modern\" onclick=\"handleProviderChange()\">Apply Provider</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetProvider()\">Reset Provider</button>\n`;\nconst providerContent = providerContentNew;\n\n// Convert appointments data to a JSON string for use in the HTML.\nconst appointmentsData = JSON.stringify(appointmentsArr);\n\n// Build the full HTML content.\nconst html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Schedule</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      overflow: hidden;\n      font-family: Arial, sans-serif;\n    }\n    .modal-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(0,0,0,0.5);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 9999;\n    }\n    .modal {\n      background-color: white;\n      padding: 20px;\n      border-radius: 8px;\n      width: 300px;\n      position: relative;\n      max-height: 90vh;\n      overflow-y: auto;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n    }\n    .close-button {\n      position: absolute;\n      top: 10px; right: 10px;\n      cursor: pointer;\n      font-size: 16px;\n      color: #333;\n    }\n    .modal button {\n      padding: 10px;\n      margin-bottom: 10px;\n      width: 100%;\n      background-color: #3b82f6;\n      color: #fff;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 16px;\n    }\n    .modal button:hover {\n      background-color: #2563eb;\n    }\n    .loader-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(255,255,255,0.8);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 99999;\n    }\n    .loader {\n      border: 8px solid #f3f3f3;\n      border-top: 8px solid #3b82f6;\n      border-radius: 50%;\n      width: 60px;\n      height: 60px;\n      animation: spin 1s linear infinite;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    .header-controls {\n      display: flex;\n      justify-content: space-around;\n      border: 1px solid #ccc;\n      padding: 8px;\n      border-radius: 4px;\n      margin-bottom: 8px;\n    }\n    .header-controls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    .header-controls button:hover {\n      background-color: #f0f0f0;\n    }\n    #searchInput {\n      width: 100%;\n      padding: 8px;\n      margin-bottom: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    .table-responsive {\n      max-height: 50vh;\n      overflow-y: auto;\n      border-radius: 8px;\n      border: 1px solid #e5e7eb;\n      overflow-x: auto;\n      padding: 8px;\n      box-sizing: border-box;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      background-color: #ffffff;\n      font-size: 14px;\n      line-height: 1.4em;\n    }\n    thead tr {\n      position: sticky;\n      top: 0;\n      background-color: #000;\n      z-index: 1;\n    }\n    thead th {\n      padding: 12px;\n      text-align: left;\n      font-weight: bold;\n      color: #fff;\n      font-size: 14px;\n      cursor: pointer;\n      border-bottom: 1px solid #d1d5db;\n    }\n    tbody tr:hover {\n      background-color: #f9fafb;\n    }\n    tbody td {\n      padding: 12px;\n      color: #4b5563;\n      font-size: 14px;\n      border-top: 1px solid #e5e7eb;\n      vertical-align: middle;\n    }\n    tbody td button {\n      padding: 8px 16px;\n      background-color: #f59e0b;\n      color: #000;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    tbody td button:hover {\n      background-color: #d97706;\n    }\n    #paginationControls {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 8px;\n    }\n    #paginationControls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    #paginationControls button:hover {\n      background-color: #f0f0f0;\n    }\n    #showAllButton {\n      margin-top: 10px;\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      width: 100%;\n      font-size: 14px;\n    }\n    #showAllButton:hover {\n      background-color: #f0f0f0;\n    }\n    @media (max-width: 600px) {\n      .modal {\n        width: 95%;\n        padding: 10px;\n        max-height: 90vh;\n        overflow-y: auto;\n      }\n    }\n    /* Modern button styling for the modals' apply buttons */\n    .button-modern {\n      width: 100%;\n      padding: 12px;\n      background: linear-gradient(90deg, #4f46e5, #3b82f6);\n      color: #fff;\n      border: none;\n      border-radius: 8px;\n      font-size: 16px;\n      cursor: pointer;\n      font-family: Arial, sans-serif;\n      transition: background 0.3s ease;\n      box-shadow: 0px 4px 6px rgba(0,0,0,0.1);\n    }\n    .button-modern:hover {\n      background: linear-gradient(90deg, #3b82f6, #2563eb);\n    }\n  </style>\n</head>\n<body>\n  <div style=\"background-image: url('https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png');\n              background-size: cover;\n              background-position: center;\n              height: 100vh;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              overflow: hidden;\">\n    <div style=\"max-width: 900px;\n                width: 100%;\n                background-color: rgba(255,255,255,0.9);\n                padding: 16px;\n                border-radius: 8px;\n                box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n                overflow: hidden;\">\n      <h2 style=\"text-align: center; margin: 8px 0; font-size: 20px; color: #111827;\">Change Search Options</h2>\n      <div class=\"header-controls\">\n        <button onclick=\"openModal(locationContent)\">Location</button>\n        <button onclick=\"openModal(providerContent)\">Provider</button>\n        <button onclick=\"openModal(dateRangeContent)\">Date Range</button>\n      </div>\n      <input type=\"text\" id=\"searchInput\" placeholder=\"Search...\">\n      <div class=\"table-responsive\">\n        <table>\n          <thead>\n            <tr>\n              <th onclick=\"sortTable('location_description')\">Location</th>\n              <th onclick=\"sortTable('provider_name')\">Provider</th>\n              <th onclick=\"sortTable('day')\">Day</th>\n              <th onclick=\"sortTable('date')\">Date</th>\n              <th onclick=\"sortTable('start')\">Time</th>\n              <th style=\"text-align: center;\">Schedule</th>\n            </tr>\n          </thead>\n          <tbody id=\"appointmentTableBody\">\n            <!-- Rows inserted by JavaScript -->\n          </tbody>\n        </table>\n      </div>\n      <div id=\"paginationControls\">\n        <button onclick=\"prevPage()\">Previous</button>\n        <span id=\"pageIndicator\" style=\"font-size: 14px; color: #374151;\">Page 1</span>\n        <button onclick=\"nextPage()\">Next</button>\n      </div>\n      <button onclick=\"toggleShowAll()\" id=\"showAllButton\">Show All</button>\n    </div>\n  </div>\n  <div id=\"modalOverlay\" class=\"modal-overlay\" onclick=\"closeModal()\">\n    <div class=\"modal\" onclick=\"event.stopPropagation()\">\n      <span class=\"close-button\" onclick=\"closeModal()\">x</span>\n      <div id=\"modalContent\">Modal Content</div>\n    </div>\n  </div>\n  <div id=\"loaderOverlay\" class=\"loader-overlay\">\n    <div class=\"loader\"></div>\n  </div>\n  <script>\n    // Embed modal content using JSON.stringify to safely escape characters.\n    const providerContent = ${JSON.stringify(providerContentNew)};\n    const dateRangeContent = ${JSON.stringify(dateRangeContentVar)};\n    const locationContent = ${JSON.stringify(locationContent)};\n    const appointments = ${appointmentsData};\n    \n    // Sort appointments by date and start time.\n    appointments.sort((a, b) => new Date(a.date + ' ' + a.start) - new Date(b.date + ' ' + b.start));\n    \n    const appointmentMap = {};\n    let currentPage = 1;\n    const rowsPerPage = 8;\n    let filteredAppointments = appointments.slice();\n    let showingAll = false;\n    let sortOrder = {};\n    let selectedLocation = '';\n    let selectedProvider = '';\n    \n    // Read URL parameters.\n    const urlParams = new URLSearchParams(window.location.search);\n    selectedLocation = urlParams.get('location') || '';\n    selectedProvider = urlParams.get('provider') || '';\n    \n    function applyFilters() {\n      filteredAppointments = appointments.slice();\n      if (selectedLocation) {\n        const selectedArray = selectedLocation.split(',').map(item => item.trim());\n        filteredAppointments = filteredAppointments.filter(app => selectedArray.includes(app.location_description));\n      }\n      if (selectedProvider) {\n        filteredAppointments = filteredAppointments.filter(app => app.provider_name === selectedProvider);\n      }\n      renderTable(1);\n    }\n    applyFilters();\n    \n    function openModal(content) {\n      document.getElementById('modalOverlay').style.display = 'flex';\n      document.getElementById('modalContent').innerHTML = content;\n      if(content === locationContent) {\n        setTimeout(setCheckedLocations, 0);\n      }\n      if(content === providerContent) {\n        setTimeout(setProviderDropdown, 0);\n      }\n    }\n    function closeModal() {\n      document.getElementById('modalOverlay').style.display = 'none';\n    }\n    \n    // ----------------------------\n    // Location functions\n    // ----------------------------\n    \n    function handleLocationChange() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      const selected = [];\n      checkboxes.forEach(cb => {\n        if (cb.checked) { selected.push(cb.value); }\n      });\n      selectedLocation = selected.join(',');\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedLocation) { \n        urlParams.set('location', selectedLocation); \n      } else { \n        urlParams.delete('location'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setCheckedLocations() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const locParam = urlParams.get('location') || '';\n      if (locParam) {\n        const selectedArr = locParam.split(',').map(item => item.trim());\n        const checkboxes = document.querySelectorAll('.location-checkbox');\n        checkboxes.forEach(cb => {\n          if (selectedArr.includes(cb.value)) {\n            cb.checked = true;\n          }\n        });\n      }\n    }\n    \n    function resetLocations() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      checkboxes.forEach(cb => cb.checked = false);\n      selectedLocation = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('location');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function filterLocations() {\n      const filter = document.getElementById('locationSearch').value.toLowerCase();\n      const items = document.querySelectorAll('.location-item');\n      items.forEach(item => {\n        item.style.display = (item.textContent.toLowerCase().indexOf(filter) > -1) ? '' : 'none';\n      });\n    }\n    \n    // ----------------------------\n    // Provider functions\n    // ----------------------------\n    \n    function handleProviderChange() {\n      selectedProvider = document.getElementById('providerDropdown').value;\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedProvider) { \n        urlParams.set('provider', selectedProvider); \n      } else { \n        urlParams.delete('provider'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setProviderDropdown() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const providerParam = urlParams.get('provider') || '';\n      if (providerParam) {\n        const dropdown = document.getElementById('providerDropdown');\n        if (dropdown) {\n          dropdown.value = providerParam;\n        }\n      }\n    }\n    \n    function resetProvider() {\n      const dropdown = document.getElementById('providerDropdown');\n      if (dropdown) {\n        dropdown.value = \"\";\n      }\n      selectedProvider = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('provider');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    // ----------------------------\n    // Date Range functions\n    // ----------------------------\n    \n    // Function used when a user picks a custom date range (via startDate/endDate inputs)\n    function confirmDateRange() {\n      const startDate = document.getElementById('startDate').value;\n      const endDate = document.getElementById('endDate').value;\n      if (startDate && endDate) {\n        closeModal();\n        showLoader();\n        const url = new URL(window.location.href);\n        url.searchParams.set(\"startDate\", startDate);\n        url.searchParams.set(\"endDate\", endDate);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert(\"Please select both start and end dates.\");\n      }\n    }\n    \n    // New function: when a date range button (e.g., 1-3 days) is clicked.\n    function handleDateRangeSelection(rangeOption) {\n      closeModal();\n      showLoader();\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.set('dateRange', rangeOption);\n      setTimeout(() => { window.location.search = urlParams.toString(); }, 100);\n    }\n    \n    // ----------------------------\n    // Other functions\n    // ----------------------------\n    \n    function generateTableRows(data) {\n      return data.map((appointment, index) => {\n        const appointmentId = 'appointment' + index;\n        appointmentMap[appointmentId] = appointment;\n        let locationDisplay = appointment.location_description || '';\n        if (locationDisplay.toLowerCase().includes('video')) {\n          locationDisplay = '📹 ' + locationDisplay;\n        }\n        return \\`\n          <tr>\n            <td data-label=\"Location\">\\${locationDisplay}</td>\n            <td data-label=\"Provider\">\\${appointment.provider_name || ''}</td>\n            <td data-label=\"Day\">\\${appointment.day || ''}</td>\n            <td data-label=\"Date\">\\${appointment.date || ''}</td>\n            <td data-label=\"Time\">\\${appointment.start || ''}</td>\n            <td data-label=\"Schedule\" style=\"text-align:center;\">\n              <button onclick=\"scheduleAppointment('\\${appointmentId}')\">Schedule</button>\n            </td>\n          </tr>\\`;\n      }).join('');\n    }\n    \n    function scheduleAppointment(appointmentId) {\n      const appointment = appointmentMap[appointmentId];\n      if (appointment) {\n        showLoader();\n        const appointmentData = encodeURIComponent(JSON.stringify(appointment));\n        const url = new URL(window.location.href);\n        url.searchParams.set('schedule', appointmentData);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert('Appointment data not found.');\n      }\n    }\n    \n    function renderTable(page) {\n      if (filteredAppointments.length === 0) {\n        document.getElementById('appointmentTableBody').innerHTML = '<tr><td colspan=\"6\" style=\"text-align:center; padding:16px; color:#6b7280;\">No appointments available.</td></tr>';\n        document.getElementById('paginationControls').style.display = 'none';\n        return;\n      }\n      const start = (page - 1) * rowsPerPage;\n      const end = page * rowsPerPage;\n      const dataToRender = showingAll ? filteredAppointments : filteredAppointments.slice(start, end);\n      document.getElementById('appointmentTableBody').innerHTML = generateTableRows(dataToRender);\n      document.getElementById('pageIndicator').textContent = showingAll ? 'Showing All Results' : \\`Page \\${page}\\`;\n      document.getElementById('paginationControls').style.display = (filteredAppointments.length > rowsPerPage && !showingAll) ? 'flex' : 'none';\n    }\n    \n    function sortTable(field) {\n      sortOrder[field] = sortOrder[field] === 'asc' ? 'desc' : 'asc';\n      filteredAppointments.sort((a, b) => {\n        if (field === 'date' || field === 'start') {\n          const dateA = new Date(a.date + ' ' + a.start);\n          const dateB = new Date(b.date + ' ' + b.start);\n          return sortOrder[field] === 'asc' ? dateA - dateB : dateB - dateA;\n        }\n        return sortOrder[field] === 'asc'\n          ? (a[field] || '').localeCompare(b[field] || '')\n          : (b[field] || '').localeCompare(a[field] || '');\n      });\n      renderTable(1);\n      currentPage = 1;\n    }\n    \n    function searchAppointments() {\n      const query = document.getElementById('searchInput').value.toLowerCase();\n      filteredAppointments = appointments.filter(app =>\n        (app.location_description || '').toLowerCase().includes(query) ||\n        (app.provider_name || '').toLowerCase().includes(query) ||\n        (app.date || '').includes(query) ||\n        (app.start || '').includes(query)\n      );\n      renderTable(1);\n      currentPage = 1;\n    }\n    \n    function nextPage() {\n      if (currentPage < Math.ceil(filteredAppointments.length / rowsPerPage)) {\n        currentPage++;\n        renderTable(currentPage);\n      }\n    }\n    \n    function prevPage() {\n      if (currentPage > 1) {\n        currentPage--;\n        renderTable(currentPage);\n      }\n    }\n    \n    function toggleShowAll() {\n      showingAll = !showingAll;\n      document.getElementById('showAllButton').textContent = showingAll ? 'Collapse All' : 'Show All';\n      renderTable(currentPage);\n    }\n    \n    function showLoader() {\n      document.getElementById('loaderOverlay').style.display = 'flex';\n    }\n    \n    function hideLoader() {\n      document.getElementById('loaderOverlay').style.display = 'none';\n    }\n    \n    document.addEventListener('DOMContentLoaded', () => { hideLoader(); });\n    window.addEventListener('popstate', () => { hideLoader(); });\n    window.addEventListener('pageshow', (event) => { if (event.persisted) { hideLoader(); } });\n    document.getElementById('searchInput').addEventListener('input', searchAppointments);\n    \n    // Expose functions to the global scope.\n    window.openModal = openModal;\n    window.closeModal = closeModal;\n    window.handleLocationChange = handleLocationChange;\n    window.filterLocations = filterLocations;\n    window.resetLocations = resetLocations;\n    window.handleProviderChange = handleProviderChange;\n    window.setProviderDropdown = setProviderDropdown;\n    window.resetProvider = resetProvider;\n    window.handleDateRangeSelection = handleDateRangeSelection;\n    window.sortTable = sortTable;\n    window.nextPage = nextPage;\n    window.prevPage = prevPage;\n    window.toggleShowAll = toggleShowAll;\n    window.scheduleAppointment = scheduleAppointment;\n    window.confirmDateRange = confirmDateRange;\n    \n    // Initial table render.\n    renderTable(currentPage);\n  </script>\n</body>\n</html>\n`;\n\n// Return the HTML content from the Code node.\nreturn [{ htmlContent: html }];\n"
      },
      "id": "efd93938-2d1e-4641-be1e-dd0be0630046",
      "name": "Code65",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4280,
        1320
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @RES VARCHAR(50) = '%%';\nDECLARE @LOC VARCHAR(250) = '';\nDECLARE @APPT_TYPE VARCHAR(250) = '';\nDECLARE @STARTDATE DATE = '{{ $('dateRange').item.json.startDate }}';\nDECLARE @ENDDATE DATE = '{{ $('dateRange').item.json.endDate }}'; \n \n\n \nWITH sched_appt_avail AS (\n    SELECT  \n        s.[Available_Date],\n        s.[Start_Time],\n        s.[End_Time],\n        s.[Sched_Loc_Abbr],\n        s.[Sched_Dept_Abbr],\n        s.[Resource_Desc],\n        s.[Resource_Abbr],\n        s.[Activity_Type_Abbr],\n        s.Resource_ID,\n        s.Scheduling_Location_ID,\n        CASE WHEN s.Booking_Factor = 1 THEN 'BookableSlot' END AS BookableAppt\n    FROM [PM].[vwApptSchedAvail] s\n    WHERE s.Available_Date BETWEEN @STARTDATE AND @ENDDATE\n      AND s.Resource_Abbr NOT LIKE 'PALAB'\n      AND s.Activity_Type_Abbr NOT LIKE 'BREAK'\n      AND s.Activity_Type_Abbr NOT LIKE 'lunch'\n      AND s.Activity_Type_Abbr NOT LIKE 'Blocked'\n     -- AND s.Resource_Desc = @RES\n),\nscheduled_appt_slots AS (\n    SELECT \n        p.[Patient_ID],\n        p.[Patient_Number],\n        p.[Appt_ID],\n        p.[Appt_DateTime],\n        p.[Appt_Resource_ID],\n        p.[Appt_Status],\n        CASE WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' END AS BookedAppt\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN @STARTDATE AND @ENDDATE\n      --AND p.Appt_Resource_Descr= @RES\n),\nres_pract_info as(\nselect \nr.Resource_ID as res_resource_id,r.Abbreviation as res_abbreviation,r.Description as res_description,r.Appointment_Group_ID as res_appointment_group_id,ag.Abbreviation as appt_gp_abbreviation,\nag.Description as appt_gp_description,r.Practitioner_ID as res_practitioner_id,\np.Practitioner_ID as prac_practitioner_id,\np.Is_Ref_Source,p.Is_Physician,p.Abbreviation as prac_abbreviation,\nUPPER(p.First_Name) First_Name,upper(p.Last_Name) Last_Name,p.Sex,p.Street1,p.City,p.State,p.Zip_Code,p.Phone,p.Phone_Ext,\np.Fax_Number,p.UPIN,p.Specialty_ID,p.Is_Non_Person,p.Specialty_ID spec_Specialty_Id,s.Abbreviation spec_abbreviation,s.Description spec_description,\np.Is_Mid_Level,p.Is_Mid_Level_PA,\np.Inactivation_Date,p.Is_Locum_Tenan\nfrom [PM].[Resources] r \nleft join [PM].[Practitioners] p on r.Practitioner_ID=p.Practitioner_ID\nleft join [PM].[Specialties] s on p.Specialty_ID=s.Specialty_ID\nLEFT JOIN [PM].[Appointment_Groups] ag on r.Appointment_Group_ID=ag.Appointment_Group_ID\nwhere r.Description not like 'zz%' and r.Description not like 'CM%'\nand r.Description not like 'super%' and r.Description not like 'blue%'\nand r.Description not like 'bella%' and r.Description not like 'surg%'\nand r.Description not like 'uop' and r.Description not like 'Tin%'\nand r.Description not like 'dunc%' and p.Inactivation_Date is null\nand r.Description not like 'prior%'\nand r.Description not like 'chee%' and r.Description not like 'PA,%'\nand r.Description not like 'PharmD - Sabbagh, Hussein' and r.Description  not like'%event%'\n)\nSELECT \n    a.Available_Date,a.Start_Time,a.End_Time,a.Resource_Abbr,a.Resource_Desc,a.Resource_ID,a.Activity_Type_Abbr,a.Sched_Dept_Abbr,\n\ta.Sched_Loc_Abbr,a.Scheduling_Location_ID,s.Abbreviation,s.Description,s.Location_ID,\n\ta.BookableAppt,\n\tr.*\nFROM \n    sched_appt_avail a\nLEFT JOIN \n    scheduled_appt_slots b \n    ON a.Available_Date = CAST(b.Appt_DateTime AS DATE)\n    AND a.Start_Time = DATEPART(HOUR, b.Appt_DateTime) * 100 + DATEPART(MINUTE, b.Appt_DateTime) \n    AND a.Resource_ID = b.Appt_Resource_ID\nLEFT JOIN res_pract_info r ON r.res_resource_id=a.Resource_ID\nleft join [Ntier_EPIC].[PM].[Scheduling_Locations] s on s.Scheduling_Location_ID=a.Scheduling_Location_ID\n \nWHERE \n    b.Patient_ID IS NULL  -- Only show slots with no booked appointment\n    AND a.BookableAppt = 'BookableSlot'\n\tand r.res_appointment_group_id  in ('42','79')\n\tand (s.Description not like 'z%' and ( s.Description like 'EPIC%' or s.Description like 'DIAG%')and s.Description not in ('DIAG Eastpointe Kelly','DIAG Westland','EPIC Billing Office','EPIC Events','EPIC HS ADMIN','EPIC Events','EPIC Billing Office','EPIC Westland Palmer','EPIC Wyandotte Biddle','EPIC Care Management','EPIC Eastpointe Kelly','EPIC Southfield Greenfield'))\nORDER BY a.Available_Date, a.Start_Time;"
      },
      "id": "34179aca-632c-49f6-aeb3-3b4ad2d9ca7a",
      "name": "PM P-CARE",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        2600,
        1640
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @RES VARCHAR(50) = '%%';\nDECLARE @LOC VARCHAR(250) = '';\nDECLARE @APPT_TYPE VARCHAR(250) = '';\nDECLARE @STARTDATE DATE = '{{ $('dateRange').item.json.startDate }}';\nDECLARE @ENDDATE DATE = '{{ $('dateRange').item.json.endDate }}'; \n \n\n \nWITH sched_appt_avail AS (\n    SELECT  \n        s.[Available_Date],\n        s.[Start_Time],\n        s.[End_Time],\n        s.[Sched_Loc_Abbr],\n        s.[Sched_Dept_Abbr],\n        s.[Resource_Desc],\n        s.[Resource_Abbr],\n        s.[Activity_Type_Abbr],\n        s.Resource_ID,\n        s.Scheduling_Location_ID,\n        CASE WHEN s.Booking_Factor = 1 THEN 'BookableSlot' END AS BookableAppt\n    FROM [PM].[vwApptSchedAvail] s\n    WHERE s.Available_Date BETWEEN @STARTDATE AND @ENDDATE\n      AND s.Resource_Abbr NOT LIKE 'PALAB'\n      AND s.Activity_Type_Abbr NOT LIKE 'BREAK'\n      AND s.Activity_Type_Abbr NOT LIKE 'lunch'\n      AND s.Activity_Type_Abbr NOT LIKE 'Blocked'\n     -- AND s.Resource_Desc = @RES\n),\nscheduled_appt_slots AS (\n    SELECT \n        p.[Patient_ID],\n        p.[Patient_Number],\n        p.[Appt_ID],\n        p.[Appt_DateTime],\n        p.[Appt_Resource_ID],\n        p.[Appt_Status],\n        CASE WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' END AS BookedAppt\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN @STARTDATE AND @ENDDATE\n      --AND p.Appt_Resource_Descr= @RES\n),\nres_pract_info as(\nselect \nr.Resource_ID as res_resource_id,r.Abbreviation as res_abbreviation,r.Description as res_description,r.Appointment_Group_ID as res_appointment_group_id,ag.Abbreviation as appt_gp_abbreviation,\nag.Description as appt_gp_description,r.Practitioner_ID as res_practitioner_id,\np.Practitioner_ID as prac_practitioner_id,\np.Is_Ref_Source,p.Is_Physician,p.Abbreviation as prac_abbreviation,\nUPPER(p.First_Name) First_Name,upper(p.Last_Name) Last_Name,p.Sex,p.Street1,p.City,p.State,p.Zip_Code,p.Phone,p.Phone_Ext,\np.Fax_Number,p.UPIN,p.Specialty_ID,p.Is_Non_Person,p.Specialty_ID spec_Specialty_Id,s.Abbreviation spec_abbreviation,s.Description spec_description,\np.Is_Mid_Level,p.Is_Mid_Level_PA,\np.Inactivation_Date,p.Is_Locum_Tenan\nfrom [PM].[Resources] r \nleft join [PM].[Practitioners] p on r.Practitioner_ID=p.Practitioner_ID\nleft join [PM].[Specialties] s on p.Specialty_ID=s.Specialty_ID\nLEFT JOIN [PM].[Appointment_Groups] ag on r.Appointment_Group_ID=ag.Appointment_Group_ID\nwhere r.Description not like 'zz%' and r.Description not like 'CM%'\nand r.Description not like 'super%' and r.Description not like 'blue%'\nand r.Description not like 'bella%' and r.Description not like 'surg%'\nand r.Description not like 'uop' and r.Description not like 'Tin%'\nand r.Description not like 'dunc%' and p.Inactivation_Date is null\nand r.Description not like 'prior%'\nand r.Description not like 'chee%' and r.Description not like 'PA,%'\nand r.Description not like 'PharmD - Sabbagh, Hussein' and r.Description  not like'%event%'\n)\nSELECT \n    a.Available_Date,a.Start_Time,a.End_Time,a.Resource_Abbr,a.Resource_Desc,a.Resource_ID,a.Activity_Type_Abbr,a.Sched_Dept_Abbr,\n\ta.Sched_Loc_Abbr,a.Scheduling_Location_ID,s.Abbreviation,s.Description,s.Location_ID,\n\ta.BookableAppt,\n\tr.*\nFROM \n    sched_appt_avail a\nLEFT JOIN \n    scheduled_appt_slots b \n    ON a.Available_Date = CAST(b.Appt_DateTime AS DATE)\n    AND a.Start_Time = DATEPART(HOUR, b.Appt_DateTime) * 100 + DATEPART(MINUTE, b.Appt_DateTime) \n    AND a.Resource_ID = b.Appt_Resource_ID\nLEFT JOIN res_pract_info r ON r.res_resource_id=a.Resource_ID\nleft join [Ntier_EPIC].[PM].[Scheduling_Locations] s on s.Scheduling_Location_ID=a.Scheduling_Location_ID\n \nWHERE \n    b.Patient_ID IS NULL  -- Only show slots with no booked appointment\n    AND a.BookableAppt = 'BookableSlot'\n\tand r.res_appointment_group_id  in ('42','79')\n\tand (s.Description not like 'z%' and ( s.Description like 'EPIC%' or s.Description like 'DIAG%')and s.Description not in ('DIAG Eastpointe Kelly','DIAG Westland','EPIC Billing Office','EPIC Events','EPIC HS ADMIN','EPIC Events','EPIC Billing Office','EPIC Westland Palmer','EPIC Wyandotte Biddle','EPIC Care Management','EPIC Eastpointe Kelly','EPIC Southfield Greenfield'))\nORDER BY a.Available_Date, a.Start_Time;"
      },
      "id": "b77f4e32-43c5-49ad-8c8b-b3bf0a6b7dfc",
      "name": "PM P-CARE3 Good Does Not show all though",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        2620,
        1520
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @RES VARCHAR(50) = '%%';\nDECLARE @LOC VARCHAR(250) = '';\nDECLARE @APPT_TYPE VARCHAR(250) = '';\nDECLARE @STARTDATE DATE = '{{ $('dateRange').item.json.startDate }}';\nDECLARE @ENDDATE DATE = '{{ $('dateRange').item.json.endDate }}'; \n\n \nWITH sched_appt_avail AS (\n    SELECT  \n        s.[Available_Date],\n        s.[Start_Time],\n        s.[End_Time],\n        s.[Sched_Loc_Abbr],\n        s.[Sched_Dept_Abbr],\n        s.[Resource_Desc],\n        s.[Resource_Abbr],\n        s.[Activity_Type_Abbr],\n        s.Resource_ID,\n        s.Scheduling_Location_ID,\n        CASE WHEN s.Booking_Factor = 1 THEN 'BookableSlot' END AS BookableAppt\n    FROM [PM].[vwApptSchedAvail] s\n    WHERE s.Available_Date BETWEEN  @STARTDATE AND @ENDDATE\n      AND s.Resource_Abbr NOT LIKE 'PALAB'\n      AND s.Activity_Type_Abbr NOT LIKE 'BREAK'\n      AND s.Activity_Type_Abbr NOT LIKE 'lunch'\n      AND s.Activity_Type_Abbr NOT LIKE 'Blocked'\n     AND s.Resource_Desc like  @RES\n),\nscheduled_appt_slots AS (\n    SELECT \n        p.[Patient_ID],\n        p.[Patient_Number],\n        p.[Appt_ID],\n        p.[Appt_DateTime],\n        p.[Appt_Resource_ID],\n        p.[Appt_Status],\n        CASE WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' END AS BookedAppt\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN @STARTDATE AND @ENDDATE\n      AND p.Appt_Resource_Descr like @RES\n\t -- and p.Appt_Status  in ('x')\n),\nscheduled_appt_slots_with_status as(\n  SELECT \n        p.[Patient_ID],\n        p.[Patient_Number],\n        p.[Appt_ID],\n        p.[Appt_DateTime],\n        p.[Appt_Resource_ID],\n        p.[Appt_Status],\n        CASE WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' END AS BookedAppt,\n\t\tROW_NUMBER() over(partition by p.appt_datetime,p.appt_resource_id, p.appt_status order by p.appt_status ) rn\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN  @STARTDATE AND @ENDDATE\n      AND p.Appt_Resource_Descr like @RES\n),\nStatusCheck_s_and_c AS (\n    SELECT \n        p.[Patient_ID],\n        p.[Patient_Number],\n        p.[Appt_ID],\n        p.[Appt_DateTime],\n        p.[Appt_Resource_ID],\n        p.[Appt_Status],\n        CASE \n            WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' \n        END AS BookedAppt,\n        -- Count the presence of each status per time slot\n        COUNT(CASE WHEN p.Appt_Status = 'X' THEN 1 END) \n            OVER(PARTITION BY p.Appt_DateTime, p.Appt_Resource_ID) AS Count_X,\n        COUNT(CASE WHEN p.Appt_Status IN ('S', 'C') THEN 1 END) \n            OVER(PARTITION BY p.Appt_DateTime, p.Appt_Resource_ID) AS Count_S_C\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN @STARTDATE and @ENDDATE\n      AND p.Appt_Resource_Descr LIKE @RES\n),\npull_minus_x as(\nSELECT \n    *,\n    CASE \n        WHEN Count_X > 0 AND Count_S_C = 0 THEN 'Bookable'\n        ELSE 'Not Bookable'\n    END AS Bookable_Status\nFROM StatusCheck_s_and_c s\n),\nonly_x_as_option as(\nselect *\nfrom pull_minus_x p\nwhere p.Bookable_Status in ('Bookable')\n),\nres_pract_info as(\nselect \nr.Resource_ID as res_resource_id,r.Abbreviation as res_abbreviation,r.Description as res_description,r.Appointment_Group_ID as res_appointment_group_id,ag.Abbreviation as appt_gp_abbreviation,\nag.Description as appt_gp_description,r.Practitioner_ID as res_practitioner_id,\np.Practitioner_ID as prac_practitioner_id,\np.Is_Ref_Source,p.Is_Physician,p.Abbreviation as prac_abbreviation,\nUPPER(p.First_Name) First_Name,upper(p.Last_Name) Last_Name,p.Sex,p.Street1,p.City,p.State,p.Zip_Code,p.Phone,p.Phone_Ext,\np.Fax_Number,p.UPIN,p.Specialty_ID,p.Is_Non_Person,p.Specialty_ID spec_Specialty_Id,s.Abbreviation spec_abbreviation,s.Description spec_description,\np.Is_Mid_Level,p.Is_Mid_Level_PA,\np.Inactivation_Date,p.Is_Locum_Tenan\nfrom [PM].[Resources] r \nleft join [PM].[Practitioners] p on r.Practitioner_ID=p.Practitioner_ID\nleft join [PM].[Specialties] s on p.Specialty_ID=s.Specialty_ID\nLEFT JOIN [PM].[Appointment_Groups] ag on r.Appointment_Group_ID=ag.Appointment_Group_ID\nwhere r.Description not like 'zz%' and r.Description not like 'CM%'\nand r.Description not like 'super%' and r.Description not like 'blue%'\nand r.Description not like 'bella%' and r.Description not like 'surg%'\nand r.Description not like 'uop' and r.Description not like 'Tin%'\nand r.Description not like 'dunc%' and p.Inactivation_Date is null\nand r.Description not like 'prior%'\nand r.Description not like 'chee%' and r.Description not like 'PA,%'\nand r.Description not like 'PharmD - Sabbagh, Hussein' and r.Description  not like'%event%'\n)\n \nSELECT \n    a.Available_Date,a.Start_Time,a.End_Time,a.Resource_Abbr,a.Resource_Desc,a.Resource_ID,a.Activity_Type_Abbr,a.Sched_Dept_Abbr,\n\ta.Sched_Loc_Abbr,a.Scheduling_Location_ID,s.Abbreviation,s.Description,s.Location_ID,\n\ta.BookableAppt,b.Patient_ID,b.Patient_Number,b.Appt_Status,\n\tr.*\nFROM \n    sched_appt_avail a\nLEFT JOIN \n    scheduled_appt_slots b \n    ON a.Available_Date = CAST(b.Appt_DateTime AS DATE)\n    AND a.Start_Time = DATEPART(HOUR, b.Appt_DateTime) * 100 + DATEPART(MINUTE, b.Appt_DateTime) \n    AND a.Resource_ID = b.Appt_Resource_ID\nLEFT JOIN res_pract_info r ON r.res_resource_id=a.Resource_ID\nleft join [Ntier_EPIC].[PM].[Scheduling_Locations] s on s.Scheduling_Location_ID=a.Scheduling_Location_ID\nleft join only_x_as_option o on a.Available_Date = CAST(o.Appt_DateTime AS DATE)\n    AND a.Start_Time = DATEPART(HOUR, o.Appt_DateTime) * 100 + DATEPART(MINUTE, o.Appt_DateTime) \n    AND a.Resource_ID = o.Appt_Resource_ID\nWHERE \n    b.Patient_ID IS NULL  -- Only show slots with no booked appointment\n    AND a.BookableAppt = 'BookableSlot' or o.Bookable_Status = 'Bookable'\n\tand \tr.res_appointment_group_id  in ('42','79')\n\tand (s.Description not like 'z%' and ( s.Description like 'EPIC%' or s.Description like 'DIAG%')and s.Description not in ('DIAG Eastpointe Kelly','DIAG Westland','EPIC Billing Office','EPIC Events','EPIC HS ADMIN','EPIC Events','EPIC Billing Office','EPIC Westland Palmer','EPIC Wyandotte Biddle','EPIC Care Management','EPIC Eastpointe Kelly','EPIC Southfield Greenfield'))\nORDER BY a.Resource_Desc;"
      },
      "id": "554383fc-6d5c-4f07-b70e-e6d4c33841e2",
      "name": "PM P-CARE3",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        2480,
        1520
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @RES VARCHAR(50) = '%%';\nDECLARE @LOC VARCHAR(250) = '';\nDECLARE @APPT_TYPE VARCHAR(250) = '';\nDECLARE @STARTDATE DATE = '{{ $('dateRange').item.json.startDate }}';\nDECLARE @ENDDATE DATE = '{{ $('dateRange').item.json.endDate }}'; \n \n\n \nWITH sched_appt_avail AS (\n    SELECT  \n        s.[Available_Date],\n        s.[Start_Time],\n        s.[End_Time],\n        s.[Sched_Loc_Abbr],\n        s.[Sched_Dept_Abbr],\n        s.[Resource_Desc],\n        s.[Resource_Abbr],\n        s.[Activity_Type_Abbr],\n        s.Resource_ID,\n        s.Scheduling_Location_ID,\n        CASE WHEN s.Booking_Factor = 1 THEN 'BookableSlot' END AS BookableAppt\n    FROM [PM].[vwApptSchedAvail] s\n    WHERE s.Available_Date BETWEEN @STARTDATE AND @ENDDATE\n      AND s.Resource_Abbr NOT LIKE 'PALAB'\n      AND s.Activity_Type_Abbr NOT LIKE 'BREAK'\n      AND s.Activity_Type_Abbr NOT LIKE 'lunch'\n      AND s.Activity_Type_Abbr NOT LIKE 'Blocked'\n     -- AND s.Resource_Desc = @RES\n),\nscheduled_appt_slots AS (\n    SELECT \n        p.[Patient_ID],\n        p.[Patient_Number],\n        p.[Appt_ID],\n        p.[Appt_DateTime],\n        p.[Appt_Resource_ID],\n        p.[Appt_Status],\n        CASE WHEN p.Patient_ID IS NOT NULL THEN 'BookedAppt' END AS BookedAppt\n    FROM [Ntier_EPIC].[PM].[vwGenPatApptInfo] p\n    WHERE CAST(p.Appt_DateTime AS DATE) BETWEEN @STARTDATE AND @ENDDATE\n      --AND p.Appt_Resource_Descr= @RES\n),\nres_pract_info as(\nselect \nr.Resource_ID as res_resource_id,r.Abbreviation as res_abbreviation,r.Description as res_description,r.Appointment_Group_ID as res_appointment_group_id,ag.Abbreviation as appt_gp_abbreviation,\nag.Description as appt_gp_description,r.Practitioner_ID as res_practitioner_id,\np.Practitioner_ID as prac_practitioner_id,\np.Is_Ref_Source,p.Is_Physician,p.Abbreviation as prac_abbreviation,\nUPPER(p.First_Name) First_Name,upper(p.Last_Name) Last_Name,p.Sex,p.Street1,p.City,p.State,p.Zip_Code,p.Phone,p.Phone_Ext,\np.Fax_Number,p.UPIN,p.Specialty_ID,p.Is_Non_Person,p.Specialty_ID spec_Specialty_Id,s.Abbreviation spec_abbreviation,s.Description spec_description,\np.Is_Mid_Level,p.Is_Mid_Level_PA,\np.Inactivation_Date,p.Is_Locum_Tenan\nfrom [PM].[Resources] r \nleft join [PM].[Practitioners] p on r.Practitioner_ID=p.Practitioner_ID\nleft join [PM].[Specialties] s on p.Specialty_ID=s.Specialty_ID\nLEFT JOIN [PM].[Appointment_Groups] ag on r.Appointment_Group_ID=ag.Appointment_Group_ID\nwhere r.Description not like 'zz%' and r.Description not like 'CM%'\nand r.Description not like 'super%' and r.Description not like 'blue%'\nand r.Description not like 'bella%' and r.Description not like 'surg%'\nand r.Description not like 'uop' and r.Description not like 'Tin%'\nand r.Description not like 'dunc%' and p.Inactivation_Date is null\nand r.Description not like 'prior%'\nand r.Description not like 'chee%' and r.Description not like 'PA,%'\nand r.Description not like 'PharmD - Sabbagh, Hussein' and r.Description  not like'%event%'\n)\nSELECT \n    a.Available_Date,a.Start_Time,a.End_Time,a.Resource_Abbr,a.Resource_Desc,a.Resource_ID,a.Activity_Type_Abbr,a.Sched_Dept_Abbr,\n\ta.Sched_Loc_Abbr,a.Scheduling_Location_ID,s.Abbreviation,s.Description,s.Location_ID,\n\ta.BookableAppt,\n\tr.*\nFROM \n    sched_appt_avail a\nLEFT JOIN \n    scheduled_appt_slots b \n    ON a.Available_Date = CAST(b.Appt_DateTime AS DATE)\n    AND a.Start_Time = DATEPART(HOUR, b.Appt_DateTime) * 100 + DATEPART(MINUTE, b.Appt_DateTime) \n    AND a.Resource_ID = b.Appt_Resource_ID\nLEFT JOIN res_pract_info r ON r.res_resource_id=a.Resource_ID\nleft join [Ntier_EPIC].[PM].[Scheduling_Locations] s on s.Scheduling_Location_ID=a.Scheduling_Location_ID\n \nWHERE \n    b.Patient_ID IS NULL  -- Only show slots with no booked appointment\n    AND a.BookableAppt = 'BookableSlot'\n\tand r.res_appointment_group_id  in ('42','79')\n\tand (s.Description not like 'z%' and ( s.Description like 'EPIC%' or s.Description like 'DIAG%')and s.Description not in ('DIAG Eastpointe Kelly','DIAG Westland','EPIC Billing Office','EPIC Events','EPIC HS ADMIN','EPIC Events','EPIC Billing Office','EPIC Westland Palmer','EPIC Wyandotte Biddle','EPIC Care Management','EPIC Eastpointe Kelly','EPIC Southfield Greenfield'))\nORDER BY a.Available_Date, a.Start_Time;"
      },
      "id": "88d341ce-bafc-47f3-aa87-c1efec2e68ee",
      "name": "PM P-CARE4",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        2920,
        1380
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Retrieve external modal contents (if any) and the appointments array from the incoming JSON.\nconst providerContentVar = $json[\"providerContent\"] || '';\nconst dateRangeContentVar = $json[\"dateRangeContent\"] || '';\nconst appointmentsArr = $json[\"data\"] || [];\n\n// Derive unique locations from the appointments data (using the location_description field)\n// Ensure it works whether location_description is a string or an array\nconst uniqueLocations = [...new Set(appointmentsArr.flatMap(item => {\n  // Check if location_description is an array or string and handle accordingly\n  return Array.isArray(item.location_description) ? item.location_description : [item.location_description];\n}))].filter(x => x && x.trim() !== '');  // Apply trim on the resulting string\n\n// Derive unique providers from the appointments data (using the provider_name field)\n// and sort them alphabetically\nconst uniqueProviders = [...new Set(appointmentsArr.map(item => item.provider_name))]\n  .filter(x => x && x.trim() !== '')\n  .sort((a, b) => a.localeCompare(b));\n\n// Build dynamic location modal content with a modern, friendly UI.\nconst locationContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Locations</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please search and select your preferred locations:</p>\n  <input type=\"text\" id=\"locationSearch\" placeholder=\"Search locations...\" oninput=\"filterLocations()\"\n    style=\"width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px;\">\n  <div id=\"locationList\" style=\"max-height: 200px; overflow-y: auto; margin-bottom: 10px;\">\n    ${uniqueLocations\n      .map(option => `\n        <div class=\"location-item\" style=\"padding: 6px 0; border-bottom: 1px solid #eee;\">\n          <label style=\"cursor: pointer; display: block; font-family: Arial, sans-serif;\">\n            <input type=\"checkbox\" class=\"location-checkbox\" value=\"${option}\" style=\"margin-right: 8px;\"> ${option}\n          </label>\n        </div>\n      `)\n      .join('')}\n  </div>\n  <button class=\"button-modern\" onclick=\"handleLocationChange()\">Apply Filters</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetLocations()\">Reset Locations</button>\n`;\nconst locationContent = locationContentNew;\n\n// Build dynamic provider modal content with a modern, friendly UI.\nconst providerContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Provider</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please select your preferred provider:</p>\n  <select id=\"providerDropdown\" style=\"width:100%; padding:8px; margin-bottom:10px; border:1px solid #ccc; border-radius:4px;\">\n    <option value=\"\">-- Select a Provider --</option>\n    ${uniqueProviders.map(provider => `<option value=\"${provider}\">${provider}</option>`).join('')}\n  </select>\n  <button class=\"button-modern\" onclick=\"handleProviderChange()\">Apply Provider</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetProvider()\">Reset Provider</button>\n`;\nconst providerContent = providerContentNew;\n\n// Convert appointments data to a JSON string for use in the HTML.\nconst appointmentsData = JSON.stringify(appointmentsArr);\n\n// Build the full HTML content.\nconst html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Schedule</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      overflow: hidden;\n      font-family: Arial, sans-serif;\n    }\n    .modal-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(0,0,0,0.5);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 9999;\n    }\n    .modal {\n      background-color: white;\n      padding: 20px;\n      border-radius: 8px;\n      width: 300px;\n      position: relative;\n      max-height: 90vh;\n      overflow-y: auto;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n    }\n    .close-button {\n      position: absolute;\n      top: 10px; right: 10px;\n      cursor: pointer;\n      font-size: 16px;\n      color: #333;\n    }\n    .modal button {\n      padding: 10px;\n      margin-bottom: 10px;\n      width: 100%;\n      background-color: #3b82f6;\n      color: #fff;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 16px;\n    }\n    .modal button:hover {\n      background-color: #2563eb;\n    }\n    .loader-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(255,255,255,0.8);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 99999;\n    }\n    .loader {\n      border: 8px solid #f3f3f3;\n      border-top: 8px solid #3b82f6;\n      border-radius: 50%;\n      width: 60px;\n      height: 60px;\n      animation: spin 1s linear infinite;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    .header-controls {\n      display: flex;\n      justify-content: space-around;\n      border: 1px solid #ccc;\n      padding: 8px;\n      border-radius: 4px;\n      margin-bottom: 8px;\n    }\n    .header-controls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    .header-controls button:hover {\n      background-color: #f0f0f0;\n    }\n    #searchInput {\n      width: 100%;\n      padding: 8px;\n      margin-bottom: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    .table-responsive {\n      max-height: 50vh;\n      overflow-y: auto;\n      border-radius: 8px;\n      border: 1px solid #e5e7eb;\n      overflow-x: auto;\n      padding: 8px;\n      box-sizing: border-box;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      background-color: #ffffff;\n      font-size: 14px;\n      line-height: 1.4em;\n    }\n    thead tr {\n      position: sticky;\n      top: 0;\n      background-color: #000;\n      z-index: 1;\n    }\n    thead th {\n      padding: 12px;\n      text-align: left;\n      font-weight: bold;\n      color: #fff;\n      font-size: 14px;\n      cursor: pointer;\n      border-bottom: 1px solid #d1d5db;\n    }\n    tbody tr:hover {\n      background-color: #f9fafb;\n    }\n    tbody td {\n      padding: 12px;\n      color: #4b5563;\n      font-size: 14px;\n      border-top: 1px solid #e5e7eb;\n      vertical-align: middle;\n    }\n    tbody td button {\n      padding: 8px 16px;\n      background-color: #f59e0b;\n      color: #000;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    tbody td button:hover {\n      background-color: #d97706;\n    }\n    #paginationControls {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 8px;\n    }\n    #paginationControls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    #paginationControls button:hover {\n      background-color: #f0f0f0;\n    }\n    #showAllButton {\n      margin-top: 10px;\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      width: 100%;\n      font-size: 14px;\n    }\n    #showAllButton:hover {\n      background-color: #f0f0f0;\n    }\n    @media (max-width: 600px) {\n      .modal {\n        width: 95%;\n        padding: 10px;\n        max-height: 90vh;\n        overflow-y: auto;\n      }\n    }\n    /* Modern button styling for the modals' apply buttons */\n    .button-modern {\n      width: 100%;\n      padding: 12px;\n      background: linear-gradient(90deg, #4f46e5, #3b82f6);\n      color: #fff;\n      border: none;\n      border-radius: 8px;\n      font-size: 16px;\n      cursor: pointer;\n      font-family: Arial, sans-serif;\n      transition: background 0.3s ease;\n      box-shadow: 0px 4px 6px rgba(0,0,0,0.1);\n    }\n    .button-modern:hover {\n      background: linear-gradient(90deg, #3b82f6, #2563eb);\n    }\n  </style>\n</head>\n<body>\n  <div style=\"background-image: url('https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png');\n              background-size: cover;\n              background-position: center;\n              height: 100vh;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              overflow: hidden;\">\n    <div style=\"max-width: 900px;\n                width: 100%;\n                background-color: rgba(255,255,255,0.9);\n                padding: 16px;\n                border-radius: 8px;\n                box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n                overflow: hidden;\">\n      <h2 style=\"text-align: center; margin: 8px 0; font-size: 20px; color: #111827;\">Change Search Options</h2>\n      <div class=\"header-controls\">\n        <button onclick=\"openModal(locationContent)\">Location</button>\n        <button onclick=\"openModal(providerContent)\">Provider</button>\n        <button onclick=\"openModal(dateRangeContent)\">Date Range</button>\n      </div>\n      <input type=\"text\" id=\"searchInput\" placeholder=\"Search...\">\n      <div class=\"table-responsive\">\n        <table>\n          <thead>\n            <tr>\n              <th onclick=\"sortTable('location_description')\">Location</th>\n              <th onclick=\"sortTable('provider_name')\">Provider</th>\n              <th onclick=\"sortTable('day')\">Day</th>\n              <th onclick=\"sortTable('date')\">Date</th>\n              <th onclick=\"sortTable('start')\">Time</th>\n              <th style=\"text-align: center;\">Schedule</th>\n            </tr>\n          </thead>\n          <tbody id=\"appointmentTableBody\">\n            <!-- Rows inserted by JavaScript -->\n          </tbody>\n        </table>\n      </div>\n      <div id=\"paginationControls\">\n        <button onclick=\"prevPage()\">Previous</button>\n        <span id=\"pageIndicator\" style=\"font-size: 14px; color: #374151;\">Page 1</span>\n        <button onclick=\"nextPage()\">Next</button>\n      </div>\n      <button onclick=\"toggleShowAll()\" id=\"showAllButton\">Show All</button>\n    </div>\n  </div>\n  <div id=\"modalOverlay\" class=\"modal-overlay\" onclick=\"closeModal()\">\n    <div class=\"modal\" onclick=\"event.stopPropagation()\">\n      <span class=\"close-button\" onclick=\"closeModal()\">x</span>\n      <div id=\"modalContent\">Modal Content</div>\n    </div>\n  </div>\n  <div id=\"loaderOverlay\" class=\"loader-overlay\">\n    <div class=\"loader\"></div>\n  </div>\n  <script>\n    // Embed modal content using JSON.stringify to safely escape characters.\n    const providerContent = ${JSON.stringify(providerContentNew)};\n    const dateRangeContent = ${JSON.stringify(dateRangeContentVar)};\n    const locationContent = ${JSON.stringify(locationContent)};\n    const appointments = ${appointmentsData};\n    \n    // Sort appointments by date and start time.\n    appointments.sort((a, b) => new Date(a.date + ' ' + a.start) - new Date(b.date + ' ' + b.start));\n    \n    const appointmentMap = {};\n    let currentPage = 1;\n    const rowsPerPage = 8;\n    let filteredAppointments = appointments.slice();\n    let showingAll = false;\n    let sortOrder = {};\n    let selectedLocation = '';\n    let selectedProvider = '';\n    \n    // Read URL parameters.\n    const urlParams = new URLSearchParams(window.location.search);\n    selectedLocation = urlParams.get('location') || '';\n    selectedProvider = urlParams.get('provider') || '';\n    \n    function applyFilters() {\n      filteredAppointments = appointments.slice();\n      if (selectedLocation) {\n        const selectedArray = selectedLocation.split(',').map(item => item.trim());\n        filteredAppointments = filteredAppointments.filter(app => \n          selectedArray.some(location => app.location_description.includes(location))\n        );\n      }\n      if (selectedProvider) {\n        filteredAppointments = filteredAppointments.filter(app => app.provider_name === selectedProvider);\n      }\n      currentPage = 1; // Reset currentPage so that pagination works correctly after filtering\n      renderTable(currentPage);\n    }\n    applyFilters();\n    \n    function openModal(content) {\n      document.getElementById('modalOverlay').style.display = 'flex';\n      document.getElementById('modalContent').innerHTML = content;\n      if(content === locationContent) {\n        setTimeout(setCheckedLocations, 0);\n      }\n      if(content === providerContent) {\n        setTimeout(setProviderDropdown, 0);\n      }\n    }\n    function closeModal() {\n      document.getElementById('modalOverlay').style.display = 'none';\n    }\n    \n    // Location functions\n    function handleLocationChange() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      const selected = [];\n      checkboxes.forEach(cb => {\n        if (cb.checked) { selected.push(cb.value); }\n      });\n      selectedLocation = selected.join(',');\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedLocation) { \n        urlParams.set('location', selectedLocation); \n      } else { \n        urlParams.delete('location'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setCheckedLocations() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const locParam = urlParams.get('location') || '';\n      if (locParam) {\n        const selectedArr = locParam.split(',').map(item => item.trim());\n        const checkboxes = document.querySelectorAll('.location-checkbox');\n        checkboxes.forEach(cb => {\n          if (selectedArr.includes(cb.value)) {\n            cb.checked = true;\n          }\n        });\n      }\n    }\n    \n    function resetLocations() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      checkboxes.forEach(cb => cb.checked = false);\n      selectedLocation = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('location');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function filterLocations() {\n      const filter = document.getElementById('locationSearch').value.toLowerCase();\n      const items = document.querySelectorAll('.location-item');\n      items.forEach(item => {\n        item.style.display = (item.textContent.toLowerCase().indexOf(filter) > -1) ? '' : 'none';\n      });\n    }\n    \n    // Provider functions\n    function handleProviderChange() {\n      selectedProvider = document.getElementById('providerDropdown').value;\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedProvider) { \n        urlParams.set('provider', selectedProvider); \n      } else { \n        urlParams.delete('provider'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setProviderDropdown() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const providerParam = urlParams.get('provider') || '';\n      if (providerParam) {\n        const dropdown = document.getElementById('providerDropdown');\n        if (dropdown) {\n          dropdown.value = providerParam;\n        }\n      }\n    }\n    \n    function resetProvider() {\n      const dropdown = document.getElementById('providerDropdown');\n      if (dropdown) {\n        dropdown.value = \"\";\n      }\n      selectedProvider = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('provider');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    // Date Range functions\n    function confirmDateRange() {\n      const startDate = document.getElementById('startDate').value;\n      const endDate = document.getElementById('endDate').value;\n      if (startDate && endDate) {\n        closeModal();\n        showLoader();\n        const url = new URL(window.location.href);\n        url.searchParams.set(\"startDate\", startDate);\n        url.searchParams.set(\"endDate\", endDate);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert(\"Please select both start and end dates.\");\n      }\n    }\n    \n    // New function: when a date range button (e.g., 1-3 days) is clicked.\n    function handleDateRangeSelection(rangeOption) {\n      closeModal();\n      showLoader();\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.set('dateRange', rangeOption);\n      setTimeout(() => { window.location.search = urlParams.toString(); }, 100);\n    }\n    \n    // ----------------------------\n    // Other functions\n    // ----------------------------\n    \n    function generateTableRows(data) {\n      return data.map((appointment, index) => {\n        const appointmentId = 'appointment' + index;\n        appointmentMap[appointmentId] = appointment;\n        let locationDisplay = Array.isArray(appointment.location_description) \n          ? appointment.location_description.join(', ') \n          : appointment.location_description || ''; // Handle array join for location description\n        if (locationDisplay.toLowerCase().includes('video')) {\n          locationDisplay = '📹 ' + locationDisplay;\n        }\n        return \\`\n          <tr>\n            <td data-label=\"Location\">\\${locationDisplay}</td>\n            <td data-label=\"Provider\">\\${appointment.provider_name || ''}</td>\n            <td data-label=\"Day\">\\${appointment.day || ''}</td>\n            <td data-label=\"Date\">\\${appointment.date || ''}</td>\n            <td data-label=\"Time\">\\${appointment.start || ''}</td>\n            <td data-label=\"Schedule\" style=\"text-align:center;\">\n              <button onclick=\"scheduleAppointment('\\${appointmentId}')\">Schedule</button>\n            </td>\n          </tr>\\`;\n      }).join('');\n    }\n    \n    function scheduleAppointment(appointmentId) {\n      const appointment = appointmentMap[appointmentId];\n      if (appointment) {\n        showLoader();\n        const appointmentData = encodeURIComponent(JSON.stringify(appointment));\n        const url = new URL(window.location.href);\n        url.searchParams.set('schedule', appointmentData);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert('Appointment data not found.');\n      }\n    }\n    \n    function renderTable(page) {\n      if (filteredAppointments.length === 0) {\n        document.getElementById('appointmentTableBody').innerHTML = '<tr><td colspan=\"6\" style=\"text-align:center; padding:16px; color:#6b7280;\">No appointments available.</td></tr>';\n        document.getElementById('paginationControls').style.display = 'none';\n        return;\n      }\n      const start = (page - 1) * rowsPerPage;\n      const end = page * rowsPerPage;\n      const dataToRender = showingAll ? filteredAppointments : filteredAppointments.slice(start, end);\n      document.getElementById('appointmentTableBody').innerHTML = generateTableRows(dataToRender);\n      document.getElementById('pageIndicator').textContent = showingAll ? 'Showing All Results' : \\`Page \\${page}\\`;\n      document.getElementById('paginationControls').style.display = (filteredAppointments.length > rowsPerPage && !showingAll) ? 'flex' : 'none';\n    }\n    \n    function sortTable(field) {\n      sortOrder[field] = sortOrder[field] === 'asc' ? 'desc' : 'asc';\n      filteredAppointments.sort((a, b) => {\n        if (field === 'date' || field === 'start') {\n          const dateA = new Date(a.date + ' ' + a.start);\n          const dateB = new Date(b.date + ' ' + b.start);\n          return sortOrder[field] === 'asc' ? dateA - dateB : dateB - dateA;\n        }\n        return sortOrder[field] === 'asc'\n          ? (a[field] || '').localeCompare(b[field] || '')\n          : (b[field] || '').localeCompare(a[field] || '');\n      });\n      renderTable(1);\n      currentPage = 1;\n    }\n    \n    function searchAppointments() {\n      const query = document.getElementById('searchInput').value.toLowerCase();\n      filteredAppointments = appointments.filter(app =>\n        (Array.isArray(app.location_description) ? app.location_description.join(', ') : app.location_description || '').toLowerCase().includes(query) ||\n        (app.provider_name || '').toLowerCase().includes(query) ||\n        (app.date || '').includes(query) ||\n        (app.start || '').includes(query)\n      );\n      renderTable(1);\n      currentPage = 1;\n    }\n    \n    function nextPage() {\n      if (currentPage < Math.ceil(filteredAppointments.length / rowsPerPage)) {\n        currentPage++;\n        renderTable(currentPage);\n      }\n    }\n    \n    function prevPage() {\n      if (currentPage > 1) {\n        currentPage--;\n        renderTable(currentPage);\n      }\n    }\n    \n    function toggleShowAll() {\n      showingAll = !showingAll;\n      document.getElementById('showAllButton').textContent = showingAll ? 'Collapse All' : 'Show All';\n      renderTable(currentPage);\n    }\n    \n    function showLoader() {\n      document.getElementById('loaderOverlay').style.display = 'flex';\n    }\n    \n    function hideLoader() {\n      document.getElementById('loaderOverlay').style.display = 'none';\n    }\n    \n    document.addEventListener('DOMContentLoaded', () => { hideLoader(); });\n    window.addEventListener('popstate', () => { hideLoader(); });\n    window.addEventListener('pageshow', (event) => { if (event.persisted) { hideLoader(); } });\n    document.getElementById('searchInput').addEventListener('input', searchAppointments);\n    \n    // Expose functions to the global scope.\n    window.openModal = openModal;\n    window.closeModal = closeModal;\n    window.handleLocationChange = handleLocationChange;\n    window.filterLocations = filterLocations;\n    window.resetLocations = resetLocations;\n    window.handleProviderChange = handleProviderChange;\n    window.setProviderDropdown = setProviderDropdown;\n    window.resetProvider = resetProvider;\n    window.handleDateRangeSelection = handleDateRangeSelection;\n    window.sortTable = sortTable;\n    window.nextPage = nextPage;\n    window.prevPage = prevPage;\n    window.toggleShowAll = toggleShowAll;\n    window.scheduleAppointment = scheduleAppointment;\n    window.confirmDateRange = confirmDateRange;\n    \n    // Initial table render.\n    renderTable(currentPage);\n  </script>\n</body>\n</html>\n`;\n\n// Return the HTML content from the Code node.\nreturn [{ htmlContent: html }];\n"
      },
      "id": "10374928-696b-4f9d-a488-0c3f9068ba00",
      "name": "Code69",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3940,
        1460
      ]
    },
    {
      "parameters": {
        "path": "428fa459-042d-4b42-8116-088ac90153d4",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1320,
        1640
      ],
      "id": "714a2136-f7dc-4bc6-ad22-fa1be0470226",
      "name": "Webhook",
      "webhookId": "428fa459-042d-4b42-8116-088ac90153d4"
    },
    {
      "parameters": {
        "jsCode": "// Retrieve external modal contents (if any) and the appointments array from the incoming JSON.\nconst providerContentVar = $json[\"providerContent\"] || '';\nconst dateRangeContentVar = $json[\"dateRangeContent\"] || '';\nconst appointmentsArr = $json[\"data\"] || [];\n\n// Derive unique locations from the appointments data (using the location_description field)\n// Ensure it works whether location_description is a string or an array\nconst uniqueLocations = [...new Set(appointmentsArr.flatMap(item => {\n  // Check if location_description is an array or string and handle accordingly\n  return Array.isArray(item.location_description) ? item.location_description : [item.location_description];\n}))].filter(x => x && x.trim() !== '');  // Apply trim on the resulting string\n\n// Derive unique providers from the appointments data (using the provider_name field)\n// and sort them alphabetically\nconst uniqueProviders = [...new Set(appointmentsArr.map(item => item.provider_name))]\n  .filter(x => x && x.trim() !== '')\n  .sort((a, b) => a.localeCompare(b));\n\n// Build dynamic location modal content with a modern, friendly UI.\nconst locationContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Locations</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please search and select your preferred locations:</p>\n  <input type=\"text\" id=\"locationSearch\" placeholder=\"Search locations...\" oninput=\"filterLocations()\"\n    style=\"width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px;\">\n  <div id=\"locationList\" style=\"max-height: 200px; overflow-y: auto; margin-bottom: 10px;\">\n    ${uniqueLocations\n      .map(option => `\n        <div class=\"location-item\" style=\"padding: 6px 0; border-bottom: 1px solid #eee;\">\n          <label style=\"cursor: pointer; display: block; font-family: Arial, sans-serif;\">\n            <input type=\"checkbox\" class=\"location-checkbox\" value=\"${option}\" style=\"margin-right: 8px;\"> ${option}\n          </label>\n        </div>\n      `)\n      .join('')}\n  </div>\n  <button class=\"button-modern\" onclick=\"handleLocationChange()\">Apply Filters</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetLocations()\">Reset Locations</button>\n`;\nconst locationContent = locationContentNew;\n\n// Build dynamic provider modal content with a modern, friendly UI.\nconst providerContentNew = `\n  <h3 style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Choose Your Provider</h3>\n  <p style=\"margin-bottom: 10px; font-family: Arial, sans-serif;\">Please select your preferred provider:</p>\n  <select id=\"providerDropdown\" style=\"width:100%; padding:8px; margin-bottom:10px; border:1px solid #ccc; border-radius:4px;\">\n    <option value=\"\">-- Select a Provider --</option>\n    ${uniqueProviders.map(provider => `<option value=\"${provider}\">${provider}</option>`).join('')}\n  </select>\n  <button class=\"button-modern\" onclick=\"handleProviderChange()\">Apply Provider</button>\n  <button class=\"button-modern\" style=\"background: #f44336; margin-top: 8px;\" onclick=\"resetProvider()\">Reset Provider</button>\n`;\nconst providerContent = providerContentNew;\n\n// Convert appointments data to a JSON string for use in the HTML.\nconst appointmentsData = JSON.stringify(appointmentsArr);\n\n// Build the full HTML content.\nconst html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Schedule</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      overflow: hidden;\n      font-family: Arial, sans-serif;\n    }\n    .modal-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(0,0,0,0.5);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 9999;\n    }\n    .modal {\n      background-color: white;\n      padding: 20px;\n      border-radius: 8px;\n      width: 300px;\n      position: relative;\n      max-height: 90vh;\n      overflow-y: auto;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n    }\n    .close-button {\n      position: absolute;\n      top: 10px; right: 10px;\n      cursor: pointer;\n      font-size: 16px;\n      color: #333;\n    }\n    .modal button {\n      padding: 10px;\n      margin-bottom: 10px;\n      width: 100%;\n      background-color: #3b82f6;\n      color: #fff;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 16px;\n    }\n    .modal button:hover {\n      background-color: #2563eb;\n    }\n    .loader-overlay {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(255,255,255,0.8);\n      display: none;\n      justify-content: center;\n      align-items: center;\n      z-index: 99999;\n    }\n    .loader {\n      border: 8px solid #f3f3f3;\n      border-top: 8px solid #3b82f6;\n      border-radius: 50%;\n      width: 60px;\n      height: 60px;\n      animation: spin 1s linear infinite;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    .header-controls {\n      display: flex;\n      justify-content: space-around;\n      border: 1px solid #ccc;\n      padding: 8px;\n      border-radius: 4px;\n      margin-bottom: 8px;\n    }\n    .header-controls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    .header-controls button:hover {\n      background-color: #f0f0f0;\n    }\n    #searchInput {\n      width: 100%;\n      padding: 8px;\n      margin-bottom: 8px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    .table-responsive {\n      max-height: 50vh;\n      overflow-y: auto;\n      border-radius: 8px;\n      border: 1px solid #e5e7eb;\n      overflow-x: auto;\n      padding: 8px;\n      box-sizing: border-box;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      background-color: #ffffff;\n      font-size: 14px;\n      line-height: 1.4em;\n    }\n    thead tr {\n      position: sticky;\n      top: 0;\n      background-color: #000;\n      z-index: 1;\n    }\n    thead th {\n      padding: 12px;\n      text-align: left;\n      font-weight: bold;\n      color: #fff;\n      font-size: 14px;\n      cursor: pointer;\n      border-bottom: 1px solid #d1d5db;\n    }\n    tbody tr:hover {\n      background-color: #f9fafb;\n    }\n    tbody td {\n      padding: 12px;\n      color: #4b5563;\n      font-size: 14px;\n      border-top: 1px solid #e5e7eb;\n      vertical-align: middle;\n    }\n    tbody td button {\n      padding: 8px 16px;\n      background-color: #f59e0b;\n      color: #000;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    tbody td button:hover {\n      background-color: #d97706;\n    }\n    #paginationControls {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 8px;\n    }\n    #paginationControls button {\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    }\n    #paginationControls button:hover {\n      background-color: #f0f0f0;\n    }\n    #showAllButton {\n      margin-top: 10px;\n      padding: 8px 12px;\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #000;\n      border-radius: 4px;\n      cursor: pointer;\n      width: 100%;\n      font-size: 14px;\n    }\n    #showAllButton:hover {\n      background-color: #f0f0f0;\n    }\n    @media (max-width: 600px) {\n      .modal {\n        width: 95%;\n        padding: 10px;\n        max-height: 90vh;\n        overflow-y: auto;\n      }\n    }\n    /* Modern button styling for the modals' apply buttons */\n    .button-modern {\n      width: 100%;\n      padding: 12px;\n      background: linear-gradient(90deg, #4f46e5, #3b82f6);\n      color: #fff;\n      border: none;\n      border-radius: 8px;\n      font-size: 16px;\n      cursor: pointer;\n      font-family: Arial, sans-serif;\n      transition: background 0.3s ease;\n      box-shadow: 0px 4px 6px rgba(0,0,0,0.1);\n    }\n    .button-modern:hover {\n      background: linear-gradient(90deg, #3b82f6, #2563eb);\n    }\n  </style>\n</head>\n<body>\n  <div style=\"background-image: url('https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png');\n              background-size: cover;\n              background-position: center;\n              height: 100vh;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              overflow: hidden;\">\n    <div style=\"max-width: 900px;\n                width: 100%;\n                background-color: rgba(255,255,255,0.9);\n                padding: 16px;\n                border-radius: 8px;\n                box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n                overflow: hidden;\">\n      <h2 style=\"text-align: center; margin: 8px 0; font-size: 20px; color: #111827;\">Change Search Options</h2>\n      <div class=\"header-controls\">\n        <button onclick=\"openModal(locationContent)\">Location</button>\n        <button onclick=\"openModal(providerContent)\">Provider</button>\n        <button onclick=\"openModal(dateRangeContent)\">Date Range</button>\n      </div>\n      <input type=\"text\" id=\"searchInput\" placeholder=\"Search...\">\n      <div class=\"table-responsive\">\n        <table>\n          <thead>\n            <tr>\n              <th onclick=\"sortTable('location_description')\">Location</th>\n              <th onclick=\"sortTable('provider_name')\">Provider</th>\n              <th onclick=\"sortTable('day')\">Day</th>\n              <th onclick=\"sortTable('date')\">Date</th>\n              <th onclick=\"sortTable('start')\">Time</th>\n              <th style=\"text-align: center;\">Schedule</th>\n            </tr>\n          </thead>\n          <tbody id=\"appointmentTableBody\">\n            <!-- Rows inserted by JavaScript -->\n          </tbody>\n        </table>\n      </div>\n      <div id=\"paginationControls\">\n        <button onclick=\"prevPage()\">Previous</button>\n        <span id=\"pageIndicator\" style=\"font-size: 14px; color: #374151;\">Page 1</span>\n        <button onclick=\"nextPage()\">Next</button>\n      </div>\n      <button onclick=\"toggleShowAll()\" id=\"showAllButton\">Show All</button>\n    </div>\n  </div>\n  <div id=\"modalOverlay\" class=\"modal-overlay\" onclick=\"closeModal()\">\n    <div class=\"modal\" onclick=\"event.stopPropagation()\">\n      <span class=\"close-button\" onclick=\"closeModal()\">x</span>\n      <div id=\"modalContent\">Modal Content</div>\n    </div>\n  </div>\n  <div id=\"loaderOverlay\" class=\"loader-overlay\">\n    <div class=\"loader\"></div>\n  </div>\n  <script>\n    // Embed modal content using JSON.stringify to safely escape characters.\n    const providerContent = ${JSON.stringify(providerContentNew)};\n    const dateRangeContent = ${JSON.stringify(dateRangeContentVar)};\n    const locationContent = ${JSON.stringify(locationContent)};\n    const appointments = ${appointmentsData};\n    \n    // Sort appointments by date and start time.\n    appointments.sort((a, b) => new Date(a.date + ' ' + a.start) - new Date(b.date + ' ' + b.start));\n    \n    const appointmentMap = {};\n    let currentPage = 1;\n    const rowsPerPage = 8;\n    let filteredAppointments = appointments.slice();\n    let showingAll = false;\n    let sortOrder = {};\n    let selectedLocation = '';\n    let selectedProvider = '';\n    \n    // Read URL parameters.\n    const urlParams = new URLSearchParams(window.location.search);\n    selectedLocation = urlParams.get('location') || '';\n    selectedProvider = urlParams.get('provider') || '';\n    \n    function applyFilters() {\n      filteredAppointments = appointments.slice();\n      if (selectedLocation) {\n        const selectedArray = selectedLocation.split(',').map(item => item.trim());\n        filteredAppointments = filteredAppointments.filter(app => \n          selectedArray.some(location => app.location_description.includes(location))\n        );\n      }\n      if (selectedProvider) {\n        filteredAppointments = filteredAppointments.filter(app => app.provider_name === selectedProvider);\n      }\n      currentPage = 1; // Reset currentPage so that pagination works correctly after filtering\n      renderTable(currentPage);\n    }\n    applyFilters();\n    \n    function openModal(content) {\n      document.getElementById('modalOverlay').style.display = 'flex';\n      document.getElementById('modalContent').innerHTML = content;\n      if(content === locationContent) {\n        setTimeout(setCheckedLocations, 0);\n      }\n      if(content === providerContent) {\n        setTimeout(setProviderDropdown, 0);\n      }\n    }\n    function closeModal() {\n      document.getElementById('modalOverlay').style.display = 'none';\n    }\n    \n    // Location functions\n    function handleLocationChange() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      const selected = [];\n      checkboxes.forEach(cb => {\n        if (cb.checked) { selected.push(cb.value); }\n      });\n      selectedLocation = selected.join(',');\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedLocation) { \n        urlParams.set('location', selectedLocation); \n      } else { \n        urlParams.delete('location'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setCheckedLocations() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const locParam = urlParams.get('location') || '';\n      if (locParam) {\n        const selectedArr = locParam.split(',').map(item => item.trim());\n        const checkboxes = document.querySelectorAll('.location-checkbox');\n        checkboxes.forEach(cb => {\n          if (selectedArr.includes(cb.value)) {\n            cb.checked = true;\n          }\n        });\n      }\n    }\n    \n    function resetLocations() {\n      const checkboxes = document.querySelectorAll('.location-checkbox');\n      checkboxes.forEach(cb => cb.checked = false);\n      selectedLocation = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('location');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function filterLocations() {\n      const filter = document.getElementById('locationSearch').value.toLowerCase();\n      const items = document.querySelectorAll('.location-item');\n      items.forEach(item => {\n        item.style.display = (item.textContent.toLowerCase().indexOf(filter) > -1) ? '' : 'none';\n      });\n    }\n    \n    // Provider functions\n    function handleProviderChange() {\n      selectedProvider = document.getElementById('providerDropdown').value;\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedProvider) { \n        urlParams.set('provider', selectedProvider); \n      } else { \n        urlParams.delete('provider'); \n      }\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    function setProviderDropdown() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const providerParam = urlParams.get('provider') || '';\n      if (providerParam) {\n        const dropdown = document.getElementById('providerDropdown');\n        if (dropdown) {\n          dropdown.value = providerParam;\n        }\n      }\n    }\n    \n    function resetProvider() {\n      const dropdown = document.getElementById('providerDropdown');\n      if (dropdown) {\n        dropdown.value = \"\";\n      }\n      selectedProvider = '';\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.delete('provider');\n      history.pushState(null, '', '?' + urlParams.toString());\n      applyFilters();\n      closeModal();\n    }\n    \n    // Date Range functions\n    function confirmDateRange() {\n      const startDate = document.getElementById('startDate').value;\n      const endDate = document.getElementById('endDate').value;\n      if (startDate && endDate) {\n        closeModal();\n        showLoader();\n        const url = new URL(window.location.href);\n        url.searchParams.set(\"startDate\", startDate);\n        url.searchParams.set(\"endDate\", endDate);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert(\"Please select both start and end dates.\");\n      }\n    }\n    \n    // New function: when a date range button (e.g., 1-3 days) is clicked.\n    function handleDateRangeSelection(rangeOption) {\n      closeModal();\n      showLoader();\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.set('dateRange', rangeOption);\n      setTimeout(() => { window.location.search = urlParams.toString(); }, 100);\n    }\n    \n    // ----------------------------\n    // Other functions\n    // ----------------------------\n    \n    function generateTableRows(data) {\n      return data.map((appointment, index) => {\n        const appointmentId = 'appointment' + index;\n        appointmentMap[appointmentId] = appointment;\n        let locationDisplay = Array.isArray(appointment.location_description) \n          ? appointment.location_description.join(', ') \n          : appointment.location_description || ''; // Handle array join for location description\n        if (locationDisplay.toLowerCase().includes('video')) {\n          locationDisplay = '📹 ' + locationDisplay;\n        }\n        return \\`\n          <tr>\n            <td data-label=\"Location\">\\${locationDisplay}</td>\n            <td data-label=\"Provider\">\\${appointment.provider_name || ''}</td>\n            <td data-label=\"Day\">\\${appointment.day || ''}</td>\n            <td data-label=\"Date\">\\${appointment.date || ''}</td>\n            <td data-label=\"Time\">\\${appointment.start || ''}</td>\n            <td data-label=\"Schedule\" style=\"text-align:center;\">\n              <button onclick=\"scheduleAppointment('\\${appointmentId}')\">Schedule</button>\n            </td>\n          </tr>\\`;\n      }).join('');\n    }\n    \n    function scheduleAppointment(appointmentId) {\n      const appointment = appointmentMap[appointmentId];\n      if (appointment) {\n        showLoader();\n        const appointmentData = encodeURIComponent(JSON.stringify(appointment));\n        const url = new URL(window.location.href);\n        url.searchParams.set('schedule', appointmentData);\n        setTimeout(() => { window.location.href = url.toString(); }, 100);\n      } else {\n        alert('Appointment data not found.');\n      }\n    }\n    \n    function renderTable(page) {\n      if (filteredAppointments.length === 0) {\n        document.getElementById('appointmentTableBody').innerHTML = '<tr><td colspan=\"6\" style=\"text-align:center; padding:16px; color:#6b7280;\">No appointments available.</td></tr>';\n        document.getElementById('paginationControls').style.display = 'none';\n        return;\n      }\n      const start = (page - 1) * rowsPerPage;\n      const end = page * rowsPerPage;\n      const dataToRender = showingAll ? filteredAppointments : filteredAppointments.slice(start, end);\n      document.getElementById('appointmentTableBody').innerHTML = generateTableRows(dataToRender);\n      document.getElementById('pageIndicator').textContent = showingAll ? 'Showing All Results' : \\`Page \\${page}\\`;\n      document.getElementById('paginationControls').style.display = (filteredAppointments.length > rowsPerPage && !showingAll) ? 'flex' : 'none';\n    }\n    \n    function sortTable(field) {\n      sortOrder[field] = sortOrder[field] === 'asc' ? 'desc' : 'asc';\n      filteredAppointments.sort((a, b) => {\n        if (field === 'date' || field === 'start') {\n          const dateA = new Date(a.date + ' ' + a.start);\n          const dateB = new Date(b.date + ' ' + b.start);\n          return sortOrder[field] === 'asc' ? dateA - dateB : dateB - dateA;\n        }\n        return sortOrder[field] === 'asc'\n          ? (a[field] || '').localeCompare(b[field] || '')\n          : (b[field] || '').localeCompare(a[field] || '');\n      });\n      renderTable(1);\n      currentPage = 1;\n    }\n    \n    function searchAppointments() {\n      const query = document.getElementById('searchInput').value.toLowerCase();\n      filteredAppointments = appointments.filter(app =>\n        (Array.isArray(app.location_description) ? app.location_description.join(', ') : app.location_description || '').toLowerCase().includes(query) ||\n        (app.provider_name || '').toLowerCase().includes(query) ||\n        (app.date || '').includes(query) ||\n        (app.start || '').includes(query)\n      );\n      renderTable(1);\n      currentPage = 1;\n    }\n    \n    function nextPage() {\n      if (currentPage < Math.ceil(filteredAppointments.length / rowsPerPage)) {\n        currentPage++;\n        renderTable(currentPage);\n      }\n    }\n    \n    function prevPage() {\n      if (currentPage > 1) {\n        currentPage--;\n        renderTable(currentPage);\n      }\n    }\n    \n    function toggleShowAll() {\n      showingAll = !showingAll;\n      document.getElementById('showAllButton').textContent = showingAll ? 'Collapse All' : 'Show All';\n      renderTable(currentPage);\n    }\n    \n    function showLoader() {\n      document.getElementById('loaderOverlay').style.display = 'flex';\n    }\n    \n    function hideLoader() {\n      document.getElementById('loaderOverlay').style.display = 'none';\n    }\n    \n    document.addEventListener('DOMContentLoaded', () => { hideLoader(); });\n    window.addEventListener('popstate', () => { hideLoader(); });\n    window.addEventListener('pageshow', (event) => { if (event.persisted) { hideLoader(); } });\n    document.getElementById('searchInput').addEventListener('input', searchAppointments);\n    \n    // Expose functions to the global scope.\n    window.openModal = openModal;\n    window.closeModal = closeModal;\n    window.handleLocationChange = handleLocationChange;\n    window.filterLocations = filterLocations;\n    window.resetLocations = resetLocations;\n    window.handleProviderChange = handleProviderChange;\n    window.setProviderDropdown = setProviderDropdown;\n    window.resetProvider = resetProvider;\n    window.handleDateRangeSelection = handleDateRangeSelection;\n    window.sortTable = sortTable;\n    window.nextPage = nextPage;\n    window.prevPage = prevPage;\n    window.toggleShowAll = toggleShowAll;\n    window.scheduleAppointment = scheduleAppointment;\n    window.confirmDateRange = confirmDateRange;\n    \n    // Initial table render.\n    renderTable(currentPage);\n  </script>\n</body>\n</html>\n`;\n\n// Return the HTML content from the Code node.\nreturn [{ htmlContent: html }];\n"
      },
      "id": "7f697118-c03b-489d-ba40-02062b90d25a",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4220,
        2000
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Care Selection</title>\n\n  <!-- Early IE check: If IE, only show the warning message and stop. -->\n  <script>\n    // If 'document.documentMode' is defined, we're in IE (including IE11).\n    if (document.documentMode) {\n      var style =\n        '<style>' +\n          'body {' +\n            'margin: 0; padding: 0; background-color: #f3f4f6;' +\n            'display: flex; align-items: center; justify-content: center;' +\n            'min-height: 100vh; font-family: Arial, sans-serif;' +\n          '}' +\n          '.ie-message {' +\n            'max-width: 600px; margin: auto; font-size: 1.2rem;' +\n            'color: #333; padding: 20px; text-align: center;' +\n            'background: #fff; border-radius: 8px;' +\n            'box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);' +\n          '}' +\n          '.ie-message p { margin: 1em 0; }' +\n          '.ie-message button {' +\n            'padding: 0.6em 1.2em;' +\n            'font-size: 1rem;' +\n            'cursor: pointer;' +\n            'border: none;' +\n            'border-radius: 4px;' +\n            'background-color: #0066cc;' +\n            'color: #fff;' +\n            'transition: background-color 0.2s;' +\n          '}' +\n          '.ie-message button:hover {' +\n            'background-color: #005bb5;' +\n          '}' +\n        '</style>';\n\n      var messageHTML =\n        '<div class=\"ie-message\">' +\n          '<p><strong>Quick Scheduler does not work with Internet Explorer.</strong></p>' +\n          '<p>Please change your default browser to Chrome or Edge. Thank you!</p>' +\n          '<p>' +\n            '<button onclick=\"window.open(\\'https://file.cybertech.app/EPIC/Documents/Default%20Browsing.pdf\\', \\'_blank\\')\">' +\n              'Download Instructions' +\n            '</button>' +\n          '</p>' +\n        '</div>';\n\n      document.write(style + messageHTML);\n      // Stop further loading; IE won't see the rest of the page\n      document.close();\n    }\n  </script>\n\n  <!-- If not IE, the rest of the page (including styles) will load normally. -->\n  <link href=\"https://cdn.jsdelivr.net/npm/shadcn-ui@latest/dist/shadcn-ui.min.css\" rel=\"stylesheet\">\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n      background-color: #f3f4f6;\n      margin: 0;\n    }\n    .container {\n      max-width: 400px;\n      width: 100%;\n      padding: 20px;\n      background-color: white;\n      border-radius: 15px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n      text-align: center;\n      position: relative;\n    }\n    .logo {\n      width: 100%;\n      border-radius: 10px;\n      margin-bottom: 20px;\n    }\n    .title {\n      font-size: 1.5rem;\n      font-weight: bold;\n      color: #333;\n      margin-bottom: 10px;\n    }\n    .patient-info {\n      font-size: 1rem;\n      color: #555;\n      margin-bottom: 20px;\n    }\n    .button-group {\n      display: flex;\n      flex-direction: column;\n      gap: 15px;\n    }\n    .care-row {\n      display: flex;\n      gap: 10px;\n    }\n    .care-button,\n    .next-button {\n      padding: 15px;\n      font-size: 18px;\n      font-weight: bold;\n      color: white;\n      border: none;\n      border-radius: 30px;\n      cursor: pointer;\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n    .care-button {\n      flex: 3;\n    }\n    .next-button {\n      flex: 1;\n    }\n    .care-button:hover,\n    .next-button:hover {\n      transform: scale(1.05);\n      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n    }\n    /* Office Visit styling */\n    .pcare {\n      background: linear-gradient(135deg, #4a90e2, #357abd);\n    }\n    /* PA-Lab styling with a muted color */\n    .palab {\n      background: linear-gradient(135deg, #95a5a6, #7f8c8d);\n    }\n    /* Other button colors */\n    .dcare {\n      background: linear-gradient(135deg, #34a853, #2a7e42);\n    }\n    .icare {\n      background: linear-gradient(135deg, #9b51e0, #7a3fb5);\n    }\n    .scare {\n      background: linear-gradient(135deg, #00bfa5, #009f89);\n    }\n    .care-button:disabled,\n    .next-button:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n    .overlay {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: rgba(255, 255, 255, 0.8);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 15px;\n      opacity: 0;\n      pointer-events: none;\n      transition: opacity 0.3s ease;\n    }\n    .overlay.show {\n      opacity: 1;\n      pointer-events: all;\n    }\n    .loader {\n      border: 6px solid rgba(0, 0, 0, 0.1);\n      border-top: 6px solid #3498db;\n      border-radius: 50%;\n      width: 50px;\n      height: 50px;\n      animation: spin 1s linear infinite;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n  </style>\n</head>\n<body>\n\n  <!-- Main container (hidden if IE, because the script above stops the rest of the page) -->\n  <div class=\"container\">\n    <img\n      src=\"https://file.taskfire.app/Kiosk/EPIC/HQ/epic%20health%20wall%20yellow.png\"\n      alt=\"Logo\"\n      class=\"logo\"\n    />\n    <h1 class=\"title\">Select Care Type</h1>\n    <div class=\"patient-info\">\n      <p id=\"patientName\"></p>\n      <p id=\"patientId\"></p>\n    </div>\n    <div class=\"button-group\">\n      <div class=\"care-row\">\n        <button class=\"care-button pcare\" onclick=\"redirectToCareType('PCARE')\">Office Visit</button>\n        <button class=\"next-button pcare\" onclick=\"redirectToCareType('PCARE-LINK', true)\">Link</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button palab\" onclick=\"redirectToCareType('PA-LAB')\">PA-Lab</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button dcare\" onclick=\"redirectToCareType('DCARE')\">1-2 F/U | Ordered Procedures</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button icare\" onclick=\"redirectToCareType('ICARE')\">Behavioral Health/Physical Therapy</button>\n      </div>\n      <div class=\"care-row\">\n        <button class=\"care-button scare\" onclick=\"redirectToCareType('SCARE')\">Specialty Visit</button>\n      </div>\n    </div>\n    <div class=\"overlay\" id=\"overlay\">\n      <div class=\"loader\"></div>\n    </div>\n  </div>\n\n  <script>\n    // Fallback query-string parser for IE (no URLSearchParams).\n    function getUrlParams() {\n      var search = window.location.search || \"\";\n      if (search.indexOf(\"?\") === 0) {\n        search = search.substring(1);\n      }\n      var parts = search.split(\"&\");\n      var params = {};\n      for (var i = 0; i < parts.length; i++) {\n        var pair = parts[i].split(\"=\");\n        var key = decodeURIComponent(pair[0] || \"\");\n        var value = decodeURIComponent(pair[1] || \"\");\n        if (key) {\n          params[key] = value;\n        }\n      }\n      return params;\n    }\n\n    var existingParams = getUrlParams();\n\n    var fullName = existingParams.fullName || \"Unknown Patient\";\n    var patientId = existingParams.patientId || \"Unknown MRN\";\n\n    document.getElementById(\"patientName\").textContent = \"Patient: \" + fullName;\n    document.getElementById(\"patientId\").textContent = \"MRN: \" + patientId;\n\n    function redirectToCareType(careType, isNext) {\n      if (typeof isNext === \"undefined\") {\n        isNext = false;\n      }\n      var overlay = document.getElementById(\"overlay\");\n      overlay.classList.add(\"show\");\n\n      var buttons = document.querySelectorAll(\".care-button, .next-button\");\n      for (var i = 0; i < buttons.length; i++) {\n        buttons[i].disabled = true;\n      }\n\n      // Rebuild the URL with the new parameters\n      var baseUrl = window.location.href.split(\"?\")[0];\n      var newParams = [];\n\n      // Include existing params, excluding caretype/available\n      for (var key in existingParams) {\n        if (existingParams.hasOwnProperty(key) && key !== \"caretype\" && key !== \"available\") {\n          newParams.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(existingParams[key]));\n        }\n      }\n\n      // Add caretype\n      newParams.push(\"caretype=\" + encodeURIComponent(careType));\n\n      // If \"isNext\" is true, add \"available=next\"\n      if (isNext) {\n        newParams.push(\"available=next\");\n      }\n\n      var redirectUrl = baseUrl + \"?\" + newParams.join(\"&\");\n      console.log(\"Redirecting to: \" + redirectUrl);\n\n      setTimeout(function () {\n        window.location.href = redirectUrl;\n      }, 500);\n    }\n\n    function hideLoaderAndEnableButtons() {\n      var overlay = document.getElementById(\"overlay\");\n      overlay.classList.remove(\"show\");\n      var buttons = document.querySelectorAll(\".care-button, .next-button\");\n      for (var i = 0; i < buttons.length; i++) {\n        buttons[i].disabled = false;\n      }\n    }\n\n    // Hide loader and re-enable buttons when navigating back\n    window.addEventListener(\"popstate\", hideLoaderAndEnableButtons, false);\n\n    // Handle pageshow event to ensure loader/buttons reset if the page is cached\n    window.addEventListener(\"pageshow\", function (event) {\n      if (event.persisted) {\n        hideLoaderAndEnableButtons();\n      }\n    }, false);\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "id": "bcf56140-b490-44f5-82f8-612fb7c7a5cf",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        940,
        1180
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-03-10T22:27:16.504Z",
  "versionId": "f4fd6a74-af44-4ba7-9345-7fdf32f0771a"
}