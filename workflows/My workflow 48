{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-24T12:41:08.215Z",
  "id": "7NXWnCQ8iFWaLFB7",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "My workflow 48",
  "nodes": [
    {
      "parameters": {
        "path": "7769809e-7620-4ff1-bcbb-fba9d2920362",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "179a2d63-84dd-473b-9893-051bc5bed605",
      "name": "Webhook",
      "webhookId": "7769809e-7620-4ff1-bcbb-fba9d2920362"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "nps_score",
          "mode": "list",
          "cachedResultName": "nps_score"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        220,
        0
      ],
      "id": "2938d254-902d-46e1-8581-2ae47ed32fb6",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "n0Iu2Lnz1XZ5gBke",
          "name": "Offices OPS"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1) Pull in your incoming JSON items\nconst data = items.map(item => item.json);\n\n// 2) Which fields get dropdown filters?\nconst filterFields = ['entity','location','area','survey_source','response_required'];\n\n// 3) Derive your table columns\nconst headers = Object.keys(data[0] || {});\n\n// 4) Build the filter <select> elements\nconst filterSelectsHtml = filterFields.map(field => {\n  const id    = 'filter' + field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join('');\n  const label = field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n  return `<select id=\"${id}\">\n    <option value=\"\">All ${label}</option>\n  </select>`;\n}).join('');\n\n// 5) Build your table header row\nconst headerRowHtml = headers.map(field => {\n  const title = field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n  return `<th data-field=\"${field}\">${title}</th>`;\n}).join('');\n\n// 6) Assemble the HTML/CSS/JS\nconst html = `\n<style>\n  body { font-family:'Segoe UI',sans-serif; background:#f0f2f5; margin:0; padding:20px; }\n  .table-container { background:#fff; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.05); padding:20px;}\n  .controls { display:flex; flex-wrap:wrap; gap:10px; margin-bottom:16px;}\n  .controls input, .controls select {\n    flex:1; min-width:150px;\n    padding:8px 12px; border:1px solid #ccd0d5; border-radius:8px; background:#fafbfc;\n  }\n  /* Bright orange button */\n  .controls button {\n    padding:8px 16px; border:none; border-radius:8px;\n    background:#f97316; color:#fff; font-weight:600;\n    cursor:pointer; transition:background .2s;\n  }\n  .controls button:hover { background:#ea580c; }\n  table {\n    width:100%; border-collapse:separate; border-spacing:0;\n    border-radius:8px; overflow:hidden;\n  }\n  thead { background:linear-gradient(90deg,#4f46e5,#6d5ceb); color:#fff; }\n  th, td { padding:12px 16px; text-align:left; }\n  th { cursor:pointer; user-select:none; }\n  tbody tr:nth-child(even) { background:#f9faff; }\n  tbody tr:hover { background:#eef0ff; }\n  #pagination { margin-top:16px; display:flex; flex-wrap:wrap; gap:6px; }\n  #pagination button {\n    padding:6px 10px; border:1px solid #ccd0d5; border-radius:6px;\n    background:#fff; cursor:pointer; transition:background .2s;\n  }\n  #pagination button:hover:not(:disabled) { background:#f0f2f5; }\n  #pagination button:disabled { opacity:.5; cursor:default; }\n</style>\n\n<div class=\"table-container\">\n  <div class=\"controls\">\n    <input id=\"searchInput\" type=\"text\" placeholder=\"Search…\">\n    ${filterSelectsHtml}\n    <button id=\"downloadCsvBtn\">Download CSV</button>\n  </div>\n  <table id=\"dataTable\">\n    <thead><tr>${headerRowHtml}</tr></thead>\n    <tbody></tbody>\n  </table>\n  <div id=\"pagination\"></div>\n</div>\n\n<script>\n  // Inject server‐side arrays\n  const data         = ${JSON.stringify(data)};\n  const headers      = ${JSON.stringify(headers)};\n  const filterFields = ${JSON.stringify(filterFields)};\n  const rowsPerPage  = 15;\n\n  let filteredData = data.slice();\n  let currentPage  = 1;\n  let sortField    = null;\n  let sortAsc      = true;\n\n  document.addEventListener('DOMContentLoaded', () => {\n    setupFilters();\n    document.getElementById('searchInput').addEventListener('input', applyFilters);\n    filterFields.forEach(f => {\n      document\n        .getElementById('filter' + capitalize(f))\n        .addEventListener('change', applyFilters);\n    });\n    document.querySelectorAll('#dataTable th').forEach(th => {\n      th.addEventListener('click', () => {\n        const fld = th.dataset.field;\n        if (sortField === fld) sortAsc = !sortAsc;\n        else { sortField = fld; sortAsc = true; }\n        sortData();\n      });\n    });\n    document.getElementById('downloadCsvBtn').addEventListener('click', downloadCsv);\n    renderTable();\n  });\n\n  function setupFilters() {\n    filterFields.forEach(f => {\n      const sel = document.getElementById('filter' + capitalize(f));\n      [...new Set(data.map(r => r[f]))]\n        .filter(v => v != null && v !== '')\n        .sort()\n        .forEach(v => {\n          const opt = document.createElement('option');\n          opt.value = v; opt.textContent = v;\n          sel.appendChild(opt);\n        });\n    });\n  }\n\n  function applyFilters() {\n    const term = document.getElementById('searchInput').value.toLowerCase();\n    filteredData = data.filter(row => {\n      const matchSearch = !term || Object.values(row).some(v =>\n        String(v).toLowerCase().includes(term)\n      );\n      const matchFilters = filterFields.every(f => {\n        const sel = document.getElementById('filter' + capitalize(f));\n        return !sel.value || row[f] === sel.value;\n      });\n      return matchSearch && matchFilters;\n    });\n    currentPage = 1;\n    if (sortField) sortData();\n    else renderTable();\n  }\n\n  function sortData() {\n    filteredData.sort((a,b) => {\n      const v1 = (a[sortField]||'').toString().toLowerCase();\n      const v2 = (b[sortField]||'').toString().toLowerCase();\n      return ((v1 < v2)?-1:(v1>v2)?1:0) * (sortAsc?1:-1);\n    });\n    renderTable();\n  }\n\n  function renderTable() {\n    const tb = document.querySelector('#dataTable tbody');\n    tb.innerHTML = '';\n    const start = (currentPage - 1)*rowsPerPage;\n    filteredData.slice(start, start+rowsPerPage).forEach(row => {\n      const tr = document.createElement('tr');\n      headers.forEach(h => {\n        const td = document.createElement('td');\n        td.textContent = row[h]||'';\n        tr.appendChild(td);\n      });\n      tb.appendChild(tr);\n    });\n    renderPagination();\n  }\n\n  function renderPagination() {\n    const pg = document.getElementById('pagination');\n    pg.innerHTML = '';\n    const pageCount = Math.max(1, Math.ceil(filteredData.length/rowsPerPage));\n\n    const mkBtn = (txt, dis, fn) => {\n      const b = document.createElement('button');\n      b.textContent = txt;\n      if (dis) b.disabled = true;\n      else b.addEventListener('click', fn);\n      pg.appendChild(b);\n    };\n\n    mkBtn('Prev', currentPage===1, () => { currentPage--; renderTable(); });\n    for (let i=1; i<=pageCount; i++) {\n      mkBtn(i, i===currentPage, () => { currentPage=i; renderTable(); });\n    }\n    mkBtn('Next', currentPage===pageCount, () => { currentPage++; renderTable(); });\n  }\n\n  // **DOWNLOAD CSV OF ALL FILTERED ROWS** (not just current page)\n  function downloadCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    filteredData.forEach(r => {\n      csv += headers.map(h => \\`\"\\${r[h]||''}\"\\`).join(',') + '\\\\n';\n    });\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url  = URL.createObjectURL(blob);\n    const a    = document.createElement('a');\n    a.href     = url;\n    a.download = 'export.csv';\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  function capitalize(s) {\n    return s.split('_').map(w => w.charAt(0).toUpperCase()+w.slice(1)).join('');\n  }\n</script>\n`;\n\n// 7) Return it so your HTTP Response or UI node can render\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        0
      ],
      "id": "0a5266e6-5e45-4338-a650-2fddfd8ac5cd",
      "name": "Code"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        660,
        0
      ],
      "id": "0455fec5-4d02-4d7f-bbbc-661c662753d3",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "// In your n8n Code node (Function):\nconst data = items.map(item => item.json);\n\n// Which fields to make filters for:\nconst filterFields = ['entity','location','area','survey_source','response_required'];\n\n// Build the <select> dropdowns for each filter field:\nconst filterSelectsHtml = filterFields.map(field => {\n  const id    = 'filter' + field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join('');\n  const label = field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n  return `<select id=\"${id}\" style=\"margin-left:10px;\">\n    <option value=\"\">All ${label}</option>\n  </select>`;\n}).join('');\n\n// Grab the column headers dynamically from the first object:\nconst headers = Object.keys(data[0] || {});\nconst headerRowHtml = headers.map(field => {\n  const title = field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n  return `<th data-field=\"${field}\" style=\"cursor:pointer;\">${title}</th>`;\n}).join('');\n\n// Now build the full HTML + client‐side JS:\nconst html = `\n<div>\n  <div style=\"margin-bottom:10px;\">\n    <input id=\"searchInput\" type=\"text\" placeholder=\"Search…\" />\n    ${filterSelectsHtml}\n    <button id=\"downloadCsvBtn\" style=\"margin-left:10px;\">Download CSV</button>\n  </div>\n  <table id=\"dataTable\" border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"width:100%;border-collapse:collapse;\">\n    <thead><tr>${headerRowHtml}</tr></thead>\n    <tbody></tbody>\n  </table>\n  <div id=\"pagination\" style=\"margin-top:10px;\"></div>\n</div>\n\n<script>\n  const data        = ${JSON.stringify(data)};\n  const filterFields= ${JSON.stringify(filterFields)};\n  const headers     = ${JSON.stringify(headers)};\n  let filteredData  = data.slice();\n  let currentPage   = 1;\n  const rowsPerPage = 15;\n\n  document.addEventListener('DOMContentLoaded', () => {\n    setupFilters();\n    document.getElementById('searchInput').addEventListener('input', onSearch);\n    filterFields.forEach(field => {\n      const sel = document.getElementById('filter' + capitalize(field));\n      sel.addEventListener('change', onFilter);\n    });\n    document.querySelectorAll('#dataTable th').forEach(th => {\n      th.addEventListener('click', () => sortTable(th.dataset.field));\n    });\n    document.getElementById('downloadCsvBtn').addEventListener('click', downloadCsv);\n    renderTable();\n  });\n\n  function setupFilters() {\n    filterFields.forEach(field => {\n      const sel = document.getElementById('filter' + capitalize(field));\n      const unique = [...new Set(data.map(d => d[field]))];\n      unique.forEach(val => {\n        if (val != null && val !== '') {\n          const option = document.createElement('option');\n          option.value = val;\n          option.textContent = val;\n          sel.appendChild(option);\n        }\n      });\n    });\n  }\n\n  function onSearch(e) {\n    applyFilters(e.target.value.toLowerCase());\n  }\n  function onFilter() {\n    applyFilters(document.getElementById('searchInput').value.toLowerCase());\n  }\n\n  function applyFilters(searchTerm) {\n    filteredData = data.filter(row => {\n      const matchesSearch = !searchTerm \n        || Object.values(row).some(v => String(v).toLowerCase().includes(searchTerm));\n      const matchesFilters = filterFields.every(field => {\n        const sel = document.getElementById('filter' + capitalize(field));\n        return !sel.value || row[field] === sel.value;\n      });\n      return matchesSearch && matchesFilters;\n    });\n    currentPage = 1;\n    renderTable();\n  }\n\n  function renderTable() {\n    const tbody = document.querySelector('#dataTable tbody');\n    tbody.innerHTML = '';\n    const start = (currentPage - 1) * rowsPerPage;\n    filteredData.slice(start, start + rowsPerPage).forEach(row => {\n      const tr = document.createElement('tr');\n      headers.forEach(field => {\n        const td = document.createElement('td');\n        td.textContent = row[field] || '';\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n    });\n    renderPagination();\n  }\n\n  function renderPagination() {\n    const container = document.getElementById('pagination');\n    container.innerHTML = '';\n    const pageCount = Math.ceil(filteredData.length / rowsPerPage);\n\n    const prev = document.createElement('button');\n    prev.textContent = 'Prev';\n    prev.disabled = currentPage === 1;\n    prev.onclick = () => { currentPage--; renderTable(); };\n    container.appendChild(prev);\n\n    for (let i = 1; i <= pageCount; i++) {\n      const btn = document.createElement('button');\n      btn.textContent = i;\n      if (i === currentPage) btn.disabled = true;\n      btn.onclick = () => { currentPage = i; renderTable(); };\n      container.appendChild(btn);\n    }\n\n    const next = document.createElement('button');\n    next.textContent = 'Next';\n    next.disabled = currentPage === pageCount;\n    next.onclick = () => { currentPage++; renderTable(); };\n    container.appendChild(next);\n  }\n\n  function sortTable(field) {\n    const asc = !sortTable.asc;\n    sortTable.asc = asc;\n    filteredData.sort((a, b) => {\n      const v1 = a[field] || '';\n      const v2 = b[field] || '';\n      return (v1 < v2 ? -1 : v1 > v2 ? 1 : 0) * (asc ? 1 : -1);\n    });\n    renderTable();\n  }\n\n  function downloadCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    filteredData.forEach(row => {\n      csv += headers\n        .map(h => \\`\"\\${row[h] != null ? row[h] : ''}\"\\`)\n        .join(',') + '\\\\n';\n    });\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url  = URL.createObjectURL(blob);\n    const a    = document.createElement('a');\n    a.href     = url;\n    a.download = 'export.csv';\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  function capitalize(str) {\n    return str.split('_').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join('');\n  }\n</script>\n`;\n\n// Return the HTML so a subsequent “HTML” node or webhook response can render it:\nreturn [\n  {\n    json: { html }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        -160
      ],
      "id": "397990f9-d1fe-46dc-97d6-ef8856e99e94",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// 1) Incoming JSON\nconst data = items.map(item => item.json);\n\n// 2) Which fields get dropdown filters? Now including score\nconst filterFields = ['entity','location','area','survey_source','response_required','score'];\n\n// 3) Derive columns\nconst headers = Object.keys(data[0] || {});\n\n// 4) Rows per page\nconst rowsPerPage = 15;\n\n// 5) Build the full HTML + CSS + JS\nconst html = `\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/styles/choices.min.css\" />\n<script src=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/scripts/choices.min.js\"></script>\n\n<style>\n  body { font-family:'Segoe UI',sans-serif; background:#f0f2f5; margin:0; padding:20px }\n  .title { font-size:1.8rem; font-weight:700; margin-bottom:12px; color:#333 }\n  .table-container {\n    background:#fff; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.05); padding:20px\n  }\n\n  /* CONTROLS */\n  .controls { display:flex; flex-direction:column; gap:16px }\n  .search-controls { display:flex; gap:10px; flex-wrap:wrap; align-items:center }\n  .multiselect-container {\n    display:grid;\n    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n    gap:8px;\n  }\n  .button-controls { display:flex; gap:10px; flex-wrap:wrap }\n  .controls label { font-size:0.9rem; white-space:nowrap; margin-right:4px }\n  .controls input, .controls select {\n    padding:8px 12px; border:1px solid #ccd0d5; border-radius:8px;\n    background:#fafbfc; font-size:0.95rem; min-width:140px;\n  }\n  .button-controls > button {\n    padding:8px 16px; border:none; border-radius:8px;\n    background:#f97316; color:#fff; font-weight:600; cursor:pointer;\n    transition:background .2s;\n  }\n  .button-controls > #clearFiltersBtn { background:#6b7280 }\n  .button-controls > button:hover { background:#ea580c }\n\n  /* Choices.js MULTISELECT OVERRIDES */\n  .choices__container { width:100% !important }\n  .choices__list--multiple {\n    display:flex !important;\n    flex-direction:column !important;\n    flex-wrap:nowrap !important;\n    max-height:200px !important;\n    overflow-y:auto !important;\n    padding:4px 8px !important;\n  }\n  .choices__item {\n    display:flex; align-items:center;\n    background:#06b6d4 !important; color:#fff !important;\n    border-radius:9999px !important; padding:4px 8px !important;\n    margin:4px 0 !important; font-size:0.85rem !important;\n  }\n  .choices__button {\n    background:transparent !important; border:none !important;\n    color:#fff !important; font-size:1rem !important; font-weight:700 !important;\n    line-height:1 !important; margin-left:8px !important; cursor:pointer !important;\n  }\n\n  /* TABLE & PAGINATION */\n  table {\n    width:100%; border-collapse:separate; border-spacing:0;\n    border-radius:8px; overflow:hidden; margin-top:12px;\n  }\n  thead { background:linear-gradient(90deg,#4f46e5,#6d5ceb); color:#fff }\n  th, td { padding:12px 16px; text-align:left }\n  th { cursor:pointer; user-select:none }\n  tbody tr:nth-child(even) { background:#f9faff }\n  tbody tr:hover { background:#eef0ff }\n  #pagination {\n    margin-top:16px; display:flex; flex-wrap:wrap; gap:6px;\n  }\n  #pagination button {\n    padding:6px 10px; border:1px solid #ccd0d5;\n    border-radius:6px; background:#fff; cursor:pointer;\n    transition:background .2s;\n  }\n  #pagination button:hover:not(:disabled) { background:#f0f2f5 }\n  #pagination button:disabled { opacity:.5; cursor:default }\n</style>\n\n<div class=\"title\">NPS</div>\n<div class=\"table-container\">\n  <div class=\"controls\">\n    <div class=\"search-controls\">\n      <label for=\"searchInput\">Search:</label>\n      <input id=\"searchInput\" type=\"text\" placeholder=\"Search…\">\n      <label for=\"afterDate\">After:</label>\n      <input id=\"afterDate\" type=\"date\">\n      <label for=\"beforeDate\">Before:</label>\n      <input id=\"beforeDate\" type=\"date\">\n    </div>\n\n    <div class=\"multiselect-container\">\n      ${filterFields.map(field => {\n        const id = 'filter' + field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join('');\n        return `<select id=\"${id}\" multiple>\n                  <option value=\"__all__\">All</option>\n                </select>`;\n      }).join('')}\n    </div>\n\n    <div class=\"button-controls\">\n      <button id=\"downloadAllBtn\">Download All CSV</button>\n      <button id=\"downloadFilteredBtn\">Download Filtered CSV</button>\n      <button id=\"clearFiltersBtn\">Clear Filters</button>\n    </div>\n  </div>\n\n  <table id=\"dataTable\">\n    <thead>\n      <tr>\n        ${headers.map(f => {\n          const title = f.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n          return `<th data-field=\"${f}\">${title}</th>`;\n        }).join('')}\n      </tr>\n    </thead>\n    <tbody></tbody>\n  </table>\n\n  <div id=\"pagination\"></div>\n</div>\n\n<script>\n  const data = ${JSON.stringify(data)};\n  const headers = ${JSON.stringify(headers)};\n  const filterFields = ${JSON.stringify(filterFields)};\n  const rowsPerPage = ${rowsPerPage};\n  const choicesInstances = {};\n  let filteredIndices = data.map((_,i)=>i);\n  let currentPage = 1;\n  let sortField = null;\n  let sortAsc = true;\n\n  document.addEventListener('DOMContentLoaded', () => {\n    // Initialize each Choices multi-select (including score)\n    filterFields.forEach(f => {\n      const sel = document.getElementById('filter' + capitalize(f));\n      // populate options\n      [...new Set(data.map(r=>r[f]))]\n        .filter(v=>v!=null&&v!=='')\n        .sort((a,b)=>\n          f==='score'\n            ? parseFloat(a)-parseFloat(b)\n            : String(a).localeCompare(String(b))\n        )\n        .forEach(v => {\n          const o = document.createElement('option');\n          o.value = v; o.textContent = v;\n          sel.appendChild(o);\n        });\n      const inst = new Choices(sel, {\n        removeItemButton: true,\n        placeholderValue: 'Select ' + capitalize(f),\n        searchPlaceholderValue: 'Search ' + capitalize(f),\n        searchEnabled: true,\n        shouldSort: false\n      });\n      choicesInstances[f] = inst;\n\n      // \"All\" logic\n      sel.addEventListener('change', () => {\n        const vals = inst.getValue(true);\n        if (vals.includes('__all__')) {\n          vals.filter(v=>v!=='__all__').forEach(v=>inst.removeActiveItemsByValue(v));\n        } else if (vals.length) {\n          inst.removeActiveItemsByValue('__all__');\n        }\n        applyFilters();\n      });\n      // deselect by clicking pill\n      sel.parentNode.querySelector('.choices__list--multiple')\n        .addEventListener('click', e => {\n          const pill = e.target.closest('.choices__item');\n          if (!pill) return;\n          inst.removeActiveItemsByValue(pill.getAttribute('data-value'));\n          applyFilters();\n        });\n    });\n\n    // Basic filters\n    ['searchInput','afterDate','beforeDate']\n      .forEach(id=>document.getElementById(id).addEventListener('input', applyFilters));\n\n    // Sorting by clicking headers\n    document.querySelectorAll('#dataTable th').forEach(th => {\n      th.addEventListener('click', () => {\n        const fld = th.dataset.field;\n        if (sortField===fld) sortAsc=!sortAsc;\n        else { sortField=fld; sortAsc=true; }\n        sortData();\n      });\n    });\n\n    // CSV & Clear\n    document.getElementById('downloadAllBtn').addEventListener('click', downloadAllCsv);\n    document.getElementById('downloadFilteredBtn').addEventListener('click', downloadFilteredCsv);\n    document.getElementById('clearFiltersBtn').addEventListener('click', () => {\n      ['searchInput','afterDate','beforeDate'].forEach(id=>{\n        document.getElementById(id).value = '';\n      });\n      filterFields.forEach(f=>choicesInstances[f].removeActiveItems());\n      currentPage = 1;\n      applyFilters();\n    });\n\n    initTable();\n    renderTable();\n  });\n\n  function applyFilters() {\n    const term   = document.getElementById('searchInput').value.toLowerCase();\n    const after  = document.getElementById('afterDate').value;\n    const before = document.getElementById('beforeDate').value;\n\n    filteredIndices = data\n      .map((row,i)=>({row,i}))\n      .filter(({row})=>{\n        // text\n        const txtOK = !term || Object.values(row).some(v=>String(v).toLowerCase().includes(term));\n        // multi-select\n        const fldOK = filterFields.every(f=>{\n          const vals = choicesInstances[f].getValue(true);\n          return vals.includes('__all__') || !vals.length || vals.includes(String(row[f]));\n        });\n        // date\n        const dt = new Date(row.date_sent);\n        const dateOK = (!after||dt>=new Date(after)) && (!before||dt<=new Date(before));\n        return txtOK && fldOK && dateOK;\n      })\n      .map(o=>o.i);\n\n    currentPage=1;\n    sortField? sortData() : renderTable();\n  }\n\n  function sortData() {\n    filteredIndices.sort((a,b)=>{\n      if (sortField==='score') {\n        return (parseFloat(data[a].score) - parseFloat(data[b].score)) * (sortAsc?1:-1);\n      }\n      const v1 = String(data[a][sortField]||'').toLowerCase();\n      const v2 = String(data[b][sortField]||'').toLowerCase();\n      return ((v1<v2)?-1:(v1>v2)?1:0) * (sortAsc?1:-1);\n    });\n    renderTable();\n  }\n\n  function initTable() {\n    const tbody = document.querySelector('#dataTable tbody');\n    data.forEach((row,i)=>{\n      const tr = document.createElement('tr');\n      tr.dataset.index = i;\n      headers.forEach(h=>{\n        const td = document.createElement('td');\n        td.textContent = row[h]||'';\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n    });\n  }\n\n  function renderTable() {\n    const start   = (currentPage-1)*rowsPerPage;\n    const pageSet = new Set(filteredIndices.slice(start, start+rowsPerPage));\n    document.querySelectorAll('#dataTable tbody tr').forEach(tr=>{\n      tr.style.display = pageSet.has(+tr.dataset.index)? '' : 'none';\n    });\n    renderPagination();\n  }\n\n  function renderPagination() {\n    const pg = document.getElementById('pagination');\n    pg.innerHTML = '';\n    const pc = Math.max(1, Math.ceil(filteredIndices.length/rowsPerPage));\n    const mk = (t,d,f)=>{ const btn=document.createElement('button'); btn.textContent=t;\n      if(d) btn.disabled=true; else btn.addEventListener('click',f);\n      pg.appendChild(btn);\n    };\n    mk('Prev', currentPage===1, ()=>{currentPage--;renderTable();});\n    for(let i=1;i<=pc;i++) mk(i, i===currentPage, ()=>{currentPage=i;renderTable();});\n    mk('Next', currentPage===pc, ()=>{currentPage++;renderTable();});\n  }\n\n  function downloadAllCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    data.forEach(r => {\n      csv += headers.map(h => '\"' + (r[h] || '') + '\"').join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'all_records.csv');\n  }\n\n  function downloadFilteredCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    filteredIndices.forEach(i => {\n      const row = data[i];\n      csv += headers.map(h => '\"' + (row[h] || '') + '\"').join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'filtered_records.csv');\n  }\n\n  function triggerDownload(content, filename) {\n    const blob = new Blob([content], { type: 'text/csv' });\n    const url  = URL.createObjectURL(blob);\n    const a    = document.createElement('a');\n    a.href     = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  function capitalize(s) {\n    return s.split('_').map(w => w.charAt(0).toUpperCase()+w.slice(1)).join('');\n  }\n</script>\n`;\n\n// 6) Return to your HTTP Response / UI node\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        240
      ],
      "id": "b35d759b-87af-4b4b-aa51-97903df05a72",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "nps_score",
          "mode": "list",
          "cachedResultName": "nps_score"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        200,
        220
      ],
      "id": "d9ae1ad7-80f3-43d9-af5c-3e3ee8dd1628",
      "name": "Postgres1",
      "credentials": {
        "postgres": {
          "id": "n0Iu2Lnz1XZ5gBke",
          "name": "Offices OPS"
        }
      }
    },
    {
      "parameters": {
        "path": "7769809e-7620-4ff1-bcbb-fba9d2920362-DEV",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        240
      ],
      "id": "9c8a8586-7200-406e-9592-71f2bc83f64a",
      "name": "Webhook1",
      "webhookId": "7769809e-7620-4ff1-bcbb-fba9d2920362"
    },
    {
      "parameters": {
        "jsCode": "// 1) Incoming JSON\nconst data = items.map(item => item.json);\n\n// 2) Which fields get dropdown filters?\nconst filterFields = ['entity','location','area','survey_source','response_required'];\n\n// 3) Derive columns\nconst headers = Object.keys(data[0] || {});\n\n// 4) Build filter <select>s\nconst filterSelectsHtml = filterFields.map(field => {\n  const id    = 'filter' + field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join('');\n  const label = field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n  return `<select id=\"${id}\">\n    <option value=\"\">All ${label}</option>\n  </select>`;\n}).join('');\n\n// 5) Build table headers\nconst headerRowHtml = headers.map(field => {\n  const title = field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n  return `<th data-field=\"${field}\">${title}</th>`;\n}).join('');\n\n// 6) Assemble HTML + CSS + JS\nconst html = `\n<style>\n  body {\n    font-family:'Segoe UI',sans-serif;\n    background:#f0f2f5;\n    margin:0; padding:20px;\n  }\n  .title {\n    font-size:1.8rem;\n    font-weight:700;\n    margin-bottom:12px;\n    color:#333;\n  }\n  .table-container {\n    background:#fff;\n    border-radius:12px;\n    box-shadow:0 4px 12px rgba(0,0,0,0.05);\n    padding:20px;\n  }\n  .controls {\n    display:flex;\n    flex-wrap:wrap;\n    gap:10px;\n    margin-bottom:16px;\n    align-items:center;\n  }\n  .controls label {\n    font-size:0.9rem;\n    margin-right:4px;\n    white-space:nowrap;\n  }\n  .controls input,\n  .controls select {\n    padding:8px 12px;\n    border:1px solid #ccd0d5;\n    border-radius:8px;\n    background:#fafbfc;\n    font-size:0.95rem;\n    min-width:140px;\n  }\n  .controls button {\n    padding:8px 16px;\n    border:none;\n    border-radius:8px;\n    background:#f97316;\n    color:#fff;\n    font-weight:600;\n    cursor:pointer;\n    transition:background .2s;\n  }\n  .controls button:hover {\n    background:#ea580c;\n  }\n  table {\n    width:100%;\n    border-collapse:separate;\n    border-spacing:0;\n    border-radius:8px;\n    overflow:hidden;\n  }\n  thead {\n    background:linear-gradient(90deg,#4f46e5,#6d5ceb);\n    color:#fff;\n  }\n  th, td {\n    padding:12px 16px;\n    text-align:left;\n  }\n  th {\n    cursor:pointer;\n    user-select:none;\n  }\n  tbody tr:nth-child(even) {\n    background:#f9faff;\n  }\n  tbody tr:hover {\n    background:#eef0ff;\n  }\n  #pagination {\n    margin-top:16px;\n    display:flex;\n    flex-wrap:wrap;\n    gap:6px;\n  }\n  #pagination button {\n    padding:6px 10px;\n    border:1px solid #ccd0d5;\n    border-radius:6px;\n    background:#fff;\n    cursor:pointer;\n    transition:background .2s;\n  }\n  #pagination button:hover:not(:disabled) {\n    background:#f0f2f5;\n  }\n  #pagination button:disabled {\n    opacity:.5;\n    cursor:default;\n  }\n</style>\n\n<div class=\"title\">NPS</div>\n\n<div class=\"table-container\">\n  <div class=\"controls\">\n    <label for=\"searchInput\">Search:</label>\n    <input id=\"searchInput\" type=\"text\" placeholder=\"Search…\">\n\n    <label for=\"afterDate\">After:</label>\n    <input id=\"afterDate\" type=\"date\" placeholder=\"mm/dd/yyyy\">\n\n    <label for=\"beforeDate\">Before:</label>\n    <input id=\"beforeDate\" type=\"date\" placeholder=\"mm/dd/yyyy\">\n\n    ${filterSelectsHtml}\n\n    <button id=\"downloadAllBtn\">Download All CSV</button>\n    <button id=\"downloadFilteredBtn\">Download Filtered CSV</button>\n  </div>\n\n  <table id=\"dataTable\">\n    <thead><tr>${headerRowHtml}</tr></thead>\n    <tbody></tbody>\n  </table>\n\n  <div id=\"pagination\"></div>\n</div>\n\n<script>\n  // Injected data & config\n  const data         = ${JSON.stringify(data)};\n  const headers      = ${JSON.stringify(headers)};\n  const filterFields = ${JSON.stringify(filterFields)};\n  const rowsPerPage  = 15;\n\n  let filteredData = data.slice();\n  let currentPage  = 1;\n  let sortField    = null;\n  let sortAsc      = true;\n\n  document.addEventListener('DOMContentLoaded', () => {\n    setupFilters();\n    document.getElementById('searchInput').addEventListener('input', applyFilters);\n    document.getElementById('afterDate').addEventListener('change', applyFilters);\n    document.getElementById('beforeDate').addEventListener('change', applyFilters);\n\n    filterFields.forEach(f => {\n      document\n        .getElementById('filter' + capitalize(f))\n        .addEventListener('change', applyFilters);\n    });\n\n    document.querySelectorAll('#dataTable th').forEach(th => {\n      th.addEventListener('click', () => {\n        const fld = th.dataset.field;\n        if (sortField === fld) sortAsc = !sortAsc;\n        else { sortField = fld; sortAsc = true; }\n        sortData();\n      });\n    });\n\n    document.getElementById('downloadAllBtn').addEventListener('click', downloadAllCsv);\n    document.getElementById('downloadFilteredBtn').addEventListener('click', downloadFilteredCsv);\n\n    renderTable();\n  });\n\n  function setupFilters() {\n    filterFields.forEach(f => {\n      const sel = document.getElementById('filter' + capitalize(f));\n      [...new Set(data.map(r => r[f]))]\n        .filter(v => v != null && v !== '')\n        .sort()\n        .forEach(v => {\n          const opt = document.createElement('option');\n          opt.value = v; opt.textContent = v;\n          sel.appendChild(opt);\n        });\n    });\n  }\n\n  function applyFilters() {\n    const term   = document.getElementById('searchInput').value.toLowerCase();\n    const after  = document.getElementById('afterDate').value;\n    const before = document.getElementById('beforeDate').value;\n\n    filteredData = data.filter(row => {\n      // text search\n      const txtOK = !term ||\n        Object.values(row).some(v => String(v).toLowerCase().includes(term));\n      // dropdowns\n      const fldOK = filterFields.every(f => {\n        const sel = document.getElementById('filter' + capitalize(f));\n        return !sel.value || row[f] === sel.value;\n      });\n      // date range\n      const dt      = new Date(row.date_sent);\n      const afterOK = !after  || dt >= new Date(after);\n      const beforeOK= !before || dt <= new Date(before);\n      return txtOK && fldOK && afterOK && beforeOK;\n    });\n\n    currentPage = 1;\n    if (sortField) sortData();\n    else renderTable();\n  }\n\n  function sortData() {\n    filteredData.sort((a,b) => {\n      const v1 = (a[sortField]||'').toString().toLowerCase();\n      const v2 = (b[sortField]||'').toString().toLowerCase();\n      return ((v1 < v2)? -1 : (v1 > v2)? 1 : 0) * (sortAsc ? 1 : -1);\n    });\n    renderTable();\n  }\n\n  function renderTable() {\n    const tb    = document.querySelector('#dataTable tbody');\n    tb.innerHTML = '';\n    const start = (currentPage - 1) * rowsPerPage;\n    filteredData.slice(start, start + rowsPerPage).forEach(row => {\n      const tr = document.createElement('tr');\n      headers.forEach(h => {\n        const td = document.createElement('td');\n        td.textContent = row[h] || '';\n        tr.appendChild(td);\n      });\n      tb.appendChild(tr);\n    });\n    renderPagination();\n  }\n\n  function renderPagination() {\n    const pg = document.getElementById('pagination');\n    pg.innerHTML = '';\n    const pageCount = Math.max(1, Math.ceil(filteredData.length / rowsPerPage));\n\n    const mkBtn = (txt, dis, fn) => {\n      const b = document.createElement('button');\n      b.textContent = txt;\n      if (dis) b.disabled = true;\n      else b.addEventListener('click', fn);\n      pg.appendChild(b);\n    };\n\n    mkBtn('Prev', currentPage === 1, () => { currentPage--; renderTable(); });\n    for (let i = 1; i <= pageCount; i++) {\n      mkBtn(i, i === currentPage, () => { currentPage = i; renderTable(); });\n    }\n    mkBtn('Next', currentPage === pageCount, () => { currentPage++; renderTable(); });\n  }\n\n  function downloadAllCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    data.forEach(r => {\n      csv += headers.map(h => \\`\"\\${r[h]||''}\"\\`).join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'all_records.csv');\n  }\n\n  function downloadFilteredCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    filteredData.forEach(r => {\n      csv += headers.map(h => \\`\"\\${r[h]||''}\"\\`).join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'filtered_records.csv');\n  }\n\n  function triggerDownload(content, filename) {\n    const blob = new Blob([content], { type: 'text/csv' });\n    const url  = URL.createObjectURL(blob);\n    const a    = document.createElement('a');\n    a.href     = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  function capitalize(s) {\n    return s.split('_').map(w => w.charAt(0).toUpperCase()+w.slice(1)).join('');\n  }\n</script>\n`;\n\n// 7) Return to your HTTP Response / UI node\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        320
      ],
      "id": "7e83e69d-0a6f-47d6-a80b-c7b413c2364a",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "// 1) Incoming JSON\nconst data = items.map(item => item.json);\n\n// 2) Which fields get dropdown filters?\nconst filterFields = ['entity','location','area','survey_source','response_required'];\n\n// 3) Derive columns\nconst headers = Object.keys(data[0] || {});\n\n// 4) Build filter <select>s (multiselect)\nconst filterSelectsHtml = filterFields.map(field => {\n  const id    = 'filter' + field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join('');\n  const options = [...new Set(data.map(r => r[field]))]\n    .filter(v => v != null && v !== '')\n    .sort()\n    .map(v => `<option value=\"${v}\">${v}</option>`)\n    .join('');\n  return `<select id=\"${id}\" multiple>${options}</select>`;\n}).join('');\n\n// 5) Build table headers\nconst headerRowHtml = headers.map(field => {\n  const title = field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n  return `<th data-field=\"${field}\">${title}</th>`;\n}).join('');\n\n// 6) Assemble HTML + CSS + JS\nconst html = `\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/styles/choices.min.css\" />\n<script src=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/scripts/choices.min.js\"></script>\n\n<style>\n  body {\n    font-family:'Segoe UI',sans-serif;\n    background:#f0f2f5;\n    margin:0; padding:20px;\n  }\n  .title {\n    font-size:1.8rem;\n    font-weight:700;\n    margin-bottom:12px;\n    color:#333;\n  }\n  .table-container {\n    background:#fff;\n    border-radius:12px;\n    box-shadow:0 4px 12px rgba(0,0,0,0.05);\n    padding:20px;\n  }\n  .controls {\n    display:flex;\n    flex-wrap:wrap;\n    gap:10px;\n    margin-bottom:16px;\n    align-items:center;\n  }\n  .controls label {\n    font-size:0.9rem;\n    margin-right:4px;\n    white-space:nowrap;\n  }\n  .controls input,\n  .controls select {\n    padding:8px 12px;\n    border:1px solid #ccd0d5;\n    border-radius:8px;\n    background:#fafbfc;\n    font-size:0.95rem;\n    min-width:140px;\n  }\n  .controls button {\n    padding:8px 16px;\n    border:none;\n    border-radius:8px;\n    background:#f97316;\n    color:#fff;\n    font-weight:600;\n    cursor:pointer;\n    transition:background .2s;\n  }\n  .controls button:hover {\n    background:#ea580c;\n  }\n  table {\n    width:100%;\n    border-collapse:separate;\n    border-spacing:0;\n    border-radius:8px;\n    overflow:hidden;\n  }\n  thead {\n    background:linear-gradient(90deg,#4f46e5,#6d5ceb);\n    color:#fff;\n  }\n  th, td {\n    padding:12px 16px;\n    text-align:left;\n  }\n  th {\n    cursor:pointer;\n    user-select:none;\n  }\n  tbody tr:nth-child(even) {\n    background:#f9faff;\n  }\n  tbody tr:hover {\n    background:#eef0ff;\n  }\n  #pagination {\n    margin-top:16px;\n    display:flex;\n    flex-wrap:wrap;\n    gap:6px;\n  }\n  #pagination button {\n    padding:6px 10px;\n    border:1px solid #ccd0d5;\n    border-radius:6px;\n    background:#fff;\n    cursor:pointer;\n    transition:background .2s;\n  }\n  #pagination button:hover:not(:disabled) {\n    background:#f0f2f5;\n  }\n  #pagination button:disabled {\n    opacity:.5;\n    cursor:default;\n  }\n\n  /* ─── Choices.js dropdown: auto-size to fit full text ─── */\n  .choices__list--dropdown {\n    width: max-content !important;\n    min-width: 100% !important;\n    white-space: nowrap;\n  }\n</style>\n\n<div class=\"title\">NPS</div>\n<div class=\"table-container\">\n  <div class=\"controls\">\n    <label for=\"searchInput\">Search:</label>\n    <input id=\"searchInput\" type=\"text\" placeholder=\"Search…\">\n\n    <label for=\"afterDate\">After:</label>\n    <input id=\"afterDate\" type=\"date\">\n\n    <label for=\"beforeDate\">Before:</label>\n    <input id=\"beforeDate\" type=\"date\">\n\n    ${filterSelectsHtml}\n\n    <button id=\"downloadAllBtn\">Download All CSV</button>\n    <button id=\"downloadFilteredBtn\">Download Filtered CSV</button>\n  </div>\n\n  <table id=\"dataTable\">\n    <thead><tr>${headerRowHtml}</tr></thead>\n    <tbody></tbody>\n  </table>\n\n  <div id=\"pagination\"></div>\n</div>\n\n<script>\n  const data = ${JSON.stringify(data)};\n  const headers = ${JSON.stringify(headers)};\n  const filterFields = ${JSON.stringify(filterFields)};\n  const rowsPerPage = 15;\n  let filteredData = data.slice();\n  let currentPage = 1;\n  let sortField = null;\n  let sortAsc = true;\n\n  document.addEventListener('DOMContentLoaded', () => {\n    filterFields.forEach(f => {\n      const selId = 'filter' + capitalize(f);\n      const sel = document.getElementById(selId);\n      const label = f.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n      new Choices(sel, {\n        removeItemButton: true,\n        placeholderValue: 'Select ' + label,\n        searchPlaceholderValue: 'Search ' + label,\n        searchEnabled: true,\n        shouldSort: true\n      });\n      sel.addEventListener('change', applyFilters);\n    });\n\n    document.getElementById('searchInput').addEventListener('input', applyFilters);\n    document.getElementById('afterDate').addEventListener('change', applyFilters);\n    document.getElementById('beforeDate').addEventListener('change', applyFilters);\n\n    document.querySelectorAll('#dataTable th').forEach(th => {\n      th.addEventListener('click', () => {\n        const fld = th.dataset.field;\n        if (sortField === fld) sortAsc = !sortAsc;\n        else { sortField = fld; sortAsc = true; }\n        sortData();\n      });\n    });\n\n    document.getElementById('downloadAllBtn').addEventListener('click', downloadAllCsv);\n    document.getElementById('downloadFilteredBtn').addEventListener('click', downloadFilteredCsv);\n\n    renderTable();\n  });\n\n  function applyFilters() {\n    const term   = document.getElementById('searchInput').value.toLowerCase();\n    const after  = document.getElementById('afterDate').value;\n    const before = document.getElementById('beforeDate').value;\n\n    filteredData = data.filter(row => {\n      const txtOK = !term || Object.values(row).some(v => String(v).toLowerCase().includes(term));\n      const fldOK = filterFields.every(f => {\n        const sel = document.getElementById('filter' + capitalize(f));\n        const selected = Array.from(sel.selectedOptions).map(o => o.value);\n        return selected.length === 0 || selected.includes(row[f]);\n      });\n      const dt       = new Date(row.date_sent);\n      const afterOK  = !after  || dt >= new Date(after);\n      const beforeOK = !before || dt <= new Date(before);\n      return txtOK && fldOK && afterOK && beforeOK;\n    });\n\n    currentPage = 1;\n    if (sortField) sortData();\n    else renderTable();\n  }\n\n  function sortData() {\n    filteredData.sort((a,b) => {\n      const v1 = (a[sortField]||'').toString().toLowerCase();\n      const v2 = (b[sortField]||'').toString().toLowerCase();\n      return ((v1 < v2)? -1 : (v1 > v2)? 1 : 0) * (sortAsc ? 1 : -1);\n    });\n    renderTable();\n  }\n\n  function renderTable() {\n    const tb    = document.querySelector('#dataTable tbody');\n    tb.innerHTML = '';\n    const start = (currentPage - 1) * rowsPerPage;\n    filteredData.slice(start, start + rowsPerPage).forEach(row => {\n      const tr = document.createElement('tr');\n      headers.forEach(h => {\n        const td = document.createElement('td');\n        td.textContent = row[h] || '';\n        tr.appendChild(td);\n      });\n      tb.appendChild(tr);\n    });\n    renderPagination();\n  }\n\n  function renderPagination() {\n    const pg = document.getElementById('pagination');\n    pg.innerHTML = '';\n    const pageCount = Math.max(1, Math.ceil(filteredData.length / rowsPerPage));\n\n    const mkBtn = (txt, dis, fn) => {\n      const b = document.createElement('button');\n      b.textContent = txt;\n      if (dis) b.disabled = true;\n      else b.addEventListener('click', fn);\n      pg.appendChild(b);\n    };\n\n    mkBtn('Prev', currentPage === 1,      () => { currentPage--; renderTable(); });\n    for (let i = 1; i <= pageCount; i++) {\n      mkBtn(i, i === currentPage, () => { currentPage = i; renderTable(); });\n    }\n    mkBtn('Next', currentPage === pageCount, () => { currentPage++; renderTable(); });\n  }\n\n  function downloadAllCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    data.forEach(r => {\n      csv += headers.map(h => \\`\"\\${r[h]||''}\"\\`).join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'all_records.csv');\n  }\n\n  function downloadFilteredCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    filteredData.forEach(r => {\n      csv += headers.map(h => \\`\"\\${r[h]||''}\"\\`).join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'filtered_records.csv');\n  }\n\n  function triggerDownload(content, filename) {\n    const blob = new Blob([content], { type: 'text/csv' });\n    const url  = URL.createObjectURL(blob);\n    const a    = document.createElement('a');\n    a.href     = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  function capitalize(s) {\n    return s.split('_').map(w => w.charAt(0).toUpperCase()+w.slice(1)).join('');\n  }\n</script>\n`;\n\n// 7) Return to your HTTP Response / UI node\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        460
      ],
      "id": "499aa0a8-ca7b-4af8-a6eb-62760d821c78",
      "name": "Code4"
    },
    {
      "parameters": {
        "jsCode": "// 1) Incoming JSON\nconst data = items.map(item => item.json);\n\n// 2) Which fields get dropdown filters?\nconst filterFields = ['entity','location','area','survey_source','response_required'];\n\n// 3) Derive columns\nconst headers = Object.keys(data[0] || {});\n\n// 4) Build filter <select>s (multiselect)\nconst filterSelectsHtml = filterFields.map(field => {\n  const id = 'filter' + field\n    .split('_')\n    .map(w => w[0].toUpperCase() + w.slice(1))\n    .join('');\n  const options = [...new Set(data.map(r => r[field]))]\n    .filter(v => v != null && v !== '')\n    .sort()\n    .map(v => `<option value=\"${v}\">${v}</option>`)\n    .join('');\n  return `<select id=\"${id}\" multiple>${options}</select>`;\n}).join('');\n\n// 5) Build table headers\nconst headerRowHtml = headers.map(field => {\n  const title = field\n    .split('_')\n    .map(w => w[0].toUpperCase() + w.slice(1))\n    .join(' ');\n  return `<th data-field=\"${field}\">${title}</th>`;\n}).join('');\n\n// 6) Assemble HTML + CSS + JS\nconst html = `\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/styles/choices.min.css\" />\n<script src=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/scripts/choices.min.js\"></script>\n\n<style>\n  /* Base page styles */\n  body { font-family:'Segoe UI',sans-serif; background:#f0f2f5; margin:0; padding:20px; }\n  .title { font-size:1.8rem; font-weight:700; margin-bottom:12px; color:#333; }\n  .table-container { background:#fff; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.05); padding:20px; }\n\n  /* Controls layout */\n  .controls { display:flex; flex-wrap:wrap; gap:10px; margin-bottom:16px; align-items:center; }\n  .controls label { font-size:0.9rem; margin-right:4px; white-space:nowrap; }\n  .controls input,\n  .controls select { padding:8px 12px; border:1px solid #ccd0d5; border-radius:8px; background:#fafbfc; font-size:0.95rem; min-width:140px; }\n  .controls button { padding:8px 16px; border:none; border-radius:8px; background:#f97316; color:#fff; font-weight:600; cursor:pointer; transition:background .2s; }\n  .controls button:hover { background:#ea580c; }\n\n  /* Table styles */\n  table { width:100%; border-collapse:separate; border-spacing:0; border-radius:8px; overflow:hidden; }\n  thead { background:linear-gradient(90deg,#4f46e5,#6d5ceb); color:#fff; }\n  th, td { padding:12px 16px; text-align:left; }\n  th { cursor:pointer; user-select:none; }\n  tbody tr:nth-child(even) { background:#f9faff; }\n  tbody tr:hover { background:#eef0ff; }\n\n  /* Pagination */\n  #pagination { margin-top:16px; display:flex; flex-wrap:wrap; gap:6px; }\n  #pagination button { padding:6px 10px; border:1px solid #ccd0d5; border-radius:6px; background:#fff; cursor:pointer; transition:background .2s; }\n  #pagination button:hover:not(:disabled) { background:#f0f2f5; }\n  #pagination button:disabled { opacity:.5; cursor:default; }\n\n  /* Choices.js multi-select tweaks */\n  /* allow each control to fill available space */\n  .controls .choices { flex:1 1 200px; min-width:160px; }\n  /* wrap selected items onto multiple lines */\n  .choices__inner { display:flex !important; flex-wrap:wrap; gap:6px; padding:6px; min-height:42px; }\n  /* auto-size dropdown to longest option */\n  .choices__list--dropdown { width:max-content !important; min-width:100% !important; white-space:nowrap; }\n  /* allow long labels to wrap */\n  .choices__list--multiple .choices__item { white-space:normal; word-break:break-word; max-width:200px; }\n</style>\n\n<div class=\"title\">NPS</div>\n<div class=\"table-container\">\n  <div class=\"controls\">\n    <label for=\"searchInput\">Search:</label>\n    <input id=\"searchInput\" type=\"text\" placeholder=\"Search…\">\n\n    <label for=\"afterDate\">After:</label>\n    <input id=\"afterDate\" type=\"date\">\n\n    <label for=\"beforeDate\">Before:</label>\n    <input id=\"beforeDate\" type=\"date\">\n\n    ${filterSelectsHtml}\n\n    <button id=\"downloadAllBtn\">Download All CSV</button>\n    <button id=\"downloadFilteredBtn\">Download Filtered CSV</button>\n  </div>\n\n  <table id=\"dataTable\">\n    <thead><tr>${headerRowHtml}</tr></thead>\n    <tbody></tbody>\n  </table>\n\n  <div id=\"pagination\"></div>\n</div>\n\n<script>\n  // Injected data & config\n  const data         = ${JSON.stringify(data)};\n  const headers      = ${JSON.stringify(headers)};\n  const filterFields = ${JSON.stringify(filterFields)};\n  const rowsPerPage  = 15;\n\n  let filteredData = data.slice();\n  let currentPage  = 1;\n  let sortField    = null;\n  let sortAsc      = true;\n\n  document.addEventListener('DOMContentLoaded', () => {\n    // Initialize Choices on each filter\n    filterFields.forEach(f => {\n      const selId = 'filter' + capitalize(f);\n      const sel   = document.getElementById(selId);\n      const label = f.split('_').map(w => w[0].toUpperCase()+w.slice(1)).join(' ');\n      new Choices(sel, {\n        removeItemButton: true,\n        placeholderValue:  'Select ' + label,\n        searchPlaceholderValue: 'Search ' + label,\n        searchEnabled: true,\n        shouldSort: true\n      });\n      sel.addEventListener('change', applyFilters);\n    });\n\n    // Other controls\n    document.getElementById('searchInput').addEventListener('input', applyFilters);\n    document.getElementById('afterDate').addEventListener('change', applyFilters);\n    document.getElementById('beforeDate').addEventListener('change', applyFilters);\n\n    // Sorting\n    document.querySelectorAll('#dataTable th').forEach(th => {\n      th.addEventListener('click', () => {\n        const fld = th.dataset.field;\n        if (sortField === fld) sortAsc = !sortAsc;\n        else { sortField = fld; sortAsc = true; }\n        sortData();\n      });\n    });\n\n    // CSV downloads\n    document.getElementById('downloadAllBtn').addEventListener('click', downloadAllCsv);\n    document.getElementById('downloadFilteredBtn').addEventListener('click', downloadFilteredCsv);\n\n    // Initial render\n    renderTable();\n  });\n\n  function applyFilters() {\n    const term   = document.getElementById('searchInput').value.toLowerCase();\n    const after  = document.getElementById('afterDate').value;\n    const before = document.getElementById('beforeDate').value;\n\n    filteredData = data.filter(row => {\n      // text search\n      const txtOK = !term ||\n        Object.values(row).some(v => String(v).toLowerCase().includes(term));\n\n      // multi-select filters\n      const fldOK = filterFields.every(f => {\n        const sel      = document.getElementById('filter' + capitalize(f));\n        const selected = Array.from(sel.selectedOptions).map(o => o.value);\n        return selected.length === 0 || selected.includes(row[f]);\n      });\n\n      // date range\n      const dt       = new Date(row.date_sent);\n      const afterOK  = !after  || dt >= new Date(after);\n      const beforeOK = !before || dt <= new Date(before);\n\n      return txtOK && fldOK && afterOK && beforeOK;\n    });\n\n    currentPage = 1;\n    sortField ? sortData() : renderTable();\n  }\n\n  function sortData() {\n    filteredData.sort((a,b) => {\n      const v1 = (a[sortField]||'').toString().toLowerCase();\n      const v2 = (b[sortField]||'').toString().toLowerCase();\n      return ((v1 < v2)? -1 : (v1 > v2)? 1 : 0) * (sortAsc ? 1 : -1);\n    });\n    renderTable();\n  }\n\n  function renderTable() {\n    const tb    = document.querySelector('#dataTable tbody');\n    tb.innerHTML = '';\n    const start = (currentPage - 1) * rowsPerPage;\n    filteredData.slice(start, start + rowsPerPage).forEach(row => {\n      const tr = document.createElement('tr');\n      headers.forEach(h => {\n        const td = document.createElement('td');\n        td.textContent = row[h] || '';\n        tr.appendChild(td);\n      });\n      tb.appendChild(tr);\n    });\n    renderPagination();\n  }\n\n  function renderPagination() {\n    const pg        = document.getElementById('pagination');\n    pg.innerHTML    = '';\n    const pageCount = Math.max(1, Math.ceil(filteredData.length / rowsPerPage));\n\n    const mkBtn = (txt, dis, fn) => {\n      const b = document.createElement('button');\n      b.textContent = txt;\n      if (dis) b.disabled = true;\n      else b.addEventListener('click', fn);\n      pg.appendChild(b);\n    };\n\n    mkBtn('Prev', currentPage === 1,      () => { currentPage--; renderTable(); });\n    for (let i = 1; i <= pageCount; i++) {\n      mkBtn(i, i === currentPage, () => { currentPage = i; renderTable(); });\n    }\n    mkBtn('Next', currentPage === pageCount, () => { currentPage++; renderTable(); });\n  }\n\n  function downloadAllCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    data.forEach(r => {\n      csv += headers.map(h => '\"' + (r[h]||'') + '\"').join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'all_records.csv');\n  }\n\n  function downloadFilteredCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    filteredData.forEach(r => {\n      csv += headers.map(h => '\"' + (r[h]||'') + '\"').join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'filtered_records.csv');\n  }\n\n  function triggerDownload(content, filename) {\n    const blob = new Blob([content], { type: 'text/csv' });\n    const url  = URL.createObjectURL(blob);\n    const a    = document.createElement('a');\n    a.href     = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  function capitalize(s) {\n    return s.split('_').map(w => w.charAt(0).toUpperCase()+w.slice(1)).join('');\n  }\n</script>\n`;\n\n// 7) Return to your HTTP Response / UI node\nreturn [{ json: { html } }];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        460
      ],
      "id": "2062b6db-038b-4575-b579-621477399ef6",
      "name": "Code5"
    },
    {
      "parameters": {
        "jsCode": "// 1) Incoming JSON\nconst data = items.map(item => item.json);\n\n// 2) Which fields get dropdown filters?\nconst filterFields = ['entity','location','area','survey_source','response_required'];\n\n// 3) Derive columns\nconst headers = Object.keys(data[0] || {});\n\n// 4) Build filter <select>s (multiselect)\nconst filterSelectsHtml = filterFields.map(field => {\n  const id    = 'filter' + field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join('');\n  const options = [...new Set(data.map(r => r[field]))]\n    .filter(v => v != null && v !== '')\n    .sort()\n    .map(v => `<option value=\"${v}\">${v}</option>`)\n    .join('');\n  return `<select id=\"${id}\" multiple>${options}</select>`;\n}).join('');\n\n// 5) Build table headers\nconst headerRowHtml = headers.map(field => {\n  const title = field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n  return `<th data-field=\"${field}\">${title}</th>`;\n}).join('');\n\n// 6) Assemble HTML + CSS + JS\nconst html = `\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/styles/choices.min.css\" />\n<script src=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/scripts/choices.min.js\"></script>\n\n<style>\n  body {\n    font-family:'Segoe UI',sans-serif;\n    background:#f0f2f5;\n    margin:0; padding:20px;\n  }\n  .title {\n    font-size:1.8rem;\n    font-weight:700;\n    margin-bottom:12px;\n    color:#333;\n  }\n  .table-container {\n    background:#fff;\n    border-radius:12px;\n    box-shadow:0 4px 12px rgba(0,0,0,0.05);\n    padding:20px;\n  }\n  .controls {\n    display:flex;\n    flex-wrap:wrap;\n    gap:10px;\n    margin-bottom:16px;\n    align-items:center;\n  }\n  .controls label {\n    font-size:0.9rem;\n    margin-right:4px;\n    white-space:nowrap;\n  }\n  .controls input,\n  .controls select {\n    padding:8px 12px;\n    border:1px solid #ccd0d5;\n    border-radius:8px;\n    background:#fafbfc;\n    font-size:0.95rem;\n    min-width:140px;\n  }\n  .controls button {\n    padding:8px 16px;\n    border:none;\n    border-radius:8px;\n    background:#f97316;\n    color:#fff;\n    font-weight:600;\n    cursor:pointer;\n    transition:background .2s;\n  }\n  .controls button:hover {\n    background:#ea580c;\n  }\n  table {\n    width:100%;\n    border-collapse:separate;\n    border-spacing:0;\n    border-radius:8px;\n    overflow:hidden;\n  }\n  thead {\n    background:linear-gradient(90deg,#4f46e5,#6d5ceb);\n    color:#fff;\n  }\n  th, td {\n    padding:12px 16px;\n    text-align:left;\n  }\n  th {\n    cursor:pointer;\n    user-select:none;\n  }\n  tbody tr:nth-child(even) {\n    background:#f9faff;\n  }\n  tbody tr:hover {\n    background:#eef0ff;\n  }\n  #pagination {\n    margin-top:16px;\n    display:flex;\n    flex-wrap:wrap;\n    gap:6px;\n  }\n  #pagination button {\n    padding:6px 10px;\n    border:1px solid #ccd0d5;\n    border-radius:6px;\n    background:#fff;\n    cursor:pointer;\n    transition:background .2s;\n  }\n  #pagination button:hover:not(:disabled) {\n    background:#f0f2f5;\n  }\n  #pagination button:disabled {\n    opacity:.5;\n    cursor:default;\n  }\n\n  /* ─── Choices.js dropdown: auto-size to fit full text ─── */\n  .choices__list--dropdown {\n    width: max-content !important;\n    min-width: 100% !important;\n    white-space: nowrap;\n  }\n</style>\n\n<div class=\"title\">NPS</div>\n<div class=\"table-container\">\n  <div class=\"controls\">\n    <label for=\"searchInput\">Search:</label>\n    <input id=\"searchInput\" type=\"text\" placeholder=\"Search…\">\n\n    <label for=\"afterDate\">After:</label>\n    <input id=\"afterDate\" type=\"date\">\n\n    <label for=\"beforeDate\">Before:</label>\n    <input id=\"beforeDate\" type=\"date\">\n\n    ${filterSelectsHtml}\n\n    <button id=\"downloadAllBtn\">Download All CSV</button>\n    <button id=\"downloadFilteredBtn\">Download Filtered CSV</button>\n  </div>\n\n  <table id=\"dataTable\">\n    <thead><tr>${headerRowHtml}</tr></thead>\n    <tbody></tbody>\n  </table>\n\n  <div id=\"pagination\"></div>\n</div>\n\n<script>\n  const data = ${JSON.stringify(data)};\n  const headers = ${JSON.stringify(headers)};\n  const filterFields = ${JSON.stringify(filterFields)};\n  const rowsPerPage = 15;\n  let filteredData = data.slice();\n  let currentPage = 1;\n  let sortField = null;\n  let sortAsc = true;\n\n  document.addEventListener('DOMContentLoaded', () => {\n    filterFields.forEach(f => {\n      const selId = 'filter' + capitalize(f);\n      const sel = document.getElementById(selId);\n      const label = f.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n      new Choices(sel, {\n        removeItemButton: true,\n        placeholderValue: 'Select ' + label,\n        searchPlaceholderValue: 'Search ' + label,\n        searchEnabled: true,\n        shouldSort: true\n      });\n      sel.addEventListener('change', applyFilters);\n    });\n\n    document.getElementById('searchInput').addEventListener('input', applyFilters);\n    document.getElementById('afterDate').addEventListener('change', applyFilters);\n    document.getElementById('beforeDate').addEventListener('change', applyFilters);\n\n    document.querySelectorAll('#dataTable th').forEach(th => {\n      th.addEventListener('click', () => {\n        const fld = th.dataset.field;\n        if (sortField === fld) sortAsc = !sortAsc;\n        else { sortField = fld; sortAsc = true; }\n        sortData();\n      });\n    });\n\n    document.getElementById('downloadAllBtn').addEventListener('click', downloadAllCsv);\n    document.getElementById('downloadFilteredBtn').addEventListener('click', downloadFilteredCsv);\n\n    renderTable();\n  });\n\n  function applyFilters() {\n    const term   = document.getElementById('searchInput').value.toLowerCase();\n    const after  = document.getElementById('afterDate').value;\n    const before = document.getElementById('beforeDate').value;\n\n    filteredData = data.filter(row => {\n      const txtOK = !term || Object.values(row).some(v => String(v).toLowerCase().includes(term));\n      const fldOK = filterFields.every(f => {\n        const sel = document.getElementById('filter' + capitalize(f));\n        const selected = Array.from(sel.selectedOptions).map(o => o.value);\n        return selected.length === 0 || selected.includes(row[f]);\n      });\n      const dt       = new Date(row.date_sent);\n      const afterOK  = !after  || dt >= new Date(after);\n      const beforeOK = !before || dt <= new Date(before);\n      return txtOK && fldOK && afterOK && beforeOK;\n    });\n\n    currentPage = 1;\n    if (sortField) sortData();\n    else renderTable();\n  }\n\n  function sortData() {\n    filteredData.sort((a,b) => {\n      const v1 = (a[sortField]||'').toString().toLowerCase();\n      const v2 = (b[sortField]||'').toString().toLowerCase();\n      return ((v1 < v2)? -1 : (v1 > v2)? 1 : 0) * (sortAsc ? 1 : -1);\n    });\n    renderTable();\n  }\n\n  function renderTable() {\n    const tb    = document.querySelector('#dataTable tbody');\n    tb.innerHTML = '';\n    const start = (currentPage - 1) * rowsPerPage;\n    filteredData.slice(start, start + rowsPerPage).forEach(row => {\n      const tr = document.createElement('tr');\n      headers.forEach(h => {\n        const td = document.createElement('td');\n        td.textContent = row[h] || '';\n        tr.appendChild(td);\n      });\n      tb.appendChild(tr);\n    });\n    renderPagination();\n  }\n\n  function renderPagination() {\n    const pg = document.getElementById('pagination');\n    pg.innerHTML = '';\n    const pageCount = Math.max(1, Math.ceil(filteredData.length / rowsPerPage));\n\n    const mkBtn = (txt, dis, fn) => {\n      const b = document.createElement('button');\n      b.textContent = txt;\n      if (dis) b.disabled = true;\n      else b.addEventListener('click', fn);\n      pg.appendChild(b);\n    };\n\n    mkBtn('Prev', currentPage === 1,      () => { currentPage--; renderTable(); });\n    for (let i = 1; i <= pageCount; i++) {\n      mkBtn(i, i === currentPage, () => { currentPage = i; renderTable(); });\n    }\n    mkBtn('Next', currentPage === pageCount, () => { currentPage++; renderTable(); });\n  }\n\n  function downloadAllCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    data.forEach(r => {\n      csv += headers.map(h => \\`\"\\${r[h]||''}\"\\`).join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'all_records.csv');\n  }\n\n  function downloadFilteredCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    filteredData.forEach(r => {\n      csv += headers.map(h => \\`\"\\${r[h]||''}\"\\`).join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'filtered_records.csv');\n  }\n\n  function triggerDownload(content, filename) {\n    const blob = new Blob([content], { type: 'text/csv' });\n    const url  = URL.createObjectURL(blob);\n    const a    = document.createElement('a');\n    a.href     = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  function capitalize(s) {\n    return s.split('_').map(w => w.charAt(0).toUpperCase()+w.slice(1)).join('');\n  }\n</script>\n`;\n\n// 7) Return to your HTTP Response / UI node\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        600
      ],
      "id": "6f8409e0-961f-4ac8-82e6-b798c2657635",
      "name": "Code6"
    },
    {
      "parameters": {
        "jsCode": "// 1) Incoming JSON\nconst data = items.map(item => item.json);\n\n// 2) Which fields get dropdown filters?\nconst filterFields = ['entity','location','area','survey_source','response_required'];\n\n// 3) Derive columns\nconst headers = Object.keys(data[0] || {});\n\n// 4) Rows per page\nconst rowsPerPage = 15;\n\n// 5) Build the full HTML + CSS + JS\nconst html = `\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/styles/choices.min.css\" />\n<script src=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/scripts/choices.min.js\"></script>\n\n<style>\n  body {\n    font-family:'Segoe UI',sans-serif;\n    background:#f0f2f5;\n    margin:0; padding:20px;\n  }\n  .title {\n    font-size:1.8rem;\n    font-weight:700;\n    margin-bottom:12px;\n    color:#333;\n  }\n  .table-container {\n    background:#fff;\n    border-radius:12px;\n    box-shadow:0 4px 12px rgba(0,0,0,0.05);\n    padding:20px;\n  }\n  .controls {\n    display:flex;\n    flex-wrap:wrap;\n    gap:10px;\n    margin-bottom:16px;\n    align-items:center;\n  }\n  .controls label {\n    font-size:0.9rem;\n    margin-right:4px;\n    white-space:nowrap;\n  }\n  .controls input,\n  .controls select {\n    padding:8px 12px;\n    border:1px solid #ccd0d5;\n    border-radius:8px;\n    background:#fafbfc;\n    font-size:0.95rem;\n    min-width:140px;\n  }\n  .controls > button {\n    padding:8px 16px;\n    border:none;\n    border-radius:8px;\n    background:#f97316;\n    color:#fff;\n    font-weight:600;\n    cursor:pointer;\n    transition:background .2s;\n  }\n  .controls > button:hover {\n    background:#ea580c;\n  }\n  /* restore Choices.js remove-item “×” button */\n  .choices__button {\n    background:transparent;\n    border:none;\n    color:#666;\n    font-size:1rem;\n    line-height:1;\n    margin-left:4px;\n    cursor:pointer;\n  }\n  table {\n    width:100%;\n    border-collapse:separate;\n    border-spacing:0;\n    border-radius:8px;\n    overflow:hidden;\n  }\n  thead {\n    background:linear-gradient(90deg,#4f46e5,#6d5ceb);\n    color:#fff;\n  }\n  th, td {\n    padding:12px 16px;\n    text-align:left;\n  }\n  th {\n    cursor:pointer;\n    user-select:none;\n  }\n  tbody tr:nth-child(even) {\n    background:#f9faff;\n  }\n  tbody tr:hover {\n    background:#eef0ff;\n  }\n  #pagination {\n    margin-top:16px;\n    display:flex;\n    flex-wrap:wrap;\n    gap:6px;\n  }\n  #pagination button {\n    padding:6px 10px;\n    border:1px solid #ccd0d5;\n    border-radius:6px;\n    background:#fff;\n    cursor:pointer;\n    transition:background .2s;\n  }\n  #pagination button:hover:not(:disabled) {\n    background:#f0f2f5;\n  }\n  #pagination button:disabled {\n    opacity:.5;\n    cursor:default;\n  }\n  .choices__list--dropdown {\n    width: max-content !important;\n    min-width: 100% !important;\n    white-space: nowrap;\n  }\n</style>\n\n<div class=\"title\">NPS</div>\n<div class=\"table-container\">\n  <div class=\"controls\">\n    <label for=\"searchInput\">Search:</label>\n    <input id=\"searchInput\" type=\"text\" placeholder=\"Search…\">\n\n    <label for=\"afterDate\">After:</label>\n    <input id=\"afterDate\" type=\"date\">\n\n    <label for=\"beforeDate\">Before:</label>\n    <input id=\"beforeDate\" type=\"date\">\n\n    ${filterFields.map(field => {\n      const id = 'filter' + field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join('');\n      return `<select id=\"${id}\" multiple></select>`;\n    }).join('')}\n\n    <button id=\"downloadAllBtn\">Download All CSV</button>\n    <button id=\"downloadFilteredBtn\">Download Filtered CSV</button>\n  </div>\n\n  <table id=\"dataTable\">\n    <thead>\n      <tr>\n        ${headers.map(f => {\n          const title = f.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n          return `<th data-field=\"${f}\">${title}</th>`;\n        }).join('')}\n      </tr>\n    </thead>\n    <tbody></tbody>\n  </table>\n\n  <div id=\"pagination\"></div>\n</div>\n\n<script>\n  const data = ${JSON.stringify(data)};\n  const headers = ${JSON.stringify(headers)};\n  const filterFields = ${JSON.stringify(filterFields)};\n  const rowsPerPage = ${rowsPerPage};\n\n  let filteredIndices = data.map((_,i)=>i);\n  let currentPage = 1;\n  let sortField = null;\n  let sortAsc = true;\n\n  document.addEventListener('DOMContentLoaded', () => {\n    // initialize multiselects\n    filterFields.forEach(f => {\n      const sel = document.getElementById('filter' + capitalize(f));\n      [...new Set(data.map(r=>r[f]))]\n        .filter(v=>v!=null&&v!=='')\n        .sort()\n        .forEach(v => {\n          const o = document.createElement('option');\n          o.value = v; o.textContent = v;\n          sel.appendChild(o);\n        });\n      new Choices(sel, {\n        removeItemButton: true,\n        placeholderValue: 'Select ' + capitalize(f),\n        searchPlaceholderValue: 'Search ' + capitalize(f),\n        searchEnabled: true,\n        shouldSort: true\n      });\n      sel.addEventListener('change', onFilterChange);\n    });\n\n    // other filters\n    document.getElementById('searchInput').addEventListener('input', onFilterChange);\n    document.getElementById('afterDate').addEventListener('change', onFilterChange);\n    document.getElementById('beforeDate').addEventListener('change', onFilterChange);\n\n    // sorting\n    document.querySelectorAll('#dataTable th').forEach(th => {\n      th.addEventListener('click', () => {\n        const fld = th.dataset.field;\n        if (sortField === fld) sortAsc = !sortAsc;\n        else { sortField = fld; sortAsc = true; }\n        sortIndices();\n      });\n    });\n\n    // CSV download buttons\n    document.getElementById('downloadAllBtn').addEventListener('click', downloadAllCsv);\n    document.getElementById('downloadFilteredBtn').addEventListener('click', downloadFilteredCsv);\n\n    initTable();\n    renderTable();\n  });\n\n  function initTable() {\n    const tbody = document.querySelector('#dataTable tbody');\n    data.forEach((row,i) => {\n      const tr = document.createElement('tr');\n      tr.dataset.index = i;\n      headers.forEach(h => {\n        const td = document.createElement('td');\n        td.textContent = row[h] || '';\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n    });\n  }\n\n  function onFilterChange() {\n    const term   = document.getElementById('searchInput').value.toLowerCase();\n    const after  = document.getElementById('afterDate').value;\n    const before = document.getElementById('beforeDate').value;\n\n    filteredIndices = data\n      .map((row,i)=>({row,i}))\n      .filter(({row}) => {\n        const txtOK = !term || Object.values(row).some(v => String(v).toLowerCase().includes(term));\n        const fldOK = filterFields.every(f => {\n          const selVals = Array.from(document.getElementById('filter' + capitalize(f)).selectedOptions).map(o=>o.value);\n          return !selVals.length || selVals.includes(row[f]);\n        });\n        const dt = new Date(row.date_sent);\n        const afterOK  = !after  || dt >= new Date(after);\n        const beforeOK = !before || dt <= new Date(before);\n        return txtOK && fldOK && afterOK && beforeOK;\n      })\n      .map(o=>o.i);\n\n    currentPage = 1;\n    if (sortField) sortIndices();\n    else renderTable();\n  }\n\n  function sortIndices() {\n    filteredIndices.sort((a,b) => {\n      const v1 = (data[a][sortField]||'').toString().toLowerCase();\n      const v2 = (data[b][sortField]||'').toString().toLowerCase();\n      return ((v1<v2)?-1:(v1>v2)?1:0) * (sortAsc?1:-1);\n    });\n    renderTable();\n  }\n\n  function renderTable() {\n    const start   = (currentPage - 1) * rowsPerPage;\n    const pageSet = new Set(filteredIndices.slice(start, start + rowsPerPage));\n    document.querySelectorAll('#dataTable tbody tr').forEach(tr => {\n      tr.style.display = pageSet.has(+tr.dataset.index) ? '' : 'none';\n    });\n    renderPagination();\n  }\n\n  function renderPagination() {\n    const pg = document.getElementById('pagination');\n    pg.innerHTML = '';\n    const pageCount = Math.max(1, Math.ceil(filteredIndices.length / rowsPerPage));\n    const mkBtn = (txt, dis, fn) => {\n      const b = document.createElement('button');\n      b.textContent = txt;\n      if (dis) b.disabled = true;\n      else b.addEventListener('click', fn);\n      pg.appendChild(b);\n    };\n    mkBtn('Prev', currentPage === 1,      () => { currentPage--; renderTable(); });\n    for (let i = 1; i <= pageCount; i++) {\n      mkBtn(i, i === currentPage, () => { currentPage = i; renderTable(); });\n    }\n    mkBtn('Next', currentPage === pageCount, () => { currentPage++; renderTable(); });\n  }\n\n  function downloadAllCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    data.forEach(r => {\n      csv += headers.map(h => '\"' + (r[h] || '') + '\"').join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'all_records.csv');\n  }\n\n  function downloadFilteredCsv() {\n    let csv = headers.join(',') + '\\\\n';\n    filteredIndices.forEach(i => {\n      const r = data[i];\n      csv += headers.map(h => '\"' + (r[h] || '') + '\"').join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'filtered_records.csv');\n  }\n\n  function triggerDownload(content, filename) {\n    const blob = new Blob([content], { type: 'text/csv' });\n    const url  = URL.createObjectURL(blob);\n    const a    = document.createElement('a');\n    a.href     = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  function capitalize(s) {\n    return s.split('_').map(w => w.charAt(0).toUpperCase()+w.slice(1)).join('');\n  }\n</script>\n`;\n\n// 6) Return to your HTTP Response / UI node\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        640
      ],
      "id": "236eb6d7-6aa2-455e-bd65-7351c8d34909",
      "name": "Code7"
    },
    {
      "parameters": {
        "jsCode": "// 1) Incoming JSON\nconst data = items.map(item => item.json);\n\n// 2) Which fields get dropdown filters?\nconst filterFields = ['entity','location','area','survey_source','response_required'];\n\n// 3) Derive columns\nconst headers = Object.keys(data[0] || {});\n\n// 4) Rows per page\nconst rowsPerPage = 15;\n\n// 5) Build the full HTML + CSS + JS\nconst html = `\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/styles/choices.min.css\" />\n<script src=\"https://cdn.jsdelivr.net/npm/choices.js@10/public/assets/scripts/choices.min.js\"></script>\n\n<style>\n  body { font-family:'Segoe UI',sans-serif; background:#f0f2f5; margin:0; padding:20px }\n  .title { font-size:1.8rem; font-weight:700; margin-bottom:12px; color:#333 }\n  .table-container {\n    background:#fff; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.05); padding:20px\n  }\n\n  /* CONTROLS */\n  .controls { display:flex; flex-direction:column; gap:16px }\n  .search-controls { display:flex; gap:10px; flex-wrap:wrap; align-items:center }\n  .multiselect-container {\n    display:grid;\n    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n    gap:8px;\n  }\n  .button-controls { display:flex; gap:10px; flex-wrap:wrap }\n  .controls label { font-size:0.9rem; white-space:nowrap; margin-right:4px }\n  .controls input, .controls select {\n    padding:8px 12px; border:1px solid #ccd0d5; border-radius:8px;\n    background:#fafbfc; font-size:0.95rem; min-width:140px;\n  }\n  .button-controls > button {\n    padding:8px 16px; border:none; border-radius:8px;\n    background:#f97316; color:#fff; font-weight:600; cursor:pointer;\n    transition:background .2s;\n  }\n  .button-controls > #clearFiltersBtn { background:#6b7280 }\n  .button-controls > button:hover { background:#ea580c }\n\n  /* Choices.js MULTISELECT OVERRIDES */\n  .choices__container { width:100% !important }\n  .choices__list--multiple {\n    display:flex !important;\n    flex-direction:column !important;\n    flex-wrap:nowrap !important;\n    max-height:200px !important;\n    overflow-y:auto !important;\n    padding:4px 8px !important;\n  }\n  .choices__item {\n    display:flex; align-items:center;\n    background:#06b6d4 !important; color:#fff !important;\n    border-radius:9999px !important; padding:4px 8px !important;\n    margin:4px 0 !important; font-size:0.85rem !important;\n  }\n  .choices__button {\n    background:transparent !important; border:none !important;\n    color:#fff !important; font-size:1rem !important; font-weight:700 !important;\n    line-height:1 !important; margin-left:8px !important; cursor:pointer !important;\n  }\n\n  /* TABLE & PAGINATION */\n  table {\n    width:100%; border-collapse:separate; border-spacing:0;\n    border-radius:8px; overflow:hidden; margin-top:12px;\n  }\n  thead { background:linear-gradient(90deg,#4f46e5,#6d5ceb); color:#fff }\n  th, td { padding:12px 16px; text-align:left }\n  th { cursor:pointer; user-select:none }\n  tbody tr:nth-child(even) { background:#f9faff }\n  tbody tr:hover { background:#eef0ff }\n  #pagination {\n    margin-top:16px; display:flex; flex-wrap:wrap; gap:6px;\n  }\n  #pagination button {\n    padding:6px 10px; border:1px solid #ccd0d5;\n    border-radius:6px; background:#fff; cursor:pointer;\n    transition:background .2s;\n  }\n  #pagination button:hover:not(:disabled) { background:#f0f2f5 }\n  #pagination button:disabled { opacity:.5; cursor:default }\n</style>\n\n<div class=\"title\">NPS</div>\n<div class=\"table-container\">\n  <div class=\"controls\">\n    <div class=\"search-controls\">\n      <label for=\"searchInput\">Search:</label>\n      <input id=\"searchInput\" type=\"text\" placeholder=\"Search…\">\n\n      <label for=\"afterDate\">After:</label>\n      <input id=\"afterDate\" type=\"date\">\n\n      <label for=\"beforeDate\">Before:</label>\n      <input id=\"beforeDate\" type=\"date\">\n\n      <label for=\"scoreMin\">Score ≥</label>\n      <input id=\"scoreMin\" type=\"number\" placeholder=\"Min\">\n\n      <label for=\"scoreMax\">Score ≤</label>\n      <input id=\"scoreMax\" type=\"number\" placeholder=\"Max\">\n    </div>\n\n    <div class=\"multiselect-container\">\n      ${filterFields.map(field => {\n        const id = 'filter' + field.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join('');\n        return `<select id=\"${id}\" multiple>\n                  <option value=\"__all__\">All</option>\n                </select>`;\n      }).join('')}\n    </div>\n\n    <div class=\"button-controls\">\n      <button id=\"downloadAllBtn\">Download All CSV</button>\n      <button id=\"downloadFilteredBtn\">Download Filtered CSV</button>\n      <button id=\"clearFiltersBtn\">Clear Filters</button>\n    </div>\n  </div>\n\n  <table id=\"dataTable\">\n    <thead>\n      <tr>\n        ${headers.map(f => {\n          const title = f.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ');\n          return `<th data-field=\"${f}\">${title}</th>`;\n        }).join('')}\n      </tr>\n    </thead>\n    <tbody></tbody>\n  </table>\n\n  <div id=\"pagination\"></div>\n</div>\n\n<script>\n  const data = ${JSON.stringify(data)};\n  const headers = ${JSON.stringify(headers)};\n  const filterFields = ${JSON.stringify(filterFields)};\n  const rowsPerPage = ${rowsPerPage};\n  const choicesInstances = {};\n  let filteredIndices = data.map((_,i)=>i);\n  let currentPage = 1;\n  let sortField = null;\n  let sortAsc = true;\n\n  document.addEventListener('DOMContentLoaded', () => {\n    filterFields.forEach(f => {\n      const selId = 'filter' + capitalize(f);\n      const sel = document.getElementById(selId);\n      // populate options\n      [...new Set(data.map(r=>r[f]))]\n        .filter(v=>v!=null && v!=='')\n        .sort()\n        .forEach(v => {\n          const o = document.createElement('option');\n          o.value = v; o.textContent = v;\n          sel.appendChild(o);\n        });\n      // init Choices\n      const inst = new Choices(sel, {\n        removeItemButton: true,\n        placeholderValue: 'Select ' + capitalize(f),\n        searchPlaceholderValue: 'Search ' + capitalize(f),\n        searchEnabled: true,\n        shouldSort: true\n      });\n      choicesInstances[f] = inst;\n\n      // All / deselect logic\n      sel.addEventListener('change', () => {\n        const vals = inst.getValue(true);\n        if (vals.includes('__all__')) {\n          vals.filter(v => v !== '__all__').forEach(v => inst.removeActiveItemsByValue(v));\n        } else if (vals.length) {\n          inst.removeActiveItemsByValue('__all__');\n        }\n        applyFilters();\n      });\n      // deselect by clicking pill\n      sel.parentNode.querySelector('.choices__list--multiple')\n        .addEventListener('click', e => {\n          const pill = e.target.closest('.choices__item');\n          if (!pill) return;\n          inst.removeActiveItemsByValue(pill.getAttribute('data-value'));\n          applyFilters();\n        });\n    });\n\n    // basic filters + score range\n    ['searchInput','afterDate','beforeDate','scoreMin','scoreMax']\n      .forEach(id => document.getElementById(id).addEventListener('input', applyFilters));\n\n    // sorting\n    document.querySelectorAll('#dataTable th').forEach(th => {\n      th.addEventListener('click', () => {\n        const fld = th.dataset.field;\n        if (sortField === fld) sortAsc = !sortAsc;\n        else { sortField = fld; sortAsc = true; }\n        sortData();\n      });\n    });\n\n    // CSV & clear\n    document.getElementById('downloadAllBtn').addEventListener('click', downloadAllCsv);\n    document.getElementById('downloadFilteredBtn').addEventListener('click', downloadFilteredCsv);\n    document.getElementById('clearFiltersBtn').addEventListener('click', () => {\n      ['searchInput','afterDate','beforeDate','scoreMin','scoreMax'].forEach(id => {\n        document.getElementById(id).value = '';\n      });\n      filterFields.forEach(f => choicesInstances[f].removeActiveItems());\n      currentPage = 1;\n      applyFilters();\n    });\n\n    initTable();\n    renderTable();\n  });\n\n  function applyFilters() {\n    const term     = document.getElementById('searchInput').value.toLowerCase();\n    const after    = document.getElementById('afterDate').value;\n    const before   = document.getElementById('beforeDate').value;\n    const minScore = parseFloat(document.getElementById('scoreMin').value);\n    const maxScore = parseFloat(document.getElementById('scoreMax').value);\n\n    filteredIndices = data\n      .map((row,i)=>({row,i}))\n      .filter(({row})=>{\n        const txtOK = !term || Object.values(row).some(v=>String(v).toLowerCase().includes(term));\n        const fldOK = filterFields.every(f => {\n          const vals = choicesInstances[f].getValue(true);\n          return vals.includes('__all__') || !vals.length || vals.includes(row[f]);\n        });\n        const dt = new Date(row.date_sent);\n        const dateOK = (!after||dt>=new Date(after)) && (!before||dt<=new Date(before));\n        const sc  = parseFloat(row.score);\n        const scoreOK =\n          (isNaN(minScore) || sc >= minScore) &&\n          (isNaN(maxScore) || sc <= maxScore);\n        return txtOK && fldOK && dateOK && scoreOK;\n      })\n      .map(o=>o.i);\n\n    currentPage = 1;\n    sortField ? sortData() : renderTable();\n  }\n\n  function sortData() {\n    filteredIndices.sort((a,b) => {\n      if (sortField === 'score') {\n        return ( (parseFloat(data[a].score) - parseFloat(data[b].score)) * (sortAsc?1:-1) );\n      }\n      const v1 = (data[a][sortField]||'').toString().toLowerCase();\n      const v2 = (data[b][sortField]||'').toString().toLowerCase();\n      return ((v1<v2)?-1:(v1>v2)?1:0) * (sortAsc?1:-1);\n    });\n    renderTable();\n  }\n\n  function initTable() {\n    const tbody = document.querySelector('#dataTable tbody');\n    data.forEach((row,i) => {\n      const tr = document.createElement('tr');\n      tr.dataset.index = i;\n      headers.forEach(h => {\n        const td = document.createElement('td');\n        td.textContent = row[h]||'';\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n    });\n  }\n\n  function renderTable() {\n    const start   = (currentPage-1)*rowsPerPage;\n    const pageSet = new Set(filteredIndices.slice(start,start+rowsPerPage));\n    document.querySelectorAll('#dataTable tbody tr').forEach(tr => {\n      tr.style.display = pageSet.has(+tr.dataset.index) ? '' : 'none';\n    });\n    renderPagination();\n  }\n\n  function renderPagination() {\n    const pg = document.getElementById('pagination');\n    pg.innerHTML = '';\n    const pc = Math.max(1, Math.ceil(filteredIndices.length/rowsPerPage));\n    const mk = (txt,dis,fn) => {\n      const btn = document.createElement('button');\n      btn.textContent = txt;\n      if (dis) btn.disabled = true;\n      else btn.addEventListener('click', fn);\n      pg.appendChild(btn);\n    };\n    mk('Prev', currentPage===1, ()=>{currentPage--;renderTable();});\n    for (let i=1;i<=pc;i++) mk(i, i===currentPage, ()=>{currentPage=i;renderTable();});\n    mk('Next', currentPage===pc, ()=>{currentPage++;renderTable();});\n  }\n\n  function downloadAllCsv() {\n    let csv = headers.join(',')+'\\\\n';\n    data.forEach(r => {\n      csv += headers.map(h => '\"' + (r[h] || '') + '\"').join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'all_records.csv');\n  }\n\n  function downloadFilteredCsv() {\n    let csv = headers.join(',')+'\\\\n';\n    filteredIndices.forEach(i => {\n      const r = data[i];\n      csv += headers.map(h => '\"' + (r[h] || '') + '\"').join(',') + '\\\\n';\n    });\n    triggerDownload(csv, 'filtered_records.csv');\n  }\n\n  function triggerDownload(content, filename) {\n    const blob = new Blob([content], { type:'text/csv' });\n    const url  = URL.createObjectURL(blob);\n    const a    = document.createElement('a');\n    a.href     = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n\n  function capitalize(s) {\n    return s.split('_').map(w => w.charAt(0).toUpperCase()+w.slice(1)).join('');\n  }\n</script>\n`;\n\n// 6) Return to your HTTP Response / UI node\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        820,
        640
      ],
      "id": "b1262b3a-e8ef-4336-92fc-b9a78d036a76",
      "name": "Code8"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-06-24T14:22:46.377Z",
  "versionId": "d03c9e2e-0317-4107-a3b6-c53697748891"
}