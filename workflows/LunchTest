{
  "createdAt": "2024-06-23T19:27:59.236Z",
  "updatedAt": "2024-07-11T14:26:39.786Z",
  "id": "7gU8AQwGUuOaDcUq",
  "name": "LunchTest",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "SaveForcedAppointment"
            },
            {
              "name": "AppUserID",
              "value": "HEROERP"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "={{ $('Paitient').item.json[\"Patient_ID\"] }}"
            },
            {
              "name": "Token",
              "value": "={{ $('Merge').item.json.data }}"
            },
            {
              "name": "Parameter1",
              "value": "=<appt><appointmentDateTime>{{ $('Appointment Time').item.json[\"formattedDate\"] }}</appointmentDateTime><appointmentDuration>5</appointmentDuration><appointmentType>WIOV</appointmentType><schedulingLocation>EPS10Mil</schedulingLocation><schedulingDepartment>EPIC PC</schedulingDepartment><resource>{{ $('Merge').item.json[\"Appt_Resource_Abbr\"] }}</resource><comments>Walkin-Kiosk {In five words why are you here?} </comments></appt>"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "b25f51a4-ecab-4d3d-81ad-8dba509dff3e",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2040,
        1560
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @LOC VARCHAR(200) = 'EPIC Southfield 10 Mile';\n \nWITH ApptData AS (\n    SELECT \n        [Patient_ID],\n        [Patient_Number],\n        [Appt_ID],\n        [Appt_DateTime],\n        [Appt_Encounter_Number],\n        [Appt_Resource_ID],\n        [Appt_Resource_Abbr],\n        [Appt_Resource_Descr],\n        [Appt_Resource_Assoc_Prov_LFI],\n        [Appt_Type_Abbr],\n        [Appt_Type_Descr],\n        [Appt_Duration],\n        [Appt_Comments],\n        [Appt_Status],\n        [Appt_Time_In],\n        [Appt_Booked_Date],\n        [Appt_Booked_By_Operator_Abbr],\n        [Appt_Is_Forced],\n        [Appt_Started_Time],\n        [Appt_Check_Out_Time],\n        [Appt_Acknowledged_Date],\n        [Appt_Ack_By_Operator_Abbr],a.Appt_Sched_Location_Descr\n    FROM \n        [Ntier_EPIC].[dbo].[vwGenPatApptInfo] a\n    WHERE \n        CAST(a.Appt_DateTime AS date) = CAST(GETDATE() AS date) AND \n        CAST(a.Appt_DateTime AS time) BETWEEN DATEADD(MINUTE, -60, CAST(GETDATE() AS time)) \n        AND DATEADD(MINUTE, 60, CAST(GETDATE() AS time)) AND \n        a.Appt_Sched_Location_Descr = @LOC AND \n        a.Appt_Resource_Descr NOT LIKE 'PA%' AND a.Appt_Resource_Descr NOT LIKE 'Ther%' and a.Appt_Resource_Descr NOT LIKE 'Exer%' and a.Appt_Resource_Descr NOT LIKE 'Blue%' and\n\t\ta.Appt_Resource_Descr NOT LIKE 'BH%' and a.Appt_Resource_Descr NOT LIKE 'Cardi%' and\n        a.Appt_Status IN ('A', 'S','C') AND \n        a.Appt_Check_Out_Time IS NULL\n),\nResourceSummary AS (\n    SELECT \n        Appt_Resource_ID,Appt_Resource_Descr,[Appt_Resource_Abbr],Appt_Sched_Location_Descr,\n        SUM(CASE WHEN Appt_Status = 'A' THEN 1 ELSE 0 END) AS A_Count,\n        SUM(CASE WHEN Appt_Status = 'S' THEN 1 ELSE 0 END) AS S_Count,\n\t\tSUM(CASE WHEN Appt_Status = 'C' THEN 1 ELSE 0 END) AS C_Count\n    FROM \n        ApptData\n    GROUP BY \n        Appt_Resource_ID,Appt_Resource_Descr,[Appt_Resource_Abbr],Appt_Sched_Location_Descr\n),\nRankedResources AS (\n    SELECT \n        Appt_Resource_ID,Appt_Resource_Descr,Appt_Resource_Abbr,\n        A_Count,C_Count,\n        S_Count,Appt_Sched_Location_Descr,\n        RANK() OVER (ORDER BY A_Count, S_Count,C_Count asc) AS AvailRank\n    FROM \n        ResourceSummary\n)\nSELECT \n    r.Appt_Resource_ID,r.Appt_Resource_Descr,r.Appt_Resource_Abbr,\n    r.A_Count,\n    r.S_Count,\n\tr.C_Count,\n    r.AvailRank AS MostAvail,\n\tr.Appt_Sched_Location_Descr\nFROM \n    RankedResources r\n \nORDER BY \n    r.AvailRank"
      },
      "id": "5e2a749c-e724-48a4-a07f-46f0a61e469d",
      "name": "Most Available Provider",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        -1743.3490852793811,
        1531.005042326963
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "content": "## Schedule the walk-in",
        "height": 336.62479116762086,
        "width": 3968.394227660083,
        "color": 4
      },
      "id": "bc3d2786-40ec-4d0c-a50c-5f4ae36a955b",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1783.3490852793811,
        1451.005042326963
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "89ed7c73-bb4c-40b7-958a-7d723456d2da",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -303.34908527938114,
        1551.005042326963
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\n    <script>\n        setTimeout(function() {\n            window.location.href = 'https://xl.epicpc.com/webhook/a7739828-9187-45a4-9e7f-e43d0f61f6ac?hostname={{ $('Webhook3').item.json[\"query\"][\"hostname\"] }}'; // Replace with your target URL\n        }, 10000); // 10000 milliseconds = 10 seconds\n    </script>\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>EPIC Walk-in Patient</title>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background: #f5b800;\n            color: #fff;\n            text-align: center;\n        }\n        .container {\n            background: #333;\n            padding: 50px;\n            border-radius: 10px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n            max-width: 600px;\n            width: 100%;\n        }\n        h1 {\n            font-size: 2.4em;\n            margin-bottom: 30px;\n            white-space: nowrap;\n            text-align: center;\n            width: 100%;\n        }\n        p {\n            font-size: 1.5em;\n            margin-bottom: 30px;\n        }\n        .confetti {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Scheduling Successful!</h1>\n        <p>Your appointment has been scheduled with {{ $('Merge').item.json[\"Appt_Resource_Descr\"] }}.</p>\n<b>Please see the medical receptionist to check in.</b>\n    </div>\n\n    <canvas class=\"confetti\"></canvas>\n\n    <script>\n        function randomInRange(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n\n        function createConfetti() {\n            const confetti = document.querySelector('.confetti');\n            const ctx = confetti.getContext('2d');\n            const pieces = [];\n            let animationFrame;\n            let animationStart;\n\n            confetti.width = window.innerWidth;\n            confetti.height = window.innerHeight;\n\n            function ConfettiPiece() {\n                this.x = Math.random() * confetti.width;\n                this.y = Math.random() * confetti.height - confetti.height;\n                this.size = randomInRange(10, 20);\n                this.weight = randomInRange(2, 6);\n                this.color = `hsl(${randomInRange(0, 360)}, 100%, 50%)`;\n                this.angle = Math.random() * 2 * Math.PI;\n                this.speed = randomInRange(1, 5);\n                this.opacity = 1;\n\n                this.update = function(elapsedTime) {\n                    this.y += this.weight;\n                    this.x += Math.sin(this.angle) * this.speed;\n\n                    if (elapsedTime > 3000) {\n                        this.opacity -= 0.02;\n                        if (this.opacity < 0) this.opacity = 0;\n                    }\n\n                    if (this.y > confetti.height) {\n                        this.y = 0 - this.size;\n                        this.x = Math.random() * confetti.width;\n                    }\n                };\n\n                this.draw = function() {\n                    ctx.fillStyle = this.color;\n                    ctx.globalAlpha = this.opacity;\n                    ctx.beginPath();\n                    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\n                    ctx.fill();\n                };\n            }\n\n            function updateConfetti(timestamp) {\n                if (!animationStart) animationStart = timestamp;\n                const elapsedTime = timestamp - animationStart;\n\n                ctx.clearRect(0, 0, confetti.width, confetti.height);\n\n                for (let i = 0; i < pieces.length; i++) {\n                    pieces[i].update(elapsedTime);\n                    pieces[i].draw();\n                }\n\n                if (elapsedTime < 5000) { // Run the animation for 5 seconds total (3 seconds full + 2 seconds fade)\n                    animationFrame = requestAnimationFrame(updateConfetti);\n                } else {\n                    cancelAnimationFrame(animationFrame);\n                }\n            }\n\n            function initializeConfetti() {\n                for (let i = 0; i < 150; i++) {\n                    pieces.push(new ConfettiPiece());\n                }\n                animationFrame = requestAnimationFrame(updateConfetti);\n            }\n\n            initializeConfetti();\n        }\n\n        document.addEventListener('DOMContentLoaded', createConfetti);\n    </script>\n</body>\n</html>\n",
        "options": {}
      },
      "id": "ace6e267-a155-40f8-8a1f-5f74bac3f1ed",
      "name": "Respond to Webhook3",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2276.650914720619,
        1551.005042326963
      ]
    },
    {
      "parameters": {},
      "id": "6c710dbd-7e8f-4862-9be0-6da6ed775ffa",
      "name": "When clicking \"Test workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -940,
        3260
      ]
    },
    {
      "parameters": {
        "fileSelector": "pmtoken.txt",
        "options": {}
      },
      "id": "2c7ac8c9-db4e-43e1-98d5-23876d28b72b",
      "name": "Read/Write Files from Disk",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1564.3490852793811,
        1912.005042326963
      ]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "pmtoken.txt",
        "options": {
          "append": false
        }
      },
      "id": "0ac6749a-7de0-42b3-8f29-aac7e55525be",
      "name": "Read/Write Files from Disk1",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -583.3490852793811,
        2311.005042326963
      ]
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "data",
        "options": {}
      },
      "id": "e3b59f87-616e-44de-bd02-237b1e65e549",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -763.3490852793811,
        2311.005042326963
      ]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "6cbfc102-2715-44a4-b289-58fca2cf6f0f",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1384.3490852793811,
        1912.005042326963
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.data[0].getuserauthenticationinfo[0].ValidUser }}",
              "value2": "YES"
            }
          ]
        }
      },
      "id": "8328c17d-3dfe-46b0-8918-c6bea5049b60",
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1104.3490852793811,
        2152.005042326963
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.data = JSON.parse(item.json.data);\n}\n\nreturn $input.all();"
      },
      "id": "3955dea3-37cd-4fbf-933e-ddc43ea9845d",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1244.3490852793811,
        2152.005042326963
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"Action\":\"GetUserAuthentication\",\n\"AppUserID\":\"HEROERP\",\n\"Appname\":\"EPICPC.NMNWokflow.TestApp\",\n\"PatientID\":\"\",\n\"Token\":\"{{ $json[\"data\"] }}\",\n\"Parameter1\":\"Fwuser#12345\"\n}\n",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "02d21213-ba7c-43e6-a283-1944697dcdd4",
      "name": "Check Token1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1384.3490852793811,
        2152.005042326963
      ]
    },
    {
      "parameters": {
        "content": "## ASPM Authentication\n**Check token: if yes (use), if no (get new)",
        "height": 666.2861090173772,
        "width": 1290.8012866477518,
        "color": 2
      },
      "id": "57afaf3a-4bed-4ff4-a316-0a0bf19086ea",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1604.3490852793811,
        1824.005042326963
      ]
    },
    {
      "parameters": {
        "height": 362.7737573665016,
        "width": 646.6471275914764,
        "color": 4
      },
      "id": "4e10b302-9217-4e1d-9380-99b1516b434a",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -963.3490852793811,
        1831.005042326963
      ]
    },
    {
      "parameters": {
        "height": 294.96556026709675,
        "width": 656.1571203767965,
        "color": 3
      },
      "id": "febab954-68a2-43a6-b319-89b410228e07",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -968.3490852793811,
        2197.005042326963
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/GetToken",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": {
          "Username": "56233400f:10031494^1^EPICP-d6d4-NMNWokflow-prod",
          "Password": "%p3CpcN3nW!eFlfWt%St7Pp0435@"
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "b9c76aac-6711-49a8-a01d-b66d17e64f83",
      "name": "HTTP Request3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -920,
        2320
      ]
    },
    {
      "parameters": {
        "fileSelector": "pmtoken.txt",
        "options": {}
      },
      "id": "c4a4de26-5528-4d96-b8cc-ffb8e9428461",
      "name": "Read/Write Files from Disk2",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -804.3490852793811,
        1952.005042326963
      ]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "4aed2484-1990-4c3b-9aa6-05671e881f0c",
      "name": "Extract from File1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -544.3490852793811,
        1952.005042326963
      ]
    },
    {
      "parameters": {
        "content": "## No Scheduled appointments for the day",
        "height": 242.24514478932173,
        "width": 1020.570667482838,
        "color": 3
      },
      "id": "c5c8297d-13ac-4cd4-a4b4-016f5bb94930",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        140,
        1820
      ]
    },
    {
      "parameters": {},
      "id": "358f1dfa-8fe6-47e3-8c39-806b1d8800be",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -1580,
        1660
      ]
    },
    {
      "parameters": {
        "amount": 10
      },
      "id": "931a143f-9db0-4bba-8428-e854caa8366e",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2576.650914720619,
        1551.005042326963
      ],
      "webhookId": "3e26e6ce-e492-4d1d-a301-241b355da93e"
    },
    {
      "parameters": {
        "content": "## Pause for View",
        "height": 595.8320890559127,
        "width": 217.54765895332596
      },
      "id": "5730ec1d-3ec1-4448-8abc-f5ce4ede2ac9",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2516.650914720619,
        1451.005042326963
      ]
    },
    {
      "parameters": {},
      "id": "ca9f642a-f9d7-42a3-98e4-d3d624848fec",
      "name": "No Operation, do nothing1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1000,
        1900
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\n    <script>\n        setTimeout(function() {\n            window.location.href = 'https://xl.epicpc.com/webhook/a7739828-9187-45a4-9e7f-e43d0f61f6ac?hostname={{ $('Webhook3').item.json[\"query\"][\"hostname\"] }}'; // Replace with your target URL\n        }, 10000); // 10000 milliseconds = 10 seconds\n    </script>\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>EPIC Walk-in Patient</title>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\" rel=\"stylesheet\"> <!-- Font Awesome link -->\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background: #f5b800;\n            color: #fff;\n            text-align: center;\n        }\n        .container {\n            background: #333;\n            padding: 50px;\n            border-radius: 10px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n            max-width: 600px;\n            width: 100%;\n        }\n        h1 {\n            font-size: 2.4em;\n            margin-bottom: 30px;\n            white-space: nowrap;\n            text-align: center;\n            width: 100%;\n        }\n        p {\n            font-size: 1.5em;\n            margin-bottom: 30px;\n        }\n        .icon-container {\n            text-align: center;\n            margin-top: 20px;\n        }\n        .icon-container i {\n            font-size: 3em;\n            color: #f5b800;\n            cursor: pointer;\n            transition: color 0.3s;\n        }\n        .icon-container i:hover {\n            color: #e4a600;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>No Appointments Available</h1>\n        <p>There are no appointments available today. Click the calendar to schedule a future appointment.</p>\n        <div class=\"icon-container\">\n            <i class=\"fas fa-calendar-alt\" onclick=\"window.location.href='https://visit.epicpc.com/?fullName={{ $('Paitient').item.json[\"Patient_First_Name\"].replace(/ /g, '%20') }}+{{ $('Paitient').item.json[\"Patient_Last_Name\"].replace(/ /g, '%20') }}&patientId={{ $('Paitient').item.json[\"Patient_Number\"] }}';\"></i>\n        </div>\n    </div>\n</body>\n</html>\n",
        "options": {}
      },
      "id": "e4f9833d-b155-4959-a212-6a073243d96b",
      "name": "No available appointments1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        180,
        1900
      ]
    },
    {
      "parameters": {
        "amount": 40
      },
      "id": "5c130684-603e-4caf-b9b3-fd70ffbba350",
      "name": "Wait1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2576.650914720619,
        1891.005042326963
      ],
      "webhookId": "3e26e6ce-e492-4d1d-a301-241b355da93e"
    },
    {
      "parameters": {
        "content": "## Check for Lunch",
        "height": 685.9838238141683,
        "width": 2738.2830437296343
      },
      "id": "31c15940-cf6e-4c3e-b1fd-0a408464b1b6",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1240,
        -40
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d1917de9-7206-4c93-83bf-8a78df9f5260",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        780,
        1520
      ]
    },
    {
      "parameters": {
        "jsCode": "const startTime = parseInt(items[0].json.Start_Time);\nconst endTime = parseInt(items[0].json.End_Time);\n\n// Get the current time in the same format\nconst now = new Date();\nconst currentTime = now.getHours() * 100 + now.getMinutes();\n\n// Check if the current time falls between start and end times\nlet isCurrentTimeBetween = false;\nif (startTime <= currentTime && currentTime <= endTime) {\n    isCurrentTimeBetween = true;\n}\n\n// Convert time to minutes for duration calculation\nconst startMinutes = Math.floor(startTime / 100) * 60 + (startTime % 100);\nconst endMinutes = Math.floor(endTime / 100) * 60 + (endTime % 100);\n\n// Calculate the duration in minutes\nconst durationMinutes = endMinutes - startMinutes;\n\n// Determine the classification\nlet classification;\nif (durationMinutes >= 60) {\n    classification = 'Lunch';\n} else if (durationMinutes >= 10 && durationMinutes <= 40) {\n    classification = 'Available';\n} else {\n    classification = 'Unavailable';\n}\n\n// Convert duration back to hours and minutes\nconst durationHours = Math.floor(durationMinutes / 60);\nconst durationRemainingMinutes = durationMinutes % 60;\n\nitems[0].json.Duration = `${durationHours} hours ${durationRemainingMinutes} minutes`;\nitems[0].json.Classification = classification;\nitems[0].json.IsCurrentTimeBetween = isCurrentTimeBetween;\n\nreturn items;\n"
      },
      "id": "cdd7fb64-6d2c-4689-8cfc-afdc37959516",
      "name": "Code2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1000,
        1540
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9a72af13-9cea-4d50-88f3-ebdedbf850f9",
              "leftValue": "={{ $json.IsCurrentTimeBetween }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "166c5fa7-61f3-4a41-8af5-b87306371624",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1160,
        1540
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "80e8493c-038e-480e-9dc8-951dbbef4c63",
              "leftValue": "={{ $json.Classification }}",
              "rightValue": "Lunch",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7dc59cd1-0ce2-4d02-833f-71d22ee2e74a",
      "name": "If5",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1440,
        1580
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "getavailabletimeblocksinfo",
        "options": {}
      },
      "id": "0e886e4e-eede-4f3d-86ac-5fd79c3dd287",
      "name": "Split Out1",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        540,
        1520
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "AppUserID",
              "value": "HEROERP"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "="
            },
            {
              "name": "Token",
              "value": "={{ $json[\"data\"] }}"
            },
            {
              "name": "Parameter1",
              "value": "={{ $json.Appt_Resource_Abbr }}"
            },
            {
              "name": "Parameter2",
              "value": "06/20/2024"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            },
            {
              "name": "Action",
              "value": "GetAvailableTimeBlocks"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "d14639db-5de3-4e35-98e2-f0eece2e9391",
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        360,
        1520
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "622450bb-66c8-4c30-8579-c450a8b3fd8d",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        -1740,
        1260
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "40bf7a01-71dd-4c91-a562-00a07a7fa41f",
      "name": "Loop Over Items3",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        100,
        1500
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "AppUserID",
              "value": "HEROERP"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "=80542"
            },
            {
              "name": "Token",
              "value": "={{ $('Extract from File1').item.json[\"data\"] }}"
            },
            {
              "name": "Parameter1",
              "value": "={{ $('Most Available Provider').item.json.Appt_Resource_Abbr }}"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            },
            {
              "name": "Action",
              "value": "GetAvailableTimeBlocks"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "35ea6459-468f-466d-af06-b7f6925d0078",
      "name": "HTTP Request4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1560,
        200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- appt for patient and resources for day and sfd now\nSELECT\n\t   s.[Patient_Number],p.Patient_ID\n       ,s.[Patient_Last_Name]\n      ,s.[Patient_First_Name]\n      ,s.[Patient_MI]\n      ,s.[Patient_Suffix],p.Patient_Cell_Phone\n      ,s.[Patient_Home_Phone]\n      ,s.[Patient_DOB]\n      ,[Appointment_DateTime]\n      ,[Sched_Loc_Abbr]\n      ,[Sched_Dept_Abbr]\n      ,[Resource_Desc]\n      ,[Resource_Abbr]\n      ,[Appt_Type_Abbr]\n      ,[Duration]\n      ,[Comments]\n  FROM [Ntier_EPIC].[PM].[vwApptSchedAppts] s\n  left join [dbo].[vwGenPatInfo] p on s.Patient_Number=p.Patient_Number\n  where cast(s.Appointment_DateTime as date) = cast(getdate() as date) and \n  s.Sched_Loc_Abbr in ('EPS10Mil') and s.Resource_Desc !='PA, Lab X-Ray'"
      },
      "id": "3be6aecd-815d-4fa8-9be8-7579eed8f389",
      "name": "On the Schedule",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        -200,
        -1360
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "content": "## Already on the schedule",
        "height": 336.62479116762086,
        "width": 405.0390178972991,
        "color": 5
      },
      "id": "6836602e-4379-4e4d-912f-ac29fd832341",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -220,
        -1460
      ]
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "id": "3f69c0e6-e1bb-4675-905f-5e544f4477b1",
      "name": "Paitient",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        -380,
        -1360
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "6349303e-ec6f-4dcc-a19b-1804cb347b46",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "09e35ad9-3194-4ca2-a207-3541d9d1b4a9",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        20,
        -1360
      ]
    },
    {
      "parameters": {
        "maxItems": 3,
        "keep": "lastItems"
      },
      "id": "5c9c9820-ce3a-4dfe-b089-069a41241558",
      "name": "Limit1",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -140,
        1060
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the current date from the previous node\nconst currentDate = new Date($json.currentDate);\n\n// Function to adjust time by offset in hours\nfunction adjustTimezone(date, offset) {\n  const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\n  return new Date(utc + (3600000 * offset));\n}\n\n// Adjust to the desired timezone (-4 hours for example)\nconst adjustedDate = adjustTimezone(currentDate, -4);\n\n// Format the adjusted date\nconst options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: true };\nlet formattedDate = adjustedDate.toLocaleString('en-US', options);\n\n// Remove the comma from the formatted date\nformattedDate = formattedDate.replace(',', '');\n\n// Your existing logic for time processing\nconst startTime = parseInt(items[0].json.Start_Time);\nconst endTime = parseInt(items[0].json.End_Time);\n\n// Get the current time in the same format\nconst now = new Date();\nconst currentTime = now.getHours() * 100 + now.getMinutes();\n\n// Check if the current time falls between start and end times\nlet isCurrentTimeBetween = false;\nif (startTime <= currentTime && currentTime <= endTime) {\n    isCurrentTimeBetween = true;\n}\n\n// Convert time to minutes for duration calculation\nconst startMinutes = Math.floor(startTime / 100) * 60 + (startTime % 100);\nconst endMinutes = Math.floor(endTime / 100) * 60 + (endTime % 100);\n\n// Calculate the duration in minutes\nconst durationMinutes = endMinutes - startMinutes;\n\n// Determine the classification\nlet classification;\nif (durationMinutes >= 60) {\n    classification = 'Lunch';\n} else if (durationMinutes >= 10 && durationMinutes <= 40) {\n    classification = 'Available';\n} else {\n    classification = 'Unavailable';\n}\n\n// Convert duration back to hours and minutes\nconst durationHours = Math.floor(durationMinutes / 60);\nconst durationRemainingMinutes = durationMinutes % 60;\n\nitems[0].json.Duration = `${durationHours} hours ${durationRemainingMinutes} minutes`;\nitems[0].json.Classification = classification;\nitems[0].json.IsCurrentTimeBetween = isCurrentTimeBetween;\nitems[0].json.FormattedDate = formattedDate;\n\nreturn items;\n"
      },
      "id": "8c2bd347-88b4-48c8-91a4-93409c51f8b3",
      "name": "Appointment Time",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        3320
      ]
    },
    {
      "parameters": {
        "batchSize": "=1",
        "options": {}
      },
      "id": "2df3b0ab-1b74-4b80-8e8e-a0bb0599ba27",
      "name": "Loop - Provider List",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -160,
        3280
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "AppUserID",
              "value": "HEROERP"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "="
            },
            {
              "name": "Token",
              "value": "={{ $json[\"data\"] }}"
            },
            {
              "name": "Parameter1",
              "value": "={{ $json.Appt_Resource_Abbr }}"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            },
            {
              "name": "Action",
              "value": "GetAvailableTimeBlocks"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "ccb5a1c6-4e57-4fe2-a85a-82f756332fd8",
      "name": "GetAvailableTimeBlocks",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        100,
        3300
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "8c74c0ab-c669-4e1c-8438-a983ad5ebe6c",
      "name": "Loop Over TimeBlocks",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        440,
        3300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9a72af13-9cea-4d50-88f3-ebdedbf850f9",
              "leftValue": "={{ $json.IsCurrentTimeBetween }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "049dde11-7d26-4356-b2a0-6d72bd0b1c2b",
      "name": "If Block in Current Time",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1140,
        3320
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "80e8493c-038e-480e-9dc8-951dbbef4c63",
              "leftValue": "={{ $json.Classification }}",
              "rightValue": "Lunch",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f3909615-c61d-4d11-b976-f63b70bef98e",
      "name": "If Not on Lunch",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1380,
        3360
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "SaveForcedAppointment"
            },
            {
              "name": "AppUserID",
              "value": "HEROERP"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "={{ $('Paitient').item.json[\"Patient_ID\"] }}"
            },
            {
              "name": "Token",
              "value": "={{ $('Merge').item.json.data }}"
            },
            {
              "name": "Parameter1",
              "value": "=<appt><appointmentDateTime>{{ $('Appointment Time').item.json[\"FormattedDate\"] }}</appointmentDateTime><appointmentDuration>5</appointmentDuration><appointmentType>WIOV</appointmentType><schedulingLocation>EPS10Mil</schedulingLocation><schedulingDepartment>EPIC PC</schedulingDepartment><resource>{{ $('Merge').item.json[\"Appt_Resource_Abbr\"] }}</resource><comments>Walkin-Kiosk {In five words why are you here?} </comments></appt>"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "0c5a2e64-ae1d-42c7-bf8c-59421c3f52f5",
      "name": "HTTP Create Walk-in",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1600,
        3340
      ],
      "disabled": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "f949809c-b7cf-45b6-84b4-c6f6d5672afe",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        820,
        3320
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "fcbea788-11cf-4b76-ab10-111fa8c3ca7f",
      "name": "Date & Time2",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        640,
        3380
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\n    <script>\n        setTimeout(function() {\n            window.location.href = 'https://xl.epicpc.com/webhook/a7739828-9187-45a4-9e7f-e43d0f61f6ac?hostname={{ $('Webhook3').item.json[\"query\"][\"hostname\"] }}'; // Replace with your target URL\n        }, 10000); // 10000 milliseconds = 10 seconds\n    </script>\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>EPIC Walk-in Patient</title>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background: #f5b800;\n            color: #fff;\n            text-align: center;\n        }\n        .container {\n            background: #333;\n            padding: 50px;\n            border-radius: 10px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n            max-width: 600px;\n            width: 100%;\n        }\n        h1 {\n            font-size: 2.4em;\n            margin-bottom: 30px;\n            white-space: nowrap;\n            text-align: center;\n            width: 100%;\n        }\n        p {\n            font-size: 1.5em;\n            margin-bottom: 30px;\n        }\n        .confetti {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Scheduling Successful!</h1>\n        <p>Your appointment has been scheduled with {{ $('Merge').item.json[\"Appt_Resource_Descr\"] }}.</p>\n<b>Please see the medical receptionist to check in.</b>\n    </div>\n\n    <canvas class=\"confetti\"></canvas>\n\n    <script>\n        function randomInRange(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n\n        function createConfetti() {\n            const confetti = document.querySelector('.confetti');\n            const ctx = confetti.getContext('2d');\n            const pieces = [];\n            let animationFrame;\n            let animationStart;\n\n            confetti.width = window.innerWidth;\n            confetti.height = window.innerHeight;\n\n            function ConfettiPiece() {\n                this.x = Math.random() * confetti.width;\n                this.y = Math.random() * confetti.height - confetti.height;\n                this.size = randomInRange(10, 20);\n                this.weight = randomInRange(2, 6);\n                this.color = `hsl(${randomInRange(0, 360)}, 100%, 50%)`;\n                this.angle = Math.random() * 2 * Math.PI;\n                this.speed = randomInRange(1, 5);\n                this.opacity = 1;\n\n                this.update = function(elapsedTime) {\n                    this.y += this.weight;\n                    this.x += Math.sin(this.angle) * this.speed;\n\n                    if (elapsedTime > 3000) {\n                        this.opacity -= 0.02;\n                        if (this.opacity < 0) this.opacity = 0;\n                    }\n\n                    if (this.y > confetti.height) {\n                        this.y = 0 - this.size;\n                        this.x = Math.random() * confetti.width;\n                    }\n                };\n\n                this.draw = function() {\n                    ctx.fillStyle = this.color;\n                    ctx.globalAlpha = this.opacity;\n                    ctx.beginPath();\n                    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\n                    ctx.fill();\n                };\n            }\n\n            function updateConfetti(timestamp) {\n                if (!animationStart) animationStart = timestamp;\n                const elapsedTime = timestamp - animationStart;\n\n                ctx.clearRect(0, 0, confetti.width, confetti.height);\n\n                for (let i = 0; i < pieces.length; i++) {\n                    pieces[i].update(elapsedTime);\n                    pieces[i].draw();\n                }\n\n                if (elapsedTime < 5000) { // Run the animation for 5 seconds total (3 seconds full + 2 seconds fade)\n                    animationFrame = requestAnimationFrame(updateConfetti);\n                } else {\n                    cancelAnimationFrame(animationFrame);\n                }\n            }\n\n            function initializeConfetti() {\n                for (let i = 0; i < 150; i++) {\n                    pieces.push(new ConfettiPiece());\n                }\n                animationFrame = requestAnimationFrame(updateConfetti);\n            }\n\n            initializeConfetti();\n        }\n\n        document.addEventListener('DOMContentLoaded', createConfetti);\n    </script>\n</body>\n</html>\n",
        "options": {}
      },
      "id": "dd647bf5-ad59-494d-8df5-88f4083d95f4",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1840,
        3340
      ]
    },
    {
      "parameters": {
        "content": "## No Scheduled appointments for the day",
        "height": 242.24514478932173,
        "width": 1296.323875958478,
        "color": 3
      },
      "id": "8a03e4cd-8633-4a77-9f13-0a61bcda8b30",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -255.75320847564126,
        3600
      ]
    },
    {
      "parameters": {},
      "id": "ec23125e-9c6a-489a-ba2a-fdced4a7e61b",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        880,
        3680
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\n    <script>\n        setTimeout(function() {\n            window.location.href = 'https://xl.epicpc.com/webhook/a7739828-9187-45a4-9e7f-e43d0f61f6ac?hostname={{ $('Webhook3').item.json[\"query\"][\"hostname\"] }}'; // Replace with your target URL\n        }, 45000); // 10000 milliseconds = 10 seconds\n    </script>\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>EPIC Walk-in Patient</title>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\" rel=\"stylesheet\"> <!-- Font Awesome link -->\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background: #f5b800;\n            color: #fff;\n            text-align: center;\n        }\n        .container {\n            background: #333;\n            padding: 50px;\n            border-radius: 10px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n            max-width: 600px;\n            width: 100%;\n        }\n        h1 {\n            font-size: 2.4em;\n            margin-bottom: 30px;\n            white-space: nowrap;\n            text-align: center;\n            width: 100%;\n        }\n        p {\n            font-size: 1.5em;\n            margin-bottom: 30px;\n        }\n        .icon-container {\n            text-align: center;\n            margin-top: 20px;\n        }\n        .icon-container i {\n            font-size: 3em;\n            color: #f5b800;\n            cursor: pointer;\n            transition: color 0.3s;\n        }\n        .icon-container i:hover {\n            color: #e4a600;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>No Appointments Available</h1>\n        <p>There are no appointments available today. Click the calendar to schedule a future appointment.</p>\n        <div class=\"icon-container\">\n            <i class=\"fas fa-calendar-alt\" onclick=\"window.location.href='https://visit.epicpc.com/?fullName={{ $('Paitient').item.json[\"Patient_First_Name\"].replace(/ /g, '%20') }}+{{ $('Paitient').item.json[\"Patient_Last_Name\"].replace(/ /g, '%20') }}&patientId={{ $('Paitient').item.json[\"Patient_Number\"] }}';\"></i>\n        </div>\n    </div>\n</body>\n</html>\n",
        "options": {}
      },
      "id": "fb05912c-71b6-493f-93b2-f1b2b4c1a104",
      "name": "No available appointments",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        60,
        3680
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "getavailabletimeblocksinfo",
        "options": {}
      },
      "id": "0807832c-db6d-44aa-b2f4-0d4283a57b01",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        280,
        3300
      ]
    },
    {
      "parameters": {},
      "id": "3f5f8f8b-2e55-483f-bd9f-9104f7a52ef9",
      "name": "Limit2",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -220,
        3680
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @LOC VARCHAR(200) = 'EPIC Southfield 10 Mile';\n \nWITH ApptData AS (\n    SELECT \n        [Patient_ID],\n        [Patient_Number],\n        [Appt_ID],\n        [Appt_DateTime],\n        [Appt_Encounter_Number],\n        [Appt_Resource_ID],\n        [Appt_Resource_Abbr],\n        [Appt_Resource_Descr],\n        [Appt_Resource_Assoc_Prov_LFI],\n        [Appt_Type_Abbr],\n        [Appt_Type_Descr],\n        [Appt_Duration],\n        [Appt_Comments],\n        [Appt_Status],\n        [Appt_Time_In],\n        [Appt_Booked_Date],\n        [Appt_Booked_By_Operator_Abbr],\n        [Appt_Is_Forced],\n        [Appt_Started_Time],\n        [Appt_Check_Out_Time],\n        [Appt_Acknowledged_Date],\n        [Appt_Ack_By_Operator_Abbr],a.Appt_Sched_Location_Descr\n    FROM \n        [Ntier_EPIC].[dbo].[vwGenPatApptInfo] a\n    WHERE \n        CAST(a.Appt_DateTime AS date) = CAST(GETDATE() AS date) AND \n        CAST(a.Appt_DateTime AS time) BETWEEN DATEADD(MINUTE, -60, CAST(GETDATE() AS time)) \n        AND DATEADD(MINUTE, 60, CAST(GETDATE() AS time)) AND \n        a.Appt_Sched_Location_Descr = @LOC AND \n        a.Appt_Resource_Descr NOT LIKE 'PA%' AND a.Appt_Resource_Descr NOT LIKE 'Ther%' and a.Appt_Resource_Descr NOT LIKE 'Exer%' and a.Appt_Resource_Descr NOT LIKE 'Blue%' and\n\t\ta.Appt_Resource_Descr NOT LIKE 'BH%' and a.Appt_Resource_Descr NOT LIKE 'Cardi%' and\n        a.Appt_Status IN ('A', 'S','C') AND \n        a.Appt_Check_Out_Time IS NULL\n),\nResourceSummary AS (\n    SELECT \n        Appt_Resource_ID,Appt_Resource_Descr,[Appt_Resource_Abbr],Appt_Sched_Location_Descr,\n        SUM(CASE WHEN Appt_Status = 'A' THEN 1 ELSE 0 END) AS A_Count,\n        SUM(CASE WHEN Appt_Status = 'S' THEN 1 ELSE 0 END) AS S_Count,\n\t\tSUM(CASE WHEN Appt_Status = 'C' THEN 1 ELSE 0 END) AS C_Count\n    FROM \n        ApptData\n    GROUP BY \n        Appt_Resource_ID,Appt_Resource_Descr,[Appt_Resource_Abbr],Appt_Sched_Location_Descr\n),\nRankedResources AS (\n    SELECT \n        Appt_Resource_ID,Appt_Resource_Descr,Appt_Resource_Abbr,\n        A_Count,C_Count,\n        S_Count,Appt_Sched_Location_Descr,\n        RANK() OVER (ORDER BY A_Count, S_Count,C_Count asc) AS AvailRank\n    FROM \n        ResourceSummary\n)\nSELECT \n    r.Appt_Resource_ID,r.Appt_Resource_Descr,r.Appt_Resource_Abbr,\n    r.A_Count,\n    r.S_Count,\n\tr.C_Count,\n    r.AvailRank AS MostAvail,\n\tr.Appt_Sched_Location_Descr\nFROM \n    RankedResources r\n \nORDER BY \n    r.AvailRank"
      },
      "id": "851f8d30-8c96-4958-8fb4-15021008137e",
      "name": "Most Available Provider1",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        -1420,
        3340
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "13ebafab-37a9-42d8-af22-d32829b90b2d",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -500,
        3280
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the current date from the previous node\nconst currentDate = new Date($json.currentDate);\n\n// Function to adjust time by offset in hours\nfunction adjustTimezone(date, offset) {\n  const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\n  return new Date(utc + (3600000 * offset));\n}\n\n// Adjust to the desired timezone (-4 hours for example)\nconst adjustedDate = adjustTimezone(currentDate, -4);\n\n// Format the adjusted date\nconst options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: true };\nlet formattedDate = adjustedDate.toLocaleString('en-US', options);\n\n// Remove the comma from the formatted date\nformattedDate = formattedDate.replace(',', '');\n\n// Your existing logic for time processing\nconst startTime = parseInt(items[0].json.Start_Time);\nconst endTime = parseInt(items[0].json.End_Time);\n\n// Get the current time in the same format\nconst now = new Date();\nconst currentTime = now.getHours() * 100 + now.getMinutes();\n\n// Check if the current time falls between start and end times\nlet isCurrentTimeBetween = false;\nif (startTime <= currentTime && currentTime <= endTime) {\n    isCurrentTimeBetween = true;\n}\n\n// Convert time to minutes for duration calculation\nconst startMinutes = Math.floor(startTime / 100) * 60 + (startTime % 100);\nconst endMinutes = Math.floor(endTime / 100) * 60 + (endTime % 100);\n\n// Calculate the duration in minutes\nconst durationMinutes = endMinutes - startMinutes;\n\n// Determine the classification\nlet classification;\nif (durationMinutes >= 60) {\n    classification = 'Lunch';\n} else if (durationMinutes >= 10 && durationMinutes <= 40) {\n    classification = 'Available';\n} else {\n    classification = 'Unavailable';\n}\n\n// Convert duration back to hours and minutes\nconst durationHours = Math.floor(durationMinutes / 60);\nconst durationRemainingMinutes = durationMinutes % 60;\n\nitems[0].json.Duration = `${durationHours} hours ${durationRemainingMinutes} minutes`;\nitems[0].json.Classification = classification;\nitems[0].json.IsCurrentTimeBetween = isCurrentTimeBetween;\nitems[0].json.FormattedDate = formattedDate;\n\nreturn items;\n"
      },
      "id": "fa71ca5a-e77e-4f07-8293-1d892bbbe4d4",
      "name": "Appointment Time1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        180,
        4620
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "AppUserID",
              "value": "HEROERP"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "="
            },
            {
              "name": "Token",
              "value": "={{ $json[\"data\"] }}"
            },
            {
              "name": "Parameter1",
              "value": "={{ $json.Appt_Resource_Abbr }}"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            },
            {
              "name": "Action",
              "value": "GetAvailableTimeBlocks"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "440ba214-81ef-4d8e-922d-501e230c90a7",
      "name": "GetAvailableTimeBlocks1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        4600
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "84ea1c8f-56fa-478b-b7e2-6403b539345e",
      "name": "Loop Over TimeBlocks1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -340,
        4600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9a72af13-9cea-4d50-88f3-ebdedbf850f9",
              "leftValue": "={{ $json.IsCurrentTimeBetween }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c2f082fe-47e2-4b2a-8dbe-c9ba636e4c67",
      "name": "If Block in Current Time1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        360,
        4620
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "80e8493c-038e-480e-9dc8-951dbbef4c63",
              "leftValue": "={{ $json.Classification }}",
              "rightValue": "Lunch",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c89856db-4c5b-4764-9377-249f07e9c443",
      "name": "If Not on Lunch1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        600,
        4660
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "48e0a2f0-7b45-4cf2-8fee-9bd11725a4d1",
      "name": "Merge3",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        40,
        4620
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "055efe98-fd6a-4cce-8e59-e96247f46816",
      "name": "Date & Time",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -140,
        4680
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "getavailabletimeblocksinfo",
        "options": {}
      },
      "id": "dc52e3b5-6071-48af-8daa-4e57b53dc526",
      "name": "Split Out2",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -500,
        4600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the current date from the previous node\nconst currentDate = new Date($json.currentDate);\n\n// Function to adjust time by offset in hours\nfunction adjustTimezone(date, offset) {\n  const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\n  return new Date(utc + (3600000 * offset));\n}\n\n// Adjust to the desired timezone (-4 hours for example)\nconst adjustedDate = adjustTimezone(currentDate, -4);\n\n// Format the adjusted date\nconst options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: true };\nlet formattedDate = adjustedDate.toLocaleString('en-US', options);\n\n// Remove the comma from the formatted date\nformattedDate = formattedDate.replace(',', '');\n\n// Your existing logic for time processing\nconst startTime = parseInt(items[0].json.Start_Time);\nconst endTime = parseInt(items[0].json.End_Time);\n\n// Get the current time in the same format\nconst now = new Date();\nconst currentTime = now.getHours() * 100 + now.getMinutes();\n\n// Check if the current time falls between start and end times\nlet isCurrentTimeBetween = false;\nif (startTime <= currentTime && currentTime <= endTime) {\n    isCurrentTimeBetween = true;\n}\n\n// Convert time to minutes for duration calculation\nconst startMinutes = Math.floor(startTime / 100) * 60 + (startTime % 100);\nconst endMinutes = Math.floor(endTime / 100) * 60 + (endTime % 100);\n\n// Calculate the duration in minutes\nconst durationMinutes = endMinutes - startMinutes;\n\n// Determine the classification\nlet classification;\nif (durationMinutes >= 60) {\n    classification = 'Lunch';\n} else if (durationMinutes >= 10 && durationMinutes <= 40) {\n    classification = 'Available';\n} else {\n    classification = 'Unavailable';\n}\n\n// Convert duration back to hours and minutes\nconst durationHours = Math.floor(durationMinutes / 60);\nconst durationRemainingMinutes = durationMinutes % 60;\n\nitems[0].json.Duration = `${durationHours} hours ${durationRemainingMinutes} minutes`;\nitems[0].json.Classification = classification;\nitems[0].json.IsCurrentTimeBetween = isCurrentTimeBetween;\nitems[0].json.FormattedDate = formattedDate;\n\nreturn items;\n"
      },
      "id": "0c3cf1c6-6174-4f0f-a652-c19f205e8954",
      "name": "Appointment Time2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        180,
        4980
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "AppUserID",
              "value": "HEROERP"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "="
            },
            {
              "name": "Token",
              "value": "={{ $json[\"data\"] }}"
            },
            {
              "name": "Parameter1",
              "value": "={{ $json.Appt_Resource_Abbr }}"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            },
            {
              "name": "Action",
              "value": "GetAvailableTimeBlocks"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "206f1bca-af3e-4132-a023-e12a77cb99fe",
      "name": "GetAvailableTimeBlocks2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        4960
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "25b680ee-7ee0-4efc-87fa-9bcc2ed9b7eb",
      "name": "Loop Over TimeBlocks2",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -340,
        4960
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9a72af13-9cea-4d50-88f3-ebdedbf850f9",
              "leftValue": "={{ $json.IsCurrentTimeBetween }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "56dea4e1-d627-4de3-a390-1e33b4da4a9e",
      "name": "If Block in Current Time2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        360,
        4980
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "80e8493c-038e-480e-9dc8-951dbbef4c63",
              "leftValue": "={{ $json.Classification }}",
              "rightValue": "Lunch",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d25443b8-0769-4b64-986a-e7d3b77df4b8",
      "name": "If Not on Lunch2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        600,
        5020
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "94ace323-0f5b-4789-a1cf-ee6a503b27db",
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        40,
        4980
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "810ceee6-81ad-498d-8170-4bfb841a65b0",
      "name": "Date & Time3",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -140,
        5040
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "getavailabletimeblocksinfo",
        "options": {}
      },
      "id": "565385b1-89f1-48a7-a56a-edc4e7ffd1d9",
      "name": "Split Out3",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -500,
        4960
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the current date from the previous node\nconst currentDate = new Date($json.currentDate);\n\n// Function to adjust time by offset in hours\nfunction adjustTimezone(date, offset) {\n  const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\n  return new Date(utc + (3600000 * offset));\n}\n\n// Adjust to the desired timezone (-4 hours for example)\nconst adjustedDate = adjustTimezone(currentDate, -4);\n\n// Format the adjusted date\nconst options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: true };\nlet formattedDate = adjustedDate.toLocaleString('en-US', options);\n\n// Remove the comma from the formatted date\nformattedDate = formattedDate.replace(',', '');\n\n// Your existing logic for time processing\nconst startTime = parseInt(items[0].json.Start_Time);\nconst endTime = parseInt(items[0].json.End_Time);\n\n// Get the current time in the same format\nconst now = new Date();\nconst currentTime = now.getHours() * 100 + now.getMinutes();\n\n// Check if the current time falls between start and end times\nlet isCurrentTimeBetween = false;\nif (startTime <= currentTime && currentTime <= endTime) {\n    isCurrentTimeBetween = true;\n}\n\n// Convert time to minutes for duration calculation\nconst startMinutes = Math.floor(startTime / 100) * 60 + (startTime % 100);\nconst endMinutes = Math.floor(endTime / 100) * 60 + (endTime % 100);\n\n// Calculate the duration in minutes\nconst durationMinutes = endMinutes - startMinutes;\n\n// Determine the classification\nlet classification;\nif (durationMinutes >= 60) {\n    classification = 'Lunch';\n} else if (durationMinutes >= 10 && durationMinutes <= 40) {\n    classification = 'Available';\n} else {\n    classification = 'Unavailable';\n}\n\n// Convert duration back to hours and minutes\nconst durationHours = Math.floor(durationMinutes / 60);\nconst durationRemainingMinutes = durationMinutes % 60;\n\nitems[0].json.Duration = `${durationHours} hours ${durationRemainingMinutes} minutes`;\nitems[0].json.Classification = classification;\nitems[0].json.IsCurrentTimeBetween = isCurrentTimeBetween;\nitems[0].json.FormattedDate = formattedDate;\n\nreturn items;\n"
      },
      "id": "094c89f8-7c93-424a-8b7c-4f1a13d951b4",
      "name": "Appointment Time3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        180,
        5280
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "AppUserID",
              "value": "HEROERP"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "="
            },
            {
              "name": "Token",
              "value": "={{ $json[\"data\"] }}"
            },
            {
              "name": "Parameter1",
              "value": "={{ $json.Appt_Resource_Abbr }}"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            },
            {
              "name": "Action",
              "value": "GetAvailableTimeBlocks"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "aaaa8327-b2fb-49ff-98d6-505d48bf0595",
      "name": "GetAvailableTimeBlocks3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        5260
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d061523e-d0f3-470e-b4b1-2deba0a3e94b",
      "name": "Loop Over TimeBlocks3",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -340,
        5260
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9a72af13-9cea-4d50-88f3-ebdedbf850f9",
              "leftValue": "={{ $json.IsCurrentTimeBetween }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d958489e-ccb6-42d0-99b2-102651810d90",
      "name": "If Block in Current Time3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        360,
        5280
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "80e8493c-038e-480e-9dc8-951dbbef4c63",
              "leftValue": "={{ $json.Classification }}",
              "rightValue": "Lunch",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "863ac1dc-33ca-416f-8e5d-5089fb3310a0",
      "name": "If Not on Lunch3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        600,
        5320
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "d7a1be0e-5d76-41fb-8db3-e9c668db450f",
      "name": "Merge5",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        40,
        5280
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "bde779de-e203-45c5-8f84-c57b4da03bc3",
      "name": "Date & Time1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -140,
        5340
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "getavailabletimeblocksinfo",
        "options": {}
      },
      "id": "6a5e03e9-7968-4d15-ae1d-7b9246fff968",
      "name": "Split Out4",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -500,
        5260
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the current date from the previous node\nconst currentDate = new Date($json.currentDate);\n\n// Function to adjust time by offset in hours\nfunction adjustTimezone(date, offset) {\n  const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\n  return new Date(utc + (3600000 * offset));\n}\n\n// Adjust to the desired timezone (-4 hours for example)\nconst adjustedDate = adjustTimezone(currentDate, -4);\n\n// Format the adjusted date\nconst options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: true };\nlet formattedDate = adjustedDate.toLocaleString('en-US', options);\n\n// Remove the comma from the formatted date\nformattedDate = formattedDate.replace(',', '');\n\n// Your existing logic for time processing\nconst startTime = parseInt(items[0].json.Start_Time);\nconst endTime = parseInt(items[0].json.End_Time);\n\n// Get the current time in the same format\nconst now = new Date();\nconst currentTime = now.getHours() * 100 + now.getMinutes();\n\n// Check if the current time falls between start and end times\nlet isCurrentTimeBetween = false;\nif (startTime <= currentTime && currentTime <= endTime) {\n    isCurrentTimeBetween = true;\n}\n\n// Convert time to minutes for duration calculation\nconst startMinutes = Math.floor(startTime / 100) * 60 + (startTime % 100);\nconst endMinutes = Math.floor(endTime / 100) * 60 + (endTime % 100);\n\n// Calculate the duration in minutes\nconst durationMinutes = endMinutes - startMinutes;\n\n// Determine the classification\nlet classification;\nif (durationMinutes >= 60) {\n    classification = 'Lunch';\n} else if (durationMinutes >= 10 && durationMinutes <= 40) {\n    classification = 'Available';\n} else {\n    classification = 'Unavailable';\n}\n\n// Convert duration back to hours and minutes\nconst durationHours = Math.floor(durationMinutes / 60);\nconst durationRemainingMinutes = durationMinutes % 60;\n\nitems[0].json.Duration = `${durationHours} hours ${durationRemainingMinutes} minutes`;\nitems[0].json.Classification = classification;\nitems[0].json.IsCurrentTimeBetween = isCurrentTimeBetween;\nitems[0].json.FormattedDate = formattedDate;\n\nreturn items;\n"
      },
      "id": "d3829d6c-8c72-43e0-acdc-01f298cc3b91",
      "name": "Appointment Time4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        180,
        5640
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "AppUserID",
              "value": "HEROERP"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "="
            },
            {
              "name": "Token",
              "value": "={{ $json[\"data\"] }}"
            },
            {
              "name": "Parameter1",
              "value": "={{ $json.Appt_Resource_Abbr }}"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            },
            {
              "name": "Action",
              "value": "GetAvailableTimeBlocks"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "a96d41d0-7a35-4e7a-959b-19c1f949f8df",
      "name": "GetAvailableTimeBlocks4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        5620
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c3c80522-d642-477f-bdd0-5b2c0c61625c",
      "name": "Loop Over TimeBlocks4",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -340,
        5620
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9a72af13-9cea-4d50-88f3-ebdedbf850f9",
              "leftValue": "={{ $json.IsCurrentTimeBetween }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "46c7c893-3037-4945-8e1d-f45f9d63a53e",
      "name": "If Block in Current Time4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        360,
        5640
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "80e8493c-038e-480e-9dc8-951dbbef4c63",
              "leftValue": "={{ $json.Classification }}",
              "rightValue": "Lunch",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "87aed332-013d-4312-9ab2-8ed8d5da43aa",
      "name": "If Not on Lunch4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        600,
        5680
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "0caa2548-f8db-480d-afc2-263a9b8a6c66",
      "name": "Merge6",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        40,
        5640
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "8a76b9b8-eddf-4690-8dbe-024de7cd5e83",
      "name": "Date & Time4",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -140,
        5700
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "getavailabletimeblocksinfo",
        "options": {}
      },
      "id": "6dc6361c-d649-4c96-84ab-4debc8425174",
      "name": "Split Out5",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -500,
        5620
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @LOC VARCHAR(200) = 'EPIC Southfield 10 Mile';\n \nWITH ApptData AS (\n    SELECT \n        [Patient_ID],\n        [Patient_Number],\n        [Appt_ID],\n        [Appt_DateTime],\n        [Appt_Encounter_Number],\n        [Appt_Resource_ID],\n        [Appt_Resource_Abbr],\n        [Appt_Resource_Descr],\n        [Appt_Resource_Assoc_Prov_LFI],\n        [Appt_Type_Abbr],\n        [Appt_Type_Descr],\n        [Appt_Duration],\n        [Appt_Comments],\n        [Appt_Status],\n        [Appt_Time_In],\n        [Appt_Booked_Date],\n        [Appt_Booked_By_Operator_Abbr],\n        [Appt_Is_Forced],\n        [Appt_Started_Time],\n        [Appt_Check_Out_Time],\n        [Appt_Acknowledged_Date],\n        [Appt_Ack_By_Operator_Abbr],a.Appt_Sched_Location_Descr\n    FROM \n        [Ntier_EPIC].[dbo].[vwGenPatApptInfo] a\n    WHERE \n        CAST(a.Appt_DateTime AS date) = CAST(GETDATE() AS date) AND \n        CAST(a.Appt_DateTime AS time) BETWEEN DATEADD(MINUTE, -60, CAST(GETDATE() AS time)) \n        AND DATEADD(MINUTE, 60, CAST(GETDATE() AS time)) AND \n        a.Appt_Sched_Location_Descr = @LOC AND \n        a.Appt_Resource_Descr NOT LIKE 'PA%' AND a.Appt_Resource_Descr NOT LIKE 'Ther%' and a.Appt_Resource_Descr NOT LIKE 'Exer%' and a.Appt_Resource_Descr NOT LIKE 'Blue%' and\n\t\ta.Appt_Resource_Descr NOT LIKE 'BH%' and a.Appt_Resource_Descr NOT LIKE 'Cardi%' and\n        a.Appt_Status IN ('A', 'S','C') AND \n        a.Appt_Check_Out_Time IS NULL\n),\nResourceSummary AS (\n    SELECT \n        Appt_Resource_ID,Appt_Resource_Descr,[Appt_Resource_Abbr],Appt_Sched_Location_Descr,\n        SUM(CASE WHEN Appt_Status = 'A' THEN 1 ELSE 0 END) AS A_Count,\n        SUM(CASE WHEN Appt_Status = 'S' THEN 1 ELSE 0 END) AS S_Count,\n\t\tSUM(CASE WHEN Appt_Status = 'C' THEN 1 ELSE 0 END) AS C_Count\n    FROM \n        ApptData\n    GROUP BY \n        Appt_Resource_ID,Appt_Resource_Descr,[Appt_Resource_Abbr],Appt_Sched_Location_Descr\n),\nRankedResources AS (\n    SELECT \n        Appt_Resource_ID,Appt_Resource_Descr,Appt_Resource_Abbr,\n        A_Count,C_Count,\n        S_Count,Appt_Sched_Location_Descr,\n        RANK() OVER (ORDER BY A_Count, S_Count,C_Count asc) AS AvailRank\n    FROM \n        ResourceSummary\n)\nSELECT \n    r.Appt_Resource_ID,r.Appt_Resource_Descr,r.Appt_Resource_Abbr,\n    r.A_Count,\n    r.S_Count,\n\tr.C_Count,\n    r.AvailRank AS MostAvail,\n\tr.Appt_Sched_Location_Descr\nFROM \n    RankedResources r\n \nORDER BY \n    r.AvailRank"
      },
      "id": "371ccdee-31a2-4f5a-86fb-164abc01f1ce",
      "name": "Most Available Provider2",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        -2860,
        4960
      ],
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "wyNxSZ4e8ERWmP4v",
          "name": "Microsoft SQL PM"
        }
      }
    },
    {
      "parameters": {
        "content": "## Schedule the walk-in",
        "height": 336.62479116762086,
        "width": 2135.5312724708574,
        "color": 4
      },
      "id": "03e9bb86-447b-45ab-bc31-445c03b7a262",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2900,
        4880
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "3fdec4d3-a443-453a-83d9-37d4d821902f",
      "name": "Merge7",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -1420,
        4980
      ]
    },
    {
      "parameters": {
        "fileSelector": "pmtoken.txt",
        "options": {}
      },
      "id": "9d0f60f6-8ad2-4850-a6cd-d1f276300a71",
      "name": "Read/Write Files from Disk3",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -2681,
        5341
      ]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "pmtoken.txt",
        "options": {
          "append": false
        }
      },
      "id": "7f554052-7c66-4c5d-b19d-73f6f12c227d",
      "name": "Read/Write Files from Disk4",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1700,
        5740
      ]
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "data",
        "options": {}
      },
      "id": "f6457bfa-1862-4698-b7bd-cd4817e40f2c",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1880,
        5740
      ]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "9af679bb-d589-4745-9c28-dfae1b2c6827",
      "name": "Extract from File2",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2501,
        5341
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.data[0].getuserauthenticationinfo[0].ValidUser }}",
              "value2": "YES"
            }
          ]
        }
      },
      "id": "f0034f73-166b-4ace-8824-b428178fb7d4",
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -2221,
        5581
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.data = JSON.parse(item.json.data);\n}\n\nreturn $input.all();"
      },
      "id": "bc019a75-ae3d-4273-b07f-40ae0fce142a",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2361,
        5581
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"Action\":\"GetUserAuthentication\",\n\"AppUserID\":\"HEROERP\",\n\"Appname\":\"EPICPC.NMNWokflow.TestApp\",\n\"PatientID\":\"\",\n\"Token\":\"{{ $json[\"data\"] }}\",\n\"Parameter1\":\"Fwuser#12345\"\n}\n",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "9b7145de-05ea-4b91-b68a-c11b9d0481e4",
      "name": "Check Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -2501,
        5581
      ]
    },
    {
      "parameters": {
        "content": "## ASPM Authentication\n**Check token: if yes (use), if no (get new)",
        "height": 666.2861090173772,
        "width": 1290.8012866477518,
        "color": 2
      },
      "id": "5cf88735-c5e0-45d6-9281-aea6b6800d7f",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2721,
        5253
      ]
    },
    {
      "parameters": {
        "height": 362.7737573665016,
        "width": 646.6471275914764,
        "color": 4
      },
      "id": "796b74a2-86f4-4d02-9a4d-263fa8e3a7c2",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2080,
        5260
      ]
    },
    {
      "parameters": {
        "height": 294.96556026709675,
        "width": 656.1571203767965,
        "color": 3
      },
      "id": "02287da7-2ed7-4ba0-aeec-d2041f50e3de",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2085,
        5626
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/GetToken",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": {
          "Username": "56233400f:10031494^1^EPICP-d6d4-NMNWokflow-prod",
          "Password": "%p3CpcN3nW!eFlfWt%St7Pp0435@"
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "d4f61650-2d29-4a8a-af5f-0e5d1c7e4873",
      "name": "HTTP Request5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -2037,
        5749
      ]
    },
    {
      "parameters": {
        "fileSelector": "pmtoken.txt",
        "options": {}
      },
      "id": "ccecea38-70b2-4049-b294-a088705220a2",
      "name": "Read/Write Files from Disk5",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1921,
        5381
      ]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "d0b0589e-ea9b-4ec8-9ce9-ced92302f333",
      "name": "Extract from File3",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1661,
        5381
      ]
    },
    {
      "parameters": {},
      "id": "bc550935-c33f-426a-8006-91f07950be98",
      "name": "Limit3",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -2697,
        5089
      ]
    }
  ],
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Most Available Provider": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook3": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking \"Test workflow\"": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Check Token1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Token1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk2": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No available appointments1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "No available appointments1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On the Schedule": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Paitient": {
      "main": [
        [
          {
            "node": "On the Schedule",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Appointment Time": {
      "main": [
        [
          {
            "node": "If Block in Current Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop - Provider List": {
      "main": [
        [
          {
            "node": "Limit2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GetAvailableTimeBlocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetAvailableTimeBlocks": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over TimeBlocks": {
      "main": [
        [
          {
            "node": "Loop - Provider List",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Date & Time2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Block in Current Time": {
      "main": [
        [
          {
            "node": "If Not on Lunch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over TimeBlocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Not on Lunch": {
      "main": [
        [
          {
            "node": "HTTP Create Walk-in",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop - Provider List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Create Walk-in": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Appointment Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "No available appointments": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over TimeBlocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit2": {
      "main": [
        [
          {
            "node": "No available appointments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Loop - Provider List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Appointment Time1": {
      "main": [
        [
          {
            "node": "If Block in Current Time1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetAvailableTimeBlocks1": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over TimeBlocks1": {
      "main": [
        [],
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Block in Current Time1": {
      "main": [
        [
          {
            "node": "If Not on Lunch1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over TimeBlocks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Appointment Time1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Loop Over TimeBlocks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Appointment Time2": {
      "main": [
        [
          {
            "node": "If Block in Current Time2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetAvailableTimeBlocks2": {
      "main": [
        [
          {
            "node": "Split Out3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over TimeBlocks2": {
      "main": [
        [],
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Date & Time3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Block in Current Time2": {
      "main": [
        [
          {
            "node": "If Not on Lunch2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over TimeBlocks2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Appointment Time2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time3": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out3": {
      "main": [
        [
          {
            "node": "Loop Over TimeBlocks2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Appointment Time3": {
      "main": [
        [
          {
            "node": "If Block in Current Time3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetAvailableTimeBlocks3": {
      "main": [
        [
          {
            "node": "Split Out4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over TimeBlocks3": {
      "main": [
        [],
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Date & Time1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Block in Current Time3": {
      "main": [
        [
          {
            "node": "If Not on Lunch3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over TimeBlocks3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Appointment Time3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time1": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out4": {
      "main": [
        [
          {
            "node": "Loop Over TimeBlocks3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Appointment Time4": {
      "main": [
        [
          {
            "node": "If Block in Current Time4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetAvailableTimeBlocks4": {
      "main": [
        [
          {
            "node": "Split Out5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over TimeBlocks4": {
      "main": [
        [],
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Date & Time4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Block in Current Time4": {
      "main": [
        [
          {
            "node": "If Not on Lunch4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over TimeBlocks4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Appointment Time4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time4": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out5": {
      "main": [
        [
          {
            "node": "Loop Over TimeBlocks4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Most Available Provider2": {
      "main": [
        [
          {
            "node": "Limit3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk3": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk4": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Check Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Token": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk5": {
      "main": [
        [
          {
            "node": "Extract from File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File3": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Limit3": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Edit Fields": [
      {
        "json": {
          "Appt_Resource_ID": 1223,
          "Appt_Resource_Descr": "Sufi PA, Amber",
          "Appt_Resource_Abbr": "AS-PA   ",
          "A_Count": 1,
          "S_Count": 0,
          "C_Count": 0,
          "MostAvail": "1",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1201,
          "Appt_Resource_Descr": "Whitmore PA, Nicole",
          "Appt_Resource_Abbr": "NW-PA   ",
          "A_Count": 1,
          "S_Count": 0,
          "C_Count": 3,
          "MostAvail": "2",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 133,
          "Appt_Resource_Descr": "Webster, Shannon PAC",
          "Appt_Resource_Abbr": "SW PAC  ",
          "A_Count": 3,
          "S_Count": 0,
          "C_Count": 0,
          "MostAvail": "3",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1018,
          "Appt_Resource_Descr": "Gadoua, Christopher",
          "Appt_Resource_Abbr": "CG-PA   ",
          "A_Count": 5,
          "S_Count": 0,
          "C_Count": 2,
          "MostAvail": "4",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      }
    ],
    "HTTP Request4": [
      {
        "json": {
          "getavailabletimeblocksinfo": [
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "800",
              "Available_Date": "06/19/2024",
              "End_Time": "900"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "900",
              "Available_Date": "06/19/2024",
              "End_Time": "910"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "910",
              "Available_Date": "06/19/2024",
              "End_Time": "920"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "920",
              "Available_Date": "06/19/2024",
              "End_Time": "930"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "930",
              "Available_Date": "06/19/2024",
              "End_Time": "940"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "940",
              "Available_Date": "06/19/2024",
              "End_Time": "950"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "950",
              "Available_Date": "06/19/2024",
              "End_Time": "1000"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1000",
              "Available_Date": "06/19/2024",
              "End_Time": "1010"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1010",
              "Available_Date": "06/19/2024",
              "End_Time": "1020"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1020",
              "Available_Date": "06/19/2024",
              "End_Time": "1030"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1030",
              "Available_Date": "06/19/2024",
              "End_Time": "1040"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1040",
              "Available_Date": "06/19/2024",
              "End_Time": "1050"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1050",
              "Available_Date": "06/19/2024",
              "End_Time": "1100"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1100",
              "Available_Date": "06/19/2024",
              "End_Time": "1110"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1110",
              "Available_Date": "06/19/2024",
              "End_Time": "1120"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1120",
              "Available_Date": "06/19/2024",
              "End_Time": "1130"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1130",
              "Available_Date": "06/19/2024",
              "End_Time": "1140"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1140",
              "Available_Date": "06/19/2024",
              "End_Time": "1150"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1150",
              "Available_Date": "06/19/2024",
              "End_Time": "1200"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1200",
              "Available_Date": "06/19/2024",
              "End_Time": "1210"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1210",
              "Available_Date": "06/19/2024",
              "End_Time": "1220"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1220",
              "Available_Date": "06/19/2024",
              "End_Time": "1230"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1230",
              "Available_Date": "06/19/2024",
              "End_Time": "1240"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1240",
              "Available_Date": "06/19/2024",
              "End_Time": "1340"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1340",
              "Available_Date": "06/19/2024",
              "End_Time": "1350"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1350",
              "Available_Date": "06/19/2024",
              "End_Time": "1400"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1400",
              "Available_Date": "06/19/2024",
              "End_Time": "1410"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1410",
              "Available_Date": "06/19/2024",
              "End_Time": "1420"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1420",
              "Available_Date": "06/19/2024",
              "End_Time": "1430"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1430",
              "Available_Date": "06/19/2024",
              "End_Time": "1440"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1440",
              "Available_Date": "06/19/2024",
              "End_Time": "1450"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1450",
              "Available_Date": "06/19/2024",
              "End_Time": "1500"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1500",
              "Available_Date": "06/19/2024",
              "End_Time": "1510"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1510",
              "Available_Date": "06/19/2024",
              "End_Time": "1520"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1520",
              "Available_Date": "06/19/2024",
              "End_Time": "1530"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1530",
              "Available_Date": "06/19/2024",
              "End_Time": "1540"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1540",
              "Available_Date": "06/19/2024",
              "End_Time": "1550"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1550",
              "Available_Date": "06/19/2024",
              "End_Time": "1600"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1600",
              "Available_Date": "06/19/2024",
              "End_Time": "1610"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1610",
              "Available_Date": "06/19/2024",
              "End_Time": "1620"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1620",
              "Available_Date": "06/19/2024",
              "End_Time": "1630"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1630",
              "Available_Date": "06/19/2024",
              "End_Time": "1640"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1640",
              "Available_Date": "06/19/2024",
              "End_Time": "1650"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1650",
              "Available_Date": "06/19/2024",
              "End_Time": "1700"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1700",
              "Available_Date": "06/19/2024",
              "End_Time": "1710"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1710",
              "Available_Date": "06/19/2024",
              "End_Time": "1720"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1720",
              "Available_Date": "06/19/2024",
              "End_Time": "1730"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1730",
              "Available_Date": "06/19/2024",
              "End_Time": "1740"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "ACTNPVOV|NPOV10|NCWEK|VOVVBR|VOVDUAL|VOVVBRAW|VOVERFU|VOVAWV|VOVNPAWV|VOVWIOV|VOVWNPOV|VOV-OV|TM15|ACTVOV|VOVTOC|VOVNPOV|VOVONSIT|ACTNPPHY|ACTPHGYN|ACT PHY|NP WH|ACT AWV|ACTNPAWV|ACTNETOC|ACTEP|ACT-VBR|ACTERFU|ACTTOC|STOP APT|ACTNPOV|WINP-OV|WIOV|WIPHY|ACTWIAWV|WI-WH|WINP-PE|WINP-WH|ACTSV-CV|2NPOVAWV|2NPOVCWE|2OVWH|2OVCWE|2OVAWV|2OVVBR|2NPOVWH|2OVCWEV|2CWEPPWK|2AWVPPWK|2womPPWK|2NEWPPOV|2NAWVPPW|2NWOMPPW|ACTPPWOV|ACTNPppw|INSTPAIN|INSTOBGY|INSTCARD|TeleAWV|ACT OV",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1740",
              "Available_Date": "06/19/2024",
              "End_Time": "1750"
            },
            {
              "Available_Day_ID": "348833",
              "EligApptTypes": "",
              "SchedDept": "EPIC PC ",
              "SchedLoc": "EPS10Mil",
              "Start_Time": "1750",
              "Available_Date": "06/19/2024",
              "End_Time": "1800"
            }
          ]
        }
      }
    ],
    "Paitient": [
      {
        "json": {
          "Patient_ID": 174619,
          "Patient_Number": "502880",
          "Patient_Name": "THOMAS STILWELL",
          "Patient_First_Name": "THOMAS",
          "Patient_Last_Name": "STILWELL",
          "Patient_LFI": "STILWELL, THOMAS",
          "Patient_Street1": "511 SOUTH CROOKS RD,",
          "Patient_City": "CLAWSON",
          "Patient_State": "MI",
          "Patient_Zip_Code": "48017",
          "Patient_SSN": null,
          "Patient_Sex": "M",
          "Patient_DOB": "02/01/1988",
          "Patient_Age": 36,
          "Patient_Marital_Status": "Separated",
          "Patient_Home_Phone": "2488726322",
          "Patient_Cell_Phone": "2488726322",
          "Patient_Email": "thomas@tagarmor.com",
          "Account_ID": [
            172602,
            172602
          ],
          "Contact_ID": 225895,
          "Date_Registered": "2020-06-01T00:00:00.000Z",
          "Comments": [
            null,
            null
          ],
          "Patient_Policy_ID": 228767,
          "Policy_ID": 227486,
          "Coverage": "X",
          "Verified_Date": "2024-05-06T00:00:00.000Z",
          "Carrier_ID": [
            530,
            530
          ],
          "Name": "Bcn",
          "Payor_Number": "000149",
          "CoPayment_Amount": null,
          "Insurance_Plan_ID": null,
          "Certificate_No": "XYH913345119",
          "Group_No": "00255346",
          "Effective_Date": "2020-08-01T00:00:00.000Z",
          "Expiration_Date": "2023-11-30T00:00:00.000Z"
        }
      }
    ],
    "Most Available Provider": [
      {
        "json": {
          "Appt_Resource_ID": 133,
          "Appt_Resource_Descr": "Webster, Shannon PAC",
          "Appt_Resource_Abbr": "SW PAC  ",
          "A_Count": 0,
          "S_Count": 0,
          "C_Count": 2,
          "MostAvail": "1",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1018,
          "Appt_Resource_Descr": "Gadoua, Christopher",
          "Appt_Resource_Abbr": "CG-PA   ",
          "A_Count": 0,
          "S_Count": 1,
          "C_Count": 2,
          "MostAvail": "2",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1223,
          "Appt_Resource_Descr": "Sufi PA, Amber",
          "Appt_Resource_Abbr": "AS-PA   ",
          "A_Count": 1,
          "S_Count": 0,
          "C_Count": 4,
          "MostAvail": "3",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1201,
          "Appt_Resource_Descr": "Whitmore PA, Nicole",
          "Appt_Resource_Abbr": "NW-PA   ",
          "A_Count": 1,
          "S_Count": 1,
          "C_Count": 3,
          "MostAvail": "4",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1009,
          "Appt_Resource_Descr": "Kalabat, Amber",
          "Appt_Resource_Abbr": "AK-NP   ",
          "A_Count": 1,
          "S_Count": 1,
          "C_Count": 3,
          "MostAvail": "4",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      }
    ],
    "Most Available Provider1": [
      {
        "json": {
          "Appt_Resource_ID": 133,
          "Appt_Resource_Descr": "Webster, Shannon PAC",
          "Appt_Resource_Abbr": "SW PAC  ",
          "A_Count": 0,
          "S_Count": 0,
          "C_Count": 2,
          "MostAvail": "1",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1018,
          "Appt_Resource_Descr": "Gadoua, Christopher",
          "Appt_Resource_Abbr": "CG-PA   ",
          "A_Count": 0,
          "S_Count": 1,
          "C_Count": 2,
          "MostAvail": "2",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1223,
          "Appt_Resource_Descr": "Sufi PA, Amber",
          "Appt_Resource_Abbr": "AS-PA   ",
          "A_Count": 1,
          "S_Count": 0,
          "C_Count": 4,
          "MostAvail": "3",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1201,
          "Appt_Resource_Descr": "Whitmore PA, Nicole",
          "Appt_Resource_Abbr": "NW-PA   ",
          "A_Count": 1,
          "S_Count": 1,
          "C_Count": 3,
          "MostAvail": "4",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1009,
          "Appt_Resource_Descr": "Kalabat, Amber",
          "Appt_Resource_Abbr": "AK-NP   ",
          "A_Count": 1,
          "S_Count": 1,
          "C_Count": 3,
          "MostAvail": "4",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      }
    ],
    "Merge2": [
      {
        "json": {
          "Appt_Resource_ID": 1085,
          "Appt_Resource_Descr": "Yaldoo, Mary",
          "Appt_Resource_Abbr": "MG-PAC  ",
          "A_Count": 0,
          "S_Count": 0,
          "C_Count": 6,
          "MostAvail": "1",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile",
          "data": "A64E0BBD-526F-41E4-9512-0481119E2ECA"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1201,
          "Appt_Resource_Descr": "Whitmore PA, Nicole",
          "Appt_Resource_Abbr": "NW-PA   ",
          "A_Count": 1,
          "S_Count": 0,
          "C_Count": 1,
          "MostAvail": "2",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile",
          "data": "A64E0BBD-526F-41E4-9512-0481119E2ECA"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 133,
          "Appt_Resource_Descr": "Webster, Shannon PAC",
          "Appt_Resource_Abbr": "SW PAC  ",
          "A_Count": 1,
          "S_Count": 1,
          "C_Count": 0,
          "MostAvail": "3",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile",
          "data": "A64E0BBD-526F-41E4-9512-0481119E2ECA"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1009,
          "Appt_Resource_Descr": "Kalabat, Amber",
          "Appt_Resource_Abbr": "AK-NP   ",
          "A_Count": 1,
          "S_Count": 1,
          "C_Count": 1,
          "MostAvail": "4",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile",
          "data": "A64E0BBD-526F-41E4-9512-0481119E2ECA"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1231,
          "Appt_Resource_Descr": "Zawisa PA, Hannah",
          "Appt_Resource_Abbr": "HZ-PA   ",
          "A_Count": 2,
          "S_Count": 0,
          "C_Count": 0,
          "MostAvail": "5",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile",
          "data": "A64E0BBD-526F-41E4-9512-0481119E2ECA"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1018,
          "Appt_Resource_Descr": "Gadoua, Christopher",
          "Appt_Resource_Abbr": "CG-PA   ",
          "A_Count": 3,
          "S_Count": 0,
          "C_Count": 0,
          "MostAvail": "6",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile",
          "data": "A64E0BBD-526F-41E4-9512-0481119E2ECA"
        }
      }
    ],
    "Most Available Provider2": [
      {
        "json": {
          "Appt_Resource_ID": 133,
          "Appt_Resource_Descr": "Webster, Shannon PAC",
          "Appt_Resource_Abbr": "SW PAC  ",
          "A_Count": 0,
          "S_Count": 0,
          "C_Count": 2,
          "MostAvail": "1",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1018,
          "Appt_Resource_Descr": "Gadoua, Christopher",
          "Appt_Resource_Abbr": "CG-PA   ",
          "A_Count": 0,
          "S_Count": 1,
          "C_Count": 2,
          "MostAvail": "2",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1223,
          "Appt_Resource_Descr": "Sufi PA, Amber",
          "Appt_Resource_Abbr": "AS-PA   ",
          "A_Count": 1,
          "S_Count": 0,
          "C_Count": 4,
          "MostAvail": "3",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1201,
          "Appt_Resource_Descr": "Whitmore PA, Nicole",
          "Appt_Resource_Abbr": "NW-PA   ",
          "A_Count": 1,
          "S_Count": 1,
          "C_Count": 3,
          "MostAvail": "4",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      },
      {
        "json": {
          "Appt_Resource_ID": 1009,
          "Appt_Resource_Descr": "Kalabat, Amber",
          "Appt_Resource_Abbr": "AK-NP   ",
          "A_Count": 1,
          "S_Count": 1,
          "C_Count": 3,
          "MostAvail": "4",
          "Appt_Sched_Location_Descr": "EPIC Southfield 10 Mile"
        }
      }
    ]
  },
  "versionId": "a957aefc-eb3d-4828-a328-deda3d43b4b6",
  "triggerCount": 0,
  "tags": []
}