{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        []
      ]
    },
    "Extract from File": {
      "main": [
        []
      ]
    }
  },
  "createdAt": "2024-06-26T16:15:23.630Z",
  "id": "wY4uVm9aB2f6KCBo",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "SDOH Report Transpose",
  "nodes": [
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSV Upload</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: #f4f4f4;\n        }\n        .upload-container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            text-align: center;\n        }\n        .upload-container input[type=\"file\"] {\n            margin: 10px 0;\n        }\n        .output-container {\n            margin-top: 20px;\n            text-align: left;\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        table, th, td {\n            border: 1px solid #ddd;\n        }\n        th, td {\n            padding: 8px;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"upload-container\">\n        <h1>Upload CSV File</h1>\n        <input type=\"file\" id=\"csvfile\" accept=\".csv\">\n        <br>\n        <button onclick=\"viewFile()\">View</button>\n        <button onclick=\"uploadFile()\">Submit</button>\n        <div class=\"output-container\" id=\"output-container\"></div>\n    </div>\n    \n    <script>\n        function viewFile() {\n            const fileInput = document.getElementById('csvfile');\n            const outputContainer = document.getElementById('output-container');\n            const file = fileInput.files[0];\n\n            if (file && file.name.endsWith('.csv')) {\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    const csv = e.target.result;\n                    const rows = csv.split('\\n');\n                    const table = document.createElement('table');\n                    rows.forEach(row => {\n                        const tr = document.createElement('tr');\n                        const cells = row.split(',');\n                        cells.forEach(cell => {\n                            const td = document.createElement('td');\n                            td.textContent = cell;\n                            tr.appendChild(td);\n                        });\n                        table.appendChild(tr);\n                    });\n                    outputContainer.innerHTML = '';\n                    outputContainer.appendChild(table);\n                };\n                reader.readAsText(file);\n            } else {\n                alert('Please upload a valid .csv file.');\n            }\n        }\n\n        function uploadFile() {\n            const fileInput = document.getElementById('csvfile');\n            const file = fileInput.files[0];\n\n            if (file && file.name.endsWith('.csv')) {\n                const formData = new FormData();\n                formData.append('csvfile', file);\n\n                fetch('https://xl.epicpc.com/webhook/35358a54-11ad-4721-8bfd-69ca79e66d98', {\n                    method: 'POST',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    console.log('Success:', data);\n                    // Redirect the page after successful upload\n                    window.location.href = 'https://xl.epicpc.com/webhook/c3b3f2e4-aea8-42a5-8b07-68b0df3d31c2';\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                });\n            } else {\n                alert('Please upload a valid .csv file.');\n            }\n        }\n    </script>\n</body>\n</html>\n",
        "options": {}
      },
      "id": "a722bd7d-8ba6-42ef-ab4e-979c691c3126",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1100,
        500
      ]
    },
    {
      "parameters": {
        "path": "c3b3f2e4-aea8-42a5-8b07-68b0df3d31c2",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "16710224-63b3-4d4d-9ef0-281768a27af1",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        880,
        500
      ],
      "webhookId": "c3b3f2e4-aea8-42a5-8b07-68b0df3d31c2"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "list",
        "options": {
          "purpose": "any"
        }
      },
      "id": "4b0325d7-e912-40e6-beab-38cc8fd6197a",
      "name": "OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        2580,
        500
      ],
      "credentials": {
        "openAiApi": {
          "id": "WaBIAccn19Qs2qn0",
          "name": "OpenAi account CyberTech"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "35358a54-11ad-4721-8bfd-69ca79e66d98",
        "options": {}
      },
      "id": "d45762fd-5923-4e17-bcae-393890a2b5b8",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1320,
        500
      ],
      "webhookId": "35358a54-11ad-4721-8bfd-69ca79e66d98"
    },
    {
      "parameters": {
        "resource": "file",
        "binaryPropertyName": "csvfile",
        "options": {
          "purpose": "assistants"
        }
      },
      "id": "8d1e8cf1-d7cf-4497-9e81-5f63cfaa8f5c",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        1820,
        200
      ],
      "credentials": {
        "openAiApi": {
          "id": "WaBIAccn19Qs2qn0",
          "name": "OpenAi account CyberTech"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "=I have a CSV file ({{ $json[\"id\"] }},{{ $json.filename }}) that needs to be transposed such that each row with specific questions becomes multiple rows. Specifically, each original row should be split into multiple rows where each question becomes its own row with the MRN, First Name, Last Name, date, and corresponding answer. Here is the CSV file. Please transform it, show me the transposed data, and provide a link to download the transformed CSV file. The columns to unpivot are from columns G to AD, and all other columns need to be present for the corresponding question row.\nPlease ensure that the MRN, First Name, and Last Name columns are present for each record and that the columns are ordered as follows: MRN, First Name, Last Name, [other columns], Question, Answer.\nPlease respond with the transposed data only, no comments."
            },
            {
              "content": "Please respond with the transposed data only, no comments.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "id": "80c8e1f8-7894-4a91-a2bd-50549485bbec",
      "name": "Message a model",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        2220,
        500
      ],
      "credentials": {
        "openAiApi": {
          "id": "WaBIAccn19Qs2qn0",
          "name": "OpenAi account CyberTech"
        }
      }
    },
    {
      "parameters": {
        "binaryPropertyName": "csvfile",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1500,
        20
      ],
      "id": "c4b4d979-39ce-406a-9b48-1b3ad60ddede",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "text",
        "binaryPropertyName": "csvfile",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1560,
        500
      ],
      "id": "89073460-767f-4aa0-8948-d36ff153f1ec",
      "name": "Extract from File"
    }
  ],
  "pinData": {
    "OpenAI": [
      {
        "json": {
          "object": "file",
          "id": "file-tpukodzgyTkWEbxstAVapwdU",
          "purpose": "assistants",
          "filename": "results-survey222825 (1).csv",
          "bytes": 7396,
          "created_at": 1719420989,
          "status": "processed",
          "status_details": null
        }
      }
    ],
    "Webhook1": [
      {
        "json": {
          "headers": {
            "host": "xl.epicpc.com",
            "x-real-ip": "24.127.131.242",
            "x-forwarded-for": "24.127.131.242",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "155692",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
            "sec-ch-ua": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Microsoft Edge\";v=\"138\"",
            "content-type": "multipart/form-data; boundary=----WebKitFormBoundaryjF9TcHuAbozDOtrl",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "https://xl.epicpc.com",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://xl.epicpc.com/webhook/c3b3f2e4-aea8-42a5-8b07-68b0df3d31c2",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2BbUfCSPcUWWdCnq%2FMAojWpAQUa2kZWR58%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX19P8E84LiY98aOuIBjTwB56MpuOWyxdieM%3D; _fbp=fb.1.1752436066638.233812261132029407; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImY5YWFiYmJkLTZiNjktNGIwMC1iMGUzLWQ5MTQzYTYzYWUzNCIsImhhc2giOiJZaXdOcHpaYzdGIiwiYnJvd3NlcklkIjoiaUJna2RzOWJrRzgwSThNRUZqODNFOEEzSWRxeW8rYit0L2hPNnk5RHYwVT0iLCJpYXQiOjE3NTI5NDUyMjIsImV4cCI6MTc1MzU1MDAyMn0.iWiUu_D1TK06pQzbUXgodj7ZF6XN3mOSoI87i2F1ICY; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2BQq8akMhYXvaMDXOjrPCLIOrkMuJR1oR%2FqZJtFCthaLKYGF0EwZ8%2B1g8jF4u0GsS6CFjCfhJk4iQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19wS6eao8ODlcnVvC%2BbnyXbYf%2FZqyBir%2BJjKId2dUsYCvVsewxeL6UlszXBi304obMFFOcefABsTyEJr5pXUdN0D9OzPZogPhHXGogfBjWW69RmYDinHfsi7kIKxPU9UXnRN7IMsX%2FvqxRtJEZXjtmYRi76cjs3VXQ%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX1%2Bh3WGkbFscwY033nUaJ3O0S1CXiLxJS%2BgQPD2HSNNgGAj5k8%2F7EefZOcCUyDZNoBRkNnG83gFj02MkuQWd8zlZXM%2BweMTtujseYzD5bjOO9azogw7vSTLDQTWcJ1T6w24i3DQN6v7TfA%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22fbbaa0fe7164b93e2c831f7816129952355ab8de07812c802f276efe6e8da0f3%23f9aabbbd-6b69-4b00-b0e3-d9143a63ae34%22%2C%22%24sesid%22%3A%5B1753036554882%2C%22019828fe-1aa8-772e-b13a-867cb5cb1e97%22%2C1753034398376%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fxl.epicpc.com%2Fsignin%3Fredirect%3D%25252F%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2Bq67EOWuFpdCnI4iKB%2F7SRFXFU5rtFUGhO7N9ZwrjZvh1Z6B9LWYqBn6hN5BFDX6ZwZR%2FEIefgE74efFm8pWrrmTO%2BuyYz3pOzYqtYVNq%2F%2Fu%2FAKpts8fAayJvyp9PVFYmYB0Np9TnnYA%3D%3D"
          },
          "params": {},
          "query": {},
          "body": {},
          "webhookUrl": "https://xl.epicpc.com/webhook/35358a54-11ad-4721-8bfd-69ca79e66d98",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-07-20T20:21:53.021Z",
  "versionId": "d3226a80-3515-4a11-b875-1b42f5fbf5c2"
}