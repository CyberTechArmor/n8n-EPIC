{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-29T16:55:18.547Z",
  "id": "T4EQyG7gag9KjQoh",
  "isArchived": false,
  "meta": null,
  "name": "Instant Visits",
  "nodes": [
    {
      "parameters": {
        "path": "0822b34e-b1e8-4eb2-859d-52fbaff09305",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "36b18eb3-62af-4705-b2bf-a312156ed10f",
      "name": "Webhook",
      "webhookId": "0822b34e-b1e8-4eb2-859d-52fbaff09305"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Twilio Video Call Demo</title>\n  <script src=\"https://media.twiliocdn.com/sdk/js/video/releases/2.25.2/twilio-video.min.js\"></script>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      background: #f8f9fa;\n      margin: 0;\n      padding: 0;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      height: 100vh;\n    }\n    h2 {\n      margin-top: 2rem;\n    }\n    #videos {\n      display: flex;\n      gap: 20px;\n      margin: 2rem 0;\n    }\n    .video-container {\n      background: #000;\n      border-radius: 8px;\n      overflow: hidden;\n      width: 320px;\n      height: 240px;\n      position: relative;\n    }\n    .video-container label {\n      position: absolute;\n      top: 4px;\n      left: 4px;\n      color: #fff;\n      background: rgba(0,0,0,0.5);\n      padding: 2px 8px;\n      border-radius: 4px;\n      font-size: 0.9em;\n    }\n    video {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    #controls {\n      display: flex;\n      gap: 1rem;\n      margin-bottom: 2rem;\n    }\n    #roomInput {\n      padding: 0.5em;\n      font-size: 1em;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n    }\n    button {\n      padding: 0.5em 1em;\n      font-size: 1em;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      background: #2563eb;\n      color: #fff;\n      transition: background 0.2s;\n    }\n    button:disabled {\n      background: #ccc;\n      cursor: not-allowed;\n    }\n    button.leave {\n      background: #ef4444;\n    }\n  </style>\n</head>\n<body>\n  <h2>Twilio Video Call App</h2>\n  <div id=\"controls\">\n    <input type=\"text\" id=\"roomInput\" placeholder=\"Enter Room Name\" />\n    <button id=\"joinBtn\">Join</button>\n    <button id=\"leaveBtn\" class=\"leave\" disabled>Leave</button>\n  </div>\n  <div id=\"videos\">\n    <div class=\"video-container\">\n      <label>Local</label>\n      <div id=\"local-video\"></div>\n    </div>\n    <div class=\"video-container\">\n      <label>Remote</label>\n      <div id=\"remote-video\"></div>\n    </div>\n  </div>\n\n  <script>\n    // IMPORTANT: Replace with your Twilio access token generator endpoint!\n    const TOKEN_ENDPOINT = 'https://turbocaller-3144.twil.io/jwt';\n\n    let room = null;\n\n    document.getElementById('joinBtn').onclick = async function() {\n      const roomName = document.getElementById('roomInput').value.trim();\n      if (!roomName) {\n        alert('Enter a room name!');\n        return;\n      }\n      this.disabled = true;\n      // Get a token from your backend (implement this yourself!)\n      const token = await getToken(roomName);\n      if (!token) {\n        alert('Could not get access token!');\n        this.disabled = false;\n        return;\n      }\n      joinRoom(roomName, token);\n    };\n\n    document.getElementById('leaveBtn').onclick = function() {\n      if (room) {\n        room.disconnect();\n      }\n    };\n\n    async function getToken(roomName) {\n      // Replace with your backend API to generate a token\n      // Example: fetch(`${TOKEN_ENDPOINT}?identity=exampleUser&room=${roomName}`)\n      // For testing, you can hardcode a token here (NOT recommended for production)\n      try {\n        const res = await fetch(`${TOKEN_ENDPOINT}?identity=guest_${Math.floor(Math.random()*1000)}&room=${encodeURIComponent(roomName)}`);\n        if (!res.ok) return null;\n        const data = await res.json();\n        return data.token;\n      } catch (e) {\n        return null;\n      }\n    }\n\n    function joinRoom(roomName, token) {\n      Twilio.Video.connect(token, { name: roomName }).then(_room => {\n        room = _room;\n        document.getElementById('leaveBtn').disabled = false;\n        document.getElementById('joinBtn').disabled = true;\n\n        // Attach local video\n        Twilio.Video.createLocalVideoTrack().then(track => {\n          const container = document.getElementById('local-video');\n          container.innerHTML = '';\n          container.appendChild(track.attach());\n        });\n\n        // Attach remote video(s)\n        room.on('participantConnected', participant => {\n          participant.tracks.forEach(publication => {\n            if (publication.isSubscribed) {\n              const track = publication.track;\n              attachRemote(track);\n            }\n          });\n          participant.on('trackSubscribed', attachRemote);\n        });\n\n        room.participants.forEach(participant => {\n          participant.tracks.forEach(publication => {\n            if (publication.isSubscribed) {\n              attachRemote(publication.track);\n            }\n          });\n        });\n\n        room.on('participantDisconnected', () => {\n          clearRemote();\n        });\n\n        room.on('disconnected', () => {\n          document.getElementById('leaveBtn').disabled = true;\n          document.getElementById('joinBtn').disabled = false;\n          clearLocal();\n          clearRemote();\n        });\n\n      }, err => {\n        alert('Could not connect to Twilio: ' + err.message);\n        document.getElementById('joinBtn').disabled = false;\n      });\n    }\n\n    function attachRemote(track) {\n      const container = document.getElementById('remote-video');\n      container.innerHTML = '';\n      container.appendChild(track.attach());\n    }\n\n    function clearRemote() {\n      document.getElementById('remote-video').innerHTML = '';\n    }\n\n    function clearLocal() {\n      document.getElementById('local-video').innerHTML = '';\n    }\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        0
      ],
      "id": "d8768917-88b7-4626-bf31-6bb623b120ff",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n  <title>Twilio Video Quickstart</title>\n  <script src=\"https://media.twiliocdn.com/sdk/js/video/releases/2.25.2/twilio-video.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; background: #f0f2f5; padding: 30px; }\n    #video-grid { display: flex; gap: 24px; }\n    .video-box { background: #000; width: 320px; height: 240px; border-radius: 8px; position: relative; }\n    .video-label { position: absolute; top: 8px; left: 8px; background: rgba(0,0,0,0.5); color: #fff; border-radius: 4px; padding: 2px 10px; }\n    video { width: 100%; height: 100%; object-fit: cover; }\n    #controls { margin: 20px 0; }\n    button { padding: 0.5em 1.2em; margin-left: 10px; border: none; border-radius: 4px; font-size: 1em; cursor: pointer; }\n    #join { background: #2563eb; color: #fff; }\n    #leave { background: #ef4444; color: #fff; }\n    input { padding: 0.5em; border-radius: 4px; border: 1px solid #bbb; margin-right: 10px; }\n  </style>\n</head>\n<body>\n  <h2>Twilio Video Quickstart (CDN)</h2>\n  <div id=\"controls\">\n    <input id=\"roomName\" placeholder=\"Room name\" />\n    <input id=\"userName\" placeholder=\"Your name\" />\n    <button id=\"join\">Join Room</button>\n    <button id=\"leave\" disabled>Leave</button>\n  </div>\n  <div id=\"video-grid\">\n    <div class=\"video-box\">\n      <span class=\"video-label\">Local</span>\n      <div id=\"local-video\"></div>\n    </div>\n    <div class=\"video-box\">\n      <span class=\"video-label\">Remote</span>\n      <div id=\"remote-video\"></div>\n    </div>\n  </div>\n\n  <script>\n    // Replace with your Twilio Function URL:\n    const TOKEN_FUNCTION_URL = \"https://instantvisit-9579.twil.io/token\";\n\n    let room = null;\n    let localTrack = null;\n\n    document.getElementById('join').onclick = async () => {\n      const roomName = document.getElementById('roomName').value.trim();\n      const userName = document.getElementById('userName').value.trim();\n      if (!roomName || !userName) {\n        alert(\"Enter room and your name.\");\n        return;\n      }\n      document.getElementById('join').disabled = true;\n\n      // Get a Video Access Token\n      const token = await fetchToken(userName, roomName);\n      if (!token) {\n        alert(\"Could not fetch token!\");\n        document.getElementById('join').disabled = false;\n        return;\n      }\n\n      Twilio.Video.connect(token, { name: roomName }).then(_room => {\n        room = _room;\n        document.getElementById('leave').disabled = false;\n\n        // Attach local video\n        Twilio.Video.createLocalVideoTrack().then(track => {\n          localTrack = track;\n          const container = document.getElementById('local-video');\n          container.innerHTML = '';\n          container.appendChild(track.attach());\n        });\n\n        // Attach remote video(s)\n        room.on('participantConnected', participant => {\n          participant.tracks.forEach(publication => {\n            if (publication.isSubscribed) {\n              attachRemote(publication.track);\n            }\n          });\n          participant.on('trackSubscribed', attachRemote);\n        });\n\n        // Attach existing participants\n        room.participants.forEach(participant => {\n          participant.tracks.forEach(publication => {\n            if (publication.isSubscribed) {\n              attachRemote(publication.track);\n            }\n          });\n        });\n\n        // Remove remote video when participant leaves\n        room.on('participantDisconnected', clearRemote);\n\n        room.on('disconnected', () => {\n          document.getElementById('leave').disabled = true;\n          document.getElementById('join').disabled = false;\n          clearLocal();\n          clearRemote();\n          room = null;\n        });\n\n      }, err => {\n        alert('Could not connect to Twilio: ' + err.message);\n        document.getElementById('join').disabled = false;\n      });\n    };\n\n    document.getElementById('leave').onclick = () => {\n      if (room) {\n        room.disconnect();\n        if (localTrack) {\n          localTrack.stop();\n          localTrack = null;\n        }\n      }\n    };\n\n    async function fetchToken(identity, room) {\n      try {\n        const url = `${TOKEN_FUNCTION_URL}?identity=${encodeURIComponent(identity)}&room=${encodeURIComponent(room)}`;\n        const res = await fetch(url);\n        if (!res.ok) return null;\n        const data = await res.json();\n        return data.token;\n      } catch (err) {\n        return null;\n      }\n    }\n\n    function attachRemote(track) {\n      const container = document.getElementById('remote-video');\n      container.innerHTML = '';\n      container.appendChild(track.attach());\n    }\n    function clearRemote() {\n      document.getElementById('remote-video').innerHTML = '';\n    }\n    function clearLocal() {\n      document.getElementById('local-video').innerHTML = '';\n    }\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        220
      ],
      "id": "0d0cc61c-5f16-4c72-acfb-2cf44da3f625",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n  <title>Twilio Video Quickstart (2.3.0)</title>\n  <!-- CDN for Twilio Video SDK v2.3.0 -->\n  <script src=\"//media.twiliocdn.com/sdk/js/video/releases/2.3.0/twilio-video.min.js\"></script>\n\n  <style>\n    body {\n      font-family: sans-serif;\n      background: #f0f2f5;\n      padding: 30px;\n    }\n    #video-grid {\n      display: flex;\n      gap: 24px;\n      margin-top: 20px;\n    }\n    .video-box {\n      background: #000;\n      width: 320px;\n      height: 240px;\n      border-radius: 8px;\n      position: relative;\n      overflow: hidden;\n    }\n    .video-label {\n      position: absolute;\n      top: 8px;\n      left: 8px;\n      background: rgba(0, 0, 0, 0.5);\n      color: #fff;\n      border-radius: 4px;\n      padding: 2px 10px;\n      font-size: 0.85em;\n      z-index: 10;\n    }\n    video {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n    #controls {\n      margin: 20px 0;\n    }\n    button {\n      padding: 0.5em 1.2em;\n      margin-left: 10px;\n      border: none;\n      border-radius: 4px;\n      font-size: 1em;\n      cursor: pointer;\n    }\n    #join {\n      background: #2563eb;\n      color: #fff;\n    }\n    #leave {\n      background: #ef4444;\n      color: #fff;\n    }\n    input {\n      padding: 0.5em;\n      border-radius: 4px;\n      border: 1px solid #bbb;\n      margin-right: 10px;\n      font-size: 1em;\n    }\n  </style>\n</head>\n\n<body>\n  <h2>Twilio Video Quickstart (2.3.0)</h2>\n\n  <div id=\"controls\">\n    <input id=\"roomName\" placeholder=\"Room name\" />\n    <input id=\"userName\" placeholder=\"Your name\" />\n    <button id=\"preview\">Preview Camera</button>\n    <button id=\"join\">Join Room</button>\n    <button id=\"leave\" disabled>Leave</button>\n  </div>\n\n  <div id=\"video-grid\">\n    <div class=\"video-box\">\n      <span class=\"video-label\">Local</span>\n      <div id=\"local-video\"></div>\n    </div>\n    <div class=\"video-box\">\n      <span class=\"video-label\">Remote</span>\n      <div id=\"remote-video\"></div>\n    </div>\n  </div>\n\n  <script>\n    // ─────────────────────────────────────────────────────────────────────────────\n    // 1. Change this to your Twilio Function URL that returns { token, identity, room }\n    // ─────────────────────────────────────────────────────────────────────────────\n    const TOKEN_FUNCTION_URL = \"https://instantvisit-9579.twil.io/token\";\n\n    let room = null;               // will hold our connected Room instance\n    let localTracks = [];          // array of LocalAudioTrack and LocalVideoTrack\n\n    // ─────────────────────────────────────────────────────────────────────────────\n    // 2. “Preview Camera” – create local tracks (audio+video) and render them in DOM\n    // ─────────────────────────────────────────────────────────────────────────────\n    document.getElementById('preview').onclick = async () => {\n      document.getElementById('preview').disabled = true;\n\n      // If we already have tracks, stop + detach them so we can replace\n      if (localTracks.length) {\n        localTracks.forEach(track => {\n          track.stop();\n          const attachedElements = track.detach();\n          attachedElements.forEach(el => el.remove());\n        });\n        localTracks = [];\n      }\n\n      try {\n        // Request the camera+mic\n        localTracks = await Twilio.Video.createLocalTracks({ audio: true, video: true });\n      } catch (err) {\n        console.error(\"Error acquiring local tracks:\", err);\n        alert(\"Could not access camera/microphone. Check permissions.\");\n        document.getElementById('preview').disabled = false;\n        return;\n      }\n\n      // Show only the video track in the “Local” box\n      const localContainer = document.getElementById('local-video');\n      localContainer.innerHTML = \"\";\n      localTracks.forEach(track => {\n        if (track.kind === 'video') {\n          localContainer.appendChild(track.attach());\n        }\n      });\n    };\n\n    // ─────────────────────────────────────────────────────────────────────────────\n    // 3. “Join Room” – get a fresh Access Token, then connect to Twilio Video Room\n    // ─────────────────────────────────────────────────────────────────────────────\n    document.getElementById('join').onclick = async () => {\n      const roomName = document.getElementById('roomName').value.trim();\n      const userName = document.getElementById('userName').value.trim();\n\n      if (!roomName || !userName) {\n        alert(\"Please enter both a Room name and your name.\");\n        return;\n      }\n\n      // Disable “Join” to prevent double-click\n      document.getElementById('join').disabled = true;\n\n      // If user never clicked “Preview”, or we lost the tracks, recreate them now\n      if (!localTracks.length) {\n        try {\n          localTracks = await Twilio.Video.createLocalTracks({ audio: true, video: true });\n        } catch (err) {\n          console.error(\"Error acquiring local tracks before join:\", err);\n          alert(\"Could not access camera/microphone. Check permissions.\");\n          document.getElementById('join').disabled = false;\n          return;\n        }\n        // Render the video portion of the localTracks\n        const previewContainer = document.getElementById('local-video');\n        previewContainer.innerHTML = \"\";\n        localTracks.forEach(track => {\n          if (track.kind === 'video') {\n            previewContainer.appendChild(track.attach());\n          }\n        });\n      }\n\n      // Fetch a fresh Access Token from your Twilio Function\n      let token;\n      try {\n        token = await fetchToken(userName, roomName);\n        if (!token) throw new Error(\"No token in response\");\n      } catch (err) {\n        console.error(\"Error fetching token:\", err);\n        alert(\"Could not fetch token! Check console for details.\");\n        document.getElementById('join').disabled = false;\n        return;\n      }\n\n      // Now connect to Twilio Video Room, passing the localTracks\n      try {\n        room = await Twilio.Video.connect(token, {\n          name: roomName,\n          tracks: localTracks\n        });\n        console.log(`✅ Connected to Room: ${room.name} as '${userName}'.`);\n      } catch (err) {\n        console.error(\"❌ Could not connect to Twilio:\", err);\n        alert(\"Could not connect to Twilio: \" + (err.message || err));\n        document.getElementById('join').disabled = false;\n        return;\n      }\n\n      // Enable the “Leave” button once connected\n      document.getElementById('leave').disabled = false;\n\n      // ───────────────────────────────────────────────────────────────────────────\n      // 3a. When a remote participant connects, subscribe to their tracks\n      // ───────────────────────────────────────────────────────────────────────────\n      room.on('participantConnected', participant => {\n        console.log(`Participant connected: ${participant.identity}`);\n\n        // If they already published tracks, we must subscribe to those now\n        participant.tracks.forEach(publication => {\n          if (publication.isSubscribed) {\n            attachRemote(publication.track);\n          }\n        });\n\n        // As new tracks get published, subscribe to them\n        participant.on('trackSubscribed', track => {\n          console.log(`→ Subscribed to track: ${track.kind} for ${participant.identity}`);\n          attachRemote(track);\n        });\n      });\n\n      // ───────────────────────────────────────────────────────────────────────────\n      // 3b. If anyone is already in the Room (joined before us), render their tracks\n      // ───────────────────────────────────────────────────────────────────────────\n      room.participants.forEach(participant => {\n        console.log(`(Already in the room) Participant: ${participant.identity}`);\n        participant.tracks.forEach(publication => {\n          if (publication.isSubscribed) {\n            attachRemote(publication.track);\n          }\n        });\n        participant.on('trackSubscribed', track => {\n          console.log(`→ Subscribed to track: ${track.kind} for ${participant.identity}`);\n          attachRemote(track);\n        });\n      });\n\n      // ───────────────────────────────────────────────────────────────────────────\n      // 3c. When a participant disconnects, clear only THEIR tracks from “Remote”\n      // ───────────────────────────────────────────────────────────────────────────\n      room.on('participantDisconnected', participant => {\n        console.log(`Participant disconnected: ${participant.identity}`);\n        clearRemoteForParticipant(participant.identity);\n      });\n\n      // ───────────────────────────────────────────────────────────────────────────\n      // 3d. When WE disconnect (press “Leave”), clean up everything\n      // ───────────────────────────────────────────────────────────────────────────\n      room.on('disconnected', () => {\n        console.log(\"You were disconnected from the Room.\");\n        document.getElementById('leave').disabled = true;\n        document.getElementById('join').disabled = false;\n\n        // Stop + detach all local tracks\n        clearLocal();\n\n        // Remove all remote tracks\n        clearAllRemote();\n\n        // Clean up room reference\n        room = null;\n      });\n    };\n\n    // ─────────────────────────────────────────────────────────────────────────────\n    // 4. “Leave Room” – disconnect and clean up\n    // ─────────────────────────────────────────────────────────────────────────────\n    document.getElementById('leave').onclick = () => {\n      if (room) {\n        console.log(\"Leaving room...\");\n        room.disconnect();\n      }\n    };\n\n    // ─────────────────────────────────────────────────────────────────────────────\n    // Helper: fetchToken() → calls your Twilio Function and returns data.token\n    // ─────────────────────────────────────────────────────────────────────────────\n    async function fetchToken(identity, roomName) {\n      const url = `${TOKEN_FUNCTION_URL}?identity=${encodeURIComponent(identity)}&room=${encodeURIComponent(roomName)}`;\n      try {\n        const res = await fetch(url);\n        if (!res.ok) {\n          console.error(\"fetchToken received non-200:\", res.status, res.statusText);\n          return null;\n        }\n        const data = await res.json();\n        return data.token;\n      } catch (err) {\n        console.error(\"fetchToken error:\", err);\n        return null;\n      }\n    }\n\n    // ─────────────────────────────────────────────────────────────────────────────\n    // Helper: attachRemote() → display incoming MediaStreamTrack in “Remote” box\n    // ─────────────────────────────────────────────────────────────────────────────\n    function attachRemote(track) {\n      const remoteContainer = document.getElementById('remote-video');\n      // Do NOT clearEntire container on each attach; just append so multiple tracks can stack\n      const mediaElement = track.attach();\n      mediaElement.style.maxWidth = \"100%\";\n      mediaElement.style.maxHeight = \"100%\";\n      // Give it a small border so we can visually see multiple videos if they publish audio+video\n      mediaElement.style.border = \"1px solid #444\";\n      remoteContainer.appendChild(mediaElement);\n    }\n\n    // ─────────────────────────────────────────────────────────────────────────────\n    // Helper: clearRemoteForParticipant() → remove all elements with that participantId\n    // ─────────────────────────────────────────────────────────────────────────────\n    function clearRemoteForParticipant(identity) {\n      const remoteContainer = document.getElementById('remote-video');\n      // Twilio automatically attaches <video> elements whose “srcObject” property\n      // includes participant.identity in its id or class. We can simply clear all and re-render,\n      // but here we’ll remove all childNodes (since we never track which belongs to whom individually).\n      // For simplicity, remove everything and let new participants rejoin fresh.\n      remoteContainer.innerHTML = \"\";\n    }\n\n    // ─────────────────────────────────────────────────────────────────────────────\n    // Helper: clearAllRemote() → wipe out every attached element in “Remote” box\n    // ─────────────────────────────────────────────────────────────────────────────\n    function clearAllRemote() {\n      document.getElementById('remote-video').innerHTML = \"\";\n    }\n\n    // ─────────────────────────────────────────────────────────────────────────────\n    // Helper: clearLocal() → stop & detach any local tracks and wipe “Local” box\n    // ─────────────────────────────────────────────────────────────────────────────\n    function clearLocal() {\n      const localContainer = document.getElementById('local-video');\n      localContainer.innerHTML = \"\";\n      if (localTracks.length) {\n        localTracks.forEach(track => {\n          try {\n            track.stop();\n            const elements = track.detach();\n            elements.forEach(el => el.remove());\n          } catch (_) { /* ignore */ }\n        });\n        localTracks = [];\n      }\n    }\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        220,
        380
      ],
      "id": "56352ebb-19e8-41b3-9c76-999080503d14",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n  <title>Twilio Video Quickstart (2.3.0)</title>\n  <!-- Twilio Video SDK 2.3.0 from legacy CDN -->\n  <script src=\"//media.twiliocdn.com/sdk/js/video/releases/2.3.0/twilio-video.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; background: #f0f2f5; padding: 30px; }\n    #video-grid { display: flex; gap: 24px; }\n    .video-box { background: #000; width: 320px; height: 240px; border-radius: 8px; position: relative; }\n    .video-label { position: absolute; top: 8px; left: 8px; background: rgba(0,0,0,0.5); color: #fff; border-radius: 4px; padding: 2px 10px; }\n    video { width: 100%; height: 100%; object-fit: cover; }\n    #controls { margin: 20px 0; }\n    button { padding: 0.5em 1.2em; margin-left: 10px; border: none; border-radius: 4px; font-size: 1em; cursor: pointer; }\n    #join { background: #2563eb; color: #fff; }\n    #leave { background: #ef4444; color: #fff; }\n    input { padding: 0.5em; border-radius: 4px; border: 1px solid #bbb; margin-right: 10px; }\n  </style>\n</head>\n<body>\n  <h2>Twilio Video Quickstart (2.3.0)</h2>\n  <div id=\"controls\">\n    <input id=\"roomName\" placeholder=\"Room name\" />\n    <input id=\"userName\" placeholder=\"Your name\" />\n    <button id=\"preview\">Preview Camera</button>\n    <button id=\"join\">Join Room</button>\n    <button id=\"leave\" disabled>Leave</button>\n  </div>\n  <div id=\"video-grid\">\n    <div class=\"video-box\">\n      <span class=\"video-label\">Local</span>\n      <div id=\"local-video\"></div>\n    </div>\n    <div class=\"video-box\">\n      <span class=\"video-label\">Remote</span>\n      <div id=\"remote-video\"></div>\n    </div>\n  </div>\n\n  <script>\n    // Replace with your Twilio Function URL:\n    const TOKEN_FUNCTION_URL = \"https://instantvisit-9579.twil.io/token\";\n\n    let room = null;\n    let localTracks = [];\n\n    // Preview Camera (audio+video)\n    document.getElementById('preview').onclick = async () => {\n      document.getElementById('preview').disabled = true;\n      if (localTracks.length) {\n        localTracks.forEach(track => {\n          track.stop();\n          track.detach().forEach(el => el.remove());\n        });\n      }\n      localTracks = await Twilio.Video.createLocalTracks({ audio: true, video: true });\n      const container = document.getElementById('local-video');\n      container.innerHTML = '';\n      localTracks.forEach(track => {\n        if (track.kind === 'video') container.appendChild(track.attach());\n        // audio is not rendered locally, but is included for room\n      });\n    };\n\n    // Join Room (audio+video)\n    document.getElementById('join').onclick = async () => {\n      const roomName = document.getElementById('roomName').value.trim();\n      const userName = document.getElementById('userName').value.trim();\n      if (!roomName || !userName) {\n        alert(\"Enter room and your name.\");\n        return;\n      }\n      document.getElementById('join').disabled = true;\n      if (!localTracks.length) {\n        localTracks = await Twilio.Video.createLocalTracks({ audio: true, video: true });\n        const container = document.getElementById('local-video');\n        container.innerHTML = '';\n        localTracks.forEach(track => {\n          if (track.kind === 'video') container.appendChild(track.attach());\n        });\n      }\n      const token = await fetchToken(userName, roomName);\n      if (!token) {\n        alert(\"Could not fetch token!\");\n        document.getElementById('join').disabled = false;\n        return;\n      }\n      Twilio.Video.connect(token, {\n        name: roomName,\n        tracks: localTracks\n      }).then(_room => {\n        room = _room;\n        document.getElementById('leave').disabled = false;\n        room.on('participantConnected', participant => {\n          participant.tracks.forEach(publication => {\n            if (publication.isSubscribed) {\n              attachRemote(publication.track);\n            }\n          });\n          participant.on('trackSubscribed', attachRemote);\n        });\n        room.participants.forEach(participant => {\n          participant.tracks.forEach(publication => {\n            if (publication.isSubscribed) {\n              attachRemote(publication.track);\n            }\n          });\n        });\n        room.on('participantDisconnected', clearRemote);\n        room.on('disconnected', () => {\n          document.getElementById('leave').disabled = true;\n          document.getElementById('join').disabled = false;\n          clearLocal();\n          clearRemote();\n          room = null;\n          if (localTracks.length) {\n            localTracks.forEach(track => track.stop());\n            localTracks = [];\n          }\n        });\n      }, err => {\n        alert('Could not connect to Twilio: ' + err.message);\n        document.getElementById('join').disabled = false;\n      });\n    };\n\n    document.getElementById('leave').onclick = () => {\n      if (room) {\n        room.disconnect();\n        if (localTracks.length) {\n          localTracks.forEach(track => track.stop());\n          localTracks = [];\n        }\n      }\n    };\n\n    async function fetchToken(identity, room) {\n      try {\n        const url = `${TOKEN_FUNCTION_URL}?identity=${encodeURIComponent(identity)}&room=${encodeURIComponent(room)}`;\n        const res = await fetch(url);\n        if (!res.ok) return null;\n        const data = await res.json();\n        return data.token;\n      } catch (err) {\n        return null;\n      }\n    }\n\n    function attachRemote(track) {\n      const container = document.getElementById('remote-video');\n      container.innerHTML = '';\n      container.appendChild(track.attach());\n    }\n    function clearRemote() {\n      document.getElementById('remote-video').innerHTML = '';\n    }\n    function clearLocal() {\n      document.getElementById('local-video').innerHTML = '';\n    }\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        400,
        380
      ],
      "id": "bac4aec2-d39f-422c-b27f-c3f237732c8b",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n  <title>Twilio Video Quickstart (2.3.0)</title>\n  <script src=\"//media.twiliocdn.com/sdk/js/video/releases/2.3.0/twilio-video.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; background: #f0f2f5; padding: 30px; }\n    #video-grid { display: flex; gap: 24px; }\n    .video-box { background: #000; width: 320px; height: 240px; border-radius: 8px; position: relative; }\n    .video-label { position: absolute; top: 8px; left: 8px; background: rgba(0,0,0,0.5); color: #fff; border-radius: 4px; padding: 2px 10px; }\n    video { width: 100%; height: 100%; object-fit: cover; }\n    #controls { margin: 20px 0; }\n    button { padding: 0.5em 1.2em; margin-left: 10px; border: none; border-radius: 4px; font-size: 1em; cursor: pointer; }\n    #join { background: #2563eb; color: #fff; }\n    #leave { background: #ef4444; color: #fff; }\n    input { padding: 0.5em; border-radius: 4px; border: 1px solid #bbb; margin-right: 10px; }\n  </style>\n</head>\n<body>\n  <h2>Twilio Video Quickstart (2.3.0)</h2>\n  <div id=\"controls\">\n    <input id=\"roomName\" placeholder=\"Room name\" />\n    <input id=\"userName\" placeholder=\"Your name\" />\n    <button id=\"preview\">Preview Camera</button>\n    <button id=\"join\">Join Room</button>\n    <button id=\"leave\" disabled>Leave</button>\n  </div>\n  <div id=\"video-grid\">\n    <div class=\"video-box\">\n      <span class=\"video-label\">Local</span>\n      <div id=\"local-video\"></div>\n    </div>\n    <div class=\"video-box\">\n      <span class=\"video-label\">Remote</span>\n      <div id=\"remote-video\"></div>\n    </div>\n  </div>\n\n  <script>\n    const TOKEN_FUNCTION_URL = \"https://instantvisit-9579.twil.io/token\";\n\n    let room = null;\n    let localTracks = [];\n\n    document.getElementById('preview').onclick = async () => {\n      document.getElementById('preview').disabled = true;\n      if (localTracks.length) {\n        localTracks.forEach(track => {\n          track.stop();\n          track.detach().forEach(el => el.remove());\n        });\n      }\n      localTracks = await Twilio.Video.createLocalTracks({ audio: true, video: true });\n      const container = document.getElementById('local-video');\n      container.innerHTML = '';\n      localTracks.forEach(track => {\n        if (track.kind === 'video') container.appendChild(track.attach());\n        // Audio track is not rendered locally in preview\n      });\n    };\n\n    document.getElementById('join').onclick = async () => {\n      const roomName = document.getElementById('roomName').value.trim();\n      const userName = document.getElementById('userName').value.trim();\n      if (!roomName || !userName) {\n        alert(\"Enter room and your name.\");\n        return;\n      }\n      document.getElementById('join').disabled = true;\n      if (!localTracks.length) {\n        localTracks = await Twilio.Video.createLocalTracks({ audio: true, video: true });\n        const container = document.getElementById('local-video');\n        container.innerHTML = '';\n        localTracks.forEach(track => {\n          if (track.kind === 'video') container.appendChild(track.attach());\n        });\n      }\n      const token = await fetchToken(userName, roomName);\n      if (!token) {\n        alert(\"Could not fetch token!\");\n        document.getElementById('join').disabled = false;\n        return;\n      }\n      Twilio.Video.connect(token, {\n        name: roomName,\n        tracks: localTracks\n      }).then(_room => {\n        room = _room;\n        document.getElementById('leave').disabled = false;\n        room.on('participantConnected', participant => {\n          participant.tracks.forEach(publication => {\n            if (publication.isSubscribed) {\n              attachRemote(publication.track);\n            }\n          });\n          participant.on('trackSubscribed', attachRemote);\n        });\n        room.participants.forEach(participant => {\n          participant.tracks.forEach(publication => {\n            if (publication.isSubscribed) {\n              attachRemote(publication.track);\n            }\n          });\n        });\n        room.on('participantDisconnected', clearRemote);\n        room.on('disconnected', () => {\n          document.getElementById('leave').disabled = true;\n          document.getElementById('join').disabled = false;\n          clearLocal();\n          clearRemote();\n          room = null;\n          if (localTracks.length) {\n            localTracks.forEach(track => track.stop());\n            localTracks = [];\n          }\n        });\n      }, err => {\n        // More descriptive error message for debugging\n        alert('Could not connect to Twilio: ' + (err.message || err));\n        document.getElementById('join').disabled = false;\n      });\n    };\n\n    document.getElementById('leave').onclick = () => {\n      if (room) {\n        room.disconnect();\n        if (localTracks.length) {\n          localTracks.forEach(track => track.stop());\n          localTracks = [];\n        }\n      }\n    };\n\n    async function fetchToken(identity, room) {\n      try {\n        const url = `${TOKEN_FUNCTION_URL}?identity=${encodeURIComponent(identity)}&room=${encodeURIComponent(room)}`;\n        const res = await fetch(url);\n        if (!res.ok) return null;\n        const data = await res.json();\n        return data.token;\n      } catch (err) {\n        return null;\n      }\n    }\n\n    function attachRemote(track) {\n      const container = document.getElementById('remote-video');\n      container.innerHTML = '';\n      container.appendChild(track.attach());\n    }\n    function clearRemote() {\n      document.getElementById('remote-video').innerHTML = '';\n    }\n    function clearLocal() {\n      document.getElementById('local-video').innerHTML = '';\n    }\n  </script>\n</body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        600,
        380
      ],
      "id": "8b9ba23b-7b9f-4162-8e58-1832ccc3832f",
      "name": "Respond to Webhook4"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-06-02T20:45:51.406Z",
  "versionId": "48da61c2-9202-426f-954e-1de9c92ae60a"
}