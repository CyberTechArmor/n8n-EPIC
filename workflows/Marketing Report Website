{
  "active": true,
  "connections": {
    "If8": {
      "main": [
        [
          {
            "node": "Convert to File14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File14": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File15": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "SendGrid3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Merge31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Merge30",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "Merge24",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If9": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code20": {
      "main": [
        [
          {
            "node": "Merge24",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge24": {
      "main": [
        [
          {
            "node": "If9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PM Token4": {
      "main": [
        [
          {
            "node": "Extract PM Token4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PM Token4": {
      "main": [
        [
          {
            "node": "Check Token4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Token4": {
      "main": [
        [
          {
            "node": "Code21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Execute Workflow3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF PM Token Valid2": {
      "main": [
        [
          {
            "node": "Read PM Token5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PM Token5": {
      "main": [
        [
          {
            "node": "Extract PM Token5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PM Token5": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow3": {
      "main": [
        [
          {
            "node": "Read PM Token4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Merge25",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Create Walk-in": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "If11",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Merge26",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If10": {
      "main": [
        [
          {
            "node": "Read PM Token4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge25",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code21": {
      "main": [
        [
          {
            "node": "IF PM Token Valid2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge25": {
      "main": [
        [
          {
            "node": "HTTP Create Walk-in",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge26",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge26": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If11": {
      "main": [
        [
          {
            "node": "If8",
            "type": "main",
            "index": 0
          },
          {
            "node": "Convert to File15",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code22": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If12": {
      "main": [
        [
          {
            "node": "If13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge27": {
      "main": [
        [
          {
            "node": "If12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "Merge27",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code24": {
      "main": [
        [
          {
            "node": "Merge28",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If13": {
      "main": [
        [
          {
            "node": "Code24",
            "type": "main",
            "index": 0
          },
          {
            "node": "Convert to File13",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code25",
            "type": "main",
            "index": 0
          },
          {
            "node": "Convert to File16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code25": {
      "main": [
        [
          {
            "node": "Merge28",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge28": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Merge31",
            "type": "main",
            "index": 1
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Convert to File13": {
      "main": [
        [
          {
            "node": "Merge29",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge30",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Convert to File16": {
      "main": [
        [
          {
            "node": "Merge29",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge29": {
      "main": [
        [
          {
            "node": "Merge30",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge30": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge31": {
      "main": [
        []
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get many rows",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get many rows1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows1": {
      "main": [
        [
          {
            "node": "Merge27",
            "type": "main",
            "index": 0
          },
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-04T12:28:35.573Z",
  "id": "3GDdQNWlzMbXelqN",
  "isArchived": false,
  "meta": null,
  "name": "Marketing Report Website",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "32f969be-cba1-4f01-80d4-a91929b3c5e6",
              "leftValue": "={{ $json.Status }}",
              "rightValue": "A",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1760,
        140
      ],
      "id": "8eb64712-47e0-447c-8c22-d6728d71605c",
      "name": "If8"
    },
    {
      "parameters": {
        "binaryPropertyName": "acknowledged",
        "options": {
          "fileName": "Acknowledged.csv"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2060,
        60
      ],
      "id": "48029ef9-6437-4e4c-961b-737d141c8e10",
      "name": "Convert to File14"
    },
    {
      "parameters": {
        "binaryPropertyName": "all",
        "options": {
          "fileName": "All_Appointments_Status.csv"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2060,
        240
      ],
      "id": "03640985-ebe4-4d7e-a2ca-02002c7a724e",
      "name": "Convert to File15"
    },
    {
      "parameters": {
        "content": "# Weekly Acknowledged",
        "height": 373,
        "width": 607,
        "color": 7
      },
      "id": "5c3f27e3-8791-43d3-a3b6-736a105f683b",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1600,
        40
      ]
    },
    {
      "parameters": {
        "resource": "mail",
        "fromEmail": "ithelpdesk@epicpc.com",
        "fromName": "Appointment Status (Marketing)",
        "toEmail": "={{ $json.emails }}",
        "subject": "=Marketing Tracked: Appointment Status By Date",
        "contentValue": "=Appointment Status by Date (Marketing)",
        "additionalFields": {
          "attachments": "acknowledged,all"
        }
      },
      "type": "n8n-nodes-base.sendGrid",
      "typeVersion": 1,
      "position": [
        4560,
        180
      ],
      "id": "7de9014e-bf08-4637-8e41-9620a6b1e124",
      "name": "SendGrid2",
      "credentials": {
        "sendGridApi": {
          "id": "tC3AFJ3SI4sGi9Xt",
          "name": "SendGrid account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fd4a027c-ddcf-4b04-855b-17f0f328aadd",
              "name": "emails",
              "value": "=sfietsam@epichs.org,tstilwell@epichs.org,tnaman@epichs.org,gnaman@epichs.org,jzreik@epichs.org,jgreene@epichs.org,amaya@epichs.org,vhabbo@epichs.org,aadams@epichs.org",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4280,
        180
      ],
      "id": "07f57390-b777-4aa9-875a-320a0183beb9",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "32b00df4-c62f-465a-8a27-26669072fe81",
              "name": "message",
              "value": "={{ $json.html }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2360,
        -80
      ],
      "id": "3a5346a6-b69c-4c1a-9202-bae173c43436",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        3760,
        180
      ],
      "id": "249c5939-496a-437e-b41c-9ee4d5906abc",
      "name": "Merge1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "fe717b40-60f2-4634-9f4c-30e31087aa5a",
              "leftValue": "={{ $json.UserName }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            },
            {
              "id": "5f1f4124-2df3-4dc5-8493-17f012f2524b",
              "leftValue": "={{ $json.SchedulingLink }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "c0660876-bbe6-41fc-a24d-91a64b02f4fe",
              "leftValue": "={{ $json.Appointment_ID }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -180,
        460
      ],
      "id": "e885ae8a-feea-4298-91d9-a6fb90553264",
      "name": "If7"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b19566e2-fea3-4e6e-8928-e276c105e96b",
              "leftValue": "={{ $json.date }}",
              "rightValue": "={{ $json.today }}",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        460,
        460
      ],
      "id": "3adfb2c0-ff33-4bd4-8461-571361607853",
      "name": "If9"
    },
    {
      "parameters": {
        "jsCode": "const now = new Date();\n\nfunction pad(num) {\n  return num.toString().padStart(2, '0');\n}\n\nfunction formatDate(date) {\n  return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())} ` +\n         `${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;\n}\n\nconst today = formatDate(now);\nconst yesterday = formatDate(new Date(now.getTime() - 24 * 60 * 60 * 1000));\nconst priorweek = formatDate(new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000));\n\nreturn [\n  {\n    json: {\n      today,\n      yesterday,\n      priorweek\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        580
      ],
      "id": "8a0dc872-6ea6-4072-a1dc-c8fa8098294d",
      "name": "Code20"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        260,
        460
      ],
      "id": "a26d79dd-c41c-49bc-bbe3-86fac3b06065",
      "name": "Merge24"
    },
    {
      "parameters": {
        "fileSelector": "pmtoken-wkiosk.txt",
        "options": {}
      },
      "id": "e5a48c6e-0949-434b-b86b-15f1c9b40dff",
      "name": "Read PM Token4",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1280,
        600
      ],
      "alwaysOutputData": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "11405ab1-c385-46a1-abc5-e541336189c8",
      "name": "Extract PM Token4",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1420,
        600
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"Action\":\"GetUserAuthentication\",\n\"AppUserID\":\"wkiosk\",\n\"Appname\":\"EPICPC.NMNWokflow.TestApp\",\n\"PatientID\":\"\",\n\"Token\":\"{{ $json[\"data\"] }}\",\n\"Parameter1\":\"L3tsgetC0nn3cted!!\"\n}\n",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "b78ccd66-7e92-436b-a6af-e2c3b4a75fd3",
      "name": "Check Token4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1600,
        600
      ]
    },
    {
      "parameters": {
        "amount": 1
      },
      "id": "d786246c-c62d-44ac-bb64-d0fd55223565",
      "name": "Wait3",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2040,
        700
      ],
      "webhookId": "68208181-d1f9-48be-aa40-c046f9fecefa"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.data[0].getuserauthenticationinfo[0].ValidUser }}",
              "value2": "YES"
            }
          ]
        }
      },
      "id": "b3dccda8-695d-4e75-911b-afc3be605a62",
      "name": "IF PM Token Valid2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1880,
        600
      ]
    },
    {
      "parameters": {
        "fileSelector": "pmtoken-wkiosk.txt",
        "options": {}
      },
      "id": "e83ac63d-b4a9-43bf-b419-0787ff6d40a3",
      "name": "Read PM Token5",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2100,
        540
      ],
      "alwaysOutputData": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "7bb2f6ad-de5b-46a9-91c2-a71a4f471843",
      "name": "Extract PM Token5",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2240,
        540
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "workflowId": "aUCNcTe36bHU5YKn",
        "options": {}
      },
      "id": "98a705a5-b9bf-4b6c-853a-eb4b27cb4164",
      "name": "Execute Workflow3",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        2220,
        700
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7588a9fa-9c56-4c5d-8e77-30bda7a5d1ef",
              "name": "Token",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "df3d79f4-f1ef-41d6-bdd9-f5add1950180",
      "name": "Edit Fields4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        2400,
        540
      ]
    },
    {
      "parameters": {
        "content": "# ASPM Authentication wkiosk",
        "height": 373.491094826977,
        "width": 1286.8388663041949,
        "color": 6
      },
      "id": "b9de3b0d-05d0-487a-ae93-01c96f0f141c",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1240,
        520
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://10.0.1.47:10443/UnityPM/UnityService.svc/json/magicjson",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Action",
              "value": "GetAppointmentById"
            },
            {
              "name": "AppUserID",
              "value": "wkiosk"
            },
            {
              "name": "Appname",
              "value": "EPICPC.NMNWokflow.TestApp"
            },
            {
              "name": "PatientID",
              "value": "={{ $json.Patient_ID }}"
            },
            {
              "name": "Token",
              "value": "={{ $json.Token }}"
            },
            {
              "name": "Parameter1",
              "value": "={{ $json.Appointment_ID }}"
            },
            {
              "name": "Parameter2"
            },
            {
              "name": "Parameter3"
            },
            {
              "name": "Parameter4"
            },
            {
              "name": "Parameter5"
            },
            {
              "name": "Parameter6"
            },
            {
              "name": "Data"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "f789bfae-58ca-4803-a04e-2bb3551e3f09",
      "name": "HTTP Create Walk-in",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2800,
        440
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        760,
        440
      ],
      "id": "80cd954f-222c-4122-a002-669ed0b6c503",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "fieldToSplitOut": "getappointmentbyidinfo",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2800,
        640
      ],
      "id": "6fc4787b-2e31-4864-ae4f-726e25e553e0",
      "name": "Split Out2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b19566e2-fea3-4e6e-8928-e276c105e96b",
              "leftValue": "={{ $json.date }}",
              "rightValue": "={{ $json.priorweek }}",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1020,
        440
      ],
      "id": "38f3c0da-4a35-446e-9e67-88d27088f91d",
      "name": "If10"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.data = JSON.parse(item.json.data);\n}\n\nreturn $input.all();"
      },
      "id": "74d3e771-6472-4559-9d9f-4db63027f97d",
      "name": "Code21",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        600
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2600,
        440
      ],
      "id": "24d94849-e347-46bd-b685-2f3d70ec6f44",
      "name": "Merge25"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2620,
        860
      ],
      "id": "5bfe331c-d652-4b57-af4e-778e8201aed0",
      "name": "Merge26"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "f714e6b2-37ef-460e-aa71-f000bb8f6992",
              "leftValue": "={{ $json.ExcludeRecord }}",
              "rightValue": "Out of date range",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1040,
        180
      ],
      "id": "0f333c49-0f63-41dd-b2ff-905a31b00b9c",
      "name": "If11"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d52bb8f2-af27-4dc2-ac3f-2f122a7e813b",
              "name": "ExcludeRecord",
              "value": "Out of date range",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        800,
        680
      ],
      "id": "7f8f94d9-aa32-4747-a0c9-e77799b07100",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "jsCode": "/*********************************************\n * 1) Define the statuses to track (A, X, N).\n *********************************************/\nconst statuses = [\"A\", \"X\", \"N\"];\n\n/*********************************************\n * 2) Helper: Format a Date object as \"YYYY-MM-DD\"\n *********************************************/\nfunction formatDate(dateObj) {\n  const year = dateObj.getFullYear();\n  const month = String(dateObj.getMonth() + 1).padStart(2, '0');\n  const day = String(dateObj.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n/*********************************************\n * 3) Helper: Extract the date portion from\n * Appointment_DateTime string.\n * Expected format: \"MM/DD/YYYY h:mmAM/PM\"\n *********************************************/\nfunction parseAppointmentDate(dateString) {\n  if (!dateString) return null;\n  const parts = dateString.trim().split(\" \");\n  if (parts.length < 1) return null;\n  const datePart = parts[0];\n  const arr = datePart.split(\"/\");\n  if (arr.length !== 3) return null;\n  const month = arr[0].padStart(2, \"0\");\n  const day = arr[1].padStart(2, \"0\");\n  const year = arr[2];\n  return `${year}-${month}-${day}`;\n}\n\n/*********************************************\n * 4) Generate the last 7 days as objects\n * Each object contains:\n *   key: \"YYYY-MM-DD\" (for matching)\n *   display: \"MM-DD-YYYY\" (for display)\n *   dayName: Day of the week (e.g. \"Monday\")\n *********************************************/\nconst today = new Date();\nconst last7DaysInfo = [];\nfor (let i = 0; i < 7; i++) {\n  const d = new Date(today);\n  d.setDate(today.getDate() - i);\n  const key = formatDate(d); // \"YYYY-MM-DD\"\n  const display = `${String(d.getMonth() + 1).padStart(2, \"0\")}-${String(d.getDate()).padStart(2, \"0\")}-${d.getFullYear()}`;\n  const dayName = d.toLocaleDateString('en-US', { weekday: 'long' });\n  last7DaysInfo.push({ key, display, dayName });\n}\nlast7DaysInfo.reverse(); // Oldest day first\nconst last7DaysKeys = last7DaysInfo.map(info => info.key);\n\n/*********************************************\n * 5) Initialize counts object.\n *********************************************/\nconst counts = {};\nstatuses.forEach(status => {\n  counts[status] = {};\n  last7DaysKeys.forEach(date => {\n    counts[status][date] = new Set();\n  });\n});\n\n/*********************************************\n * 6) Process each incoming record.\n *********************************************/\nfor (const item of items) {\n  const data = item.json;\n  const recordStatus = data.Status;\n  if (statuses.includes(recordStatus)) {\n    const appointmentDateStr = parseAppointmentDate(data.Appointment_DateTime);\n    if (!appointmentDateStr) continue;\n    if (last7DaysKeys.includes(appointmentDateStr)) {\n      counts[recordStatus][appointmentDateStr].add(data.Appointment_ID);\n    }\n  }\n}\n\n/*********************************************\n * 7) Calculate Totals\n *********************************************/\nlet totalAppointments = 0;\nconst totalByStatus = { \"A\": 0, \"X\": 0, \"N\": 0 };\n\nstatuses.forEach(status => {\n  last7DaysKeys.forEach(date => {\n    const cnt = counts[status][date].size;\n    totalAppointments += cnt;\n    totalByStatus[status] += cnt;\n  });\n});\n\n/*********************************************\n * 8) Build the main pivot HTML table\n * Columns: DAY, Date (MM-DD-YYYY), A, X, N, Total\n *********************************************/\nlet tableHtml = `<table border=\"1\" style=\"border-collapse: collapse; margin-top:10px;\">`;\n// Header row\ntableHtml += `<thead><tr>\n  <th style=\"padding: 8px;\">DAY</th>\n  <th style=\"padding: 8px;\">Date</th>`;\nstatuses.forEach(status => {\n  tableHtml += `<th style=\"padding: 8px;\">${status}</th>`;\n});\ntableHtml += `<th style=\"padding: 8px;\">Total</th>`;\ntableHtml += `</tr></thead>`;\n\n// Body rows: one row per day\ntableHtml += `<tbody>`;\nlast7DaysInfo.forEach(info => {\n  tableHtml += `<tr>`;\n  // DAY column\n  tableHtml += `<td style=\"padding: 8px;\">${info.dayName}</td>`;\n  // Date column\n  tableHtml += `<td style=\"padding: 8px;\">${info.display}</td>`;\n  \n  // For each status column, get count\n  let rowTotal = 0;\n  statuses.forEach(status => {\n    const countVal = counts[status][info.key].size;\n    rowTotal += countVal;\n    tableHtml += `<td style=\"padding: 8px;\">${countVal}</td>`;\n  });\n  // \"Total\" column for this row\n  tableHtml += `<td style=\"padding: 8px;\">${rowTotal}</td>`;\n  tableHtml += `</tr>`;\n});\ntableHtml += `</tbody>`;\n\n// Create the date range string for the footer in \"MM/DD - MM/DD\" format.\n// Extract month/day from the first and last display strings.\nconst firstDisplayParts = last7DaysInfo[0].display.split('-'); // [MM, DD, YYYY]\nconst lastDisplayParts = last7DaysInfo[last7DaysInfo.length - 1].display.split('-');\nconst firstMD = `${firstDisplayParts[0]}/${firstDisplayParts[1]}`;\nconst lastMD = `${lastDisplayParts[0]}/${lastDisplayParts[1]}`;\nconst dateRange = `${firstMD} - ${lastMD}`;\n\n// Footer row: Summation of each status + final total, with the date range in the Date column.\ntableHtml += `<tfoot><tr>\n  <td style=\"padding: 8px;\"><b>Total</b></td>\n  <td style=\"padding: 8px;\"><b>${dateRange}</b></td>\n  <td style=\"padding: 8px;\"><b>${totalByStatus[\"A\"]}</b></td>\n  <td style=\"padding: 8px;\"><b>${totalByStatus[\"X\"]}</b></td>\n  <td style=\"padding: 8px;\"><b>${totalByStatus[\"N\"]}</b></td>\n  <td style=\"padding: 8px;\"><b>${totalAppointments}</b></td>\n</tr></tfoot>`;\ntableHtml += `</table>`;\n\n/*********************************************\n * 9) Build the overall HTML output.\n * Updated to include a single header:\n * \"Appointment Status by Date:\"\n *********************************************/\nlet htmlOutput = `<p><b>Appointment Status by Date:</b></p>`;\nhtmlOutput += tableHtml;\n\n/*********************************************\n * 10) Remove any \"\\n\" characters and return.\n *********************************************/\nhtmlOutput = htmlOutput.replace(/\\n/g, '');\n\n// Return the final HTML\nreturn [\n  {\n    json: {\n      html: htmlOutput\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1480,
        -60
      ],
      "id": "8a100767-5e4a-4e46-aeb2-a0f8c74adba1",
      "name": "Code22"
    },
    {
      "parameters": {
        "height": 1360,
        "width": 4340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -420,
        -220
      ],
      "typeVersion": 1,
      "id": "c0109e3f-d6b9-46bb-b021-005a896e1f78",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b19566e2-fea3-4e6e-8928-e276c105e96b",
              "leftValue": "={{ $json.CreatedAt }}",
              "rightValue": "={{ $json.newDate }}",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        240,
        1420
      ],
      "id": "8e8bec40-13fa-435d-9ad6-394f7c2071a9",
      "name": "If12"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        40,
        1420
      ],
      "id": "8b968660-a758-4f5f-b983-e4f67e1644f1",
      "name": "Merge27"
    },
    {
      "parameters": {
        "operation": "subtractFromDate",
        "magnitude": "={{ $now }}",
        "duration": 7,
        "options": {}
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -120,
        1580
      ],
      "id": "47c1cebe-7f82-44f0-86c7-6b0ad81ca109",
      "name": "Date & Time"
    },
    {
      "parameters": {
        "jsCode": "// Helper function to format dates as MM-DD-YYYY\nfunction formatDate(date) {\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  const year = date.getFullYear();\n  return `${month}-${day}-${year}`;\n}\n\n// Helper function to convert a date string from MM-DD-YYYY to MM/DD/YY format (for the range)\nfunction formatForRange(dateStr) {\n  const parts = dateStr.split('-'); // parts: [MM, DD, YYYY]\n  return `${parts[0]}/${parts[1]}/${parts[2].slice(-2)}`;\n}\n\n// Create an object to store aggregated counts per date\nlet aggregatedData = {};\n\n// Loop over each incoming item and group them by the date portion of CreatedAt\nfor (const item of items) {\n  const createdAtStr = item.json.CreatedAt;\n  if (!createdAtStr) continue; // Skip items without CreatedAt\n  \n  // Parse the CreatedAt date, ignoring the time\n  let createdAt = new Date(createdAtStr);\n  createdAt.setHours(0, 0, 0, 0);\n  const dateStr = formatDate(createdAt);\n  \n  // Initialize the date key if it doesn't exist yet\n  if (!(dateStr in aggregatedData)) {\n    aggregatedData[dateStr] = { newPatientSignup: 0, selfScheduled: 0 };\n  }\n  \n  // Count occurrence based on Scheduler value\n  const scheduler = item.json.Scheduler;\n  if (scheduler === \"New Patient Signup\") {\n    aggregatedData[dateStr].newPatientSignup += 1;\n  } else if (scheduler === \"Self-Scheduled\") {\n    aggregatedData[dateStr].selfScheduled += 1;\n  }\n}\n\n// Sort the dates in ascending order\n// (Note: Lexicographical sort on MM-DD-YYYY strings works if data is from one year; otherwise, consider sorting via Date objects.)\nconst sortedDates = Object.keys(aggregatedData).sort();\n\n// Build the HTML table with an added Day-of-Week column\nlet html = '<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">';\nhtml += '<thead>';\nhtml += '<tr>';\nhtml += '<th><b>Day</b></th>';\nhtml += '<th><b>Date</b></th>';\nhtml += '<th><b>New Patient Signup</b></th>';\nhtml += '<th><b>Self-Scheduled</b></th>';\nhtml += '<th><b>Total</b></th>';\nhtml += '</tr>';\nhtml += '</thead>';\nhtml += '<tbody>';\n\nlet grandTotalNewPatient = 0;\nlet grandTotalSelfScheduled = 0;\n\n// For each date, create a row with the aggregated data and the day of week\nfor (const dateStr of sortedDates) {\n  // Parse dateStr (MM-DD-YYYY) to construct a Date object for computing the day of the week\n  const parts = dateStr.split('-');\n  const dt = new Date(parts[2], parts[0] - 1, parts[1]);\n  const dayOfWeek = dt.toLocaleDateString('en-US', { weekday: 'long' });\n  \n  const newPatientSignup = aggregatedData[dateStr].newPatientSignup;\n  const selfScheduled = aggregatedData[dateStr].selfScheduled;\n  const total = newPatientSignup + selfScheduled;\n  grandTotalNewPatient += newPatientSignup;\n  grandTotalSelfScheduled += selfScheduled;\n  \n  html += `<tr><td>${dayOfWeek}</td><td>${dateStr}</td><td>${newPatientSignup}</td><td>${selfScheduled}</td><td>${total}</td></tr>`;\n}\n\n// Calculate overall totals\nconst grandTotal = grandTotalNewPatient + grandTotalSelfScheduled;\n\n// Determine the date range using the first and last dates (if available)\nlet dateRange = '';\nif (sortedDates.length > 0) {\n  const startRange = formatForRange(sortedDates[0]);\n  const endRange = formatForRange(sortedDates[sortedDates.length - 1]);\n  dateRange = `${startRange}-${endRange}`;\n}\n\n// Append the summary row with \"Total\" in the Day column and the date range in the Date column\nhtml += `<tr><td><b>Total</b></td><td><b>${dateRange}</b></td><td><b>${grandTotalNewPatient}</b></td><td><b>${grandTotalSelfScheduled}</b></td><td><b>${grandTotal}</b></td></tr>`;\n\nhtml += '</tbody></table>';\n\n// Return the HTML table as an output property named htmlTable\nreturn [{ json: { htmlTable: html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        1340
      ],
      "id": "56ba00d8-d622-495c-b810-f3a91dbbbfe8",
      "name": "Code24"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<style>\n  @import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&display=swap');\n  body {\n    font-family: 'Nunito', sans-serif;\n  }\n  .title {\n    font-size: 1.5em;\n    font-weight: bold;\n    margin-bottom: 10px;\n  }\n</style>\n\n<b class=\"title\">Marketing Captured:</b></br>\n{{ $json.htmlTable }}</br></br>\n<b class=\"title\">APCM Scheduled:</b></br>\n{{ $json.survey }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        5100,
        640
      ],
      "id": "fe81e3a8-de68-44a4-94b8-0a6056851e49",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "baaac86b-cae8-4ef3-917a-cb5aefd27196",
              "leftValue": "={{ $json.SchedulingLink }}",
              "rightValue": "medium=Survey",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        500,
        1400
      ],
      "id": "8683ebee-8a57-4ba2-a96a-ab9457071214",
      "name": "If13"
    },
    {
      "parameters": {
        "jsCode": "// Helper function to format dates as MM-DD-YYYY\nfunction formatDate(date) {\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  const year = date.getFullYear();\n  return `${month}-${day}-${year}`;\n}\n\n// Helper function to convert a date string from MM-DD-YYYY to MM/DD/YY format (for the range)\nfunction formatForRange(dateStr) {\n  const parts = dateStr.split('-'); // parts: [MM, DD, YYYY]\n  return `${parts[0]}/${parts[1]}/${parts[2].slice(-2)}`;\n}\n\n// Create an object to store aggregated counts per date\nlet aggregatedData = {};\n\n// Loop over each incoming item and group them by the date portion of CreatedAt\nfor (const item of items) {\n  const createdAtStr = item.json.CreatedAt;\n  if (!createdAtStr) continue; // Skip items without CreatedAt\n  \n  // Parse the CreatedAt date, ignoring the time\n  let createdAt = new Date(createdAtStr);\n  createdAt.setHours(0, 0, 0, 0);\n  const dateStr = formatDate(createdAt);\n  \n  // Initialize the date key if it doesn't exist yet\n  if (!(dateStr in aggregatedData)) {\n    aggregatedData[dateStr] = { newPatientSignup: 0, selfScheduled: 0 };\n  }\n  \n  // Count occurrence based on Scheduler value\n  const scheduler = item.json.Scheduler;\n  if (scheduler === \"New Patient Signup\") {\n    aggregatedData[dateStr].newPatientSignup += 1;\n  } else if (scheduler === \"Self-Scheduled\") {\n    aggregatedData[dateStr].selfScheduled += 1;\n  }\n}\n\n// Sort the dates in ascending order\n// (Note: Lexicographical sort on MM-DD-YYYY strings works if data is from one year; otherwise, consider sorting via Date objects.)\nconst sortedDates = Object.keys(aggregatedData).sort();\n\n// Build the HTML table with an added Day-of-Week column\nlet html = '<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">';\nhtml += '<thead>';\nhtml += '<tr>';\nhtml += '<th><b>Day</b></th>';\nhtml += '<th><b>Date</b></th>';\nhtml += '<th><b>New Patient Signup</b></th>';\nhtml += '<th><b>Self-Scheduled</b></th>';\nhtml += '<th><b>Total</b></th>';\nhtml += '</tr>';\nhtml += '</thead>';\nhtml += '<tbody>';\n\nlet grandTotalNewPatient = 0;\nlet grandTotalSelfScheduled = 0;\n\n// For each date, create a row with the aggregated data and the day of week\nfor (const dateStr of sortedDates) {\n  // Parse dateStr (MM-DD-YYYY) to construct a Date object for computing the day of the week\n  const parts = dateStr.split('-');\n  const dt = new Date(parts[2], parts[0] - 1, parts[1]);\n  const dayOfWeek = dt.toLocaleDateString('en-US', { weekday: 'long' });\n  \n  const newPatientSignup = aggregatedData[dateStr].newPatientSignup;\n  const selfScheduled = aggregatedData[dateStr].selfScheduled;\n  const total = newPatientSignup + selfScheduled;\n  grandTotalNewPatient += newPatientSignup;\n  grandTotalSelfScheduled += selfScheduled;\n  \n  html += `<tr><td>${dayOfWeek}</td><td>${dateStr}</td><td>${newPatientSignup}</td><td>${selfScheduled}</td><td>${total}</td></tr>`;\n}\n\n// Calculate overall totals\nconst grandTotal = grandTotalNewPatient + grandTotalSelfScheduled;\n\n// Determine the date range using the first and last dates (if available)\nlet dateRange = '';\nif (sortedDates.length > 0) {\n  const startRange = formatForRange(sortedDates[0]);\n  const endRange = formatForRange(sortedDates[sortedDates.length - 1]);\n  dateRange = `${startRange}-${endRange}`;\n}\n\n// Append the summary row with \"Total\" in the Day column and the date range in the Date column\nhtml += `<tr><td><b>Total</b></td><td><b>${dateRange}</b></td><td><b>${grandTotalNewPatient}</b></td><td><b>${grandTotalSelfScheduled}</b></td><td><b>${grandTotal}</b></td></tr>`;\n\nhtml += '</tbody></table>';\n\n// Return the HTML table as an output property named htmlTable\nreturn [{ json: { survey: html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        1560
      ],
      "id": "3b072528-d7c2-40e0-83f2-4dacdbc4acc3",
      "name": "Code25"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1160,
        1360
      ],
      "id": "0214b543-b6d8-43a8-9848-fc326b5e6c4d",
      "name": "Merge28"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "32b00df4-c62f-465a-8a27-26669072fe81",
              "name": "message2",
              "value": "=<style>\n  @import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&display=swap');\n  body {\n    font-family: 'Nunito', sans-serif;\n  }\n  .title {\n    font-size: 1.5em;\n    font-weight: bold;\n    margin-bottom: 10px;\n  }\n</style>\n\n<b class=\"title\">Marketing Captured:</b></br>\n{{ $json.htmlTable }}</br></br>\n<b class=\"title\">APCM Scheduled:</b></br>\n{{ $json.survey }}\n\n</br>\n</br>\n*Automated report (for list check email)",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1440,
        1460
      ],
      "id": "a8911a4c-bb6b-49b1-8509-a147f94432c3",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "binaryPropertyName": "marketing-scheduled",
        "options": {
          "fileName": "marketing-scheduled.csv"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        860,
        1820
      ],
      "id": "0e492673-954e-4279-a7df-8dbac7a6c715",
      "name": "Convert to File13"
    },
    {
      "parameters": {
        "binaryPropertyName": "survey",
        "options": {
          "fileName": "survey.csv"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        860,
        2000
      ],
      "id": "eee23b9d-dd86-4f26-8a86-29ee0bdde90f",
      "name": "Convert to File16"
    },
    {
      "parameters": {
        "jsCode": "// Helper function to format dates as YYYY-MM-DD\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n// Create an object to store aggregated counts per date\nlet aggregatedData = {};\n\n// Loop over each incoming item and group them by the date portion of CreatedAt\nfor (const item of items) {\n  const createdAtStr = item.json.CreatedAt;\n  if (!createdAtStr) continue; // Skip items without CreatedAt\n  \n  // Parse the CreatedAt date, ignoring the time\n  let createdAt = new Date(createdAtStr);\n  createdAt.setHours(0, 0, 0, 0);\n  const dateStr = formatDate(createdAt);\n  \n  // Initialize the date key if it doesn't exist yet\n  if (!(dateStr in aggregatedData)) {\n    aggregatedData[dateStr] = { newPatientSignup: 0, selfScheduled: 0 };\n  }\n  \n  // Count occurrence based on Scheduler value\n  const scheduler = item.json.Scheduler;\n  if (scheduler === \"New Patient Signup\") {\n    aggregatedData[dateStr].newPatientSignup += 1;\n  } else if (scheduler === \"Self-Scheduled\") {\n    aggregatedData[dateStr].selfScheduled += 1;\n  }\n}\n\n// Sort the dates in ascending order\nconst sortedDates = Object.keys(aggregatedData).sort();\n\n// Build the HTML table with bold headers\nlet html = '<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">';\nhtml += '<thead>';\nhtml += '<tr><th><b>Date</b></th><th><b>New Patient Signup</b></th><th><b>Self-Scheduled</b></th><th><b>Total</b></th></tr>';\nhtml += '</thead>';\nhtml += '<tbody>';\n\nlet grandTotalNewPatient = 0;\nlet grandTotalSelfScheduled = 0;\n\n// For each date, create a row with the aggregated data\nfor (const dateStr of sortedDates) {\n  const newPatientSignup = aggregatedData[dateStr].newPatientSignup;\n  const selfScheduled = aggregatedData[dateStr].selfScheduled;\n  const total = newPatientSignup + selfScheduled;\n  grandTotalNewPatient += newPatientSignup;\n  grandTotalSelfScheduled += selfScheduled;\n  \n  html += `<tr><td>${dateStr}</td><td>${newPatientSignup}</td><td>${selfScheduled}</td><td>${total}</td></tr>`;\n}\n\n// Calculate overall totals and append the summary row\nconst grandTotal = grandTotalNewPatient + grandTotalSelfScheduled;\nhtml += `<tr><td><b>Total</b></td><td><b>${grandTotalNewPatient}</b></td><td><b>${grandTotalSelfScheduled}</b></td><td><b>${grandTotal}</b></td></tr>`;\n\nhtml += '</tbody></table>';\n\n// Return the HTML table as an output property named htmlTable\nreturn [{ json: { survey: html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        1660
      ],
      "id": "3a6509c8-0ea4-42b0-9765-a963de928776",
      "name": "Code26"
    },
    {
      "parameters": {
        "resource": "mail",
        "fromEmail": "ithelpdesk@epicpc.com",
        "fromName": "Marketing/APCM",
        "toEmail": "={{ $json.emails }}",
        "subject": "=Marketing Tracked: Appointment Status By Date and Scheduled",
        "contentValue": "=New Patient and Scheduled Patient by Date (Marketing/APCM (Suryve))",
        "additionalFields": {
          "attachments": "acknowledged,all,marketing-scheduled,survey"
        }
      },
      "type": "n8n-nodes-base.sendGrid",
      "typeVersion": 1,
      "position": [
        4560,
        360
      ],
      "id": "769cbb45-7128-4c61-9d21-a7c3c53e594c",
      "name": "SendGrid3",
      "credentials": {
        "sendGridApi": {
          "id": "tC3AFJ3SI4sGi9Xt",
          "name": "SendGrid account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1200,
        1900
      ],
      "id": "64b9cb98-44db-4d28-a5c2-47203d376e2d",
      "name": "Merge29"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        4000,
        360
      ],
      "id": "66d73142-6165-48b9-bfc4-15ea8930fc79",
      "name": "Merge30"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2660,
        -80
      ],
      "id": "2d7d77cb-e653-443b-a17b-a2d8d6ecb8dd",
      "name": "Merge31"
    },
    {
      "parameters": {
        "path": "9604595b-a3d7-449d-abfd-96a8ca92eb39",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1140,
        660
      ],
      "id": "c07cb254-d237-4d4a-8b9c-79972d5f06df",
      "name": "Webhook",
      "webhookId": "9604595b-a3d7-449d-abfd-96a8ca92eb39"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        4780,
        660
      ],
      "id": "c9028ce4-d781-41cb-881f-62cebb20a6e8",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        4320,
        640
      ],
      "id": "9ce7b9e2-027f-45ca-ba2e-70638138110b",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Retrieve all incoming items\nconst items = $input.all();\n\n// Get the message2 content from the first incoming item\nconst message2 = items[0].json.message2 || \"\";\n\n// Prepare the HTML content\nlet htmlContent = `\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Report</title>\n    <style>\n      /* Center everything in the body */\n      body {\n        margin: 0;\n        padding: 0;\n        font-family: 'Nunito', sans-serif;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: flex-start;\n        background-color: #f4f4f4;\n      }\n\n      .container {\n        max-width: 900px;\n        width: 100%;\n        margin: 20px auto;\n        background: #fff;\n        padding: 20px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n      }\n\n      /* Center tables within container */\n      table {\n        margin: 20px auto;\n        border-collapse: collapse;\n        width: auto;\n      }\n      th, td {\n        border: 1px solid #ccc;\n        padding: 8px 12px;\n        text-align: center;\n      }\n      th {\n        background: #eaeaea;\n      }\n\n      /* Download button styling */\n      .download-button {\n        background-color: #007bff;\n        color: #ffffff;\n        border: none;\n        border-radius: 4px;\n        padding: 12px 20px;\n        margin: 5px;\n        font-size: 1rem;\n        cursor: pointer;\n        text-decoration: none;\n        transition: background-color 0.3s ease;\n        display: inline-block;\n      }\n      .download-button:hover {\n        background-color: #0056b3;\n      }\n\n      /* Center the heading for attachments */\n      .attachments-heading {\n        text-align: center;\n        margin-top: 30px;\n      }\n      .attachments-container {\n        text-align: center;\n        margin-top: 10px;\n      }\n    </style>\n  </head>\n  <body>\n\n    <!-- Main container for the report content -->\n    <div class=\"container\">\n      <!-- Insert the user-provided HTML (message2) -->\n      ${message2}\n\n      <!-- Download Attachments Section -->\n      <h2 class=\"attachments-heading\">Download Attachments</h2>\n      <div class=\"attachments-container\">\n`;\n\n// Loop through each item to find any binary data files and create download buttons\nitems.forEach((item) => {\n  if (item.binary) {\n    for (const key in item.binary) {\n      const fileData = item.binary[key];\n      const fileName = fileData.fileName || \"attachment\";\n      // Create a data URI so the actual file can be downloaded\n      const dataUri = `data:${fileData.mimeType};base64,${fileData.data}`;\n\n      htmlContent += `\n        <a href=\"${dataUri}\" download=\"${fileName}\" class=\"download-button\">\n          Download ${fileName}\n        </a>\n      `;\n    }\n  }\n});\n\nhtmlContent += `\n      </div>\n    </div>\n  </body>\n</html>\n`;\n\n// Return the final HTML in the output so it can be rendered in an HTML Viewer node\nreturn [\n  {\n    json: {\n      html: htmlContent\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4520,
        660
      ],
      "id": "63deda42-04a3-4647-989e-b629cf8c8b69",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Retrieve all incoming items\nconst items = $input.all();\n\n// Get the message2 content from the first incoming item\nconst message2 = items[0].json.message2;\n\n// Start building the HTML output using the message2 content\nlet htmlContent = `\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Report</title>\n  </head>\n  <body>\n    ${message2}\n    <br>\n    <h2>Download Attachments</h2>\n`;\n\n// Loop through each item to find any binary data files\nitems.forEach((item) => {\n  if (item.binary) {\n    for (const key in item.binary) {\n      // For each binary file, create a data URI\n      const fileData = item.binary[key];\n      const dataUri = `data:${fileData.mimeType};base64,${fileData.data}`;\n      \n      // Add a download button linking to the data URI so that the file downloads correctly\n      htmlContent += `\n        <p>\n          <a href=\"${dataUri}\" download=\"${fileData.fileName}\">\n            <button>Download ${fileData.fileName}</button>\n          </a>\n        </p>\n      `;\n    }\n  }\n});\n\nhtmlContent += `\n  </body>\n</html>\n`;\n\n// Return the final HTML in the output JSON so it can be rendered in an HTML Viewer node\nreturn [\n  {\n    json: {\n      html: htmlContent\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4540,
        820
      ],
      "id": "60163350-2604-48dd-a502-8e7180433635",
      "name": "Code1"
    },
    {
      "parameters": {
        "path": "13895fea-b2a3-4270-9ec9-c503a6c5efbe",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1220,
        240
      ],
      "id": "dcb1285a-f7cb-42ae-9d97-dcab9c9c16f7",
      "name": "Webhook1",
      "webhookId": "13895fea-b2a3-4270-9ec9-c503a6c5efbe"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -680,
        260
      ],
      "id": "441d0ecf-4fae-418d-b8a8-a05ab069e4d1",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Client-Side Webhook Fetch</title>\n    <style>\n      /* Minimal styling for body and loader */\n      body {\n        margin: 0;\n        padding: 0;\n        font-family: sans-serif;\n        background-color: #f4f4f4;\n      }\n      .loader-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 9999;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      .spinner {\n        border: 8px solid #f3f3f3;\n        border-top: 8px solid #FF0000;\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n        animation: spin 2s linear infinite;\n      }\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n      .countdown-text {\n        font-size: 1.2rem;\n        color: white;\n        margin-top: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <!-- LOADER OVERLAY -->\n    <div class=\"loader-overlay\" id=\"loaderOverlay\">\n      <div>\n        <div class=\"spinner\" id=\"spinner\"></div>\n        <div class=\"countdown-text\" id=\"loaderCountdown\">60</div>\n      </div>\n    </div>\n\n    <!-- MAIN CONTENT: Plain div with no special styling -->\n    <div id=\"content\"></div>\n\n    <script>\n      (function() {\n        let timeLeft = 60;\n        const countdownEl = document.getElementById('loaderCountdown');\n        const spinnerEl = document.getElementById('spinner');\n        const overlayEl = document.getElementById('loaderOverlay');\n\n        // Color changes every 10 seconds\n        const colors = [\n          \"#FF0000\",\n          \"#FF7F00\",\n          \"#FFFF00\",\n          \"#00FF00\",\n          \"#0000FF\",\n          \"#8B00FF\"\n        ];\n\n        // Start a 1-second timer for the countdown & color changes\n        const timer = setInterval(() => {\n          timeLeft--;\n          countdownEl.textContent = timeLeft;\n          const colorIndex = Math.min(Math.floor((60 - timeLeft) / 10), colors.length - 1);\n          spinnerEl.style.borderTopColor = colors[colorIndex];\n          if (timeLeft <= 0) {\n            clearInterval(timer);\n            overlayEl.style.display = 'none';\n          }\n        }, 1000);\n\n        // Client-side fetch to the webhook\n        fetch('https://xl.epicpc.com/webhook/9604595b-a3d7-449d-abfd-96a8ca92eb39')\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(\\`HTTP error! Status: \\${response.status}\\`);\n            }\n            return response.text();\n          })\n          .then(rawData => {\n            let data;\n            try {\n              // Attempt to parse as JSON\n              data = JSON.parse(rawData);\n            } catch (err) {\n              // If rawData isn't valid JSON, insert it directly\n              document.getElementById('content').innerHTML = rawData;\n              return;\n            }\n            // Use the html property if it exists\n            if (data.html) {\n              document.getElementById('content').innerHTML = data.html;\n            } else {\n              document.getElementById('content').innerHTML =\n                \"<p>No <code>html</code> property found in JSON response.</p>\";\n            }\n            // Optionally process attachments if a \"binary\" property exists\n            if (data.binary) {\n              let attachmentsHtml = '';\n              for (const key in data.binary) {\n                const fileData = data.binary[key];\n                const fileName = fileData.fileName || \"attachment\";\n                const dataUri = \\`data:\\${fileData.mimeType};base64,\\${fileData.data}\\`;\n                attachmentsHtml += \\`\n                  <a href=\"\\${dataUri}\" download=\"\\${fileName}\">Download \\${fileName}</a>\n                \\`;\n              }\n              document.getElementById('content').innerHTML += attachmentsHtml;\n            }\n          })\n          .catch(err => {\n            document.getElementById('content').innerHTML =\n              \\`<p style=\"color: red;\">Error fetching data: \\${err.message}</p>\\`;\n          })\n          .finally(() => {\n            clearInterval(timer);\n            overlayEl.style.display = 'none';\n          });\n      })();\n    </script>\n  </body>\n</html>\n      `,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1000,
        240
      ],
      "id": "287df85c-d3f6-4d42-9e31-82f884587e42",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      html: `\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Client-Side Webhook Fetch</title>\n    <style>\n      body {\n        margin: 0;\n        padding: 0;\n        font-family: 'Nunito', sans-serif;\n        background-color: #f4f4f4;\n      }\n      .container {\n        max-width: 900px;\n        width: 100%;\n        margin: 20px auto;\n        background: #fff;\n        padding: 20px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n      }\n      /* Loader overlay */\n      .loader-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: rgba(0, 0, 0, 0.5); /* dim the page */\n        z-index: 9999;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n      }\n      /* Spinning loader */\n      .spinner {\n        border: 12px solid #f3f3f3; /* Light grey border */\n        border-top: 12px solid #FF0000; /* Start with red */\n        border-radius: 50%;\n        width: 60px;\n        height: 60px;\n        animation: spin 2s linear infinite;\n        margin-bottom: 20px;\n      }\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n      /* Countdown text */\n      .countdown-text {\n        font-size: 1.5rem;\n        font-weight: bold;\n        color: white;\n      }\n      /* Download button */\n      .download-button {\n        background-color: #4CAF50;\n        color: white;\n        padding: 10px 16px;\n        margin: 5px;\n        text-decoration: none;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 0.9rem;\n      }\n      .download-button:hover {\n        background-color: #45a049;\n      }\n      /* Center attachments section */\n      #attachments {\n        text-align: center;\n      }\n    </style>\n  </head>\n  <body>\n    <!-- LOADER OVERLAY -->\n    <div class=\"loader-overlay\" id=\"loaderOverlay\">\n      <div class=\"spinner\" id=\"spinner\"></div>\n      <div class=\"countdown-text\" id=\"loaderCountdown\">60</div>\n    </div>\n\n    <!-- MAIN CONTENT CONTAINER -->\n    <div class=\"container\">\n      <!-- Where the returned HTML (or raw text) from the webhook will appear -->\n      <div id=\"content\" style=\"margin-bottom: 30px;\"></div>\n      <!-- Attachments heading and container -->\n\n      <div id=\"attachments\"></div>\n    </div>\n\n    <script>\n      (function() {\n        //\n        // 1) LOADER COUNTDOWN & COLOR PHASING\n        //\n        let timeLeft = 60;\n        const countdownEl = document.getElementById('loaderCountdown');\n        const spinnerEl = document.getElementById('spinner');\n        const overlayEl = document.getElementById('loaderOverlay');\n\n        // Color changes every 10 seconds\n        const colors = [\n          \"#FF0000\", // 60-51s\n          \"#FF7F00\", // 50-41s\n          \"#FFFF00\", // 40-31s\n          \"#00FF00\", // 30-21s\n          \"#0000FF\", // 20-11s\n          \"#8B00FF\"  // 10-0s\n        ];\n\n        // Start a 1-second timer for the countdown & color changes\n        const timer = setInterval(() => {\n          timeLeft--;\n          countdownEl.textContent = timeLeft;\n          const colorIndex = Math.min(Math.floor((60 - timeLeft) / 10), colors.length - 1);\n          spinnerEl.style.borderTopColor = colors[colorIndex];\n          if (timeLeft <= 0) {\n            clearInterval(timer);\n            overlayEl.style.display = 'none';\n          }\n        }, 1000);\n\n        //\n        // 2) CLIENT-SIDE FETCH TO THE WEBHOOK\n        //\n        fetch('https://xl.epicpc.com/webhook/9604595b-a3d7-449d-abfd-96a8ca92eb39')\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(\\`HTTP error! Status: \\${response.status}\\`);\n            }\n            // We fetch as text to handle both JSON or raw HTML\n            return response.text();\n          })\n          .then(rawData => {\n            let data;\n            try {\n              // Attempt to parse as JSON\n              data = JSON.parse(rawData);\n            } catch (err) {\n              // If it's NOT valid JSON, treat it as raw HTML\n              document.getElementById('content').innerHTML = rawData;\n              return; // stop here\n            }\n\n            // If we successfully parsed JSON, look for \"html\" property\n            if (data.html) {\n              document.getElementById('content').innerHTML = data.html;\n            } else {\n              // If no html property, show raw JSON or an error\n              document.getElementById('content').innerHTML =\n                \"<p>No <code>html</code> property found in JSON response.</p>\";\n            }\n\n            // If there's a \"binary\" object, create download links\n            if (data.binary) {\n              let attachmentsHtml = '';\n              for (const key in data.binary) {\n                const fileData = data.binary[key];\n                const fileName = fileData.fileName || \"attachment\";\n                const dataUri = \\`data:\\${fileData.mimeType};base64,\\${fileData.data}\\`;\n                attachmentsHtml += \\`\n                  <a href=\"\\${dataUri}\" download=\"\\${fileName}\" class=\"download-button\">\n                    Download \\${fileName}\n                  </a>\n                \\`;\n              }\n              document.getElementById('attachments').innerHTML = attachmentsHtml;\n            }\n          })\n          .catch(err => {\n            // Display any fetch errors\n            document.getElementById('content').innerHTML =\n              \\`<p style=\"color: red;\">Error fetching data: \\${err.message}</p>\\`;\n          })\n          .finally(() => {\n            // Regardless of success or error, stop the loader now\n            clearInterval(timer);\n            overlayEl.style.display = 'none';\n          });\n      })();\n    </script>\n  </body>\n</html>\n      `,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        20
      ],
      "id": "7c7fa20f-8b91-4cb4-8eab-a758a52333cf",
      "name": "Code3"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pdrfzomezdyaecj",
        "table": "mnx1ann5acss8m7",
        "returnAll": true,
        "options": {
          "where": "(Appointment_ID,isnot,null)~and(CreatedAt,isWithin,pastWeek)"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -360,
        460
      ],
      "id": "874f7fcd-43fe-4738-84cc-fb3cacaabe7a",
      "name": "Get many rows",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "projectId": "pdrfzomezdyaecj",
        "table": "mnx1ann5acss8m7",
        "returnAll": true,
        "options": {
          "where": "(UserName,is,null)~and(CallSid,is,null)~and(SchedulingLink,isnot,null)~and(CreatedAt,isWithin,pastWeek)"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        -280,
        1400
      ],
      "id": "27607ccc-1d8d-4852-9271-7ff95d903632",
      "name": "Get many rows1",
      "credentials": {
        "nocoDbApiToken": {
          "id": "NQp5MuqQIS7vyAPq",
          "name": "NocoDB account"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-07-15T21:00:26.062Z",
  "versionId": "9ff915fc-8084-4b80-b462-24626f5470ed"
}